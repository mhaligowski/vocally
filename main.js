!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var o=a.apply(null,r);o&&e.push(o)}else if("object"===i)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=PropTypes},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,i,o,s){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,i,o,s],l=0;(c=new Error(t.replace(/%s/g,(function(){return u[l++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var r=n(7),a=!1,i=!1;try{var o={get passive(){return a=!0},get once(){return i=a=!0}};r.a&&(window.addEventListener("test",o,o),window.removeEventListener("test",o,!0))}catch(e){}var s=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!i){var o=r.once,s=r.capture,c=n;!i&&o&&(c=n.__once||function e(r){this.removeEventListener(t,e,s),n.call(this,r)},n.__once=c),e.addEventListener(t,c,a?r:s)}e.addEventListener(t,n,r)};var c=function(e,t,n,r){var a=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,a),n.__once&&e.removeEventListener(t,n.__once,a)};t.a=function(e,t,n,r){return s(e,t,n,r),function(){c(e,t,n,r)}}},function(e,t){e.exports=reactLifecyclesCompat},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(12);function a(e,t){return function(e){var t=Object(r.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var i=/([A-Z])/g;var o=/^ms-/;function s(e){return function(e){return e.replace(i,"-$1").toLowerCase()}(e).replace(o,"-ms-")}var c=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;t.a=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(s(t))||a(e).getPropertyValue(s(t));Object.keys(t).forEach((function(a){var i=t[a];i||0===i?!function(e){return!(!e||!c.test(e))}(a)?n+=s(a)+": "+i+";":r+=a+"("+i+") ":e.style.removeProperty(s(a))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(1),a=n(2),i=n(0);n(9);function o(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function s(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function c(e,t){return Object.keys(t).reduce((function(n,c){var u,l=n,f=l[o(c)],d=l[c],p=Object(a.a)(l,[o(c),c].map(s)),m=t[c],v=function(e,t,n){var r=Object(i.useRef)(void 0!==e),a=Object(i.useState)(t),o=a[0],s=a[1],c=void 0!==e,u=r.current;return r.current=c,!c&&u&&o!==t&&s(t),[c?e:o,Object(i.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];n&&n.apply(void 0,[e].concat(r)),s(e)}),[n])]}(d,f,e[m]),h=v[0],b=v[1];return Object(r.a)({},p,((u={})[c]=h,u[m]=b,u))}),e)}n(6),n(11)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0);var a=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function i(e){var t=a(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t,n){var r=n(17),a=n(18);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var i={insert:"head",singleton:!1};r(a,i);e.exports=a.locals||{}},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function s(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],a=0;a<e.length;a++){var i=e[a],c=t.base?i[0]+t.base:i[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var f=s(l),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(o[f].references++,o[f].updater(d)):o.push({identifier:l,updater:h(d,t),references:1}),r.push(l)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,a=n.media,i=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,v=0;function h(e,t){var n,r,a;if(t.singleton){var i=v++;n=m||(m=u(t)),r=d.bind(null,n,i,!1),a=d.bind(null,n,i,!0)}else n=u(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=s(n[r]);o[a].references--}for(var i=c(e,t),u=0;u<n.length;u++){var l=s(n[u]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=i}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),i=n(5),o=n.n(i),s=(n(16),n(1)),c=n(2),u=n(3),l=n.n(u),f=a.a.createContext({});f.Consumer,f.Provider;function d(e,t){var n=Object(r.useContext)(f);return e||n[t]||t}var p=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}}),null)};function m(e){return!e||"#"===e.trim()}var v=a.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,i=e.disabled,o=e.onKeyDown,u=Object(c.a)(e,["as","disabled","onKeyDown"]),l=function(e){var t=u.href,n=u.onClick;(i||m(t))&&e.preventDefault(),i?e.stopPropagation():n&&n(e)};return m(u.href)&&(u.role=u.role||"button",u.href=u.href||"#"),i&&(u.tabIndex=-1,u["aria-disabled"]=!0),a.a.createElement(r,Object(s.a)({ref:t},u,{onClick:l,onKeyDown:p((function(e){" "===e.key&&(e.preventDefault(),l(e))}),o)}))}));v.displayName="SafeAnchor";var h=v,b=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,i=e.size,o=e.active,u=e.className,f=e.block,p=e.type,m=e.as,v=Object(c.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),b=d(n,"btn"),y=l()(u,b,o&&"active",b+"-"+r,f&&b+"-block",i&&b+"-"+i);if(v.href)return a.a.createElement(h,Object(s.a)({},v,{as:m,ref:t,className:l()(y,v.disabled&&"disabled")}));t&&(v.ref=t),p?v.type=p:m||(v.type="button");var E=m||"button";return a.a.createElement(E,Object(s.a)({},v,{className:y}))}));b.displayName="Button",b.defaultProps={variant:"primary",active:!1,disabled:!1};var y=b;const E=()=>console;n(19);const g=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],x=e=>440*Math.pow(2,(e-69)/12),O=e=>69+12*Math.log2(e/440);class j{constructor(e){this._freq=e,this.note=Math.round(O(e)),this.frequency=x(this.note),this.name=(e=>g[(e-21)%12])(this.note),this.octave=(e=>Math.floor(e/12-1))(this.note)}}const w=e=>{if(null==e)return;const t=new j(e);return{frequency:e,target:t,note:O(e),diff:(n=t.frequency,r=e,1200*Math.log2(r/n))};var n,r};var C=function(e){return this instanceof C?(this.v=e,this):new C(e)},S=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),i=[];return r={},o("next"),o("throw"),o("return"),r[Symbol.asyncIterator]=function(){return this},r;function o(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=a[e](t)).value instanceof C?Promise.resolve(n.value.v).then(c,u):l(i[0][2],n)}catch(e){l(i[0][3],e)}var n}function c(e){s("next",e)}function u(e){s("throw",e)}function l(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}};const N=E(),k="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function P(e){const[t,n]=Object(r.useState)(!1),[a,i]=Object(r.useState)();return Object(r.useEffect)(()=>{let r=!0;return e.generator.next().then(e=>{!e.done&&r&&(i(e.value),n(!t))}),()=>{r=!1}},[t]),Object(r.useEffect)(()=>{e.onTick&&a&&e.onTick(a)},[a]),"function"==typeof e.children?e.children(a):e.children}var T=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,i=e.animation,o=e.size,u=e.children,f=e.as,p=void 0===f?"div":f,m=e.className,v=Object(c.a)(e,["bsPrefix","variant","animation","size","children","as","className"]),h=(n=d(n,"spinner"))+"-"+i;return a.a.createElement(p,Object(s.a)({ref:t},v,{className:l()(m,h,o&&h+"-"+o,r&&"text-"+r)}),u)}));T.displayName="Spinner";var M=T;const R=E();function L({pitchGenerator:e,timeoutMs:t,onFinish:n}){const[i,o]=Object(r.useState)([]),[s,c]=Object(r.useState)(!1),[u,l]=Object(r.useState)(!1);Object(r.useEffect)(()=>{if(!s)return;R.info("Setting up the timeout.");const e=setTimeout(()=>{l(!0),c(!1)},t);return R.info("Set up timer %d for %d ms.",e,t),()=>{R.info("Clearing out the timeout %d.",e),clearTimeout(e)}},[s]),Object(r.useEffect)(()=>{u&&(R.info("Finishing recording."),n(i))},[u,i]);const f=s?a.a.createElement(M,{animation:"grow",variant:"danger"}):a.a.createElement("span",null,"sing now!");return e?a.a.createElement(P,{generator:e,onTick:e=>{const t=i.concat([e]);o(t),s||c(!0)}},a.a.createElement("h3",null,f)):a.a.createElement(M,{animation:"border",variant:"primary"})}var D=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,i=e.as,o=void 0===i?"div":i,u=e.className,f=Object(c.a)(e,["bsPrefix","fluid","as","className"]),p=d(n,"container"),m="string"==typeof r?"-"+r:"-fluid";return a.a.createElement(o,Object(s.a)({ref:t},f,{className:l()(u,r?""+p+m:p)}))}));D.displayName="Container",D.defaultProps={fluid:!1};var A=D,_=["xl","lg","md","sm","xs"],z=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,i=e.noGutters,o=e.as,u=void 0===o?"div":o,f=Object(c.a)(e,["bsPrefix","className","noGutters","as"]),p=d(n,"row"),m=p+"-cols",v=[];return _.forEach((function(e){var t,n=f[e];delete f[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&v.push(""+m+r+"-"+t)})),a.a.createElement(u,Object(s.a)({ref:t},f,{className:l.a.apply(void 0,[r,p,i&&"no-gutters"].concat(v))}))}));z.displayName="Row",z.defaultProps={noGutters:!1};var I=z,B=n(14),F=n(15),U=n(7),q=n(13),G=n(10);U.a&&window;function H(e,t,n){void 0===n&&(n=5);var r=!1,a=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),i=Object(G.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(a),i()}}var V=function(e,t,n){var r,a,i;null==n&&(r=e,a=Object(q.a)(r,"transitionDuration")||"",i=-1===a.indexOf("ms")?1e3:1,n=parseFloat(a)*i||0);var o=H(e,n),s=Object(G.a)(e,"transitionend",t);return function(){o(),s()}},X=n(6),K=n(4),Y=n.n(K),Z=!1,$=a.a.createContext(null),J=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(a="exited",r.appearStatus="entering"):a="entered":a=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:a},r.nextCallback=null,r}Object(X.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[o.a.findDOMNode(this),r],i=a[0],s=a[1],c=this.getTimeouts(),u=r?c.appear:c.enter;!e&&!n||Z?this.safeSetState({status:"entered"},(function(){t.props.onEntered(i)})):(this.props.onEnter(i,s),this.safeSetState({status:"entering"},(function(){t.props.onEntering(i,s),t.onTransitionEnd(u,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(i,s)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:o.a.findDOMNode(this);t&&!Z?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:o.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],i=a[0],s=a[1];this.props.addEndListener(i,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(c.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement($.Provider,{value:null},"function"==typeof n?n(e,r):a.a.cloneElement(a.a.Children.only(n),r))},t}(a.a.Component);function W(){}J.contextType=$,J.propTypes={},J.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:W,onEntering:W,onEntered:W,onExit:W,onExiting:W,onExited:W},J.UNMOUNTED="unmounted",J.EXITED="exited",J.ENTERING="entering",J.ENTERED="entered",J.EXITING="exiting";var Q,ee=J;var te=((Q={}).entering="show",Q.entered="show",Q),ne=a.a.forwardRef((function(e,t){var n=e.className,i=e.children,o=Object(c.a)(e,["className","children"]),u=Object(r.useCallback)((function(e){!function(e){e.offsetHeight}(e),o.onEnter&&o.onEnter(e)}),[o]);return a.a.createElement(ee,Object(s.a)({ref:t,addEndListener:V},o,{onEnter:u}),(function(e,t){return a.a.cloneElement(i,Object(s.a)({},t,{className:l()("fade",n,i.props.className,te[e])}))}))}));ne.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},ne.displayName="Fade";var re=ne,ae={label:Y.a.string.isRequired,onClick:Y.a.func},ie=a.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,i=e.className,o=Object(c.a)(e,["label","onClick","className"]);return a.a.createElement("button",Object(s.a)({ref:t,type:"button",className:l()("close",i),onClick:r},o),a.a.createElement("span",{"aria-hidden":"true"},"×"),a.a.createElement("span",{className:"sr-only"},n))}));ie.displayName="CloseButton",ie.propTypes=ae,ie.defaultProps={label:"Close"};var oe=ie,se=/-(.)/g;var ce=function(e){return e[0].toUpperCase()+(t=e,t.replace(se,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function ue(e,t){var n=void 0===t?{}:t,r=n.displayName,i=void 0===r?ce(e):r,o=n.Component,u=n.defaultProps,f=a.a.forwardRef((function(t,n){var r=t.className,i=t.bsPrefix,u=t.as,f=void 0===u?o||"div":u,p=Object(c.a)(t,["className","bsPrefix","as"]),m=d(i,e);return a.a.createElement(f,Object(s.a)({ref:n,className:l()(r,m)},p))}));return f.defaultProps=u,f.displayName=i,f}var le,fe=(le="h4",a.a.forwardRef((function(e,t){return a.a.createElement("div",Object(s.a)({},e,{ref:t,className:l()(e.className,le)}))})));fe.displayName="DivStyledAsH4";var de=ue("alert-heading",{Component:fe}),pe=ue("alert-link",{Component:h}),me={show:!0,transition:re,closeLabel:"Close alert"},ve=a.a.forwardRef((function(e,t){var n=Object(B.a)(e,{show:"onClose"}),r=n.bsPrefix,i=n.show,o=n.closeLabel,u=n.className,f=n.children,p=n.variant,m=n.onClose,v=n.dismissible,h=n.transition,b=Object(c.a)(n,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),y=d(r,"alert"),E=Object(F.a)((function(e){m&&m(!1,e)})),g=!0===h?re:h,x=a.a.createElement("div",Object(s.a)({role:"alert"},g?b:void 0,{ref:t,className:l()(u,y,p&&y+"-"+p,v&&y+"-dismissible")}),v&&a.a.createElement(oe,{onClick:E,label:o}),f);return g?a.a.createElement(g,Object(s.a)({unmountOnExit:!0},b,{ref:void 0,in:i}),x):i?x:null}));ve.displayName="Alert",ve.defaultProps=me,ve.Link=pe,ve.Heading=de;var he=ve;function be(){return(be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ye(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Ee=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,i=ye(e,["color","size"]);return a.a.createElement("svg",be({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},i),a.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));Ee.propTypes={color:Y.a.string,size:Y.a.oneOfType([Y.a.string,Y.a.number])},Ee.defaultProps={color:"currentColor",size:"1em"};var ge=Ee;function xe(){return(xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Oe(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var je=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,i=Oe(e,["color","size"]);return a.a.createElement("svg",xe({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},i),a.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));je.propTypes={color:Y.a.string,size:Y.a.oneOfType([Y.a.string,Y.a.number])},je.defaultProps={color:"currentColor",size:"1em"};var we=je;function Ce(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Ce(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var Se=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Ce(e))&&(r&&(r+=" "),r+=t);return r};function Ne({no:e,of:t}){let n=[];for(let r=0;r<t;r++)n.push(r<=e?a.a.createElement(ge,null):a.a.createElement(we,null));return a.a.createElement("div",{className:Se("text-primary","display-1")},n)}function ke({recording:e,reference:t}){const n=e.filter(e=>!!e).map(e=>e.frequency-t.frequency),r=n.reduce((e,t)=>e+t,0);return a.a.createElement(A,null,a.a.createElement(I,null,a.a.createElement(Ne,{no:3,of:5})),a.a.createElement(I,null,a.a.createElement(he,{variant:"success"},"Received ",n.length," sample(s) averaging to ",r/n.length," ","from C",a.a.createElement("sub",null,"4"),".")))}const Pe=E(),Te=()=>{const[e,t]=Object(r.useState)(!1),[n,i]=Object(r.useState)(new AudioContext),[o,s]=Object(r.useState)(),[c,u]=Object(r.useState)(),[l,f]=Object(r.useState)();if(Object(r.useEffect)(()=>{e&&(Pe.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then(e=>{Pe.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),s(e)}))},[e]),Object(r.useEffect)(()=>{if(e&&void 0!==o)return Pe.info("Setting up the context %j and stream %j",n,o),n.createMediaStreamSource(o),Pe.info("Initialized audio."),u(function(e,t){return S(this,arguments,(function*(){const n=ml5.pitchDetection(k,e,t);for(N.info("Created pitch detection.",n),yield C(n.ready),N.info("Initialized the model.");t.active&&"running"===e.state;){const e=yield C(n.getPitch());null!==e?yield yield C(w(e)):N.debug("Skipping")}return yield C(void 0)}))}(n,o)),n.resume(),()=>{Pe.info("Cleanup the audio settings"),Pe.debug("Stop all tracks in the stream %j.",o),null==o||o.getTracks().forEach(e=>e.stop()),Pe.debug("Suspend audio context %j.",n),n.suspend()}},[o,e]),void 0!==l){const e=w(x(60));return a.a.createElement(ke,{recording:l,reference:e})}return e&&c?a.a.createElement(L,{onFinish:e=>{Pe.info("Result, %j",e),f(e),t(!1)},pitchGenerator:c,timeoutMs:5e3}):a.a.createElement(y,{onClick:()=>t(!0),variant:"outline-primary",size:"lg"},"click to start")},Me=E();i.render(r.createElement(()=>(Me.info("Starting app."),a.a.createElement(A,null,a.a.createElement("header",{className:Se("text-center","mt-5")},a.a.createElement("h1",{className:Se("display-1","text-primary","title")},"vocally"),a.a.createElement("h2",{className:"text-secondary"},"sing C",a.a.createElement("sub",null,"4"),"!")),a.a.createElement("main",{className:Se("text-center","py-5"),role:"main"},a.a.createElement(Te,null)),a.a.createElement("footer",{className:Se("py-3","border-top","text-muted")},a.a.createElement(A,null,a.a.createElement("p",null,"vocally.app 2020"))))),null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,