!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=30)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";function r(e){switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return f(e,Error)}}function o(e){return"[object String]"===Object.prototype.toString.call(e)}function i(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function a(e){return"[object Object]"===Object.prototype.toString.call(e)}function u(e){return"undefined"!=typeof Event&&f(e,Event)}function c(e){return"undefined"!=typeof Element&&f(e,Element)}function s(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function l(e){return a(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}function f(e,t){try{return e instanceof t}catch(e){return!1}}n.d(t,"b",(function(){return r})),n.d(t,"h",(function(){return o})),n.d(t,"f",(function(){return i})),n.d(t,"e",(function(){return a})),n.d(t,"c",(function(){return u})),n.d(t,"a",(function(){return c})),n.d(t,"g",(function(){return s})),n.d(t,"i",(function(){return l})),n.d(t,"d",(function(){return f}))},function(e,t){e.exports=PropTypes},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";n.d(t,"c",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return i}));n(4);function r(e,t){return void 0===t&&(t=0),"string"!=typeof e||0===t||e.length<=t?e:e.substr(0,t)+"..."}function o(e,t){var n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);var o=Math.max(t-60,0);o<5&&(o=0);var i=Math.min(o+140,r);return i>r-5&&(i=r),i===r&&(o=Math.max(i-140,0)),n=n.slice(o,i),o>0&&(n="'{snip} "+n),i<r&&(n+=" {snip}"),n}function i(e,t){if(!Array.isArray(e))return"";for(var n=[],r=0;r<e.length;r++){var o=e[r];try{n.push(String(o))}catch(e){n.push("[value cannot be serialized]")}}return n.join(t)}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},function(e,t,n){"use strict";(function(e,r,o){n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return s})),n.d(t,"a",(function(){return m}));var i=n(4);n(7);function a(){return"[object process]"===Object.prototype.toString.call(void 0!==e?e:0)}var u={};function c(){return a()?r:"undefined"!=typeof window?window:"undefined"!=typeof self?self:u}function s(e){try{for(var t=e,n=[],r=0,o=0,i=" > ".length,a=void 0;t&&r++<5&&!("html"===(a=l(t))||r>1&&o+n.length*i+a.length>=80);)n.push(a),o+=a.length,t=t.parentNode;return n.reverse().join(" > ")}catch(e){return"<unknown>"}}function l(e){var t,n,r,o,a,u=e,c=[];if(!u||!u.tagName)return"";if(c.push(u.tagName.toLowerCase()),u.id&&c.push("#"+u.id),(t=u.className)&&Object(i.h)(t))for(n=t.split(/\s+/),a=0;a<n.length;a++)c.push("."+n[a]);var s=["type","name","title","alt"];for(a=0;a<s.length;a++)r=s[a],(o=u.getAttribute(r))&&c.push("["+r+'="'+o+'"]');return c.join("")}var f=Date.now(),d=0,p={now:function(){var e=Date.now()-f;return e<d&&(e=d),d=e,e},timeOrigin:f};!function(){if(a())try{return(e="perf_hooks",o.require(e)).performance}catch(e){return p}var e,t=c().performance;t&&t.now&&(void 0===t.timeOrigin&&(t.timeOrigin=t.timing&&t.timing.navigationStart||f))}();function m(e){try{return e&&"function"==typeof e&&e.name||"<anonymous>"}catch(e){return"<anonymous>"}}}).call(this,n(24),n(15),n(25)(e))},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],l=0;(c=new Error(t.replace(/%s/g,(function(){return s[l++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t){e.exports=LogRocket},function(e,t,n){"use strict";var r=n(9),o=!1,i=!1;try{var a={get passive(){return o=!0},get once(){return i=o=!0}};r.a&&(window.addEventListener("test",a,a),window.removeEventListener("test",a,!0))}catch(e){}var u=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!i){var a=r.once,u=r.capture,c=n;!i&&a&&(c=n.__once||function e(r){this.removeEventListener(t,e,u),n.call(this,r)},n.__once=c),e.addEventListener(t,c,o?r:u)}e.addEventListener(t,n,r)};var c=function(e,t,n,r){var o=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,o),n.__once&&e.removeEventListener(t,n.__once,o)};t.a=function(e,t,n,r){return u(e,t,n,r),function(){c(e,t,n,r)}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){o({ResponderEventPlugin:{extractEvents:function(e,t,n,r){try{if("click"!==e||!n||!r)return;for(var o=n,i=[];o;){var a="function"==typeof o.elementType&&o.elementType.displayName;a&&i.push(a),o=o.return}r.__lrName=i}catch(e){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(6),o=void 0,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;o=i&&i.Events&&i.Events[3]?i.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},e.exports=t.default},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(){function e(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return e.prototype.memoize=function(e){if(this._hasWeakSet)return!!this._inner.has(e)||(this._inner.add(e),!1);for(var t=0;t<this._inner.length;t++){if(this._inner[t]===e)return!0}return this._inner.push(e),!1},e.prototype.unmemoize=function(e){if(this._hasWeakSet)this._inner.delete(e);else for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e){this._inner.splice(t,1);break}},e}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}},function(e,t){e.exports=reactLifecyclesCompat},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(20);function o(e,t){return function(e){var t=Object(r.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var i=/([A-Z])/g;var a=/^ms-/;function u(e){return function(e){return e.replace(i,"-$1").toLowerCase()}(e).replace(a,"-ms-")}var c=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;t.a=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(u(t))||o(e).getPropertyValue(u(t));Object.keys(t).forEach((function(o){var i=t[o];i||0===i?!function(e){return!(!e||!c.test(e))}(o)?n+=u(o)+": "+i+";":r+=o+"("+i+") ":e.style.removeProperty(u(o))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(1),o=n(2),i=n(0);n(12);function a(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function u(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function c(e,t){return Object.keys(t).reduce((function(n,c){var s,l=n,f=l[a(c)],d=l[c],p=Object(o.a)(l,[a(c),c].map(u)),m=t[c],v=function(e,t,n){var r=Object(i.useRef)(void 0!==e),o=Object(i.useState)(t),a=o[0],u=o[1],c=void 0!==e,s=r.current;return r.current=c,!c&&s&&a!==t&&u(t),[c?e:a,Object(i.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n&&n.apply(void 0,[e].concat(r)),u(e)}),[n])]}(d,f,e[m]),h=v[0],b=v[1];return Object(r.a)({},p,((s={})[c]=h,s[m]=b,s))}),e)}n(8),n(19)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0);var o=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function i(e){var t=o(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,s=[],l=!1,f=-1;function d(){l&&c&&(l=!1,c.length?s=c.concat(s):f=-1,s.length&&p())}function p(){if(!l){var e=u(d);l=!0;for(var t=s.length;t;){for(c=s,s=[];++f<t;)c&&c[f].run();f=-1,t=s.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new m(e,t)),1!==s.length||l||u(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(27),o=n(28);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],c=t.base?i[0]+t.base:i[0],s=n[c]||0,l="".concat(c," ").concat(s);n[c]=s+1;var f=u(l),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:l,updater:h(d,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,v=0;function h(e,t){var n,r,o;if(t.singleton){var i=v++;n=m||(m=s(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);a[o].references--}for(var i=c(e,t),s=0;s<n.length;s++){var l=u(n[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r,o=n(0),i=n.n(o),a=n(6),u=n.n(a),c=n(37);!function(e){e.Fatal="fatal",e.Error="error",e.Warning="warning",e.Log="log",e.Info="info",e.Debug="debug",e.Critical="critical"}(r||(r={})),function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":return e.Info;case"warn":case"warning":return e.Warning;case"error":return e.Error;case"fatal":return e.Fatal;case"critical":return e.Critical;case"log":default:return e.Log}}}(r||(r={}));var s=n(10),l=n(38),f=n(7),d=Object(s.b)(),p=function(){function e(t){void 0===t&&(t={}),this.name=e.id,this._levels=["log","info","warn","error","debug","assert"],t.levels&&(this._levels=t.levels)}return e.prototype.setupOnce=function(t,n){"console"in d&&this._levels.forEach((function(t){t in d.console&&Object(l.a)(d.console,t,(function(o){return function(){for(var i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var u=n();u.getIntegration(e)&&u.withScope((function(e){e.setLevel(r.fromString(t)),e.setExtra("arguments",i),e.addEventProcessor((function(e){return e.logger="console",e}));var n=Object(f.a)(i," ");"assert"===t?!1===i[0]&&(n="Assertion failed: "+(Object(f.a)(i.slice(1)," ")||"console.assert"),e.setExtra("arguments",i.slice(1)),u.captureMessage(n)):u.captureMessage(n)})),o&&Function.prototype.apply.call(o,d.console,i)}}))}))},e.id="CaptureConsole",e}(),m=n(13),v=n.n(m),h=n(16),b=n.n(h);n(26);function y(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=y(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var g=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=y(e))&&(r&&(r+=" "),r+=t);return r},E=function(){return console},x=n(1),O=n(2),w=n(3),j=n.n(w),S=i.a.createContext({});S.Consumer,S.Provider;function N(e,t){var n=Object(o.useContext)(S);return e||n[t]||t}var C=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,o=e.as,a=void 0===o?"div":o,u=e.className,c=Object(O.a)(e,["bsPrefix","fluid","as","className"]),s=N(n,"container"),l="string"==typeof r?"-"+r:"-fluid";return i.a.createElement(a,Object(x.a)({ref:t},c,{className:j()(u,r?""+s+l:s)}))}));C.displayName="Container",C.defaultProps={fluid:!1};var k=C;var T=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),null)};function P(e){return!e||"#"===e.trim()}var _=i.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,o=e.disabled,a=e.onKeyDown,u=Object(O.a)(e,["as","disabled","onKeyDown"]),c=function(e){var t=u.href,n=u.onClick;(o||P(t))&&e.preventDefault(),o?e.stopPropagation():n&&n(e)};return P(u.href)&&(u.role=u.role||"button",u.href=u.href||"#"),o&&(u.tabIndex=-1,u["aria-disabled"]=!0),i.a.createElement(r,Object(x.a)({ref:t},u,{onClick:c,onKeyDown:T((function(e){" "===e.key&&(e.preventDefault(),c(e))}),a)}))}));_.displayName="SafeAnchor";var A=_,R=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.size,a=e.active,u=e.className,c=e.block,s=e.type,l=e.as,f=Object(O.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),d=N(n,"btn"),p=j()(u,d,a&&"active",d+"-"+r,c&&d+"-block",o&&d+"-"+o);if(f.href)return i.a.createElement(A,Object(x.a)({},f,{as:l,ref:t,className:j()(p,f.disabled&&"disabled")}));t&&(f.ref=t),s?f.type=s:l||(f.type="button");var m=l||"button";return i.a.createElement(m,Object(x.a)({},f,{className:p}))}));R.displayName="Button",R.defaultProps={variant:"primary",active:!1,disabled:!1};var M=R;n(29);var L=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],I=function(e){return 440*Math.pow((e-69)/12,2)},D=function(e){return 69+12*Math.log2(e/440)},z=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._freq=t,this.note=Math.round(D(t)),this.frequency=I(this.note),this.name=function(e){return L[(e-21)%12]}(this.note),this.octave=function(e){return Math.floor(e/12-1)}(this.note)},F=function(e){if(null==e)return null;var t,n,r=new z(e);return{frequency:e,target:r,note:D(e),diff:(t=r.frequency,n=e,1200*Math.log2(n/t))}},U=function(e){return this instanceof U?(this.v=e,this):new U(e)},q=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=o[e](t)).value instanceof U?Promise.resolve(n.value.v).then(c,s):l(i[0][2],n)}catch(e){l(i[0][3],e)}var n}function c(e){u("next",e)}function s(e){u("throw",e)}function l(e,t){e(t),i.shift(),i.length&&u(i[0][0],i[0][1])}},B=E(),W="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";var G=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.animation,a=e.size,u=e.children,c=e.as,s=void 0===c?"div":c,l=e.className,f=Object(O.a)(e,["bsPrefix","variant","animation","size","children","as","className"]),d=(n=N(n,"spinner"))+"-"+o;return i.a.createElement(s,Object(x.a)({ref:t},f,{className:j()(l,d,a&&d+"-"+a,r&&"text-"+r)}),u)}));G.displayName="Spinner";var H=G;function $(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return V(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return V(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var X=function(e){var t=$(Object(o.useState)(!1),2),n=t[0],r=t[1],i=$(Object(o.useState)(),2),a=i[0],u=i[1];return Object(o.useEffect)((function(){var t=!0;return e.generator.next().then((function(e){!e.done&&t&&(u(e.value||void 0),r(!n))})),function(){t=!1}}),[n]),Object(o.useEffect)((function(){e.onTick&&a&&e.onTick(a)}),[a]),"function"==typeof e.children?e.children(a):e.children};function K(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Y(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Z=E();function J(e){var t=e.pitchGenerator,n=e.timeoutMs,r=e.onFinish,a=K(Object(o.useState)([]),2),u=a[0],c=a[1],s=K(Object(o.useState)(!1),2),l=s[0],f=s[1],d=K(Object(o.useState)(!1),2),p=d[0],m=d[1];Object(o.useEffect)((function(){if(!l)return function(){};Z.info("Setting up the timeout.");var e=setTimeout((function(){m(!0),f(!1)}),n);return Z.info("Set up timer %d for %d ms.",e,n),function(){Z.info("Clearing out the timeout %d.",e),clearTimeout(e)}}),[l]),Object(o.useEffect)((function(){p&&(Z.info("Finishing recording."),r(u))}),[p,u]);var v=l?i.a.createElement(H,{animation:"grow",variant:"danger"}):i.a.createElement("span",null,"sing now!");return t?i.a.createElement(X,{generator:t,onTick:function(e){var t=u.concat([e]);c(t),l||f(!0)}},i.a.createElement("h3",null,v)):i.a.createElement(H,{animation:"border",variant:"primary"})}var Q=["xl","lg","md","sm","xs"],ee=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.noGutters,a=e.as,u=void 0===a?"div":a,c=Object(O.a)(e,["bsPrefix","className","noGutters","as"]),s=N(n,"row"),l=s+"-cols",f=[];return Q.forEach((function(e){var t,n=c[e];delete c[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&f.push(""+l+r+"-"+t)})),i.a.createElement(u,Object(x.a)({ref:t},c,{className:j.a.apply(void 0,[r,s,o&&"no-gutters"].concat(f))}))}));ee.displayName="Row",ee.defaultProps={noGutters:!1};var te=ee,ne=["xl","lg","md","sm","xs"],re=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.as,a=void 0===o?"div":o,u=Object(O.a)(e,["bsPrefix","className","as"]),c=N(n,"col"),s=[],l=[];return ne.forEach((function(e){var t,n,r,o=u[e];if(delete u[e],"object"==typeof o&&null!=o){var i=o.span;t=void 0===i||i,n=o.offset,r=o.order}else t=o;var a="xs"!==e?"-"+e:"";t&&s.push(!0===t?""+c+a:""+c+a+"-"+t),null!=r&&l.push("order"+a+"-"+r),null!=n&&l.push("offset"+a+"-"+n)})),s.length||s.push(c),i.a.createElement(a,Object(x.a)({},u,{ref:t,className:j.a.apply(void 0,[r].concat(s,l))}))}));re.displayName="Col";var oe=re,ie=n(22),ae=n(23),ue=n(9),ce=n(21),se=n(14);ue.a&&window;function le(e,t,n){void 0===n&&(n=5);var r=!1,o=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),i=Object(se.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(o),i()}}var fe=function(e,t,n){var r,o,i;null==n&&(r=e,o=Object(ce.a)(r,"transitionDuration")||"",i=-1===o.indexOf("ms")?1e3:1,n=parseFloat(o)*i||0);var a=le(e,n),u=Object(se.a)(e,"transitionend",t);return function(){a(),u()}},de=n(8),pe=n(5),me=n.n(pe),ve=!1,he=i.a.createContext(null),be=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}Object(de.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[u.a.findDOMNode(this),r],i=o[0],a=o[1],c=this.getTimeouts(),s=r?c.appear:c.enter;!e&&!n||ve?this.safeSetState({status:"entered"},(function(){t.props.onEntered(i)})):(this.props.onEnter(i,a),this.safeSetState({status:"entering"},(function(){t.props.onEntering(i,a),t.onTransitionEnd(s,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(i,a)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:u.a.findDOMNode(this);t&&!ve?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:u.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],i=o[0],a=o[1];this.props.addEndListener(i,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(O.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.a.createElement(he.Provider,{value:null},"function"==typeof n?n(e,r):i.a.cloneElement(i.a.Children.only(n),r))},t}(i.a.Component);function ye(){}be.contextType=he,be.propTypes={},be.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:ye,onEntering:ye,onEntered:ye,onExit:ye,onExiting:ye,onExited:ye},be.UNMOUNTED="unmounted",be.EXITED="exited",be.ENTERING="entering",be.ENTERED="entered",be.EXITING="exiting";var ge,Ee=be;var xe=((ge={}).entering="show",ge.entered="show",ge),Oe=i.a.forwardRef((function(e,t){var n=e.className,r=e.children,a=Object(O.a)(e,["className","children"]),u=Object(o.useCallback)((function(e){!function(e){e.offsetHeight}(e),a.onEnter&&a.onEnter(e)}),[a]);return i.a.createElement(Ee,Object(x.a)({ref:t,addEndListener:fe},a,{onEnter:u}),(function(e,t){return i.a.cloneElement(r,Object(x.a)({},t,{className:j()("fade",n,r.props.className,xe[e])}))}))}));Oe.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},Oe.displayName="Fade";var we=Oe,je={label:me.a.string.isRequired,onClick:me.a.func},Se=i.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,o=e.className,a=Object(O.a)(e,["label","onClick","className"]);return i.a.createElement("button",Object(x.a)({ref:t,type:"button",className:j()("close",o),onClick:r},a),i.a.createElement("span",{"aria-hidden":"true"},"×"),i.a.createElement("span",{className:"sr-only"},n))}));Se.displayName="CloseButton",Se.propTypes=je,Se.defaultProps={label:"Close"};var Ne=Se,Ce=/-(.)/g;var ke=function(e){return e[0].toUpperCase()+function(e){return e.replace(Ce,(function(e,t){return t.toUpperCase()}))}(e).slice(1)};function Te(e,t){var n=void 0===t?{}:t,r=n.displayName,o=void 0===r?ke(e):r,a=n.Component,u=n.defaultProps,c=i.a.forwardRef((function(t,n){var r=t.className,o=t.bsPrefix,u=t.as,c=void 0===u?a||"div":u,s=Object(O.a)(t,["className","bsPrefix","as"]),l=N(o,e);return i.a.createElement(c,Object(x.a)({ref:n,className:j()(r,l)},s))}));return c.defaultProps=u,c.displayName=o,c}var Pe,_e=(Pe="h4",i.a.forwardRef((function(e,t){return i.a.createElement("div",Object(x.a)({},e,{ref:t,className:j()(e.className,Pe)}))})));_e.displayName="DivStyledAsH4";var Ae=Te("alert-heading",{Component:_e}),Re=Te("alert-link",{Component:A}),Me={show:!0,transition:we,closeLabel:"Close alert"},Le=i.a.forwardRef((function(e,t){var n=Object(ie.a)(e,{show:"onClose"}),r=n.bsPrefix,o=n.show,a=n.closeLabel,u=n.className,c=n.children,s=n.variant,l=n.onClose,f=n.dismissible,d=n.transition,p=Object(O.a)(n,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),m=N(r,"alert"),v=Object(ae.a)((function(e){l&&l(!1,e)})),h=!0===d?we:d,b=i.a.createElement("div",Object(x.a)({role:"alert"},h?p:void 0,{ref:t,className:j()(u,m,s&&m+"-"+s,f&&m+"-dismissible")}),f&&i.a.createElement(Ne,{onClick:v,label:a}),c);return h?i.a.createElement(h,Object(x.a)({unmountOnExit:!0},p,{ref:void 0,in:o}),b):o?b:null}));Le.displayName="Alert",Le.defaultProps=Me,Le.Link=Re,Le.Heading=Ae;var Ie=Le;function De(){return(De=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ze(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Fe=Object(o.forwardRef)((function(e,t){var n=e.color,r=e.size,o=ze(e,["color","size"]);return i.a.createElement("svg",De({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),i.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));Fe.propTypes={color:me.a.string,size:me.a.oneOfType([me.a.string,me.a.number])},Fe.defaultProps={color:"currentColor",size:"1em"};var Ue=Fe;function qe(){return(qe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Be(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var We=Object(o.forwardRef)((function(e,t){var n=e.color,r=e.size,o=Be(e,["color","size"]);return i.a.createElement("svg",qe({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),i.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));We.propTypes={color:me.a.string,size:me.a.oneOfType([me.a.string,me.a.number])},We.defaultProps={color:"currentColor",size:"1em"};var Ge=We;function He(e){for(var t=e.no,n=e.of,r=[],o=0;o<n;o+=1)r.push(o<=t?i.a.createElement(Ue,null):i.a.createElement(Ge,null));return i.a.createElement("div",{className:g("text-primary","display-3")},r)}var $e=function(e,t){return e+t},Ve=function(e){var t,n=e.recording,r=e.reference,o=n.filter((function(e){return!!e})),a=o.map((function(e){return e.frequency-r.frequency})).reduce($e,0)/o.length,u=o.map((function(e){return Math.abs(e.note-r.note)})).reduce($e,0)/o.length;return t=u<=.5?5:u<=1?4:u<=2?3:u<=4?2:u<=7?1:0,i.a.createElement(k,null,i.a.createElement(te,null,i.a.createElement(oe,{className:"pb-3"},i.a.createElement(He,{no:t,of:5}))),i.a.createElement(te,null,i.a.createElement(oe,{className:g("col-md-6","offset-md-3")},i.a.createElement(Ie,{variant:"success"},"Received ",o.length," sample(s) averaging to ",a," from C",i.a.createElement("sub",null,"4"),"."))))};function Xe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ke(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ke(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ke(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ye=E(),Ze=function(){var e=Xe(Object(o.useState)(!1),2),t=e[0],n=e[1],r=Xe(Object(o.useState)(new AudioContext),1)[0],a=Xe(Object(o.useState)(),2),u=a[0],c=a[1],s=Xe(Object(o.useState)(),2),l=s[0],f=s[1],d=Xe(Object(o.useState)(),2),p=d[0],m=d[1];if(Object(o.useEffect)((function(){t&&(Ye.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){Ye.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),c(e)})))}),[t]),Object(o.useEffect)((function(){return t&&void 0!==u?(Ye.info("Setting up the context %j and stream %j",r,u),r.createMediaStreamSource(u),Ye.info("Initialized audio."),f(function(e,t){return q(this,arguments,regeneratorRuntime.mark((function n(){var r,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=ml5.pitchDetection(W,e,t),B.info("Created pitch detection.",r),n.next=4,U(r.ready);case 4:B.info("Initialized the model.");case 5:if(!t.active||"running"!==e.state){n.next=19;break}return n.next=8,U(r.getPitch());case 8:if(null!==(o=n.sent)){n.next=13;break}B.debug("Skipping"),n.next=17;break;case 13:return n.next=15,U(F(o));case 15:return n.next=17,n.sent;case 17:n.next=5;break;case 19:case"end":return n.stop()}}),n)})))}(r,u)),r.resume(),function(){Ye.info("Cleanup the audio settings"),Ye.debug("Stop all tracks in the stream %j.",u),null==u||u.getTracks().forEach((function(e){return e.stop()})),Ye.debug("Suspend audio context %j.",r),r.suspend()}):function(){}}),[u,t]),void 0!==p){var v=F(I(60));return i.a.createElement(Ve,{recording:p,reference:v})}return t&&l?i.a.createElement(J,{onFinish:function(e){Ye.info("Result, %j",e),m(e),n(!1)},pitchGenerator:l,timeoutMs:5e3}):i.a.createElement(M,{onClick:function(){return n(!0)},variant:"outline-primary",size:"lg"},"click to start")},Je=E(),Qe=function(){return Je.info("Starting app."),i.a.createElement(k,null,i.a.createElement("header",{className:g("text-center","mt-5")},i.a.createElement("h1",{className:g("display-1","text-primary","title")},"vocally"),i.a.createElement("h2",{className:"text-secondary"},"sing C",i.a.createElement("sub",null,"4"),"!")),i.a.createElement("main",{className:g("text-center","py-5"),role:"main"},i.a.createElement(Ze,null)),i.a.createElement("footer",{className:g("py-3","border-top","text-muted")},i.a.createElement(k,null,i.a.createElement("p",null,"vocally.app 2020"))))};c.init({dsn:"https://ffe439ac65b84889a37518037a23a7b1@o433557.ingest.sentry.io/5388917",release:"RELEASE",environment:"testing",integrations:[new p({levels:["info"]})]}),v.a.init("6ayqi7/vocallytest",{release:"RELEASE"}),b()(v.a),a.render(o.createElement(Qe,null),document.getElementById("app"))},,,,,,,function(e,t){e.exports=Sentry},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r}));n(18),n(4),n(17),n(10),n(7);function r(e,t,n){if(t in e){var r=e[t],o=n(r);if("function"==typeof o)try{o.prototype=o.prototype||{},Object.defineProperties(o,{__sentry_original__:{enumerable:!1,value:r}})}catch(e){}e[t]=o}}}).call(this,n(15))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,