!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=23)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=PropTypes},function(e,t){e.exports=ReactDOM},function(e,t){e.exports=Sentry},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,c){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,a,o,i,c],l=0;(u=new Error(t.replace(/%s/g,(function(){return s[l++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t){e.exports=LogRocket},function(e,t,n){"use strict";var r=n(8),a=!1,o=!1;try{var i={get passive(){return a=!0},get once(){return o=a=!0}};r.a&&(window.addEventListener("test",i,i),window.removeEventListener("test",i,!0))}catch(e){}var c=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!o){var i=r.once,c=r.capture,u=n;!o&&i&&(u=n.__once||function e(r){this.removeEventListener(t,e,c),n.call(this,r)},n.__once=u),e.addEventListener(t,u,a?r:c)}e.addEventListener(t,n,r)};var u=function(e,t,n,r){var a=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,a),n.__once&&e.removeEventListener(t,n.__once,a)};t.a=function(e,t,n,r){return c(e,t,n,r),function(){u(e,t,n,r)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){a({ResponderEventPlugin:{extractEvents:function(e,t,n,r){try{if("click"!==e||!n||!r)return;for(var a=n,o=[];a;){var i="function"==typeof a.elementType&&a.elementType.displayName;i&&o.push(i),a=a.return}r.__lrName=o}catch(e){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(5),a=void 0,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;a=o&&o.Events&&o.Events[3]?o.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},e.exports=t.default},function(e,t){e.exports=reactLifecyclesCompat},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(15);function a(e,t){return function(e){var t=Object(r.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var o=/([A-Z])/g;var i=/^ms-/;function c(e){return function(e){return e.replace(o,"-$1").toLowerCase()}(e).replace(i,"-ms-")}var u=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;t.a=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(c(t))||a(e).getPropertyValue(c(t));Object.keys(t).forEach((function(a){var o=t[a];o||0===o?!function(e){return!(!e||!u.test(e))}(a)?n+=c(a)+": "+o+";":r+=a+"("+o+") ":e.style.removeProperty(c(a))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(1),a=n(2),o=n(0);n(10);function i(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function c(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function u(e,t){return Object.keys(t).reduce((function(n,u){var s,l=n,f=l[i(u)],d=l[u],p=Object(a.a)(l,[i(u),u].map(c)),m=t[u],v=function(e,t,n){var r=Object(o.useRef)(void 0!==e),a=Object(o.useState)(t),i=a[0],c=a[1],u=void 0!==e,s=r.current;return r.current=u,!u&&s&&i!==t&&c(t),[u?e:i,Object(o.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];n&&n.apply(void 0,[e].concat(r)),c(e)}),[n])]}(d,f,e[m]),h=v[0],b=v[1];return Object(r.a)({},p,((s={})[u]=h,s[m]=b,s))}),e)}n(7),n(14)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);var a=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function o(e){var t=a(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t,n){var r=n(20),a=n(21);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],u=t.base?o[0]+t.base:o[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var f=c(l),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:h(d,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,v=0;function h(e,t){var n,r,a;if(t.singleton){var o=v++;n=m||(m=s(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=s(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=c(n[r]);i[a].references--}for(var o=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=o}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(5),i=n.n(o),c=n(6),u=n(11),s=n.n(u),l=n(13),f=n.n(l);n(19);function d(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=d(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var p=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=d(e))&&(r&&(r+=" "),r+=t);return r},m=function(){return console},v=n(1),h=n(2),b=n(3),y=n.n(b),g=a.a.createContext({});g.Consumer,g.Provider;function E(e,t){var n=Object(r.useContext)(g);return e||n[t]||t}var x=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,o=e.as,i=void 0===o?"div":o,c=e.className,u=Object(h.a)(e,["bsPrefix","fluid","as","className"]),s=E(n,"container"),l="string"==typeof r?"-"+r:"-fluid";return a.a.createElement(i,Object(v.a)({ref:t},u,{className:y()(c,r?""+s+l:s)}))}));x.displayName="Container",x.defaultProps={fluid:!1};var O=x;var j=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}}),null)};function w(e){return!e||"#"===e.trim()}var S=a.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,o=e.disabled,i=e.onKeyDown,c=Object(h.a)(e,["as","disabled","onKeyDown"]),u=function(e){var t=c.href,n=c.onClick;(o||w(t))&&e.preventDefault(),o?e.stopPropagation():n&&n(e)};return w(c.href)&&(c.role=c.role||"button",c.href=c.href||"#"),o&&(c.tabIndex=-1,c["aria-disabled"]=!0),a.a.createElement(r,Object(v.a)({ref:t},c,{onClick:u,onKeyDown:j((function(e){" "===e.key&&(e.preventDefault(),u(e))}),i)}))}));S.displayName="SafeAnchor";var C=S,N=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.size,i=e.active,c=e.className,u=e.block,s=e.type,l=e.as,f=Object(h.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),d=E(n,"btn"),p=y()(c,d,i&&"active",d+"-"+r,u&&d+"-block",o&&d+"-"+o);if(f.href)return a.a.createElement(C,Object(v.a)({},f,{as:l,ref:t,className:y()(p,f.disabled&&"disabled")}));t&&(f.ref=t),s?f.type=s:l||(f.type="button");var m=l||"button";return a.a.createElement(m,Object(v.a)({},f,{className:p}))}));N.displayName="Button",N.defaultProps={variant:"primary",active:!1,disabled:!1};var k=N;n(22);var P=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],T=function(e){return 440*Math.pow((e-69)/12,2)},R=function(e){return 69+12*Math.log2(e/440)},A=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._freq=t,this.note=Math.round(R(t)),this.frequency=T(this.note),this.name=function(e){return P[(e-21)%12]}(this.note),this.octave=function(e){return Math.floor(e/12-1)}(this.note)},M=function(e){if(null==e)return null;var t,n,r=new A(e);return{frequency:e,target:r,note:R(e),diff:(t=r.frequency,n=e,1200*Math.log2(n/t))}},_=function(e){return this instanceof _?(this.v=e,this):new _(e)},L=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=a[e](t)).value instanceof _?Promise.resolve(n.value.v).then(u,s):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function u(e){c("next",e)}function s(e){c("throw",e)}function l(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}},I=m(),D="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";var z=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.animation,i=e.size,c=e.children,u=e.as,s=void 0===u?"div":u,l=e.className,f=Object(h.a)(e,["bsPrefix","variant","animation","size","children","as","className"]),d=(n=E(n,"spinner"))+"-"+o;return a.a.createElement(s,Object(v.a)({ref:t},f,{className:y()(l,d,i&&d+"-"+i,r&&"text-"+r)}),c)}));z.displayName="Spinner";var U=z;function B(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return F(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var q=function(e){var t=B(Object(r.useState)(!1),2),n=t[0],a=t[1],o=B(Object(r.useState)(),2),i=o[0],c=o[1];return Object(r.useEffect)((function(){var t=!0;return e.generator.next().then((function(e){!e.done&&t&&(c(e.value||void 0),a(!n))})),function(){t=!1}}),[n]),Object(r.useEffect)((function(){e.onTick&&i&&e.onTick(i)}),[i]),"function"==typeof e.children?e.children(i):e.children};function G(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return H(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $=m();function V(e){var t=e.pitchGenerator,n=e.timeoutMs,o=e.onFinish,i=G(Object(r.useState)([]),2),c=i[0],u=i[1],s=G(Object(r.useState)(!1),2),l=s[0],f=s[1],d=G(Object(r.useState)(!1),2),p=d[0],m=d[1];Object(r.useEffect)((function(){if(!l)return function(){};$.info("Setting up the timeout.");var e=setTimeout((function(){m(!0),f(!1)}),n);return $.info("Set up timer %d for %d ms.",e,n),function(){$.info("Clearing out the timeout %d.",e),clearTimeout(e)}}),[l]),Object(r.useEffect)((function(){p&&($.info("Finishing recording."),o(c))}),[p,c]);var v=l?a.a.createElement(U,{animation:"grow",variant:"danger"}):a.a.createElement("span",null,"sing now!");return t?a.a.createElement(q,{generator:t,onTick:function(e){var t=c.concat([e]);u(t),l||f(!0)}},a.a.createElement("h3",null,v)):a.a.createElement(U,{animation:"border",variant:"primary"})}var X=["xl","lg","md","sm","xs"],K=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.noGutters,i=e.as,c=void 0===i?"div":i,u=Object(h.a)(e,["bsPrefix","className","noGutters","as"]),s=E(n,"row"),l=s+"-cols",f=[];return X.forEach((function(e){var t,n=u[e];delete u[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&f.push(""+l+r+"-"+t)})),a.a.createElement(c,Object(v.a)({ref:t},u,{className:y.a.apply(void 0,[r,s,o&&"no-gutters"].concat(f))}))}));K.displayName="Row",K.defaultProps={noGutters:!1};var Y=K,W=["xl","lg","md","sm","xs"],Z=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.as,i=void 0===o?"div":o,c=Object(h.a)(e,["bsPrefix","className","as"]),u=E(n,"col"),s=[],l=[];return W.forEach((function(e){var t,n,r,a=c[e];if(delete c[e],"object"==typeof a&&null!=a){var o=a.span;t=void 0===o||o,n=a.offset,r=a.order}else t=a;var i="xs"!==e?"-"+e:"";t&&s.push(!0===t?""+u+i:""+u+i+"-"+t),null!=r&&l.push("order"+i+"-"+r),null!=n&&l.push("offset"+i+"-"+n)})),s.length||s.push(u),a.a.createElement(i,Object(v.a)({},c,{ref:t,className:y.a.apply(void 0,[r].concat(s,l))}))}));Z.displayName="Col";var J=Z,Q=n(17),ee=n(18),te=n(8),ne=n(16),re=n(12);te.a&&window;function ae(e,t,n){void 0===n&&(n=5);var r=!1,a=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),o=Object(re.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(a),o()}}var oe=function(e,t,n){var r,a,o;null==n&&(r=e,a=Object(ne.a)(r,"transitionDuration")||"",o=-1===a.indexOf("ms")?1e3:1,n=parseFloat(a)*o||0);var i=ae(e,n),c=Object(re.a)(e,"transitionend",t);return function(){i(),c()}},ie=n(7),ce=n(4),ue=n.n(ce),se=!1,le=a.a.createContext(null),fe=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a="exited",r.appearStatus="entering"):a="entered":a=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:a},r.nextCallback=null,r}Object(ie.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[i.a.findDOMNode(this),r],o=a[0],c=a[1],u=this.getTimeouts(),s=r?u.appear:u.enter;!e&&!n||se?this.safeSetState({status:"entered"},(function(){t.props.onEntered(o)})):(this.props.onEnter(o,c),this.safeSetState({status:"entering"},(function(){t.props.onEntering(o,c),t.onTransitionEnd(s,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(o,c)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:i.a.findDOMNode(this);t&&!se?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:i.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=a[0],c=a[1];this.props.addEndListener(o,c)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(h.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement(le.Provider,{value:null},"function"==typeof n?n(e,r):a.a.cloneElement(a.a.Children.only(n),r))},t}(a.a.Component);function de(){}fe.contextType=le,fe.propTypes={},fe.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:de,onEntering:de,onEntered:de,onExit:de,onExiting:de,onExited:de},fe.UNMOUNTED="unmounted",fe.EXITED="exited",fe.ENTERING="entering",fe.ENTERED="entered",fe.EXITING="exiting";var pe,me=fe;var ve=((pe={}).entering="show",pe.entered="show",pe),he=a.a.forwardRef((function(e,t){var n=e.className,o=e.children,i=Object(h.a)(e,["className","children"]),c=Object(r.useCallback)((function(e){!function(e){e.offsetHeight}(e),i.onEnter&&i.onEnter(e)}),[i]);return a.a.createElement(me,Object(v.a)({ref:t,addEndListener:oe},i,{onEnter:c}),(function(e,t){return a.a.cloneElement(o,Object(v.a)({},t,{className:y()("fade",n,o.props.className,ve[e])}))}))}));he.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},he.displayName="Fade";var be=he,ye={label:ue.a.string.isRequired,onClick:ue.a.func},ge=a.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,o=e.className,i=Object(h.a)(e,["label","onClick","className"]);return a.a.createElement("button",Object(v.a)({ref:t,type:"button",className:y()("close",o),onClick:r},i),a.a.createElement("span",{"aria-hidden":"true"},"×"),a.a.createElement("span",{className:"sr-only"},n))}));ge.displayName="CloseButton",ge.propTypes=ye,ge.defaultProps={label:"Close"};var Ee=ge,xe=/-(.)/g;var Oe=function(e){return e[0].toUpperCase()+(t=e,t.replace(xe,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function je(e,t){var n=void 0===t?{}:t,r=n.displayName,o=void 0===r?Oe(e):r,i=n.Component,c=n.defaultProps,u=a.a.forwardRef((function(t,n){var r=t.className,o=t.bsPrefix,c=t.as,u=void 0===c?i||"div":c,s=Object(h.a)(t,["className","bsPrefix","as"]),l=E(o,e);return a.a.createElement(u,Object(v.a)({ref:n,className:y()(r,l)},s))}));return u.defaultProps=c,u.displayName=o,u}var we,Se=(we="h4",a.a.forwardRef((function(e,t){return a.a.createElement("div",Object(v.a)({},e,{ref:t,className:y()(e.className,we)}))})));Se.displayName="DivStyledAsH4";var Ce=je("alert-heading",{Component:Se}),Ne=je("alert-link",{Component:C}),ke={show:!0,transition:be,closeLabel:"Close alert"},Pe=a.a.forwardRef((function(e,t){var n=Object(Q.a)(e,{show:"onClose"}),r=n.bsPrefix,o=n.show,i=n.closeLabel,c=n.className,u=n.children,s=n.variant,l=n.onClose,f=n.dismissible,d=n.transition,p=Object(h.a)(n,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),m=E(r,"alert"),b=Object(ee.a)((function(e){l&&l(!1,e)})),g=!0===d?be:d,x=a.a.createElement("div",Object(v.a)({role:"alert"},g?p:void 0,{ref:t,className:y()(c,m,s&&m+"-"+s,f&&m+"-dismissible")}),f&&a.a.createElement(Ee,{onClick:b,label:i}),u);return g?a.a.createElement(g,Object(v.a)({unmountOnExit:!0},p,{ref:void 0,in:o}),x):o?x:null}));Pe.displayName="Alert",Pe.defaultProps=ke,Pe.Link=Ne,Pe.Heading=Ce;var Te=Pe;function Re(){return(Re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ae(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Me=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,o=Ae(e,["color","size"]);return a.a.createElement("svg",Re({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),a.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));Me.propTypes={color:ue.a.string,size:ue.a.oneOfType([ue.a.string,ue.a.number])},Me.defaultProps={color:"currentColor",size:"1em"};var _e=Me;function Le(){return(Le=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ie(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var De=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,o=Ie(e,["color","size"]);return a.a.createElement("svg",Le({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),a.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));De.propTypes={color:ue.a.string,size:ue.a.oneOfType([ue.a.string,ue.a.number])},De.defaultProps={color:"currentColor",size:"1em"};var ze=De;function Ue(e){for(var t=e.no,n=e.of,r=[],o=0;o<n;o+=1)r.push(o<=t?a.a.createElement(_e,null):a.a.createElement(ze,null));return a.a.createElement("div",{className:p("text-primary","display-3")},r)}var Be=function(e,t){return e+t},Fe=function(e){var t,n=e.recording,r=e.reference,o=n.filter((function(e){return!!e})),i=o.map((function(e){return e.frequency-r.frequency})).reduce(Be,0)/o.length,c=o.map((function(e){return Math.abs(e.note-r.note)})).reduce(Be,0)/o.length;return t=c<=.5?5:c<=1?4:c<=2?3:c<=4?2:c<=7?1:0,a.a.createElement(O,null,a.a.createElement(Y,null,a.a.createElement(J,{className:"pb-3"},a.a.createElement(Ue,{no:t,of:5}))),a.a.createElement(Y,null,a.a.createElement(J,{className:p("col-md-6","offset-md-3")},a.a.createElement(Te,{variant:"success"},"Received ",o.length," sample(s) averaging to ",i," from C",a.a.createElement("sub",null,"4"),"."))))};function qe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ge(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var He=m(),$e=function(){var e=qe(Object(r.useState)(!1),2),t=e[0],n=e[1],o=qe(Object(r.useState)(new AudioContext),1)[0],i=qe(Object(r.useState)(),2),c=i[0],u=i[1],s=qe(Object(r.useState)(),2),l=s[0],f=s[1],d=qe(Object(r.useState)(),2),p=d[0],m=d[1];if(Object(r.useEffect)((function(){t&&(He.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){He.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),u(e)})))}),[t]),Object(r.useEffect)((function(){return t&&void 0!==c?(He.info("Setting up the context %j and stream %j",o,c),o.createMediaStreamSource(c),He.info("Initialized audio."),f(function(e,t){return L(this,arguments,regeneratorRuntime.mark((function n(){var r,a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=ml5.pitchDetection(D,e,t),I.info("Created pitch detection.",r),n.next=4,_(r.ready);case 4:I.info("Initialized the model.");case 5:if(!t.active||"running"!==e.state){n.next=19;break}return n.next=8,_(r.getPitch());case 8:if(null!==(a=n.sent)){n.next=13;break}I.debug("Skipping"),n.next=17;break;case 13:return n.next=15,_(M(a));case 15:return n.next=17,n.sent;case 17:n.next=5;break;case 19:case"end":return n.stop()}}),n)})))}(o,c)),o.resume(),function(){He.info("Cleanup the audio settings"),He.debug("Stop all tracks in the stream %j.",c),null==c||c.getTracks().forEach((function(e){return e.stop()})),He.debug("Suspend audio context %j.",o),o.suspend()}):function(){}}),[c,t]),void 0!==p){var v=M(T(60));return a.a.createElement(Fe,{recording:p,reference:v})}return t&&l?a.a.createElement(V,{onFinish:function(e){He.info("Result, %j",e),m(e),n(!1)},pitchGenerator:l,timeoutMs:5e3}):a.a.createElement(k,{onClick:function(){return n(!0)},variant:"outline-primary",size:"lg"},"click to start")},Ve=m(),Xe=function(){return Ve.info("Starting app."),a.a.createElement(O,null,a.a.createElement("header",{className:p("text-center","mt-5")},a.a.createElement("h1",{className:p("display-1","text-primary","title")},"vocally"),a.a.createElement("h2",{className:"text-secondary"},"sing C",a.a.createElement("sub",null,"4"),"!")),a.a.createElement("main",{className:p("text-center","py-5"),role:"main"},a.a.createElement($e,null)),a.a.createElement("footer",{className:p("py-3","border-top","text-muted")},a.a.createElement(O,null,a.a.createElement("p",null,"vocally.app 2020"))))};c.init({dsn:"https://ffe439ac65b84889a37518037a23a7b1@o433557.ingest.sentry.io/5388917",release:"testing",environment:"testing",integrations:[new c.CaptureConsole({levels:["info"]}),new c.Integrations.Tracing]}),s.a.init("6ayqi7/vocallytest",{release:"testing"}),f()(s.a),o.render(r.createElement(Xe,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,