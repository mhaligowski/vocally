!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=ReactDOM},,function(e,t,n){var r=n(7),a=n(8);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],s=t.base?o[0]+t.base:o[0],l=n[s]||0,u="".concat(s," ").concat(l);n[s]=l+1;var f=c(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:u,updater:h(d,t),references:1}),r.push(u)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,f=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function m(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,v=0;function h(e,t){var n,r,a;if(t.singleton){var o=v++;n=p||(p=l(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=l(t),r=m.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=c(n[r]);i[a].references--}for(var o=s(e,t),l=0;l<n.length;l++){var u=c(n[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=o}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(4);n(6),n(9);const i=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],c=e=>440*Math.pow(2,(e-69)/12),s=e=>69+12*Math.log2(e/440),l=(e,t)=>1200*Math.log2(t/e);class u{constructor(e){this._freq=e,this.note=Math.round(s(e)),this.frequency=c(this.note),this.name=(e=>i[(e-21)%12])(this.note),this.octave=(e=>Math.floor(e/12-1))(this.note)}}const f=e=>{if(null==e)return;const t=new u(e);return{frequency:e,target:t,note:s(e),diff:l(t.frequency,e)}};var d=function(e){return this instanceof d?(this.v=e,this):new d(e)},m=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=a[e](t)).value instanceof d?Promise.resolve(n.value.v).then(s,l):u(o[0][2],n)}catch(e){u(o[0][3],e)}var n}function s(e){c("next",e)}function l(e){c("throw",e)}function u(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}};const p="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function v(e,t){return m(this,arguments,(function*(){let n=!1;const r=ml5.pitchDetection(p,e,t);for(console.log("Created pitch detection.",r),yield d(r.ready),console.log("Initialized the model.");;){if(!t.active)return yield d(void 0);const e=yield d(r.getPitch());n||(console.log("Got first detection",e),n=!0),yield yield d(f(e))}}))}const h=e=>{const[t,n]=Object(r.useState)(!1),[a,o]=Object(r.useState)();return Object(r.useEffect)(()=>{let r=!0;return e.generator.next().then(e=>{!e.done&&r&&(o(e.value),n(!t))}),()=>{r=!1}},[t]),e.children(a)};function y(e){const[t,n]=Object(r.useState)(),[a,o]=Object(r.useState)(!1);return Object(r.useEffect)(()=>{if(t||a)return;const r=setTimeout(()=>{o(!0),e.onTimeout()},e.ms);return n(r),()=>{t&&!a&&clearTimeout(t)}},[]),a?"dupa":e.children}var b=n(1),g=n(2),x=n(3),j=n.n(x),w=a.a.createContext({});w.Consumer,w.Provider;function O(e,t){var n=Object(r.useContext)(w);return e||n[t]||t}var E=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}}),null)};function N(e){return!e||"#"===e.trim()}var S=a.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,o=e.disabled,i=e.onKeyDown,c=Object(g.a)(e,["as","disabled","onKeyDown"]),s=function(e){var t=c.href,n=c.onClick;(o||N(t))&&e.preventDefault(),o?e.stopPropagation():n&&n(e)};return N(c.href)&&(c.role=c.role||"button",c.href=c.href||"#"),o&&(c.tabIndex=-1,c["aria-disabled"]=!0),a.a.createElement(r,Object(b.a)({ref:t},c,{onClick:s,onKeyDown:E((function(e){" "===e.key&&(e.preventDefault(),s(e))}),i)}))}));S.displayName="SafeAnchor";var C=S,P=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.size,i=e.active,c=e.className,s=e.block,l=e.type,u=e.as,f=Object(g.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),d=O(n,"btn"),m=j()(c,d,i&&"active",d+"-"+r,s&&d+"-block",o&&d+"-"+o);if(f.href)return a.a.createElement(C,Object(b.a)({},f,{as:u,ref:t,className:j()(m,f.disabled&&"disabled")}));t&&(f.ref=t),l?f.type=l:u||(f.type="button");var p=u||"button";return a.a.createElement(p,Object(b.a)({},f,{className:m}))}));P.displayName="Button",P.defaultProps={variant:"primary",active:!1,disabled:!1};var M=P;const T=e=>new Intl.NumberFormat("en-us",{maximumFractionDigits:2,signDisplay:"always"}).format(e),D=({reference:e,value:t})=>{if(void 0===t)return a.a.createElement("span",null);const n=new Intl.NumberFormat("en-us",{maximumFractionDigits:2}).format(t.frequency),r=l(e.frequency,t.frequency);return a.a.createElement("span",null,n," Hz; ",t.target.name,a.a.createElement("sub",null,t.target.octave),"; ",T(t.diff),"; ",T(r))},A=()=>{const[e,t]=Object(r.useState)(new AudioContext),[n,o]=Object(r.useState)(),i=f(c(60));return n?a.a.createElement(y,{ms:1e4,onTimeout:async()=>{console.log("Finishing the stream."),e.suspend(),null==n||n.getTracks().forEach(e=>e.stop()),o(void 0)}},a.a.createElement(h,{generator:v(e,n)},e=>a.a.createElement(D,{reference:i,value:e}))):a.a.createElement(M,{onClick:async()=>{const t=await navigator.mediaDevices.getUserMedia({audio:!0,video:!1});e.createMediaStreamSource(t),e.resume(),o(t)},variant:"outline-primary",size:"lg"},"Start")};var I=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,o=e.as,i=void 0===o?"div":o,c=e.className,s=Object(g.a)(e,["bsPrefix","fluid","as","className"]),l=O(n,"container"),u="string"==typeof r?"-"+r:"-fluid";return a.a.createElement(i,Object(b.a)({ref:t},s,{className:j()(c,r?""+l+u:l)}))}));I.displayName="Container",I.defaultProps={fluid:!1};var k=I,R=["xl","lg","md","sm","xs"],F=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.noGutters,i=e.as,c=void 0===i?"div":i,s=Object(g.a)(e,["bsPrefix","className","noGutters","as"]),l=O(n,"row"),u=l+"-cols",f=[];return R.forEach((function(e){var t,n=s[e];delete s[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&f.push(""+u+r+"-"+t)})),a.a.createElement(c,Object(b.a)({ref:t},s,{className:j.a.apply(void 0,[r,l,o&&"no-gutters"].concat(f))}))}));F.displayName="Row",F.defaultProps={noGutters:!1};var _=F,q=["xl","lg","md","sm","xs"],B=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.as,i=void 0===o?"div":o,c=Object(g.a)(e,["bsPrefix","className","as"]),s=O(n,"col"),l=[],u=[];return q.forEach((function(e){var t,n,r,a=c[e];if(delete c[e],"object"==typeof a&&null!=a){var o=a.span;t=void 0===o||o,n=a.offset,r=a.order}else t=a;var i="xs"!==e?"-"+e:"";t&&l.push(!0===t?""+s+i:""+s+i+"-"+t),null!=r&&u.push("order"+i+"-"+r),null!=n&&u.push("offset"+i+"-"+n)})),l.length||l.push(s),a.a.createElement(i,Object(b.a)({},c,{ref:t,className:j.a.apply(void 0,[r].concat(l,u))}))}));B.displayName="Col";var G=B;o.render(r.createElement(()=>a.a.createElement(k,null,a.a.createElement(_,{as:"header"},a.a.createElement("h1",{className:"display-1 text-center mt-5"},"vocally"),a.a.createElement("h2",{className:"text-center"},"sing C4!")),a.a.createElement(_,{as:"section",className:"text-center"},a.a.createElement(G,null,a.a.createElement(A,null))),a.a.createElement(_,{as:"footer"})),null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,