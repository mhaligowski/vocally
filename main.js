!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=PropTypes},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,s){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,o,i,s],l=0;(c=new Error(t.replace(/%s/g,(function(){return u[l++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var r=n(7),a=!1,o=!1;try{var i={get passive(){return a=!0},get once(){return o=a=!0}};r.a&&(window.addEventListener("test",i,i),window.removeEventListener("test",i,!0))}catch(e){}var s=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!o){var i=r.once,s=r.capture,c=n;!o&&i&&(c=n.__once||function e(r){this.removeEventListener(t,e,s),n.call(this,r)},n.__once=c),e.addEventListener(t,c,a?r:s)}e.addEventListener(t,n,r)};var c=function(e,t,n,r){var a=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,a),n.__once&&e.removeEventListener(t,n.__once,a)};t.a=function(e,t,n,r){return s(e,t,n,r),function(){c(e,t,n,r)}}},function(e,t){e.exports=reactLifecyclesCompat},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(12);function a(e,t){return function(e){var t=Object(r.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var o=/([A-Z])/g;var i=/^ms-/;function s(e){return function(e){return e.replace(o,"-$1").toLowerCase()}(e).replace(i,"-ms-")}var c=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;t.a=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(s(t))||a(e).getPropertyValue(s(t));Object.keys(t).forEach((function(a){var o=t[a];o||0===o?!function(e){return!(!e||!c.test(e))}(a)?n+=s(a)+": "+o+";":r+=a+"("+o+") ":e.style.removeProperty(s(a))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(1),a=n(2),o=n(0);n(9);function i(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function s(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function c(e,t){return Object.keys(t).reduce((function(n,c){var u,l=n,f=l[i(c)],d=l[c],p=Object(a.a)(l,[i(c),c].map(s)),m=t[c],v=function(e,t,n){var r=Object(o.useRef)(void 0!==e),a=Object(o.useState)(t),i=a[0],s=a[1],c=void 0!==e,u=r.current;return r.current=c,!c&&u&&i!==t&&s(t),[c?e:i,Object(o.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];n&&n.apply(void 0,[e].concat(r)),s(e)}),[n])]}(d,f,e[m]),h=v[0],b=v[1];return Object(r.a)({},p,((u={})[c]=h,u[m]=b,u))}),e)}n(6),n(11)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);var a=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function o(e){var t=a(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t,n){var r=n(17),a=n(18);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function s(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],c=t.base?o[0]+t.base:o[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var f=s(l),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:h(d,t),references:1}),r.push(l)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,v=0;function h(e,t){var n,r,a;if(t.singleton){var o=v++;n=m||(m=u(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=u(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=s(n[r]);i[a].references--}for(var o=c(e,t),u=0;u<n.length;u++){var l=s(n[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=o}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(5),i=n.n(o),s=(n(16),n(1)),c=n(2),u=n(3),l=n.n(u),f=a.a.createContext({});f.Consumer,f.Provider;function d(e,t){var n=Object(r.useContext)(f);return e||n[t]||t}var p=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}}),null)};function m(e){return!e||"#"===e.trim()}var v=a.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,o=e.disabled,i=e.onKeyDown,u=Object(c.a)(e,["as","disabled","onKeyDown"]),l=function(e){var t=u.href,n=u.onClick;(o||m(t))&&e.preventDefault(),o?e.stopPropagation():n&&n(e)};return m(u.href)&&(u.role=u.role||"button",u.href=u.href||"#"),o&&(u.tabIndex=-1,u["aria-disabled"]=!0),a.a.createElement(r,Object(s.a)({ref:t},u,{onClick:l,onKeyDown:p((function(e){" "===e.key&&(e.preventDefault(),l(e))}),i)}))}));v.displayName="SafeAnchor";var h=v,b=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.size,i=e.active,u=e.className,f=e.block,p=e.type,m=e.as,v=Object(c.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),b=d(n,"btn"),y=l()(u,b,i&&"active",b+"-"+r,f&&b+"-block",o&&b+"-"+o);if(v.href)return a.a.createElement(h,Object(s.a)({},v,{as:m,ref:t,className:l()(y,v.disabled&&"disabled")}));t&&(v.ref=t),p?v.type=p:m||(v.type="button");var E=m||"button";return a.a.createElement(E,Object(s.a)({},v,{className:y}))}));b.displayName="Button",b.defaultProps={variant:"primary",active:!1,disabled:!1};var y=b;const E=()=>console;n(19);const g=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],x=e=>440*Math.pow(2,(e-69)/12),O=e=>69+12*Math.log2(e/440);class j{constructor(e){this._freq=e,this.note=Math.round(O(e)),this.frequency=x(this.note),this.name=(e=>g[(e-21)%12])(this.note),this.octave=(e=>Math.floor(e/12-1))(this.note)}}const w=e=>{if(null==e)return;const t=new j(e);return{frequency:e,target:t,note:O(e),diff:(n=t.frequency,r=e,1200*Math.log2(r/n))};var n,r};var N=function(e){return this instanceof N?(this.v=e,this):new N(e)},C=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=a[e](t)).value instanceof N?Promise.resolve(n.value.v).then(c,u):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function c(e){s("next",e)}function u(e){s("throw",e)}function l(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}};const S=E(),P="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function k(e){const[t,n]=Object(r.useState)(!1),[a,o]=Object(r.useState)();return Object(r.useEffect)(()=>{let r=!0;return e.generator.next().then(e=>{!e.done&&r&&(o(e.value),n(!t))}),()=>{r=!1}},[t]),Object(r.useEffect)(()=>{e.onTick&&a&&e.onTick(a)},[a]),"function"==typeof e.children?e.children(a):e.children}var T=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.animation,i=e.size,u=e.children,f=e.as,p=void 0===f?"div":f,m=e.className,v=Object(c.a)(e,["bsPrefix","variant","animation","size","children","as","className"]),h=(n=d(n,"spinner"))+"-"+o;return a.a.createElement(p,Object(s.a)({ref:t},v,{className:l()(m,h,i&&h+"-"+i,r&&"text-"+r)}),u)}));T.displayName="Spinner";var M=T;const R=E();function L({pitchGenerator:e,timeoutMs:t,onFinish:n}){const[o,i]=Object(r.useState)([]),[s,c]=Object(r.useState)(!1),[u,l]=Object(r.useState)(!1);Object(r.useEffect)(()=>{if(!s)return;R.info("Setting up the timeout.");const e=setTimeout(()=>{l(!0),c(!1)},t);return R.info("Set up timer %d for %d ms.",e,t),()=>{R.info("Clearing out the timeout %d.",e),clearTimeout(e)}},[s]),Object(r.useEffect)(()=>{u&&(R.info("Finishing recording."),n(o))},[u,o]);const f=s?a.a.createElement(M,{animation:"grow",variant:"danger"}):a.a.createElement("span",null,"sing now!");return e?a.a.createElement(k,{generator:e,onTick:e=>{const t=o.concat([e]);i(t),s||c(!0)}},a.a.createElement("h3",null,f)):a.a.createElement(M,{animation:"border",variant:"primary"})}var D=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,o=e.as,i=void 0===o?"div":o,u=e.className,f=Object(c.a)(e,["bsPrefix","fluid","as","className"]),p=d(n,"container"),m="string"==typeof r?"-"+r:"-fluid";return a.a.createElement(i,Object(s.a)({ref:t},f,{className:l()(u,r?""+p+m:p)}))}));D.displayName="Container",D.defaultProps={fluid:!1};var A=D,_=["xl","lg","md","sm","xs"],z=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.noGutters,i=e.as,u=void 0===i?"div":i,f=Object(c.a)(e,["bsPrefix","className","noGutters","as"]),p=d(n,"row"),m=p+"-cols",v=[];return _.forEach((function(e){var t,n=f[e];delete f[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&v.push(""+m+r+"-"+t)})),a.a.createElement(u,Object(s.a)({ref:t},f,{className:l.a.apply(void 0,[r,p,o&&"no-gutters"].concat(v))}))}));z.displayName="Row",z.defaultProps={noGutters:!1};var I=z,B=["xl","lg","md","sm","xs"],F=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.as,i=void 0===o?"div":o,u=Object(c.a)(e,["bsPrefix","className","as"]),f=d(n,"col"),p=[],m=[];return B.forEach((function(e){var t,n,r,a=u[e];if(delete u[e],"object"==typeof a&&null!=a){var o=a.span;t=void 0===o||o,n=a.offset,r=a.order}else t=a;var i="xs"!==e?"-"+e:"";t&&p.push(!0===t?""+f+i:""+f+i+"-"+t),null!=r&&m.push("order"+i+"-"+r),null!=n&&m.push("offset"+i+"-"+n)})),p.length||p.push(f),a.a.createElement(i,Object(s.a)({},u,{ref:t,className:l.a.apply(void 0,[r].concat(p,m))}))}));F.displayName="Col";var U=F,q=n(14),G=n(15),H=n(7),V=n(13),X=n(10);H.a&&window;function K(e,t,n){void 0===n&&(n=5);var r=!1,a=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),o=Object(X.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(a),o()}}var Y=function(e,t,n){var r,a,o;null==n&&(r=e,a=Object(V.a)(r,"transitionDuration")||"",o=-1===a.indexOf("ms")?1e3:1,n=parseFloat(a)*o||0);var i=K(e,n),s=Object(X.a)(e,"transitionend",t);return function(){i(),s()}},Z=n(6),$=n(4),J=n.n($),W=!1,Q=a.a.createContext(null),ee=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a="exited",r.appearStatus="entering"):a="entered":a=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:a},r.nextCallback=null,r}Object(Z.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[i.a.findDOMNode(this),r],o=a[0],s=a[1],c=this.getTimeouts(),u=r?c.appear:c.enter;!e&&!n||W?this.safeSetState({status:"entered"},(function(){t.props.onEntered(o)})):(this.props.onEnter(o,s),this.safeSetState({status:"entering"},(function(){t.props.onEntering(o,s),t.onTransitionEnd(u,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(o,s)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:i.a.findDOMNode(this);t&&!W?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:i.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=a[0],s=a[1];this.props.addEndListener(o,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(c.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement(Q.Provider,{value:null},"function"==typeof n?n(e,r):a.a.cloneElement(a.a.Children.only(n),r))},t}(a.a.Component);function te(){}ee.contextType=Q,ee.propTypes={},ee.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:te,onEntering:te,onEntered:te,onExit:te,onExiting:te,onExited:te},ee.UNMOUNTED="unmounted",ee.EXITED="exited",ee.ENTERING="entering",ee.ENTERED="entered",ee.EXITING="exiting";var ne,re=ee;var ae=((ne={}).entering="show",ne.entered="show",ne),oe=a.a.forwardRef((function(e,t){var n=e.className,o=e.children,i=Object(c.a)(e,["className","children"]),u=Object(r.useCallback)((function(e){!function(e){e.offsetHeight}(e),i.onEnter&&i.onEnter(e)}),[i]);return a.a.createElement(re,Object(s.a)({ref:t,addEndListener:Y},i,{onEnter:u}),(function(e,t){return a.a.cloneElement(o,Object(s.a)({},t,{className:l()("fade",n,o.props.className,ae[e])}))}))}));oe.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},oe.displayName="Fade";var ie=oe,se={label:J.a.string.isRequired,onClick:J.a.func},ce=a.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,o=e.className,i=Object(c.a)(e,["label","onClick","className"]);return a.a.createElement("button",Object(s.a)({ref:t,type:"button",className:l()("close",o),onClick:r},i),a.a.createElement("span",{"aria-hidden":"true"},"×"),a.a.createElement("span",{className:"sr-only"},n))}));ce.displayName="CloseButton",ce.propTypes=se,ce.defaultProps={label:"Close"};var ue=ce,le=/-(.)/g;var fe=function(e){return e[0].toUpperCase()+(t=e,t.replace(le,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function de(e,t){var n=void 0===t?{}:t,r=n.displayName,o=void 0===r?fe(e):r,i=n.Component,u=n.defaultProps,f=a.a.forwardRef((function(t,n){var r=t.className,o=t.bsPrefix,u=t.as,f=void 0===u?i||"div":u,p=Object(c.a)(t,["className","bsPrefix","as"]),m=d(o,e);return a.a.createElement(f,Object(s.a)({ref:n,className:l()(r,m)},p))}));return f.defaultProps=u,f.displayName=o,f}var pe,me=(pe="h4",a.a.forwardRef((function(e,t){return a.a.createElement("div",Object(s.a)({},e,{ref:t,className:l()(e.className,pe)}))})));me.displayName="DivStyledAsH4";var ve=de("alert-heading",{Component:me}),he=de("alert-link",{Component:h}),be={show:!0,transition:ie,closeLabel:"Close alert"},ye=a.a.forwardRef((function(e,t){var n=Object(q.a)(e,{show:"onClose"}),r=n.bsPrefix,o=n.show,i=n.closeLabel,u=n.className,f=n.children,p=n.variant,m=n.onClose,v=n.dismissible,h=n.transition,b=Object(c.a)(n,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),y=d(r,"alert"),E=Object(G.a)((function(e){m&&m(!1,e)})),g=!0===h?ie:h,x=a.a.createElement("div",Object(s.a)({role:"alert"},g?b:void 0,{ref:t,className:l()(u,y,p&&y+"-"+p,v&&y+"-dismissible")}),v&&a.a.createElement(ue,{onClick:E,label:i}),f);return g?a.a.createElement(g,Object(s.a)({unmountOnExit:!0},b,{ref:void 0,in:o}),x):o?x:null}));ye.displayName="Alert",ye.defaultProps=be,ye.Link=he,ye.Heading=ve;var Ee=ye;function ge(){return(ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function xe(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Oe=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,o=xe(e,["color","size"]);return a.a.createElement("svg",ge({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),a.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));Oe.propTypes={color:J.a.string,size:J.a.oneOfType([J.a.string,J.a.number])},Oe.defaultProps={color:"currentColor",size:"1em"};var je=Oe;function we(){return(we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ne(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Ce=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,o=Ne(e,["color","size"]);return a.a.createElement("svg",we({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),a.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));Ce.propTypes={color:J.a.string,size:J.a.oneOfType([J.a.string,J.a.number])},Ce.defaultProps={color:"currentColor",size:"1em"};var Se=Ce;function Pe(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Pe(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var ke=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Pe(e))&&(r&&(r+=" "),r+=t);return r};function Te({no:e,of:t}){let n=[];for(let r=0;r<t;r++)n.push(r<=e?a.a.createElement(je,null):a.a.createElement(Se,null));return a.a.createElement("div",{className:ke("text-primary","display-3")},n)}const Me=(e,t)=>e+t;function Re({recording:e,reference:t}){const n=e.filter(e=>!!e),r=n.map(e=>e.frequency-t.frequency).reduce(Me,0)/n.length,o=n.map(e=>Math.abs(e.note-t.note)).reduce(Me,0)/n.length;let i;return i=o<=.5?5:o<=1?4:o<=2?3:o<=4?2:o<=7?1:0,a.a.createElement(A,null,a.a.createElement(I,null,a.a.createElement(U,{className:"pb-3"},a.a.createElement(Te,{no:i,of:5}))),a.a.createElement(I,null,a.a.createElement(U,{className:ke("col-md-6","offset-md-3")},a.a.createElement(Ee,{variant:"success"},"Received ",n.length," sample(s) averaging to ",r," from C",a.a.createElement("sub",null,"4"),"."))))}const Le=E(),De=()=>{const[e,t]=Object(r.useState)(!1),[n,o]=Object(r.useState)(new AudioContext),[i,s]=Object(r.useState)(),[c,u]=Object(r.useState)(),[l,f]=Object(r.useState)();if(Object(r.useEffect)(()=>{e&&(Le.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then(e=>{Le.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),s(e)}))},[e]),Object(r.useEffect)(()=>{if(e&&void 0!==i)return Le.info("Setting up the context %j and stream %j",n,i),n.createMediaStreamSource(i),Le.info("Initialized audio."),u(function(e,t){return C(this,arguments,(function*(){const n=ml5.pitchDetection(P,e,t);for(S.info("Created pitch detection.",n),yield N(n.ready),S.info("Initialized the model.");t.active&&"running"===e.state;){const e=yield N(n.getPitch());null!==e?yield yield N(w(e)):S.debug("Skipping")}return yield N(void 0)}))}(n,i)),n.resume(),()=>{Le.info("Cleanup the audio settings"),Le.debug("Stop all tracks in the stream %j.",i),null==i||i.getTracks().forEach(e=>e.stop()),Le.debug("Suspend audio context %j.",n),n.suspend()}},[i,e]),void 0!==l){const e=w(x(60));return a.a.createElement(Re,{recording:l,reference:e})}return e&&c?a.a.createElement(L,{onFinish:e=>{Le.info("Result, %j",e),f(e),t(!1)},pitchGenerator:c,timeoutMs:5e3}):a.a.createElement(y,{onClick:()=>t(!0),variant:"outline-primary",size:"lg"},"click to start")},Ae=E();o.render(r.createElement(()=>(Ae.info("Starting app."),a.a.createElement(A,null,a.a.createElement("header",{className:ke("text-center","mt-5")},a.a.createElement("h1",{className:ke("display-1","text-primary","title")},"vocally"),a.a.createElement("h2",{className:"text-secondary"},"sing C",a.a.createElement("sub",null,"4"),"!")),a.a.createElement("main",{className:ke("text-center","py-5"),role:"main"},a.a.createElement(De,null)),a.a.createElement("footer",{className:ke("py-3","border-top","text-muted")},a.a.createElement(A,null,a.a.createElement("p",null,"vocally.app 2020"))))),null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJQcm9wVHlwZXNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdERPTVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vY2FuVXNlRE9NLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2FkZEV2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9yZW1vdmVFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vbGlzdGVuLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0TGlmZWN5Y2xlc0NvbXBhdFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2dldENvbXB1dGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9vd25lcldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2h5cGhlbmF0ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vaXNUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuY29udHJvbGxhYmxlL2VzbS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvZXNtL2hvb2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L2hvb2tzL2VzbS91c2VDb21taXR0ZWRSZWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L2hvb2tzL2VzbS91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtbDVcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9TYWZlQW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9nLnRlc3RpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BpdGNoL25vdGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9waXRjaC9waXRjaC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9HZW5lcmF0b3JDb21wb25lbnQudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL1NwaW5uZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGl0Y2hSZWNvcmRlci50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL1Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Db2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRmFkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS90cmlnZ2VyQnJvd3NlclJlZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9DbG9zZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL2NyZWF0ZVdpdGhCc1ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9BbGVydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9kaXZXaXRoQ2xhc3NOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAtaWNvbnMvZGlzdC9pY29ucy9zdGFyLWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC1pY29ucy9kaXN0L2ljb25zL3N0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU3VtbWFyeS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGl0Y2hEZXRlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWFjdCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImpvaW4iLCJkZWZhdWx0IiwiUHJvcFR5cGVzIiwiUmVhY3RET00iLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYSIsImIiLCJlIiwiZiIsImVycm9yIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJvcHRpb25zU3VwcG9ydGVkIiwib25jZVN1cHBvcnRlZCIsImNhblVzZURPTSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibm9kZSIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJvcHRpb25zIiwib25jZSIsImNhcHR1cmUiLCJ3cmFwcGVkSGFuZGxlciIsIl9fb25jZSIsIm9uY2VIYW5kbGVyIiwiZXZlbnQiLCJyZWFjdExpZmVjeWNsZXNDb21wYXQiLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicHN1ZWRvRWxlbWVudCIsImRvYyIsImRlZmF1bHRWaWV3Iiwib3duZXJXaW5kb3ciLCJyVXBwZXIiLCJtc1BhdHRlcm4iLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImh5cGhlbmF0ZSIsInN1cHBvcnRlZFRyYW5zZm9ybXMiLCJjc3MiLCJ0cmFuc2Zvcm1zIiwic3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZm9yRWFjaCIsInRlc3QiLCJpc1RyYW5zZm9ybSIsInJlbW92ZVByb3BlcnR5IiwiY3NzVGV4dCIsImRlZmF1bHRLZXkiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIl90b1Byb3BlcnR5S2V5IiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwicmVzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX3RvUHJpbWl0aXZlIiwidXNlVW5jb250cm9sbGVkIiwicHJvcHMiLCJjb25maWciLCJyZWR1Y2UiLCJyZXN1bHQiLCJmaWVsZE5hbWUiLCJfZXh0ZW5kczIiLCJfcmVmIiwiZGVmYXVsdFZhbHVlIiwicHJvcHNWYWx1ZSIsInJlc3QiLCJtYXAiLCJoYW5kbGVyTmFtZSIsIl91c2VVbmNvbnRyb2xsZWRQcm9wIiwicHJvcFZhbHVlIiwid2FzUHJvcFJlZiIsIl91c2VTdGF0ZSIsInN0YXRlVmFsdWUiLCJzZXRTdGF0ZSIsImlzUHJvcCIsIndhc1Byb3AiLCJjdXJyZW50IiwiX2xlbiIsIl9rZXkiLCJjb25jYXQiLCJ1c2VVbmNvbnRyb2xsZWRQcm9wIiwicmVmIiwidXNlRXZlbnRDYWxsYmFjayIsImZuIiwiYXBpIiwiY29udGVudCIsImxvY2FscyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwibWw1IiwiVGhlbWVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJ1c2VCb290c3RyYXBQcmVmaXgiLCJwcmVmaXgiLCJkZWZhdWx0UHJlZml4IiwicHJlZml4ZXMiLCJmdW5jcyIsImFjYyIsIl9sZW4yIiwiX2tleTIiLCJpc1RyaXZpYWxIcmVmIiwiaHJlZiIsInRyaW0iLCJTYWZlQW5jaG9yIiwiZm9yd2FyZFJlZiIsIl9yZWYkYXMiLCJhcyIsIkNvbXBvbmVudCIsImRpc2FibGVkIiwib25LZXlEb3duIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJyb2xlIiwidGFiSW5kZXgiLCJkaXNwbGF5TmFtZSIsIkJ1dHRvbiIsImJzUHJlZml4IiwidmFyaWFudCIsInNpemUiLCJhY3RpdmUiLCJjbGFzc05hbWUiLCJibG9jayIsInR5cGUiLCJkZWZhdWx0UHJvcHMiLCJnZXRMb2dnZXIiLCJjb25zb2xlIiwibm90ZXMiLCJub3RlVG9GcmVxIiwibm90ZSIsIk1hdGgiLCJwb3ciLCJmcmVxVG9Ob3RlIiwiZnJlcSIsImxvZzIiLCJOb3RlIiwiX2ZyZXEiLCJyb3VuZCIsImZyZXF1ZW5jeSIsIm9jdGF2ZSIsImZsb29yIiwiZGlmZiIsIkxPRyIsIk1PREVMX1VSTCIsIkdlbmVyYXRvckNvbXBvbmVudCIsImZsYWciLCJzZXRGbGFnIiwiY3VycmVudFZhbHVlIiwic2V0Q3VycmVudFZhbHVlIiwibW91bnRlZCIsImdlbmVyYXRvciIsIm5leHQiLCJ0aGVuIiwiZG9uZSIsIm9uVGljayIsImNoaWxkcmVuIiwiU3Bpbm5lciIsImFuaW1hdGlvbiIsImJzU3Bpbm5lclByZWZpeCIsIlBpdGNoUmVjb3JkZXIiLCJwaXRjaEdlbmVyYXRvciIsInRpbWVvdXRNcyIsIm9uRmluaXNoIiwicmVjb3JkaW5nIiwic2V0UmVjb3JkaW5nIiwic3RhcnRlZCIsInNldFN0YXJ0ZWQiLCJmaW5pc2hlZCIsInNldEZpbmlzaGVkIiwiaW5mbyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJsYWJlbCIsIm5ld1JlY29yZGluZyIsIkNvbnRhaW5lciIsImZsdWlkIiwic3VmZml4IiwiREVWSUNFX1NJWkVTIiwiUm93Iiwibm9HdXR0ZXJzIiwiZGVjb3JhdGVkQnNQcmVmaXgiLCJzaXplUHJlZml4IiwiYnJrUG9pbnQiLCJjb2xzIiwiaW5maXgiLCJDb2wiLCJzcGFucyIsInNwYW4iLCJvZmZzZXQiLCJvcmRlciIsIl9wcm9wVmFsdWUkc3BhbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiZWxlbWVudCIsImR1cmF0aW9uIiwicGFkZGluZyIsImNhbGxlZCIsImhhbmRsZSIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwibGlzdGVuIiwic3RyIiwibXVsdCIsInBhcnNlRmxvYXQiLCJyZW1vdmVFbXVsYXRlIiwiX1JlYWN0JENvbXBvbmVudCIsIlRyYW5zaXRpb24iLCJjb250ZXh0IiwiX3RoaXMiLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyIiwiaXNNb3VudGluZyIsImVudGVyIiwiYXBwZWFyU3RhdHVzIiwiaW4iLCJ1bm1vdW50T25FeGl0IiwibW91bnRPbkVudGVyIiwic3RhdGUiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJwcmV2U3RhdGUiLCJfcHJvdG8iLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZVN0YXR1cyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwiZXhpdCIsInRpbWVvdXQiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiX3RoaXMyIiwiYXBwZWFyaW5nIiwiX3JlZjIiLCJub2RlUmVmIiwiZmluZERPTU5vZGUiLCJtYXliZU5vZGUiLCJtYXliZUFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwic2FmZVNldFN0YXRlIiwib25FbnRlcmVkIiwib25FbnRlciIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsImNhbmNlbCIsIm5leHRTdGF0ZSIsImNhbGxiYWNrIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiX3JlZjMiLCJtYXliZU5leHRDYWxsYmFjayIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiY2hpbGRQcm9wcyIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJjbG9uZUVsZW1lbnQiLCJDaGlsZHJlbiIsIm9ubHkiLCJub29wIiwiY29udGV4dFR5cGUiLCJwcm9wVHlwZXMiLCJVTk1PVU5URUQiLCJFWElURUQiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJFWElUSU5HIiwiX2ZhZGVTdHlsZXMiLCJmYWRlU3R5bGVzIiwiRmFkZSIsImhhbmRsZUVudGVyIiwib2Zmc2V0SGVpZ2h0IiwidHJpZ2dlckJyb3dzZXJSZWZsb3ciLCJpbm5lclByb3BzIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJDbG9zZUJ1dHRvbiIsInJIeXBoZW4iLCJfIiwiY2hyIiwic2xpY2UiLCJjcmVhdGVXaXRoQnNQcmVmaXgiLCJfdGVtcCIsIl9yZWYkZGlzcGxheU5hbWUiLCJCc0NvbXBvbmVudCIsIl9yZWYyJGFzIiwiVGFnIiwicmVzb2x2ZWRQcmVmaXgiLCJEaXZTdHlsZWRBc0g0IiwiQWxlcnRIZWFkaW5nIiwiQWxlcnRMaW5rIiwic2hvdyIsInRyYW5zaXRpb24iLCJjbG9zZUxhYmVsIiwiQWxlcnQiLCJ1bmNvbnRyb2xsZWRQcm9wcyIsIl91c2VVbmNvbnRyb2xsZWQiLCJvbkNsb3NlIiwiZGlzbWlzc2libGUiLCJoYW5kbGVDbG9zZSIsImFsZXJ0IiwiTGluayIsIkhlYWRpbmciLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTdGFyRmlsbCIsImNvbG9yIiwieG1sbnMiLCJ2aWV3Qm94Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwib25lT2ZUeXBlIiwibnVtYmVyIiwiU3RhciIsImZpbGxSdWxlIiwidG9WYWwiLCJtaXgiLCJrIiwieSIsInRtcCIsIngiLCJSYXRpbmciLCJubyIsIm9mIiwic3RhcnMiLCJzdW0iLCJTdW1tYXJ5IiwicmVmZXJlbmNlIiwibm9uRW1wdHkiLCJmcmVxUmVzdWx0IiwibWlkaVJlc3VsdCIsImFicyIsInN0YXJDb3VudCIsIlBpdGNoRGV0ZWN0aW9uIiwic2V0SXNTdGFydGVkIiwiYXVkaW9Db250ZXh0IiwiQXVkaW9Db250ZXh0Iiwic3RyZWFtIiwic2V0U3RyZWFtIiwicGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3IiLCJzZXRQaXRjaERldGVjdGlvbkdlbmVyYXRvciIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImdldFVzZXJNZWRpYSIsImF1ZGlvIiwidmlkZW8iLCJuZXdTdHJlYW0iLCJkZWJ1ZyIsImdldEF1ZGlvVHJhY2tzIiwicmVhZHlTdGF0ZSIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwiY3R4IiwicGl0Y2hEZXRlY3Rpb24iLCJyZWFkeSIsInBpdGNoIiwiZ2V0UGl0Y2giLCJtbDVQaXRjaERldGVjdGlvbiIsInJlc3VtZSIsImdldFRyYWNrcyIsInN0b3AiLCJzdXNwZW5kIiwicmVmZXJlbmNlUGl0Y2giLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksSSxnQkNsRnJEaEMsRUFBT0QsUUFBVWtDLE8sNkJDQUYsU0FBU0MsSUFldEIsT0FkQUEsRUFBV3ZCLE9BQU93QixRQUFVLFNBQVVDLEdBQ3BDLElBQUssSUFBSW5DLEVBQUksRUFBR0EsRUFBSW9DLFVBQVVDLE9BQVFyQyxJQUFLLENBQ3pDLElBQUlzQyxFQUFTRixVQUFVcEMsR0FFdkIsSUFBSyxJQUFJdUIsS0FBT2UsRUFDVjVCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS21DLEVBQVFmLEtBQy9DWSxFQUFPWixHQUFPZSxFQUFPZixJQUszQixPQUFPWSxJQUdPSSxNQUFNQyxLQUFNSixXQWY5QixtQyw2QkNBZSxTQUFTSyxFQUE4QkgsRUFBUUksR0FDNUQsR0FBYyxNQUFWSixFQUFnQixNQUFPLEdBQzNCLElBRUlmLEVBQUt2QixFQUZMbUMsRUFBUyxHQUNUUSxFQUFhakMsT0FBT2tDLEtBQUtOLEdBRzdCLElBQUt0QyxFQUFJLEVBQUdBLEVBQUkyQyxFQUFXTixPQUFRckMsSUFDakN1QixFQUFNb0IsRUFBVzNDLEdBQ2IwQyxFQUFTRyxRQUFRdEIsSUFBUSxJQUM3QlksRUFBT1osR0FBT2UsRUFBT2YsSUFHdkIsT0FBT1ksRUFaVCxtQyxnQkNBQTs7Ozs7R0FPQyxXQUNBLGFBRUEsSUFBSVcsRUFBUyxHQUFHakIsZUFFaEIsU0FBU2tCLElBR1IsSUFGQSxJQUFJQyxFQUFVLEdBRUxoRCxFQUFJLEVBQUdBLEVBQUlvQyxVQUFVQyxPQUFRckMsSUFBSyxDQUMxQyxJQUFJaUQsRUFBTWIsVUFBVXBDLEdBQ3BCLEdBQUtpRCxFQUFMLENBRUEsSUFBSUMsU0FBaUJELEVBRXJCLEdBQWdCLFdBQVpDLEdBQW9DLFdBQVpBLEVBQzNCRixFQUFRRyxLQUFLRixRQUNQLEdBQUlHLE1BQU1DLFFBQVFKLElBQVFBLEVBQUlaLE9BQVEsQ0FDNUMsSUFBSWlCLEVBQVFQLEVBQVdSLE1BQU0sS0FBTVUsR0FDL0JLLEdBQ0hOLEVBQVFHLEtBQUtHLFFBRVIsR0FBZ0IsV0FBWkosRUFDVixJQUFLLElBQUkzQixLQUFPMEIsRUFDWEgsRUFBTzNDLEtBQUs4QyxFQUFLMUIsSUFBUTBCLEVBQUkxQixJQUNoQ3lCLEVBQVFHLEtBQUs1QixJQU1qQixPQUFPeUIsRUFBUU8sS0FBSyxLQUdnQnhELEVBQU9ELFNBQzNDaUQsRUFBV1MsUUFBVVQsRUFDckJoRCxFQUFPRCxRQUFVaUQsUUFLaEIsS0FGd0IsRUFBRixXQUN0QixPQUFPQSxHQUNQLFFBRm9CLE9BRXBCLGFBeENILEksY0NQQWhELEVBQU9ELFFBQVUyRCxXLGNDQWpCMUQsRUFBT0QsUUFBVTRELFUsNkJDQUYsU0FBU0MsRUFBZUMsRUFBVUMsR0FDL0NELEVBQVNoQyxVQUFZbEIsT0FBT1ksT0FBT3VDLEVBQVdqQyxXQUM5Q2dDLEVBQVNoQyxVQUFVa0MsWUFBY0YsRUFDakNBLEVBQVNHLFVBQVlGLEVBSHZCLG1DLDZCQ0FlLHFGLDhCQ2dEZjlELEVBQU9ELFFBNUJTLFNBQVNrRSxFQUFXQyxFQUFRQyxFQUFHQyxFQUFHOUQsRUFBR0MsRUFBRzhELEVBQUdDLEdBT3pELElBQUtMLEVBQVcsQ0FDZCxJQUFJTSxFQUNKLFFBQWVDLElBQVhOLEVBQ0ZLLEVBQVEsSUFBSUUsTUFDVixxSUFHRyxDQUNMLElBQUlDLEVBQU8sQ0FBQ1AsRUFBR0MsRUFBRzlELEVBQUdDLEVBQUc4RCxFQUFHQyxHQUN2QkssRUFBVyxHQUNmSixFQUFRLElBQUlFLE1BQ1ZQLEVBQU9VLFFBQVEsT0FBTyxXQUFhLE9BQU9GLEVBQUtDLFVBRTNDbkUsS0FBTyxzQkFJZixNQURBK0QsRUFBTU0sWUFBYyxFQUNkTixLLHdDQzFDQ08sR0FBbUIsRUFDbkJDLEdBQWdCLEVBRTNCLElBQ0UsSUFBSSxFQUFVLENBQ1osY0FDRSxPQUFPRCxHQUFtQixHQUc1QixXQUVFLE9BQU9DLEVBQWdCRCxHQUFtQixJQUsxQ0UsRUFBQSxJQUNGQyxPQUFPQyxpQkFBaUIsT0FBUSxFQUFTLEdBQ3pDRCxPQUFPRSxvQkFBb0IsT0FBUSxHQUFTLElBRTlDLE1BQU9kLElBNEJNLE1BckJmLFNBQTBCZSxFQUFNQyxFQUFXQyxFQUFTQyxHQUNsRCxHQUFJQSxHQUE4QixrQkFBWkEsSUFBMEJSLEVBQWUsQ0FDN0QsSUFBSVMsRUFBT0QsRUFBUUMsS0FDZkMsRUFBVUYsRUFBUUUsUUFDbEJDLEVBQWlCSixHQUVoQlAsR0FBaUJTLElBQ3BCRSxFQUFpQkosRUFBUUssUUFBVSxTQUFTQyxFQUFZQyxHQUN0RHBELEtBQUswQyxvQkFBb0JFLEVBQVdPLEVBQWFILEdBQ2pESCxFQUFRbEYsS0FBS3FDLEtBQU1vRCxJQUdyQlAsRUFBUUssT0FBU0QsR0FHbkJOLEVBQUtGLGlCQUFpQkcsRUFBV0ssRUFBZ0JaLEVBQW1CUyxFQUFVRSxHQUdoRkwsRUFBS0YsaUJBQWlCRyxFQUFXQyxFQUFTQyxJQ3RDN0IsTUFUZixTQUE2QkgsRUFBTUMsRUFBV0MsRUFBU0MsR0FDckQsSUFBSUUsRUFBVUYsR0FBOEIsa0JBQVpBLEVBQXdCQSxFQUFRRSxRQUFVRixFQUMxRUgsRUFBS0Qsb0JBQW9CRSxFQUFXQyxFQUFTRyxHQUV6Q0gsRUFBUUssUUFDVlAsRUFBS0Qsb0JBQW9CRSxFQUFXQyxFQUFRSyxPQUFRRixJQ0t6QyxJQVBmLFNBQWdCTCxFQUFNQyxFQUFXQyxFQUFTQyxHQUV4QyxPQURBLEVBQWlCSCxFQUFNQyxFQUFXQyxFQUFTQyxHQUNwQyxXQUNMLEVBQW9CSCxFQUFNQyxFQUFXQyxFQUFTQyxNLGNDTmxEdkYsRUFBT0QsUUFBVStGLHVCLDZCQ0FGLFNBQVNDLEVBQWNYLEdBQ3BDLE9BQU9BLEdBQVFBLEVBQUtXLGVBQWlCQyxTQUR2QyxtQyx5Q0NDZSxTQUFTQyxFQUFpQmIsRUFBTWMsR0FDN0MsT0NEYSxTQUFxQmQsR0FDbEMsSUFBSWUsRUFBTSxPQUFBSixFQUFBLEdBQWNYLEdBQ3hCLE9BQU9lLEdBQU9BLEVBQUlDLGFBQWVuQixPREQxQm9CLENBQVlqQixHQUFNYSxpQkFBaUJiLEVBQU1jLEdFRmxELElBQUlJLEVBQVMsV0NNYixJQUFJQyxFQUFZLE9BQ0QsU0FBU0MsRUFBbUJDLEdBQ3pDLE9EUGEsU0FBbUJBLEdBQ2hDLE9BQU9BLEVBQU83QixRQUFRMEIsRUFBUSxPQUFPSSxjQ005QkMsQ0FBVUYsR0FBUTdCLFFBQVEyQixFQUFXLFFDUjlDLElBQUlLLEVBQXNCLDhFQytCWCxJQTNCZixTQUFleEIsRUFBTXhELEdBQ25CLElBQUlpRixFQUFNLEdBQ05DLEVBQWEsR0FFakIsR0FBd0IsaUJBQWJsRixFQUNULE9BQU93RCxFQUFLMkIsTUFBTUMsaUJBQWlCLEVBQVVwRixLQUFjcUUsRUFBaUJiLEdBQU00QixpQkFBaUIsRUFBVXBGLElBRy9HakIsT0FBT2tDLEtBQUtqQixHQUFVcUYsU0FBUSxTQUFVekYsR0FDdEMsSUFBSU4sRUFBUVUsRUFBU0osR0FFaEJOLEdBQW1CLElBQVZBLEdEZEgsU0FBcUJBLEdBQ2xDLFNBQVVBLElBQVMwRixFQUFvQk0sS0FBS2hHLElDZS9CaUcsQ0FBWTNGLEdBR3JCcUYsR0FBTyxFQUFVckYsR0FBTyxLQUFPTixFQUFRLElBRnZDNEYsR0FBY3RGLEVBQU0sSUFBTU4sRUFBUSxLQUZsQ2tFLEVBQUsyQixNQUFNSyxlQUFlLEVBQVU1RixPQVFwQ3NGLElBQ0ZELEdBQU8sY0FBZ0JDLEVBQWEsS0FHdEMxQixFQUFLMkIsTUFBTU0sU0FBVyxJQUFNUixJLDZGQ0d2QixTQUFTUyxFQUFXOUYsR0FDekIsTUFBTyxVQUFZQSxFQUFJK0YsT0FBTyxHQUFHQyxjQUFnQmhHLEVBQUlpRyxPQUFPLEdDN0I5RCxTQUFTQyxFQUFleEUsR0FBTyxJQUFJMUIsRUFFbkMsU0FBc0JtRyxFQUFPQyxHQUFRLEdBQXFCLGlCQUFWRCxHQUFnQyxPQUFWQSxFQUFnQixPQUFPQSxFQUFPLElBQUlFLEVBQU9GLEVBQU0zRyxPQUFPOEcsYUFBYyxRQUFhdEQsSUFBVHFELEVBQW9CLENBQUUsSUFBSUUsRUFBTUYsRUFBS3pILEtBQUt1SCxFQUFPQyxHQUFRLFdBQVksR0FBbUIsaUJBQVJHLEVBQWtCLE9BQU9BLEVBQUssTUFBTSxJQUFJQyxVQUFVLGdEQUFtRCxPQUFpQixXQUFUSixFQUFvQkssT0FBU0MsUUFBUVAsR0FGdlVRLENBQWFqRixFQUFLLFVBQVcsTUFBc0IsaUJBQVIxQixFQUFtQkEsRUFBTXlHLE9BQU96RyxHQXFDckcsU0FBUzRHLEVBQWdCQyxFQUFPQyxHQUM3QyxPQUFPM0gsT0FBT2tDLEtBQUt5RixHQUFRQyxRQUFPLFNBQVVDLEVBQVFDLEdBQ2xELElBQUlDLEVBRUFDLEVBQU9ILEVBQ1BJLEVBQWVELEVBQUssRUFBaUJGLElBQ3JDSSxFQUFhRixFQUFLRixHQUNsQkssRUFBTyxZQUE4QkgsRUFBTSxDQUFDLEVBQWlCRixHQUFZQSxHQUFXTSxJQUFJckIsSUFFeEZzQixFQUFjVixFQUFPRyxHQUVyQlEsRUF6Q1IsU0FBNkJDLEVBQVdOLEVBQWN0RCxHQUNwRCxJQUFJNkQsRUFBYSxzQkFBcUIzRSxJQUFkMEUsR0FFcEJFLEVBQVksbUJBQVNSLEdBQ3JCUyxFQUFhRCxFQUFVLEdBQ3ZCRSxFQUFXRixFQUFVLEdBRXJCRyxPQUF1Qi9FLElBQWQwRSxFQUNUTSxFQUFVTCxFQUFXTSxRQVd6QixPQVZBTixFQUFXTSxRQUFVRixHQU1oQkEsR0FBVUMsR0FBV0gsSUFBZVQsR0FDdkNVLEVBQVNWLEdBR0osQ0FBQ1csRUFBU0wsRUFBWUcsRUFBWSx1QkFBWSxTQUFVbkksR0FDN0QsSUFBSyxJQUFJd0ksRUFBT3JILFVBQVVDLE9BQVFvQyxFQUFPLElBQUlyQixNQUFNcUcsRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSUMsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUNsR2pGLEVBQUtpRixFQUFPLEdBQUt0SCxVQUFVc0gsR0FHekJyRSxHQUFTQSxFQUFROUMsV0FBTSxFQUFRLENBQUN0QixHQUFPMEksT0FBT2xGLElBQ2xENEUsRUFBU3BJLEtBQ1IsQ0FBQ29FLEtBZXlCdUUsQ0FBb0JoQixFQUFZRCxFQUFjUCxFQUFNVyxJQUMzRTlILEVBQVErSCxFQUFxQixHQUM3QjNELEVBQVUyRCxFQUFxQixHQUVuQyxPQUFPLFlBQVMsR0FBSUgsSUFBT0osRUFBWSxJQUFjRCxHQUFhdkgsRUFBT3dILEVBQVVNLEdBQWUxRCxFQUFTb0QsTUFDMUdMLEcsc0ZDckNVLE1BUmYsU0FBeUJuSCxHQUN2QixJQUFJNEksRUFBTSxpQkFBTzVJLEdBSWpCLE9BSEEscUJBQVUsV0FDUjRJLEVBQUlMLFFBQVV2SSxJQUNiLENBQUNBLElBQ0c0SSxHQ2RNLFNBQVNDLEVBQWlCQyxHQUN2QyxJQUFJRixFQUFNLEVBQWdCRSxHQUMxQixPQUFPLHVCQUFZLFdBQ2pCLE9BQU9GLEVBQUlMLFNBQVdLLEVBQUlMLFFBQVFqSCxNQUFNc0gsRUFBS3pILGFBQzVDLENBQUN5SCxNLGdCQ05OLElBQUlHLEVBQU0sRUFBUSxJQUNGQyxFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVE3SSxXQUFhNkksRUFBUXpHLFFBQVV5RyxLQUcvQ0EsRUFBVSxDQUFDLENBQUNsSyxFQUFPQyxFQUFJaUssRUFBUyxNQUc5QyxJQUFJM0UsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVAwRSxFQUFJQyxFQUFTM0UsR0FJMUJ2RixFQUFPRCxRQUFVbUssRUFBUUMsUUFBVSxJLDZCQ2hCbkMsSUFDTUMsRUFERkMsRUFFSyxXQVVMLFlBVG9CLElBQVRELElBTVRBLEVBQU9FLFFBQVFyRixRQUFVZSxVQUFZQSxTQUFTdUUsTUFBUXRGLE9BQU91RixPQUd4REosR0FJUEssRUFBWSxXQUNkLElBQUlMLEVBQU8sR0FDWCxPQUFPLFNBQWtCaEksR0FDdkIsUUFBNEIsSUFBakJnSSxFQUFLaEksR0FBeUIsQ0FDdkMsSUFBSXNJLEVBQWMxRSxTQUFTMkUsY0FBY3ZJLEdBRXpDLEdBQUk2QyxPQUFPMkYsbUJBQXFCRixhQUF1QnpGLE9BQU8yRixrQkFDNUQsSUFHRUYsRUFBY0EsRUFBWUcsZ0JBQWdCQyxLQUMxQyxNQUFPekcsR0FFUHFHLEVBQWMsS0FJbEJOLEVBQUtoSSxHQUFVc0ksRUFHakIsT0FBT04sRUFBS2hJLElBcEJBLEdBd0JaMkksRUFBYyxHQUVsQixTQUFTQyxFQUFxQkMsR0FHNUIsSUFGQSxJQUFJekMsR0FBVSxFQUVMdkksRUFBSSxFQUFHQSxFQUFJOEssRUFBWXpJLE9BQVFyQyxJQUN0QyxHQUFJOEssRUFBWTlLLEdBQUdnTCxhQUFlQSxFQUFZLENBQzVDekMsRUFBU3ZJLEVBQ1QsTUFJSixPQUFPdUksRUFHVCxTQUFTMEMsRUFBYUMsRUFBTTVGLEdBSTFCLElBSEEsSUFBSTZGLEVBQWEsR0FDYkMsRUFBYyxHQUVUcEwsRUFBSSxFQUFHQSxFQUFJa0wsRUFBSzdJLE9BQVFyQyxJQUFLLENBQ3BDLElBQUlxTCxFQUFPSCxFQUFLbEwsR0FDWnNMLEVBQUtoRyxFQUFRaUcsS0FBT0YsRUFBSyxHQUFLL0YsRUFBUWlHLEtBQU9GLEVBQUssR0FDbERHLEVBQVFMLEVBQVdHLElBQU8sRUFDMUJOLEVBQWEsR0FBR3JCLE9BQU8yQixFQUFJLEtBQUszQixPQUFPNkIsR0FDM0NMLEVBQVdHLEdBQU1FLEVBQVEsRUFDekIsSUFBSUMsRUFBUVYsRUFBcUJDLEdBQzdCVSxFQUFNLENBQ1I5RSxJQUFLeUUsRUFBSyxHQUNWTSxNQUFPTixFQUFLLEdBQ1pPLFVBQVdQLEVBQUssS0FHSCxJQUFYSSxHQUNGWCxFQUFZVyxHQUFPSSxhQUNuQmYsRUFBWVcsR0FBT0ssUUFBUUosSUFFM0JaLEVBQVkzSCxLQUFLLENBQ2Y2SCxXQUFZQSxFQUNaYyxRQUFTQyxFQUFTTCxFQUFLcEcsR0FDdkJ1RyxXQUFZLElBSWhCVCxFQUFZakksS0FBSzZILEdBR25CLE9BQU9JLEVBR1QsU0FBU1ksRUFBbUIxRyxHQUMxQixJQUFJd0IsRUFBUWYsU0FBU2tHLGNBQWMsU0FDL0JDLEVBQWE1RyxFQUFRNEcsWUFBYyxHQUV2QyxRQUFnQyxJQUFyQkEsRUFBV0MsTUFBdUIsQ0FDM0MsSUFBSUEsRUFBbUQsS0FFbkRBLElBQ0ZELEVBQVdDLE1BQVFBLEdBUXZCLEdBSkF6TCxPQUFPa0MsS0FBS3NKLEdBQVlsRixTQUFRLFNBQVV6RixHQUN4Q3VGLEVBQU1zRixhQUFhN0ssRUFBSzJLLEVBQVczSyxPQUdQLG1CQUFuQitELEVBQVErRyxPQUNqQi9HLEVBQVErRyxPQUFPdkYsT0FDVixDQUNMLElBQUkzRSxFQUFTcUksRUFBVWxGLEVBQVErRyxRQUFVLFFBRXpDLElBQUtsSyxFQUNILE1BQU0sSUFBSXFDLE1BQU0sMkdBR2xCckMsRUFBT21LLFlBQVl4RixHQUdyQixPQUFPQSxFQWNULElBQ015RixFQURGQyxHQUNFRCxFQUFZLEdBQ1QsU0FBaUJkLEVBQU9nQixHQUU3QixPQURBRixFQUFVZCxHQUFTZ0IsRUFDWkYsRUFBVUcsT0FBT3JDLFNBQVM5RyxLQUFLLFFBSTFDLFNBQVNvSixFQUFvQjdGLEVBQU8yRSxFQUFPbUIsRUFBUWxCLEdBQ2pELElBQUk5RSxFQUFNZ0csRUFBUyxHQUFLbEIsRUFBSUMsTUFBUSxVQUFVaEMsT0FBTytCLEVBQUlDLE1BQU8sTUFBTWhDLE9BQU8rQixFQUFJOUUsSUFBSyxLQUFPOEUsRUFBSTlFLElBSWpHLEdBQUlFLEVBQU0rRixXQUNSL0YsRUFBTStGLFdBQVd6RixRQUFVb0YsRUFBWWYsRUFBTzdFLE9BQ3pDLENBQ0wsSUFBSWtHLEVBQVUvRyxTQUFTZ0gsZUFBZW5HLEdBQ2xDb0csRUFBYWxHLEVBQU1rRyxXQUVuQkEsRUFBV3ZCLElBQ2IzRSxFQUFNbUcsWUFBWUQsRUFBV3ZCLElBRzNCdUIsRUFBVzNLLE9BQ2J5RSxFQUFNb0csYUFBYUosRUFBU0UsRUFBV3ZCLElBRXZDM0UsRUFBTXdGLFlBQVlRLElBS3hCLFNBQVNLLEVBQVdyRyxFQUFPeEIsRUFBU29HLEdBQ2xDLElBQUk5RSxFQUFNOEUsRUFBSTlFLElBQ1YrRSxFQUFRRCxFQUFJQyxNQUNaQyxFQUFZRixFQUFJRSxVQWVwQixHQWJJRCxFQUNGN0UsRUFBTXNGLGFBQWEsUUFBU1QsR0FFNUI3RSxFQUFNc0csZ0JBQWdCLFNBR3BCeEIsR0FBYXlCLE9BQ2Z6RyxHQUFPLHVEQUF1RCtDLE9BQU8wRCxLQUFLQyxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVU3QixNQUFlLFFBTWxJOUUsRUFBTStGLFdBQ1IvRixFQUFNK0YsV0FBV3pGLFFBQVVSLE1BQ3RCLENBQ0wsS0FBT0UsRUFBTTRHLFlBQ1g1RyxFQUFNbUcsWUFBWW5HLEVBQU00RyxZQUcxQjVHLEVBQU13RixZQUFZdkcsU0FBU2dILGVBQWVuRyxLQUk5QyxJQUFJK0csRUFBWSxLQUNaQyxFQUFtQixFQUV2QixTQUFTN0IsRUFBU0wsRUFBS3BHLEdBQ3JCLElBQUl3QixFQUNBK0csRUFDQWpCLEVBRUosR0FBSXRILEVBQVFxSSxVQUFXLENBQ3JCLElBQUlHLEVBQWFGLElBQ2pCOUcsRUFBUTZHLElBQWNBLEVBQVkzQixFQUFtQjFHLElBQ3JEdUksRUFBU2xCLEVBQW9CbkwsS0FBSyxLQUFNc0YsRUFBT2dILEdBQVksR0FDM0RsQixFQUFTRCxFQUFvQm5MLEtBQUssS0FBTXNGLEVBQU9nSCxHQUFZLFFBRTNEaEgsRUFBUWtGLEVBQW1CMUcsR0FDM0J1SSxFQUFTVixFQUFXM0wsS0FBSyxLQUFNc0YsRUFBT3hCLEdBRXRDc0gsRUFBUyxZQXhGYixTQUE0QjlGLEdBRTFCLEdBQXlCLE9BQXJCQSxFQUFNaUgsV0FDUixPQUFPLEVBR1RqSCxFQUFNaUgsV0FBV2QsWUFBWW5HLEdBbUZ6QmtILENBQW1CbEgsSUFLdkIsT0FEQStHLEVBQU9uQyxHQUNBLFNBQXFCdUMsR0FDMUIsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9ySCxNQUFROEUsRUFBSTlFLEtBQU9xSCxFQUFPdEMsUUFBVUQsRUFBSUMsT0FBU3NDLEVBQU9yQyxZQUFjRixFQUFJRSxVQUNuRixPQUdGaUMsRUFBT25DLEVBQU11QyxRQUVickIsS0FLTjdNLEVBQU9ELFFBQVUsU0FBVW9MLEVBQU01RixJQUMvQkEsRUFBVUEsR0FBVyxJQUdScUksV0FBMEMsa0JBQXRCckksRUFBUXFJLFlBQ3ZDckksRUFBUXFJLFVBQVl2RCxLQUl0QixJQUFJOEQsRUFBa0JqRCxFQUR0QkMsRUFBT0EsR0FBUSxHQUMwQjVGLEdBQ3pDLE9BQU8sU0FBZ0I2SSxHQUdyQixHQUZBQSxFQUFVQSxHQUFXLEdBRTJCLG1CQUE1Q3pOLE9BQU9rQixVQUFVd00sU0FBU2pPLEtBQUtnTyxHQUFuQyxDQUlBLElBQUssSUFBSW5PLEVBQUksRUFBR0EsRUFBSWtPLEVBQWdCN0wsT0FBUXJDLElBQUssQ0FDL0MsSUFDSXlMLEVBQVFWLEVBREttRCxFQUFnQmxPLElBRWpDOEssRUFBWVcsR0FBT0ksYUFLckIsSUFGQSxJQUFJd0MsRUFBcUJwRCxFQUFha0QsRUFBUzdJLEdBRXRDZ0osRUFBSyxFQUFHQSxFQUFLSixFQUFnQjdMLE9BQVFpTSxJQUFNLENBQ2xELElBRUlDLEVBQVN4RCxFQUZLbUQsRUFBZ0JJLElBSUssSUFBbkN4RCxFQUFZeUQsR0FBUTFDLGFBQ3RCZixFQUFZeUQsR0FBUXpDLFVBRXBCaEIsRUFBWTBELE9BQU9ELEVBQVEsSUFJL0JMLEVBQWtCRyxNLGdDQzFRdEJ0TyxFQUFPRCxRQUFVMk8sSyw4R0NFYkMsRUFBZSxJQUFNQyxjQUFjLElBQ3hCRCxFQUFhRSxTQUNiRixFQUFhRyxTQWFyQixTQUFTQyxFQUFtQkMsRUFBUUMsR0FDekMsSUFBSUMsRUFBVyxxQkFBV1AsR0FDMUIsT0FBT0ssR0FBVUUsRUFBU0QsSUFBa0JBLEVDZ0IvQixNQTFCZixXQUNFLElBQUssSUFBSXZGLEVBQU9ySCxVQUFVQyxPQUFRNk0sRUFBUSxJQUFJOUwsTUFBTXFHLEdBQU9DLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDaEZ3RixFQUFNeEYsR0FBUXRILFVBQVVzSCxHQUcxQixPQUFPd0YsRUFBTXhDLFFBQU8sU0FBVXJJLEdBQzVCLE9BQVksTUFBTEEsS0FDTmlFLFFBQU8sU0FBVTZHLEVBQUs5SyxHQUN2QixHQUFpQixtQkFBTkEsRUFDVCxNQUFNLElBQUlHLE1BQU0sMkVBR2xCLE9BQVksT0FBUjJLLEVBQXFCOUssRUFDbEIsV0FDTCxJQUFLLElBQUkrSyxFQUFRaE4sVUFBVUMsT0FBUW9DLEVBQU8sSUFBSXJCLE1BQU1nTSxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BGNUssRUFBSzRLLEdBQVNqTixVQUFVaU4sR0FJMUJGLEVBQUk1TSxNQUFNQyxLQUFNaUMsR0FFaEJKLEVBQUU5QixNQUFNQyxLQUFNaUMsTUFFZixPQzNCTCxTQUFTNkssRUFBY0MsR0FDckIsT0FBUUEsR0FBd0IsTUFBaEJBLEVBQUtDLE9BV3ZCLElBQUlDLEVBQWEsSUFBTUMsWUFBVyxTQUFVaEgsRUFBTW1CLEdBQ2hELElBQUk4RixFQUFVakgsRUFBS2tILEdBQ2ZDLE9BQXdCLElBQVpGLEVBQXFCLElBQU1BLEVBQ3ZDRyxFQUFXcEgsRUFBS29ILFNBQ2hCQyxFQUFZckgsRUFBS3FILFVBQ2pCM0gsRUFBUSxZQUE4Qk0sRUFBTSxDQUFDLEtBQU0sV0FBWSxjQUUvRHNILEVBQWMsU0FBcUJwSyxHQUNyQyxJQUFJMkosRUFBT25ILEVBQU1tSCxLQUNiVSxFQUFVN0gsRUFBTTZILFNBRWhCSCxHQUFZUixFQUFjQyxLQUM1QjNKLEVBQU1zSyxpQkFHSkosRUFDRmxLLEVBQU11SyxrQkFJSkYsR0FDRkEsRUFBUXJLLElBdUJaLE9BWkkwSixFQUFjbEgsRUFBTW1ILFFBQ3RCbkgsRUFBTWdJLEtBQU9oSSxFQUFNZ0ksTUFBUSxTQUczQmhJLEVBQU1tSCxLQUFPbkgsRUFBTW1ILE1BQVEsS0FHekJPLElBQ0YxSCxFQUFNaUksVUFBWSxFQUNsQmpJLEVBQU0sa0JBQW1CLEdBR1AsSUFBTTZELGNBQWM0RCxFQUFXLFlBQVMsQ0FDMURoRyxJQUFLQSxHQUNKekIsRUFBTyxDQUNSNkgsUUFBU0QsRUFDVEQsVUFBVyxHQXZCTyxTQUF1Qm5LLEdBQ3ZCLE1BQWRBLEVBQU1yRSxNQUNScUUsRUFBTXNLLGlCQUNORixFQUFZcEssTUFvQmtDbUssU0FHcEROLEVBQVdhLFlBQWMsYUFDVixRQzFEWEMsRUFBUyxJQUFNYixZQUFXLFNBQVVoSCxFQUFNbUIsR0FDNUMsSUFBSTJHLEVBQVc5SCxFQUFLOEgsU0FDaEJDLEVBQVUvSCxFQUFLK0gsUUFDZkMsRUFBT2hJLEVBQUtnSSxLQUNaQyxFQUFTakksRUFBS2lJLE9BQ2RDLEVBQVlsSSxFQUFLa0ksVUFDakJDLEVBQVFuSSxFQUFLbUksTUFDYkMsRUFBT3BJLEVBQUtvSSxLQUNabEIsRUFBS2xILEVBQUtrSCxHQUNWeEgsRUFBUSxZQUE4Qk0sRUFBTSxDQUFDLFdBQVksVUFBVyxPQUFRLFNBQVUsWUFBYSxRQUFTLE9BQVEsT0FFcEhxRyxFQUFTRCxFQUFtQjBCLEVBQVUsT0FDdEN4TixFQUFVLElBQVc0TixFQUFXN0IsRUFBUTRCLEdBQVUsU0FBVTVCLEVBQVMsSUFBTTBCLEVBQVNJLEdBQVM5QixFQUFTLFNBQVUyQixHQUFRM0IsRUFBUyxJQUFNMkIsR0FFM0ksR0FBSXRJLEVBQU1tSCxLQUNSLE9BQW9CLElBQU10RCxjQUFjLEVBQVksWUFBUyxHQUFJN0QsRUFBTyxDQUN0RXdILEdBQUlBLEVBQ0ovRixJQUFLQSxFQUNMK0csVUFBVyxJQUFXNU4sRUFBU29GLEVBQU0wSCxVQUFZLGVBSWpEakcsSUFDRnpCLEVBQU15QixJQUFNQSxHQUdWaUgsRUFDRjFJLEVBQU0wSSxLQUFPQSxFQUNIbEIsSUFDVnhILEVBQU0wSSxLQUFPLFVBR2YsSUFBSWpCLEVBQVlELEdBQU0sU0FDdEIsT0FBb0IsSUFBTTNELGNBQWM0RCxFQUFXLFlBQVMsR0FBSXpILEVBQU8sQ0FDckV3SSxVQUFXNU4sUUFHZnVOLEVBQU9ELFlBQWMsU0FDckJDLEVBQU9RLGFBM0NZLENBQ2pCTixRQUFTLFVBQ1RFLFFBQVEsRUFDUmIsVUFBVSxHQXlDRyxRQ2xEUixNQUFNa0IsRUFBWSxJQUFNQyxRLE1DQS9CLE1BQU1DLEVBQWtCLENBQ3RCLElBQ0EsS0FDQSxJQUNBLElBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxNQUtJQyxFQUFjQyxHQUNsQixJQUFNQyxLQUFLQyxJQUFJLEdBQUlGLEVBQU8sSUFBTSxJQUU1QkcsRUFBY0MsR0FBeUIsR0FBSyxHQUFLSCxLQUFLSSxLQUFLRCxFQUFPLEtBSXhFLE1BQU1FLEVBTUosWUFBNkJDLEdBQUEsS0FBQUEsUUFDM0JuUCxLQUFLNE8sS0FBT0MsS0FBS08sTUFBTUwsRUFBV0ksSUFFbENuUCxLQUFLcVAsVUFBWVYsRUFBVzNPLEtBQUs0TyxNQUNqQzVPLEtBQUtqQyxLQXBCSSxDQUFDNlEsR0FBeUJGLEdBQU9FLEVBQU8sSUFBTSxJQW9CM0MsQ0FBSzVPLEtBQUs0TyxNQUN0QjVPLEtBQUtzUCxPQXBCTSxDQUFDVixHQUF5QkMsS0FBS1UsTUFBTVgsRUFBTyxHQUFLLEdBb0I5Q1UsQ0FBT3RQLEtBQUs0TyxPQVc5QixNQUFNQSxFQUFRSSxJQUNaLEdBQUlBLFFBQXFDLE9BRXpDLE1BQU0vUCxFQUFJLElBQUlpUSxFQUFLRixHQUNuQixNQUFPLENBQ0xLLFVBQVdMLEVBQ1hyUCxPQUFRVixFQUNSMlAsS0FBTUcsRUFBV0MsR0FDakJRLE1BaENVOU4sRUFnQ0N6QyxFQUFFb1EsVUFoQ1ExTixFQWdDR3FOLEVBaENtQixLQUFPSCxLQUFLSSxLQUFLdE4sRUFBSUQsS0FBdkQsSUFBQ0EsRUFBV0MsRyxzb0JDbEJ6QixNQUFNOE4sRUFBTWpCLElBT05rQixFQUNKLHNGQ0pGLFNBQVNDLEVBQXNCL0osR0FDN0IsTUFBT2dLLEVBQU1DLEdBQVcsb0JBQVMsSUFDMUJDLEVBQWNDLEdBQW1CLHFCQXVCeEMsT0FyQkEsb0JBQVUsS0FDUixJQUFJQyxHQUFVLEVBU2QsT0FQQXBLLEVBQU1xSyxVQUFVQyxPQUFPQyxLQUFNcEssS0FDdkJBLEVBQU9xSyxNQUFTSixJQUVwQkQsRUFBZ0JoSyxFQUFPdEgsT0FDdkJvUixHQUFTRCxNQUdKLEtBQ0xJLEdBQVUsSUFFWCxDQUFDSixJQUVKLG9CQUFVLEtBQ0poSyxFQUFNeUssUUFBVVAsR0FDbEJsSyxFQUFNeUssT0FBT1AsSUFFZCxDQUFDQSxJQUUwQixtQkFBbkJsSyxFQUFNMEssU0FDUjFLLEVBQU0wSyxTQUFTUixHQUVmbEssRUFBTTBLLFNDL0JqQixJQUFJQyxFQUFVLElBQU1yRCxZQUFXLFNBQVVoSCxFQUFNbUIsR0FDN0MsSUFBSTJHLEVBQVc5SCxFQUFLOEgsU0FDaEJDLEVBQVUvSCxFQUFLK0gsUUFDZnVDLEVBQVl0SyxFQUFLc0ssVUFDakJ0QyxFQUFPaEksRUFBS2dJLEtBQ1pvQyxFQUFXcEssRUFBS29LLFNBQ2hCbkQsRUFBVWpILEVBQUtrSCxHQUNmQyxPQUF3QixJQUFaRixFQUFxQixNQUFRQSxFQUN6Q2lCLEVBQVlsSSxFQUFLa0ksVUFDakJ4SSxFQUFRLFlBQThCTSxFQUFNLENBQUMsV0FBWSxVQUFXLFlBQWEsT0FBUSxXQUFZLEtBQU0sY0FHM0d1SyxHQURKekMsRUFBVzFCLEVBQW1CMEIsRUFBVSxZQUNQLElBQU13QyxFQUN2QyxPQUFvQixJQUFNL0csY0FBYzRELEVBQVcsWUFBUyxDQUMxRGhHLElBQUtBLEdBQ0p6QixFQUFPLENBQ1J3SSxVQUFXLElBQVdBLEVBQVdxQyxFQUFpQnZDLEdBQVF1QyxFQUFrQixJQUFNdkMsRUFBTUQsR0FBVyxRQUFVQSxLQUMzR3FDLE1BRU5DLEVBQVF6QyxZQUFjLFVBQ1AsUUNqQmYsTUFBTSxFQUFNVSxJQVNMLFNBQVNrQyxHQUFjLGVBQzVCQyxFQUFjLFVBQ2RDLEVBQVMsU0FDVEMsSUFFQSxNQUFPQyxFQUFXQyxHQUFnQixtQkFBb0IsS0FDL0NDLEVBQVNDLEdBQWMsb0JBQVMsSUFDaENDLEVBQVVDLEdBQWUsb0JBQVMsR0FFekMsb0JBQVUsS0FDUixJQUFLSCxFQUNILE9BRUYsRUFBSUksS0FBSywyQkFDVCxNQUFNMVMsRUFBSTJTLFdBQVcsS0FDbkJGLEdBQVksR0FDWkYsR0FBVyxJQUNWTCxHQUlILE9BRkEsRUFBSVEsS0FBSyw2QkFBOEIxUyxFQUFHa1MsR0FFbkMsS0FDTCxFQUFJUSxLQUFLLCtCQUFnQzFTLEdBQ3pDNFMsYUFBYTVTLEtBRWQsQ0FBQ3NTLElBRUosb0JBQVUsS0FDSkUsSUFDRixFQUFJRSxLQUFLLHdCQUNUUCxFQUFTQyxLQUVWLENBQUNJLEVBQVVKLElBRWQsTUFRTVMsRUFBU1AsRUFHYixrQkFBQyxFQUFPLENBQUNSLFVBQVUsT0FBT3ZDLFFBQVEsV0FGbEMsMkNBS0YsT0FBTzBDLEVBQ0wsa0JBQUNoQixFQUFrQixDQUFDTSxVQUFXVSxFQUFnQk4sT0FmOUIvUSxJQUNqQixNQUFNa1MsRUFBZVYsRUFBVTNKLE9BQU8sQ0FBQzdILElBQ3ZDeVIsRUFBYVMsR0FDUlIsR0FDSEMsR0FBVyxLQVlYLDRCQUFLTSxJQUdQLGtCQUFDLEVBQU8sQ0FBQ2YsVUFBVSxTQUFTdkMsUUFBUSxZQ2pFeEMsSUFHSXdELEVBQVksSUFBTXZFLFlBQVcsU0FBVWhILEVBQU1tQixHQUMvQyxJQUFJMkcsRUFBVzlILEVBQUs4SCxTQUNoQjBELEVBQVF4TCxFQUFLd0wsTUFDYnZFLEVBQVVqSCxFQUFLa0gsR0FDZkMsT0FBd0IsSUFBWkYsRUFBcUIsTUFBUUEsRUFDekNpQixFQUFZbEksRUFBS2tJLFVBQ2pCeEksRUFBUSxZQUE4Qk0sRUFBTSxDQUFDLFdBQVksUUFBUyxLQUFNLGNBRXhFcUcsRUFBU0QsRUFBbUIwQixFQUFVLGFBQ3RDMkQsRUFBMEIsaUJBQVZELEVBQXFCLElBQU1BLEVBQVEsU0FDdkQsT0FBb0IsSUFBTWpJLGNBQWM0RCxFQUFXLFlBQVMsQ0FDMURoRyxJQUFLQSxHQUNKekIsRUFBTyxDQUNSd0ksVUFBVyxJQUFXQSxFQUFXc0QsRUFBUSxHQUFLbkYsRUFBU29GLEVBQVNwRixTQUdwRWtGLEVBQVUzRCxZQUFjLFlBQ3hCMkQsRUFBVWxELGFBcEJTLENBQ2pCbUQsT0FBTyxHQW9CTSxRQ3JCWEUsRUFBZSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFJeENDLEVBQU0sSUFBTTNFLFlBQVcsU0FBVWhILEVBQU1tQixHQUN6QyxJQUFJMkcsRUFBVzlILEVBQUs4SCxTQUNoQkksRUFBWWxJLEVBQUtrSSxVQUNqQjBELEVBQVk1TCxFQUFLNEwsVUFDakIzRSxFQUFVakgsRUFBS2tILEdBQ2ZDLE9BQXdCLElBQVpGLEVBQXFCLE1BQVFBLEVBQ3pDdkgsRUFBUSxZQUE4Qk0sRUFBTSxDQUFDLFdBQVksWUFBYSxZQUFhLE9BRW5GNkwsRUFBb0J6RixFQUFtQjBCLEVBQVUsT0FDakRnRSxFQUFhRCxFQUFvQixRQUNqQ3ZSLEVBQVUsR0FlZCxPQWRBb1IsRUFBYXBOLFNBQVEsU0FBVXlOLEdBQzdCLElBRUlDLEVBRkF6TCxFQUFZYixFQUFNcU0sVUFDZnJNLEVBQU1xTSxHQVNiLElBQUlFLEVBQXFCLE9BQWJGLEVBQW9CLElBQU1BLEVBQVcsR0FDckMsT0FOVkMsRUFEZSxNQUFiekwsR0FBMEMsaUJBQWRBLEVBQ3ZCQSxFQUFVeUwsS0FFVnpMLElBSVNqRyxFQUFRRyxLQUFLLEdBQUtxUixFQUFhRyxFQUFRLElBQU1ELE1BRTdDLElBQU16SSxjQUFjNEQsRUFBVyxZQUFTLENBQzFEaEcsSUFBS0EsR0FDSnpCLEVBQU8sQ0FDUndJLFVBQVcsSUFBV3JPLFdBQU0sRUFBUSxDQUFDcU8sRUFBVzJELEVBQW1CRCxHQUFhLGNBQWMzSyxPQUFPM0csVUFHekdxUixFQUFJL0QsWUFBYyxNQUNsQitELEVBQUl0RCxhQW5DZSxDQUNqQnVELFdBQVcsR0FtQ0UsUUNyQ1gsRUFBZSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDeENNLEVBQU0sSUFBTWxGLFlBQ2hCLFNBQVVoSCxFQUFNbUIsR0FDZCxJQUFJMkcsRUFBVzlILEVBQUs4SCxTQUNoQkksRUFBWWxJLEVBQUtrSSxVQUNqQmpCLEVBQVVqSCxFQUFLa0gsR0FDZkMsT0FBd0IsSUFBWkYsRUFBcUIsTUFBUUEsRUFDekN2SCxFQUFRLFlBQThCTSxFQUFNLENBQUMsV0FBWSxZQUFhLE9BRXRFcUcsRUFBU0QsRUFBbUIwQixFQUFVLE9BQ3RDcUUsRUFBUSxHQUNSN1IsRUFBVSxHQTJCZCxPQTFCQSxFQUFhZ0UsU0FBUSxTQUFVeU4sR0FDN0IsSUFFSUssRUFDQUMsRUFDQUMsRUFKQS9MLEVBQVliLEVBQU1xTSxHQU10QixVQUxPck0sRUFBTXFNLEdBS1ksaUJBQWR4TCxHQUF1QyxNQUFiQSxFQUFtQixDQUN0RCxJQUFJZ00sRUFBa0JoTSxFQUFVNkwsS0FDaENBLE9BQTJCLElBQXBCRyxHQUFvQ0EsRUFDM0NGLEVBQVM5TCxFQUFVOEwsT0FDbkJDLEVBQVEvTCxFQUFVK0wsV0FFbEJGLEVBQU83TCxFQUdULElBQUkwTCxFQUFxQixPQUFiRixFQUFvQixJQUFNQSxFQUFXLEdBQzdDSyxHQUFNRCxFQUFNMVIsTUFBYyxJQUFUMlIsRUFBZ0IsR0FBSy9GLEVBQVM0RixFQUFRLEdBQUs1RixFQUFTNEYsRUFBUSxJQUFNRyxHQUMxRSxNQUFURSxHQUFlaFMsRUFBUUcsS0FBSyxRQUFVd1IsRUFBUSxJQUFNSyxHQUMxQyxNQUFWRCxHQUFnQi9SLEVBQVFHLEtBQUssU0FBV3dSLEVBQVEsSUFBTUksTUFHdkRGLEVBQU14UyxRQUNUd1MsRUFBTTFSLEtBQUs0TCxHQUdPLElBQU05QyxjQUFjNEQsRUFBVyxZQUFTLEdBQUl6SCxFQUFPLENBQ3JFeUIsSUFBS0EsRUFDTCtHLFVBQVcsSUFBV3JPLFdBQU0sRUFBUSxDQUFDcU8sR0FBV2pILE9BQU9rTCxFQUFPN1IsVUFHbEU0UixFQUFJdEUsWUFBYyxNQUNILFEsdUNDOUNtQnZMLEVBQUEsR0FBa0NDLE9BYXBFLFNBQVNrUSxFQUFxQkMsRUFBU0MsRUFBVUMsUUFDL0IsSUFBWkEsSUFDRkEsRUFBVSxHQUdaLElBQUlDLEdBQVMsRUFDVEMsRUFBUzFCLFlBQVcsV0FDakJ5QixHQWJULFNBQThCSCxHQUM1QixJQUFJSyxFQUFNelAsU0FBUzBQLFlBQVksY0FDL0JELEVBQUlFLFVBQVUsaUJBQWlCLEdBQU0sR0FDckNQLEVBQVFRLGNBQWNILEdBVVBJLENBQXFCVCxLQUNqQ0MsRUFBV0MsR0FDVnpJLEVBQVMsT0FBQWlKLEVBQUEsR0FBT1YsRUFBUyxpQkFBaUIsV0FDNUNHLEdBQVMsSUFDUixDQUNEL1AsTUFBTSxJQUVSLE9BQU8sV0FDTHVPLGFBQWF5QixHQUNiM0ksS0FjVyxNQVZmLFNBQXVCdUksRUFBUzlQLEVBQVMrUCxHQWhDbEMsSUFBdUJqUSxFQUN4QjJRLEVBQ0FDLEVBK0JZLE1BQVpYLElBakN3QmpRLEVBaUNtQmdRLEVBaEMzQ1csRUFBTSxPQUFBbFAsRUFBQSxHQUFJekIsRUFBTSx1QkFBeUIsR0FDekM0USxHQUE4QixJQUF2QkQsRUFBSWpULFFBQVEsTUFBZSxJQUFPLEVBK0J2QnVTLEVBOUJmWSxXQUFXRixHQUFPQyxHQThCa0MsR0FDM0QsSUFBSUUsRUFBZ0JmLEVBQXFCQyxFQUFTQyxHQUM5Q3hJLEVBQVMsT0FBQWlKLEVBQUEsR0FBT1YsRUFBUyxnQkFBaUI5UCxHQUM5QyxPQUFPLFdBQ0w0USxJQUNBckosTSx1QkMxQ1csR0FDSCxFQ0FHLE1BQU0rQixjQUFjLE1Dd0cvQixHQUEwQixTQUFVdUgsR0FHdEMsU0FBU0MsRUFBVy9OLEVBQU9nTyxHQUN6QixJQUFJQyxFQUVKQSxFQUFRSCxFQUFpQi9WLEtBQUtxQyxLQUFNNEYsRUFBT2dPLElBQVk1VCxLQUN2RCxJQUdJOFQsRUFEQUMsRUFGY0gsTUFFdUJJLFdBQWFwTyxFQUFNcU8sTUFBUXJPLEVBQU1tTyxPQXVCMUUsT0FyQkFGLEVBQU1LLGFBQWUsS0FFakJ0TyxFQUFNdU8sR0FDSkosR0FDRkQsRUEvR1ksU0FnSFpELEVBQU1LLGFBL0dRLFlBaUhkSixFQWhIYSxVQW9IYkEsRUFERWxPLEVBQU13TyxlQUFpQnhPLEVBQU15TyxhQXRIaEIsWUFDSCxTQTRIaEJSLEVBQU1TLE1BQVEsQ0FDWkMsT0FBUVQsR0FFVkQsRUFBTVcsYUFBZSxLQUNkWCxFQS9CVCxZQUFlRixFQUFZRCxHQWtDM0JDLEVBQVdjLHlCQUEyQixTQUFrQ3ZPLEVBQU13TyxHQUc1RSxPQUZheE8sRUFBS2lPLElBcklDLGNBdUlMTyxFQUFVSCxPQUNmLENBQ0xBLE9BeElZLFVBNElULE1BbUJULElBQUlJLEVBQVNoQixFQUFXdlUsVUEwT3hCLE9BeE9BdVYsRUFBT0Msa0JBQW9CLFdBQ3pCNVUsS0FBSzZVLGNBQWEsRUFBTTdVLEtBQUtrVSxlQUcvQlMsRUFBT0csbUJBQXFCLFNBQTRCQyxHQUN0RCxJQUFJQyxFQUFhLEtBRWpCLEdBQUlELElBQWMvVSxLQUFLNEYsTUFBTyxDQUM1QixJQUFJMk8sRUFBU3ZVLEtBQUtzVSxNQUFNQyxPQUVwQnZVLEtBQUs0RixNQUFNdU8sR0ExS0MsYUEyS1ZJLEdBMUtTLFlBMEtjQSxJQUN6QlMsRUE1S1kseUJBK0tWVCxHQTlLUyxZQThLY0EsSUFDekJTLEVBOUtXLFdBbUxqQmhWLEtBQUs2VSxjQUFhLEVBQU9HLElBRzNCTCxFQUFPTSxxQkFBdUIsV0FDNUJqVixLQUFLa1Ysc0JBR1BQLEVBQU9RLFlBQWMsV0FDbkIsSUFDSUMsRUFBTW5CLEVBQU9GLEVBRGJzQixFQUFVclYsS0FBSzRGLE1BQU15UCxRQVd6QixPQVRBRCxFQUFPbkIsRUFBUUYsRUFBU3NCLEVBRVQsTUFBWEEsR0FBc0MsaUJBQVpBLElBQzVCRCxFQUFPQyxFQUFRRCxLQUNmbkIsRUFBUW9CLEVBQVFwQixNQUVoQkYsT0FBNEJoUyxJQUFuQnNULEVBQVF0QixPQUF1QnNCLEVBQVF0QixPQUFTRSxHQUdwRCxDQUNMbUIsS0FBTUEsRUFDTm5CLE1BQU9BLEVBQ1BGLE9BQVFBLElBSVpZLEVBQU9FLGFBQWUsU0FBc0JTLEVBQVVOLFFBQ25DLElBQWJNLElBQ0ZBLEdBQVcsR0FHTSxPQUFmTixHQUVGaFYsS0FBS2tWLHFCQXROVyxhQXdOWkYsRUFDRmhWLEtBQUt1VixhQUFhRCxHQUVsQnRWLEtBQUt3VixlQUVFeFYsS0FBSzRGLE1BQU13TyxlQTlOTixXQThOdUJwVSxLQUFLc1UsTUFBTUMsUUFDaER2VSxLQUFLNkcsU0FBUyxDQUNaME4sT0FqT2UsZUFzT3JCSSxFQUFPWSxhQUFlLFNBQXNCRCxHQUMxQyxJQUFJRyxFQUFTelYsS0FFVGlVLEVBQVFqVSxLQUFLNEYsTUFBTXFPLE1BQ25CeUIsRUFBWTFWLEtBQUs0VCxRQUFVNVQsS0FBSzRULFFBQVFJLFdBQWFzQixFQUVyREssRUFBUTNWLEtBQUs0RixNQUFNZ1EsUUFBVSxDQUFDRixHQUFhLENBQUMsSUFBU0csWUFBWTdWLE1BQU8wVixHQUN4RUksRUFBWUgsRUFBTSxHQUNsQkksRUFBaUJKLEVBQU0sR0FFdkJLLEVBQVdoVyxLQUFLbVYsY0FDaEJjLEVBQWVQLEVBQVlNLEVBQVNqQyxPQUFTaUMsRUFBUy9CLE9BR3JEcUIsSUFBYXJCLEdBQVNwTyxFQUN6QjdGLEtBQUtrVyxhQUFhLENBQ2hCM0IsT0FuUGEsWUFvUFosV0FDRGtCLEVBQU83UCxNQUFNdVEsVUFBVUwsT0FLM0I5VixLQUFLNEYsTUFBTXdRLFFBQVFOLEVBQVdDLEdBQzlCL1YsS0FBS2tXLGFBQWEsQ0FDaEIzQixPQTdQZ0IsYUE4UGYsV0FDRGtCLEVBQU83UCxNQUFNeVEsV0FBV1AsRUFBV0MsR0FFbkNOLEVBQU9hLGdCQUFnQkwsR0FBYyxXQUNuQ1IsRUFBT1MsYUFBYSxDQUNsQjNCLE9BbFFXLFlBbVFWLFdBQ0RrQixFQUFPN1AsTUFBTXVRLFVBQVVMLEVBQVdDLGNBTTFDcEIsRUFBT2EsWUFBYyxXQUNuQixJQUFJZSxFQUFTdlcsS0FFVG9WLEVBQU9wVixLQUFLNEYsTUFBTXdQLEtBQ2xCWSxFQUFXaFcsS0FBS21WLGNBQ2hCVyxFQUFZOVYsS0FBSzRGLE1BQU1nUSxhQUFVN1QsRUFBWSxJQUFTOFQsWUFBWTdWLE1BRWpFb1YsSUFBUXZQLEdBU2I3RixLQUFLNEYsTUFBTTRRLE9BQU9WLEdBQ2xCOVYsS0FBS2tXLGFBQWEsQ0FDaEIzQixPQTNSZSxZQTRSZCxXQUNEZ0MsRUFBTzNRLE1BQU02USxVQUFVWCxHQUV2QlMsRUFBT0QsZ0JBQWdCTixFQUFTWixNQUFNLFdBQ3BDbUIsRUFBT0wsYUFBYSxDQUNsQjNCLE9BcFNVLFdBcVNULFdBQ0RnQyxFQUFPM1EsTUFBTThRLFNBQVNaLGFBbEIxQjlWLEtBQUtrVyxhQUFhLENBQ2hCM0IsT0FyUlksV0FzUlgsV0FDRGdDLEVBQU8zUSxNQUFNOFEsU0FBU1osT0FxQjVCbkIsRUFBT08sbUJBQXFCLFdBQ0EsT0FBdEJsVixLQUFLd1UsZUFDUHhVLEtBQUt3VSxhQUFhbUMsU0FDbEIzVyxLQUFLd1UsYUFBZSxPQUl4QkcsRUFBT3VCLGFBQWUsU0FBc0JVLEVBQVdDLEdBSXJEQSxFQUFXN1csS0FBSzhXLGdCQUFnQkQsR0FDaEM3VyxLQUFLNkcsU0FBUytQLEVBQVdDLElBRzNCbEMsRUFBT21DLGdCQUFrQixTQUF5QkQsR0FDaEQsSUFBSUUsRUFBUy9XLEtBRVRtTyxHQUFTLEVBY2IsT0FaQW5PLEtBQUt3VSxhQUFlLFNBQVVwUixHQUN4QitLLElBQ0ZBLEdBQVMsRUFDVDRJLEVBQU92QyxhQUFlLEtBQ3RCcUMsRUFBU3pULEtBSWJwRCxLQUFLd1UsYUFBYW1DLE9BQVMsV0FDekJ4SSxHQUFTLEdBR0puTyxLQUFLd1UsY0FHZEcsRUFBTzJCLGdCQUFrQixTQUF5QmpCLEVBQVN4UyxHQUN6RDdDLEtBQUs4VyxnQkFBZ0JqVSxHQUNyQixJQUFJRixFQUFPM0MsS0FBSzRGLE1BQU1nUSxRQUFVNVYsS0FBSzRGLE1BQU1nUSxRQUFRNU8sUUFBVSxJQUFTNk8sWUFBWTdWLE1BQzlFZ1gsRUFBMEMsTUFBWDNCLElBQW9CclYsS0FBSzRGLE1BQU1xUixlQUVsRSxHQUFLdFUsSUFBUXFVLEVBQWIsQ0FLQSxHQUFJaFgsS0FBSzRGLE1BQU1xUixlQUFnQixDQUM3QixJQUFJQyxFQUFRbFgsS0FBSzRGLE1BQU1nUSxRQUFVLENBQUM1VixLQUFLd1UsY0FBZ0IsQ0FBQzdSLEVBQU0zQyxLQUFLd1UsY0FDL0RzQixFQUFZb0IsRUFBTSxHQUNsQkMsRUFBb0JELEVBQU0sR0FFOUJsWCxLQUFLNEYsTUFBTXFSLGVBQWVuQixFQUFXcUIsR0FHeEIsTUFBWDlCLEdBQ0ZoRSxXQUFXclIsS0FBS3dVLGFBQWNhLFFBYjlCaEUsV0FBV3JSLEtBQUt3VSxhQUFjLElBaUJsQ0csRUFBT3lDLE9BQVMsV0FDZCxJQUFJN0MsRUFBU3ZVLEtBQUtzVSxNQUFNQyxPQUV4QixHQTFXbUIsY0EwV2ZBLEVBQ0YsT0FBTyxLQUdULElBQUk4QyxFQUFjclgsS0FBSzRGLE1BQ25CMEssRUFBVytHLEVBQVkvRyxTQWdCdkJnSCxHQWZNRCxFQUFZbEQsR0FDRmtELEVBQVloRCxhQUNYZ0QsRUFBWWpELGNBQ25CaUQsRUFBWXRELE9BQ2JzRCxFQUFZcEQsTUFDYm9ELEVBQVlqQyxLQUNUaUMsRUFBWWhDLFFBQ0xnQyxFQUFZSixlQUNuQkksRUFBWWpCLFFBQ1RpQixFQUFZaEIsV0FDYmdCLEVBQVlsQixVQUNma0IsRUFBWWIsT0FDVGEsRUFBWVosVUFDYlksRUFBWVgsU0FDYlcsRUFBWXpCLFFBQ1YsWUFBOEJ5QixFQUFhLENBQUMsV0FBWSxLQUFNLGVBQWdCLGdCQUFpQixTQUFVLFFBQVMsT0FBUSxVQUFXLGlCQUFrQixVQUFXLGFBQWMsWUFBYSxTQUFVLFlBQWEsV0FBWSxhQUVqUCxPQUdFLElBQU01TixjQUFjOE4sRUFBdUJsTCxTQUFVLENBQ25ENU4sTUFBTyxNQUNjLG1CQUFiNlIsRUFBMEJBLEVBQVNpRSxFQUFRK0MsR0FBYyxJQUFNRSxhQUFhLElBQU1DLFNBQVNDLEtBQUtwSCxHQUFXZ0gsS0FJbEgzRCxFQXpTcUIsQ0EwUzVCLElBQU10RyxXQTRMUixTQUFTc0ssTUExTFQsR0FBV0MsWUFBY0wsRUFDekIsR0FBV00sVUF1TFAsR0FJSixHQUFXdEosYUFBZSxDQUN4QjRGLElBQUksRUFDSkUsY0FBYyxFQUNkRCxlQUFlLEVBQ2ZMLFFBQVEsRUFDUkUsT0FBTyxFQUNQbUIsTUFBTSxFQUNOZ0IsUUFBU3VCLEdBQ1R0QixXQUFZc0IsR0FDWnhCLFVBQVd3QixHQUNYbkIsT0FBUW1CLEdBQ1JsQixVQUFXa0IsR0FDWGpCLFNBQVVpQixJQUVaLEdBQVdHLFVBdmxCWSxZQXdsQnZCLEdBQVdDLE9BdmxCUyxTQXdsQnBCLEdBQVdDLFNBdmxCVyxXQXdsQnRCLEdBQVdDLFFBdmxCVSxVQXdsQnJCLEdBQVdDLFFBdmxCVSxVQXdsQk4sSUNqbUJYQyxHRGltQlcsTUMxbEJmLElBT0lDLEtBQWNELEdBQWMsSUFBd0IsU0FBSSxPQUFRQSxHQUFtQixRQUFJLE9BQVFBLElBQy9GRSxHQUFPLElBQU1uTCxZQUFXLFNBQVVoSCxFQUFNbUIsR0FDMUMsSUFBSStHLEVBQVlsSSxFQUFLa0ksVUFDakJrQyxFQUFXcEssRUFBS29LLFNBQ2hCMUssRUFBUSxZQUE4Qk0sRUFBTSxDQUFDLFlBQWEsYUFFMURvUyxFQUFjLHVCQUFZLFNBQVUzVixJQ3JCM0IsU0FBOEJBLEdBRTNDQSxFQUFLNFYsYURvQkhDLENBQXFCN1YsR0FDakJpRCxFQUFNd1EsU0FBU3hRLEVBQU13USxRQUFRelQsS0FDaEMsQ0FBQ2lELElBQ0osT0FBb0IsSUFBTTZELGNBQWMsR0FBWSxZQUFTLENBQzNEcEMsSUFBS0EsRUFDTDRQLGVBQWdCLEdBQ2ZyUixFQUFPLENBQ1J3USxRQUFTa0MsS0FDUCxTQUFVL0QsRUFBUWtFLEdBQ3BCLE9BQU8sSUFBTWpCLGFBQWFsSCxFQUFVLFlBQVMsR0FBSW1JLEVBQVksQ0FDM0RySyxVQUFXLElBQVcsT0FBUUEsRUFBV2tDLEVBQVMxSyxNQUFNd0ksVUFBV2dLLEdBQVc3RCxhQUlwRjhELEdBQUs5SixhQTVCYyxDQUNqQjRGLElBQUksRUFDSmtCLFFBQVMsSUFDVGhCLGNBQWMsRUFDZEQsZUFBZSxFQUNmTCxRQUFRLEdBd0JWc0UsR0FBS3ZLLFlBQWMsT0FDSixVRW5DWCtKLEdBQVksQ0FDZHRHLE1BQU8sSUFBVXZOLE9BQU8wVSxXQUN4QmpMLFFBQVMsSUFBVWtMLE1BS2pCQyxHQUFjLElBQU0xTCxZQUFXLFNBQVVoSCxFQUFNbUIsR0FDakQsSUFBSWtLLEVBQVFyTCxFQUFLcUwsTUFDYjlELEVBQVV2SCxFQUFLdUgsUUFDZlcsRUFBWWxJLEVBQUtrSSxVQUNqQnhJLEVBQVEsWUFBOEJNLEVBQU0sQ0FBQyxRQUFTLFVBQVcsY0FFckUsT0FBb0IsSUFBTXVELGNBQWMsU0FBVSxZQUFTLENBQ3pEcEMsSUFBS0EsRUFDTGlILEtBQU0sU0FDTkYsVUFBVyxJQUFXLFFBQVNBLEdBQy9CWCxRQUFTQSxHQUNSN0gsR0FBcUIsSUFBTTZELGNBQWMsT0FBUSxDQUNsRCxjQUFlLFFBQ2QsS0FBc0IsSUFBTUEsY0FBYyxPQUFRLENBQ25EMkUsVUFBVyxXQUNWbUQsT0FFTHFILEdBQVk5SyxZQUFjLGNBQzFCOEssR0FBWWYsVUFBWUEsR0FDeEJlLEdBQVlySyxhQXRCTyxDQUNqQmdELE1BQU8sU0FzQk0sVUNoQ1hzSCxHQUFVLFFDT2QsSUFBSSxHQUFhLFNBQW9CdkYsR0FDbkMsT0FBT0EsRUFBSSxHQUFHdk8sZURQaUJmLEVDT1FzUCxFRE5oQ3RQLEVBQU83QixRQUFRMFcsSUFBUyxTQUFVQyxFQUFHQyxHQUMxQyxPQUFPQSxFQUFJaFUsa0JDSytCaVUsTUFBTSxHRFByQyxJQUFrQmhWLEdDV2xCLFNBQVNpVixHQUFtQjFNLEVBQVEyTSxHQUNqRCxJQUFJaFQsT0FBaUIsSUFBVmdULEVBQW1CLEdBQUtBLEVBQy9CQyxFQUFtQmpULEVBQUs0SCxZQUN4QkEsT0FBbUMsSUFBckJxTCxFQUE4QixHQUFXNU0sR0FBVTRNLEVBQ2pFOUwsRUFBWW5ILEVBQUttSCxVQUNqQmtCLEVBQWVySSxFQUFLcUksYUFFcEI2SyxFQUFjLElBQU1sTSxZQUFXLFNBQVV5SSxFQUFPdE8sR0FDbEQsSUFBSStHLEVBQVl1SCxFQUFNdkgsVUFDbEJKLEVBQVcySCxFQUFNM0gsU0FDakJxTCxFQUFXMUQsRUFBTXZJLEdBQ2pCa00sT0FBbUIsSUFBYkQsRUFBc0JoTSxHQUFhLE1BQVFnTSxFQUNqRHpULEVBQVEsWUFBOEIrUCxFQUFPLENBQUMsWUFBYSxXQUFZLE9BRXZFNEQsRUFBaUJqTixFQUFtQjBCLEVBQVV6QixHQUNsRCxPQUFvQixJQUFNOUMsY0FBYzZQLEVBQUssWUFBUyxDQUNwRGpTLElBQUtBLEVBQ0wrRyxVQUFXLElBQVdBLEVBQVdtTCxJQUNoQzNULE9BSUwsT0FGQXdULEVBQVk3SyxhQUFlQSxFQUMzQjZLLEVBQVl0TCxZQUFjQSxFQUNuQnNMLEVDdEJULElDVGdCLEdEU1pJLElDVFksR0RTcUIsS0NSNUIsSUFBTXRNLFlBQVcsU0FBVTVOLEVBQUcrSCxHQUNuQyxPQUFvQixJQUFNb0MsY0FBYyxNQUFPLFlBQVMsR0FBSW5LLEVBQUcsQ0FDN0QrSCxJQUFLQSxFQUNMK0csVUFBVyxJQUFXOU8sRUFBRThPLFVBQVdBLFdETXpDb0wsR0FBYzFMLFlBQWMsZ0JBQzVCLElBQUkyTCxHQUFlUixHQUFtQixnQkFBaUIsQ0FDckQ1TCxVQUFXbU0sS0FFVEUsR0FBWVQsR0FBbUIsYUFBYyxDQUMvQzVMLFVBQVcsSUFFVCxHQUFlLENBQ2pCc00sTUFBTSxFQUNOQyxXQUFZLEdBQ1pDLFdBQVksZUFFVkMsR0FBUSxJQUFNNU0sWUFBVyxTQUFVNk0sRUFBbUIxUyxHQUN4RCxJQUFJMlMsRUFBbUIsWUFBZ0JELEVBQW1CLENBQ3hESixLQUFNLFlBRUozTCxFQUFXZ00sRUFBaUJoTSxTQUM1QjJMLEVBQU9LLEVBQWlCTCxLQUN4QkUsRUFBYUcsRUFBaUJILFdBQzlCekwsRUFBWTRMLEVBQWlCNUwsVUFDN0JrQyxFQUFXMEosRUFBaUIxSixTQUM1QnJDLEVBQVUrTCxFQUFpQi9MLFFBQzNCZ00sRUFBVUQsRUFBaUJDLFFBQzNCQyxFQUFjRixFQUFpQkUsWUFDL0JOLEVBQWFJLEVBQWlCSixXQUM5QmhVLEVBQVEsWUFBOEJvVSxFQUFrQixDQUFDLFdBQVksT0FBUSxhQUFjLFlBQWEsV0FBWSxVQUFXLFVBQVcsY0FBZSxlQUV6SnpOLEVBQVNELEVBQW1CMEIsRUFBVSxTQUN0Q21NLEVBQWMsT0FBQTdTLEVBQUEsSUFBaUIsU0FBVTFGLEdBQ3ZDcVksR0FDRkEsR0FBUSxFQUFPclksTUFHZitSLEdBQTRCLElBQWZpRyxFQUFzQixHQUFPQSxFQUMxQ1EsRUFBcUIsSUFBTTNRLGNBQWMsTUFBTyxZQUFTLENBQzNEbUUsS0FBTSxTQUNMK0YsRUFBYS9OLE9BQVE3RCxFQUFXLENBQ2pDc0YsSUFBS0EsRUFDTCtHLFVBQVcsSUFBV0EsRUFBVzdCLEVBQVEwQixHQUFXMUIsRUFBUyxJQUFNMEIsRUFBU2lNLEdBQWUzTixFQUFTLGtCQUNsRzJOLEdBQTRCLElBQU16USxjQUFjLEdBQWEsQ0FDL0RnRSxRQUFTME0sRUFDVDVJLE1BQU9zSSxJQUNMdkosR0FDSixPQUFLcUQsRUFDZSxJQUFNbEssY0FBY2tLLEVBQVksWUFBUyxDQUMzRFMsZUFBZSxHQUNkeE8sRUFBTyxDQUNSeUIsU0FBS3RGLEVBQ0xvUyxHQUFJd0YsSUFDRlMsR0FOb0JULEVBQU9TLEVBQVEsUUFRekNOLEdBQU1oTSxZQUFjLFFBQ3BCZ00sR0FBTXZMLGFBQWUsR0FDckJ1TCxHQUFNTyxLQUFPWCxHQUNiSSxHQUFNUSxRQUFVYixHQUNELFVFcEVmLFNBQVNoYSxLQUEyUSxPQUE5UEEsR0FBV3ZCLE9BQU93QixRQUFVLFNBQVVDLEdBQVUsSUFBSyxJQUFJbkMsRUFBSSxFQUFHQSxFQUFJb0MsVUFBVUMsT0FBUXJDLElBQUssQ0FBRSxJQUFJc0MsRUFBU0YsVUFBVXBDLEdBQUksSUFBSyxJQUFJdUIsS0FBT2UsRUFBYzVCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS21DLEVBQVFmLEtBQVFZLEVBQU9aLEdBQU9lLEVBQU9mLElBQVksT0FBT1ksSUFBMkJJLE1BQU1DLEtBQU1KLFdBRWhULFNBQVMyYSxHQUF5QnphLEVBQVFJLEdBQVksR0FBYyxNQUFWSixFQUFnQixNQUFPLEdBQUksSUFBa0VmLEVBQUt2QixFQUFuRW1DLEVBRXpGLFNBQXVDRyxFQUFRSSxHQUFZLEdBQWMsTUFBVkosRUFBZ0IsTUFBTyxHQUFJLElBQTJEZixFQUFLdkIsRUFBNURtQyxFQUFTLEdBQVFRLEVBQWFqQyxPQUFPa0MsS0FBS04sR0FBcUIsSUFBS3RDLEVBQUksRUFBR0EsRUFBSTJDLEVBQVdOLE9BQVFyQyxJQUFPdUIsRUFBTW9CLEVBQVczQyxHQUFRMEMsRUFBU0csUUFBUXRCLElBQVEsSUFBYVksRUFBT1osR0FBT2UsRUFBT2YsSUFBUSxPQUFPWSxFQUZ4TU0sQ0FBOEJILEVBQVFJLEdBQXVCLEdBQUloQyxPQUFPc2Msc0JBQXVCLENBQUUsSUFBSUMsRUFBbUJ2YyxPQUFPc2Msc0JBQXNCMWEsR0FBUyxJQUFLdEMsRUFBSSxFQUFHQSxFQUFJaWQsRUFBaUI1YSxPQUFRckMsSUFBT3VCLEVBQU0wYixFQUFpQmpkLEdBQVEwQyxFQUFTRyxRQUFRdEIsSUFBUSxHQUFrQmIsT0FBT2tCLFVBQVVzYixxQkFBcUIvYyxLQUFLbUMsRUFBUWYsS0FBZ0JZLEVBQU9aLEdBQU9lLEVBQU9mLElBQVUsT0FBT1ksRUFNbmUsSUFBSWdiLEdBQVcsc0JBQVcsU0FBVXpVLEVBQU1tQixHQUN4QyxJQUFJdVQsRUFBUTFVLEVBQUswVSxNQUNiMU0sRUFBT2hJLEVBQUtnSSxLQUNaN0gsRUFBT2tVLEdBQXlCclUsRUFBTSxDQUFDLFFBQVMsU0FFcEQsT0FBTyxJQUFNdUQsY0FBYyxNQUFPaEssR0FBUyxDQUN6QzRILElBQUtBLEVBQ0x3VCxNQUFPLDZCQUNQQyxRQUFTLFlBQ1RDLE1BQU83TSxFQUNQOE0sT0FBUTlNLEVBQ1IrTSxLQUFNTCxHQUNMdlUsR0FBTyxJQUFNb0QsY0FBYyxPQUFRLENBQ3BDM0wsRUFBRyxtUUFHUDZjLEdBQVM5QyxVQUFZLENBQ25CK0MsTUFBTyxJQUFVNVcsT0FDakJrSyxLQUFNLElBQVVnTixVQUFVLENBQUMsSUFBVWxYLE9BQVEsSUFBVW1YLFVBRXpEUixHQUFTcE0sYUFBZSxDQUN0QnFNLE1BQU8sZUFDUDFNLEtBQU0sT0FFTyxVQ2hDZixTQUFTLEtBQTJRLE9BQTlQLEdBQVdoUSxPQUFPd0IsUUFBVSxTQUFVQyxHQUFVLElBQUssSUFBSW5DLEVBQUksRUFBR0EsRUFBSW9DLFVBQVVDLE9BQVFyQyxJQUFLLENBQUUsSUFBSXNDLEVBQVNGLFVBQVVwQyxHQUFJLElBQUssSUFBSXVCLEtBQU9lLEVBQWM1QixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUttQyxFQUFRZixLQUFRWSxFQUFPWixHQUFPZSxFQUFPZixJQUFZLE9BQU9ZLElBQTJCSSxNQUFNQyxLQUFNSixXQUVoVCxTQUFTLEdBQXlCRSxFQUFRSSxHQUFZLEdBQWMsTUFBVkosRUFBZ0IsTUFBTyxHQUFJLElBQWtFZixFQUFLdkIsRUFBbkVtQyxFQUV6RixTQUF1Q0csRUFBUUksR0FBWSxHQUFjLE1BQVZKLEVBQWdCLE1BQU8sR0FBSSxJQUEyRGYsRUFBS3ZCLEVBQTVEbUMsRUFBUyxHQUFRUSxFQUFhakMsT0FBT2tDLEtBQUtOLEdBQXFCLElBQUt0QyxFQUFJLEVBQUdBLEVBQUkyQyxFQUFXTixPQUFRckMsSUFBT3VCLEVBQU1vQixFQUFXM0MsR0FBUTBDLEVBQVNHLFFBQVF0QixJQUFRLElBQWFZLEVBQU9aLEdBQU9lLEVBQU9mLElBQVEsT0FBT1ksRUFGeE0sQ0FBOEJHLEVBQVFJLEdBQXVCLEdBQUloQyxPQUFPc2Msc0JBQXVCLENBQUUsSUFBSUMsRUFBbUJ2YyxPQUFPc2Msc0JBQXNCMWEsR0FBUyxJQUFLdEMsRUFBSSxFQUFHQSxFQUFJaWQsRUFBaUI1YSxPQUFRckMsSUFBT3VCLEVBQU0wYixFQUFpQmpkLEdBQVEwQyxFQUFTRyxRQUFRdEIsSUFBUSxHQUFrQmIsT0FBT2tCLFVBQVVzYixxQkFBcUIvYyxLQUFLbUMsRUFBUWYsS0FBZ0JZLEVBQU9aLEdBQU9lLEVBQU9mLElBQVUsT0FBT1ksRUFNbmUsSUFBSXliLEdBQU8sc0JBQVcsU0FBVWxWLEVBQU1tQixHQUNwQyxJQUFJdVQsRUFBUTFVLEVBQUswVSxNQUNiMU0sRUFBT2hJLEVBQUtnSSxLQUNaN0gsRUFBTyxHQUF5QkgsRUFBTSxDQUFDLFFBQVMsU0FFcEQsT0FBTyxJQUFNdUQsY0FBYyxNQUFPLEdBQVMsQ0FDekNwQyxJQUFLQSxFQUNMd1QsTUFBTyw2QkFDUEMsUUFBUyxZQUNUQyxNQUFPN00sRUFDUDhNLE9BQVE5TSxFQUNSK00sS0FBTUwsR0FDTHZVLEdBQU8sSUFBTW9ELGNBQWMsT0FBUSxDQUNwQzRSLFNBQVUsVUFDVnZkLEVBQUcsMmZBR1BzZCxHQUFLdkQsVUFBWSxDQUNmK0MsTUFBTyxJQUFVNVcsT0FDakJrSyxLQUFNLElBQVVnTixVQUFVLENBQUMsSUFBVWxYLE9BQVEsSUFBVW1YLFVBRXpEQyxHQUFLN00sYUFBZSxDQUNsQnFNLE1BQU8sZUFDUDFNLEtBQU0sT0FFTyxVQ2pDZixTQUFTb04sR0FBTUMsR0FDZCxJQUFJQyxFQUFHQyxFQUFHbkksRUFBSSxHQUVkLEdBQW1CLGlCQUFSaUksR0FBbUMsaUJBQVJBLEVBQ3JDakksR0FBT2lJLE9BQ0QsR0FBbUIsaUJBQVJBLEVBQ2pCLEdBQUkzYSxNQUFNQyxRQUFRMGEsR0FDakIsSUFBS0MsRUFBRSxFQUFHQSxFQUFJRCxFQUFJMWIsT0FBUTJiLElBQ3JCRCxFQUFJQyxLQUNIQyxFQUFJSCxHQUFNQyxFQUFJQyxPQUNqQmxJLElBQVFBLEdBQU8sS0FDZkEsR0FBT21JLFFBS1YsSUFBS0QsS0FBS0QsRUFDTEEsRUFBSUMsS0FDUGxJLElBQVFBLEdBQU8sS0FDZkEsR0FBT2tJLEdBTVgsT0FBT2xJLEVBR08sa0JBRWQsSUFEQSxJQUFTb0ksRUFBS0MsRUFBVm5lLEVBQUUsRUFBVzhWLEVBQUksR0FDZDlWLEVBQUlvQyxVQUFVQyxTQUNoQjZiLEVBQU05YixVQUFVcEMsUUFDZm1lLEVBQUlMLEdBQU1JLE1BQ2JwSSxJQUFRQSxHQUFPLEtBQ2ZBLEdBQU9xSSxHQUlWLE9BQU9ySSxHQzFCUixTQUFTc0ksSUFBTyxHQUFFQyxFQUFFLEdBQUVDLElBQ3BCLElBQUlDLEVBQVEsR0FDWixJQUFLLElBQUl2ZSxFQUFJLEVBQUdBLEVBQUlzZSxFQUFJdGUsSUFDdEJ1ZSxFQUFNcGIsS0FBS25ELEdBQUtxZSxFQUFLLGtCQUFDLEdBQVEsTUFBTSxrQkFBQyxHQUFJLE9BRzNDLE9BQU8seUJBQUt6TixVQUFXLEdBQUssZUFBZ0IsY0FBZTJOLEdBTzdELE1BQU1DLEdBQU0sQ0FBQ3RhLEVBQVdDLElBQWNELEVBQUlDLEVBQ25DLFNBQVNzYSxJQUFRLFVBQUVuTCxFQUFTLFVBQUVvTCxJQUNuQyxNQUFNQyxFQUFXckwsRUFBVTVHLE9BQVEzSyxLQUFpQkEsR0FDOUM2YyxFQUNKRCxFQUNHN1YsSUFBSy9HLEdBQWNBLEVBQUc4UCxVQUFZNk0sRUFBVTdNLFdBQzVDdkosT0FBT2tXLEdBQUssR0FBS0csRUFBU3RjLE9BRXpCd2MsRUFDSkYsRUFDRzdWLElBQUsvRyxHQUFjc1AsS0FBS3lOLElBQUkvYyxFQUFHcVAsS0FBT3NOLEVBQVV0TixPQUNoRDlJLE9BQU9rVyxHQUFLLEdBQUtHLEVBQVN0YyxPQUUvQixJQUFJMGMsRUFvQkosT0FsQkVBLEVBREVGLEdBQWMsR0FDSixFQUNIQSxHQUFjLEVBRVgsRUFDSEEsR0FBYyxFQUVYLEVBQ0hBLEdBQWMsRUFFWCxFQUNIQSxHQUFjLEVBRVgsRUFHQSxFQUlaLGtCQUFDLEVBQVMsS0FDUixrQkFBQyxFQUFHLEtBQ0Ysa0JBQUMsRUFBRyxDQUFDak8sVUFBVSxRQUNiLGtCQUFDd04sR0FBTSxDQUFDQyxHQUFJVSxFQUFXVCxHQUFJLE1BRy9CLGtCQUFDLEVBQUcsS0FDRixrQkFBQyxFQUFHLENBQUMxTixVQUFXLEdBQUssV0FBWSxnQkFDL0Isa0JBQUMsR0FBSyxDQUFDSCxRQUFTLFcsWUFDSmtPLEVBQVN0YyxPLDJCQUFnQ3VjLEUsVUFDbEQsa0MsUUMzRGIsTUFBTSxHQUFNNU4sSUFDTmdPLEdBQWlCLEtBQ3JCLE1BQU94TCxFQUFTeUwsR0FBZ0Isb0JBQVMsSUFHbENDLEVBQWM1RCxHQUFLLG1CQUFTLElBQUk2RCxlQUNoQ0MsRUFBUUMsR0FBYSxzQkFDckJDLEVBQXlCQyxHQUE4QixzQkFHdkRqTSxFQUFXQyxHQUFnQixxQkFpRGxDLEdBOUNBLG9CQUFVLEtBQ0hDLElBSUwsR0FBSUksS0FBSyx5QkFDVDRMLFVBQVVDLGFBQ1BDLGFBQWEsQ0FDWkMsT0FBTyxFQUNQQyxPQUFPLElBRVJqTixLQUFNa04sSUFDTCxHQUFJQyxNQUNGLGtFQUNBRCxFQUNBQSxFQUFVbFAsT0FDVmtQLEVBQVVFLGlCQUFpQixHQUFHQyxZQUVoQ1gsRUFBVVEsT0FFYixDQUFDck0sSUFHSixvQkFBVSxLQUNSLEdBQUtBLFFBQXNCalAsSUFBWDZhLEVBV2hCLE9BUEEsR0FBSXhMLEtBQUssMENBQTJDc0wsRUFBY0UsR0FDbEVGLEVBQWFlLHdCQUF3QmIsR0FFckMsR0FBSXhMLEtBQUssc0JBQ1QyTCxFdEJ6Q0osU0FDRVcsRUFDQWQsRyxxQ0FFQSxNQUFNZSxFQUFzQjFSLElBQUkwUixlQUFlak8sRUFBV2dPLEVBQUtkLEdBTS9ELElBTEFuTixFQUFJMkIsS0FBSywyQkFBNEJ1TSxTQUVyQyxFQUFNQSxFQUFlQyxPQUNyQm5PLEVBQUkyQixLQUFLLDBCQUVGd0wsRUFBT3pPLFFBQXdCLFlBQWR1UCxFQUFJcEosT0FBcUIsQ0FDL0MsTUFBTXVKLFFBQVEsRUFBTUYsRUFBZUcsWUFDckIsT0FBVkQsY0FLSixFQUFNalAsRUFBS2lQLElBSlRwTyxFQUFJNk4sTUFBTSxZQU9kLDBCc0JxQjZCUyxDQUFrQnJCLEVBQWNFLElBQzNERixFQUFhc0IsU0FFTixLQUNMLEdBQUk1TSxLQUFLLDhCQUVULEdBQUlrTSxNQUFNLG9DQUFxQ1YsR0FDL0NBLFdBQVFxQixZQUFZelosUUFBUzlGLEdBQU1BLEVBQUV3ZixRQUVyQyxHQUFJWixNQUFNLDRCQUE2QlosR0FDdkNBLEVBQWF5QixZQUVkLENBQUN2QixFQUFRNUwsU0FFTWpQLElBQWQrTyxFQUF5QixDQUMzQixNQUFNc04sRUFBaUJ4UCxFQUFLRCxFQUFXLEtBRXZDLE9BQU8sa0JBQUNzTixHQUFPLENBQUNuTCxVQUFXQSxFQUFXb0wsVUFBV2tDLElBQzVDLE9BQUlwTixHQUFXOEwsRUFFbEIsa0JBQUNwTSxFQUFhLENBQ1pHLFNBQVc5SyxJQUNULEdBQUlxTCxLQUFLLGFBQWNyTCxHQUN2QmdMLEVBQWFoTCxHQUNiMFcsR0FBYSxJQUVmOUwsZUFBZ0JtTSxFQUNoQmxNLFVBQVcsTUFLYixrQkFBQyxFQUFNLENBQ0xuRCxRQUFTLElBQU1nUCxHQUFhLEdBQzVCeE8sUUFBUSxrQkFDUkMsS0FBSyxNQUFJLG1CQ2pGWCxHQUFNTSxJQ0xaLFNBQWdCLGdCRE9HLEtBQ2pCLEdBQUk0QyxLQUFLLGlCQUVQLGtCQUFDLEVBQVMsS0FDUiw0QkFBUWhELFVBQVcsR0FBSyxjQUFlLFNBQ3JDLHdCQUFJQSxVQUFXLEdBQUssWUFBYSxlQUFnQixVQUFRLFdBQ3pELHdCQUFJQSxVQUFXLGtCLFNBQ1Asa0MsTUFJViwwQkFBTUEsVUFBVyxHQUFLLGNBQWUsUUFBU1IsS0FBSyxRQUNqRCxrQkFBQzRPLEdBQWMsT0FHakIsNEJBQVFwTyxVQUFXLEdBQUssT0FBUSxhQUFjLGVBQzVDLGtCQUFDLEVBQVMsS0FDUixtREN4QlUsTUFBUzdLLFNBQVM4YSxlQUFlIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjApO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUHJvcFR5cGVzOyIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmV0dXJuLWFzc2lnbiAqL1xuaW1wb3J0IGNhblVzZURPTSBmcm9tICcuL2NhblVzZURPTSc7XG5leHBvcnQgdmFyIG9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTtcbmV4cG9ydCB2YXIgb25jZVN1cHBvcnRlZCA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZ2V0IG9uY2UoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbXVsdGktYXNzaWduXG4gICAgICByZXR1cm4gb25jZVN1cHBvcnRlZCA9IG9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH1cblxuICB9O1xuXG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgdHJ1ZSk7XG4gIH1cbn0gY2F0Y2ggKGUpIHtcbiAgLyogKi9cbn1cblxuLyoqXG4gKiBBbiBgYWRkRXZlbnRMaXN0ZW5lcmAgcG9ueWZpbGwsIHN1cHBvcnRzIHRoZSBgb25jZWAgb3B0aW9uXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zICE9PSAnYm9vbGVhbicgJiYgIW9uY2VTdXBwb3J0ZWQpIHtcbiAgICB2YXIgb25jZSA9IG9wdGlvbnMub25jZSxcbiAgICAgICAgY2FwdHVyZSA9IG9wdGlvbnMuY2FwdHVyZTtcbiAgICB2YXIgd3JhcHBlZEhhbmRsZXIgPSBoYW5kbGVyO1xuXG4gICAgaWYgKCFvbmNlU3VwcG9ydGVkICYmIG9uY2UpIHtcbiAgICAgIHdyYXBwZWRIYW5kbGVyID0gaGFuZGxlci5fX29uY2UgfHwgZnVuY3Rpb24gb25jZUhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaGFuZGxlci5fX29uY2UgPSB3cmFwcGVkSGFuZGxlcjtcbiAgICB9XG5cbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB3cmFwcGVkSGFuZGxlciwgb3B0aW9uc1N1cHBvcnRlZCA/IG9wdGlvbnMgOiBjYXB0dXJlKTtcbiAgfVxuXG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRFdmVudExpc3RlbmVyOyIsImZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIHZhciBjYXB0dXJlID0gb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5jYXB0dXJlIDogb3B0aW9ucztcbiAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgaWYgKGhhbmRsZXIuX19vbmNlKSB7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlci5fX29uY2UsIGNhcHR1cmUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbW92ZUV2ZW50TGlzdGVuZXI7IiwiaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAnLi9hZGRFdmVudExpc3RlbmVyJztcbmltcG9ydCByZW1vdmVFdmVudExpc3RlbmVyIGZyb20gJy4vcmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdGVuOyIsIm1vZHVsZS5leHBvcnRzID0gcmVhY3RMaWZlY3ljbGVzQ29tcGF0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4vb3duZXJXaW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBwc3VlZG9FbGVtZW50KSB7XG4gIHJldHVybiBvd25lcldpbmRvdyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIHBzdWVkb0VsZW1lbnQpO1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jICYmIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwidmFyIHJVcHBlciA9IC8oW0EtWl0pL2c7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xuaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICcuL2h5cGhlbmF0ZSc7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59IiwidmFyIHN1cHBvcnRlZFRyYW5zZm9ybXMgPSAvXigodHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSkoWHxZfFp8M2QpP3xtYXRyaXgoM2QpP3xwZXJzcGVjdGl2ZXxza2V3KFh8WSk/KSQvaTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiBzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3QodmFsdWUpKTtcbn0iLCJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tICcuL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICcuL2h5cGhlbmF0ZVN0eWxlJztcbmltcG9ydCBpc1RyYW5zZm9ybSBmcm9tICcuL2lzVHJhbnNmb3JtJztcblxuZnVuY3Rpb24gc3R5bGUobm9kZSwgcHJvcGVydHkpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShoeXBoZW5hdGUocHJvcGVydHkpKSB8fCBnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoaHlwaGVuYXRlKHByb3BlcnR5KSk7XG4gIH1cblxuICBPYmplY3Qua2V5cyhwcm9wZXJ0eSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gcHJvcGVydHlba2V5XTtcblxuICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoaHlwaGVuYXRlKGtleSkpO1xuICAgIH0gZWxzZSBpZiAoaXNUcmFuc2Zvcm0oa2V5KSkge1xuICAgICAgdHJhbnNmb3JtcyArPSBrZXkgKyBcIihcIiArIHZhbHVlICsgXCIpIFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3MgKz0gaHlwaGVuYXRlKGtleSkgKyBcIjogXCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHRyYW5zZm9ybXMpIHtcbiAgICBjc3MgKz0gXCJ0cmFuc2Zvcm06IFwiICsgdHJhbnNmb3JtcyArIFwiO1wiO1xuICB9XG5cbiAgbm9kZS5zdHlsZS5jc3NUZXh0ICs9IFwiO1wiICsgY3NzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5mdW5jdGlvbiByZWFkT25seVByb3BUeXBlKGhhbmRsZXIsIG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcHJvcHNbaGFuZGxlcl0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIllvdSBoYXZlIHByb3ZpZGVkIGEgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCB0byBgXCIgKyBuYW1lICsgXCJgIFwiICsgKFwid2l0aG91dCBhbiBgXCIgKyBoYW5kbGVyICsgXCJgIGhhbmRsZXIgcHJvcC4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gXCIpICsgKFwiSWYgdGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgXCIgKyBkZWZhdWx0S2V5KHByb3BOYW1lKSArIFwiYC4gXCIpICsgKFwiT3RoZXJ3aXNlLCBzZXQgYFwiICsgaGFuZGxlciArIFwiYC5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuY29udHJvbGxlZFByb3BUeXBlcyhjb250cm9sbGVkVmFsdWVzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgcHJvcFR5cGVzID0ge307XG4gIE9iamVjdC5rZXlzKGNvbnRyb2xsZWRWYWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBhZGQgZGVmYXVsdCBwcm9wVHlwZXMgZm9yIGZvbGtzIHRoYXQgdXNlIHJ1bnRpbWUgY2hlY2tzXG4gICAgcHJvcFR5cGVzW2RlZmF1bHRLZXkocHJvcCldID0gbm9vcDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IGNvbnRyb2xsZWRWYWx1ZXNbcHJvcF07XG4gICAgICAhKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJyAmJiBoYW5kbGVyLnRyaW0oKS5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnVW5jb250cm9sbGFibGUgLSBbJXNdOiB0aGUgcHJvcCBgJXNgIG5lZWRzIGEgdmFsaWQgaGFuZGxlciBrZXkgbmFtZSBpbiBvcmRlciB0byBtYWtlIGl0IHVuY29udHJvbGxhYmxlJywgZGlzcGxheU5hbWUsIHByb3ApIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHByb3BUeXBlc1twcm9wXSA9IHJlYWRPbmx5UHJvcFR5cGUoaGFuZGxlciwgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm9wVHlwZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9wKHByb3BzLCBwcm9wKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRLZXkoa2V5KSB7XG4gIHJldHVybiAnZGVmYXVsdCcgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpO1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5BY2NlcHRSZWYoY29tcG9uZW50KSB7XG4gIHJldHVybiAhIWNvbXBvbmVudCAmJiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJyB8fCBjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuXG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmICh0eXBlb2YgcmVzICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gdXNlVW5jb250cm9sbGVkUHJvcChwcm9wVmFsdWUsIGRlZmF1bHRWYWx1ZSwgaGFuZGxlcikge1xuICB2YXIgd2FzUHJvcFJlZiA9IHVzZVJlZihwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKGRlZmF1bHRWYWx1ZSksXG4gICAgICBzdGF0ZVZhbHVlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0U3RhdGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIGlzUHJvcCA9IHByb3BWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgd2FzUHJvcCA9IHdhc1Byb3BSZWYuY3VycmVudDtcbiAgd2FzUHJvcFJlZi5jdXJyZW50ID0gaXNQcm9wO1xuICAvKipcbiAgICogSWYgYSBwcm9wIHN3aXRjaGVzIGZyb20gY29udHJvbGxlZCB0byBVbmNvbnRyb2xsZWRcbiAgICogcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0VmFsdWVcbiAgICovXG5cbiAgaWYgKCFpc1Byb3AgJiYgd2FzUHJvcCAmJiBzdGF0ZVZhbHVlICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICBzZXRTdGF0ZShkZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIFtpc1Byb3AgPyBwcm9wVmFsdWUgOiBzdGF0ZVZhbHVlLCB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlcikgaGFuZGxlci5hcHBseSh2b2lkIDAsIFt2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcbiAgICBzZXRTdGF0ZSh2YWx1ZSk7XG4gIH0sIFtoYW5kbGVyXSldO1xufVxuXG5leHBvcnQgeyB1c2VVbmNvbnRyb2xsZWRQcm9wIH07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VVbmNvbnRyb2xsZWQocHJvcHMsIGNvbmZpZykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29uZmlnKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgZmllbGROYW1lKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfcmVmID0gcmVzdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmW1V0aWxzLmRlZmF1bHRLZXkoZmllbGROYW1lKV0sXG4gICAgICAgIHByb3BzVmFsdWUgPSBfcmVmW2ZpZWxkTmFtZV0sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbVXRpbHMuZGVmYXVsdEtleShmaWVsZE5hbWUpLCBmaWVsZE5hbWVdLm1hcChfdG9Qcm9wZXJ0eUtleSkpO1xuXG4gICAgdmFyIGhhbmRsZXJOYW1lID0gY29uZmlnW2ZpZWxkTmFtZV07XG5cbiAgICB2YXIgX3VzZVVuY29udHJvbGxlZFByb3AgPSB1c2VVbmNvbnRyb2xsZWRQcm9wKHByb3BzVmFsdWUsIGRlZmF1bHRWYWx1ZSwgcHJvcHNbaGFuZGxlck5hbWVdKSxcbiAgICAgICAgdmFsdWUgPSBfdXNlVW5jb250cm9sbGVkUHJvcFswXSxcbiAgICAgICAgaGFuZGxlciA9IF91c2VVbmNvbnRyb2xsZWRQcm9wWzFdO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCByZXN0LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltmaWVsZE5hbWVdID0gdmFsdWUsIF9leHRlbmRzMltoYW5kbGVyTmFtZV0gPSBoYW5kbGVyLCBfZXh0ZW5kczIpKTtcbiAgfSwgcHJvcHMpO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDcmVhdGVzIGEgYFJlZmAgd2hvc2UgdmFsdWUgaXMgdXBkYXRlZCBpbiBhbiBlZmZlY3QsIGVuc3VyaW5nIHRoZSBtb3N0IHJlY2VudFxuICogdmFsdWUgaXMgdGhlIG9uZSByZW5kZXJlZCB3aXRoLiBHZW5lcmFsbHkgb25seSByZXF1aXJlZCBmb3IgQ29uY3VycmVudCBtb2RlIHVzYWdlXG4gKiB3aGVyZSBwcmV2aW91cyB3b3JrIGluIGByZW5kZXIoKWAgbWF5IGJlIGRpc2NhcmRlZCBiZWZvciBiZWluZyB1c2VkLlxuICpcbiAqIFRoaXMgaXMgc2FmZSB0byBhY2Nlc3MgaW4gYW4gZXZlbnQgaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGBSZWZgIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29tbWl0dGVkUmVmKHZhbHVlKSB7XG4gIHZhciByZWYgPSB1c2VSZWYodmFsdWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gcmVmO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VDb21taXR0ZWRSZWY7IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlQ29tbWl0dGVkUmVmIGZyb20gJy4vdXNlQ29tbWl0dGVkUmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IHVzZUNvbW1pdHRlZFJlZihmbik7XG4gIHJldHVybiB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50ICYmIHJlZi5jdXJyZW50LmFwcGx5KHJlZiwgYXJndW1lbnRzKTtcbiAgfSwgW3JlZl0pO1xufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBtbDU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbnZhciBUaGVtZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbnZhciBDb25zdW1lciA9IFRoZW1lQ29udGV4dC5Db25zdW1lcixcbiAgICBQcm92aWRlciA9IFRoZW1lQ29udGV4dC5Qcm92aWRlcjtcblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhlcyA9IF9yZWYucHJlZml4ZXMsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb3BpZWRQcmVmaXhlcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJlZml4ZXMpO1xuICB9LCBbcHJlZml4ZXNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvcGllZFByZWZpeGVzXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJvb3RzdHJhcFByZWZpeChwcmVmaXgsIGRlZmF1bHRQcmVmaXgpIHtcbiAgdmFyIHByZWZpeGVzID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICByZXR1cm4gcHJlZml4IHx8IHByZWZpeGVzW2RlZmF1bHRQcmVmaXhdIHx8IGRlZmF1bHRQcmVmaXg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChDb21wb25lbnQsIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykgb3B0cyA9IHtcbiAgICBwcmVmaXg6IG9wdHNcbiAgfTtcbiAgdmFyIGlzQ2xhc3N5ID0gQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7IC8vIElmIGl0J3MgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCBtYWtlIHN1cmUgd2UgZG9uJ3QgYnJlYWsgaXQgd2l0aCBhIHJlZlxuXG4gIHZhciBfb3B0cyA9IG9wdHMsXG4gICAgICBwcmVmaXggPSBfb3B0cy5wcmVmaXgsXG4gICAgICBfb3B0cyRmb3J3YXJkUmVmQXMgPSBfb3B0cy5mb3J3YXJkUmVmQXMsXG4gICAgICBmb3J3YXJkUmVmQXMgPSBfb3B0cyRmb3J3YXJkUmVmQXMgPT09IHZvaWQgMCA/IGlzQ2xhc3N5ID8gJ3JlZicgOiAnaW5uZXJSZWYnIDogX29wdHMkZm9yd2FyZFJlZkFzO1xuICB2YXIgV3JhcHBlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgX3JlZjIpO1xuXG4gICAgcHJvcHNbZm9yd2FyZFJlZkFzXSA9IHJlZjtcbiAgICB2YXIgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgocHJvcHMuYnNQcmVmaXgsIHByZWZpeCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBic1ByZWZpeDogYnNQcmVmaXhcbiAgICB9KSk7XG4gIH0pO1xuICBXcmFwcGVkLmRpc3BsYXlOYW1lID0gXCJCb290c3RyYXAoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICByZXR1cm4gV3JhcHBlZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50LCBDb25zdW1lciBhcyBUaGVtZUNvbnN1bWVyIH07XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYgIT0gbnVsbDtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGYpIHtcbiAgICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKTtcbiAgICB9XG5cbiAgICBpZiAoYWNjID09PSBudWxsKSByZXR1cm4gZjtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpOyAvLyBAdHMtaWdub3JlXG5cbiAgICAgIGYuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBpc1RyaXZpYWxIcmVmKGhyZWYpIHtcbiAgcmV0dXJuICFocmVmIHx8IGhyZWYudHJpbSgpID09PSAnIyc7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgRHJvcGRvd25JdGVtcywgZXRjLlxuICovXG5cblxudmFyIFNhZmVBbmNob3IgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2EnIDogX3JlZiRhcyxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIG9uS2V5RG93biA9IF9yZWYub25LZXlEb3duLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhc1wiLCBcImRpc2FibGVkXCIsIFwib25LZXlEb3duXCJdKTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBocmVmID0gcHJvcHMuaHJlZixcbiAgICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2s7XG5cbiAgICBpZiAoZGlzYWJsZWQgfHwgaXNUcml2aWFsSHJlZihocmVmKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBpZiAoaXNUcml2aWFsSHJlZihwcm9wcy5ocmVmKSkge1xuICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgLy8gb3RoZXJ3aXNlLCB0aGUgY3Vyc29yIGluY29ycmVjdGx5IHN0eWxlZCAoZXhjZXB0IHdpdGggcm9sZT0nYnV0dG9uJylcblxuICAgIHByb3BzLmhyZWYgPSBwcm9wcy5ocmVmIHx8ICcjJztcbiAgfVxuXG4gIGlmIChkaXNhYmxlZCkge1xuICAgIHByb3BzLnRhYkluZGV4ID0gLTE7XG4gICAgcHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICBvbktleURvd246IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVLZXlEb3duLCBvbktleURvd24pXG4gIH0pKTtcbn0pO1xuU2FmZUFuY2hvci5kaXNwbGF5TmFtZSA9ICdTYWZlQW5jaG9yJztcbmV4cG9ydCBkZWZhdWx0IFNhZmVBbmNob3I7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgdmFyaWFudDogJ3ByaW1hcnknLFxuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG52YXIgQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICB2YXJpYW50ID0gX3JlZi52YXJpYW50LFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBibG9jayA9IF9yZWYuYmxvY2ssXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgYXMgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcInZhcmlhbnRcIiwgXCJzaXplXCIsIFwiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiYmxvY2tcIiwgXCJ0eXBlXCIsIFwiYXNcIl0pO1xuXG4gIHZhciBwcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdidG4nKTtcbiAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4LCBhY3RpdmUgJiYgJ2FjdGl2ZScsIHByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgYmxvY2sgJiYgcHJlZml4ICsgXCItYmxvY2tcIiwgc2l6ZSAmJiBwcmVmaXggKyBcIi1cIiArIHNpemUpO1xuXG4gIGlmIChwcm9wcy5ocmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNhZmVBbmNob3IsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYXM6IGFzLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NlcywgcHJvcHMuZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJylcbiAgICB9KSk7XG4gIH1cblxuICBpZiAocmVmKSB7XG4gICAgcHJvcHMucmVmID0gcmVmO1xuICB9XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBwcm9wcy50eXBlID0gdHlwZTtcbiAgfSBlbHNlIGlmICghYXMpIHtcbiAgICBwcm9wcy50eXBlID0gJ2J1dHRvbic7XG4gIH1cblxuICB2YXIgQ29tcG9uZW50ID0gYXMgfHwgJ2J1dHRvbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG59KTtcbkJ1dHRvbi5kaXNwbGF5TmFtZSA9ICdCdXR0b24nO1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjsiLCJleHBvcnQgY29uc3QgZ2V0TG9nZ2VyID0gKCkgPT4gY29uc29sZTtcbiIsImNvbnN0IG5vdGVzOiBzdHJpbmdbXSA9IFtcbiAgXCJBXCIsIC8vIDIxXG4gIFwiQuKZrVwiLCAvLyAyMlxuICBcIkJcIiwgLy8gMjNcbiAgXCJDXCIsIC8vIDI0XG4gIFwiQ+KZr1wiLCAvLyAyNVxuICBcIkRcIiwgLy8gMjZcbiAgXCJE4pmvXCIsIC8vIDI3XG4gIFwiRVwiLCAvLyAyOFxuICBcIkZcIiwgLy8gMjlcbiAgXCJG4pmvXCIsIC8vIDMwXG4gIFwiR1wiLCAvLyAzMVxuICBcIkfima9cIiwgLy8gMzJcbl07XG5jb25zdCBuYW1lID0gKG5vdGU6IG51bWJlcik6IHN0cmluZyA9PiBub3Rlc1sobm90ZSAtIDIxKSAlIDEyXTtcbmNvbnN0IG9jdGF2ZSA9IChub3RlOiBudW1iZXIpOiBudW1iZXIgPT4gTWF0aC5mbG9vcihub3RlIC8gMTIgLSAxKTtcblxuY29uc3Qgbm90ZVRvRnJlcSA9IChub3RlOiBudW1iZXIpOiBudW1iZXIgPT5cbiAgNDQwICogTWF0aC5wb3coMiwgKG5vdGUgLSA2OSkgLyAxMik7XG5cbmNvbnN0IGZyZXFUb05vdGUgPSAoZnJlcTogbnVtYmVyKTogbnVtYmVyID0+IDY5ICsgMTIgKiBNYXRoLmxvZzIoZnJlcSAvIDQ0MCk7XG5cbmNvbnN0IGRpZmYgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIgPT4gMTIwMCAqIE1hdGgubG9nMihiIC8gYSk7XG5cbmNsYXNzIE5vdGUge1xuICByZWFkb25seSBmcmVxdWVuY3k6IG51bWJlcjtcbiAgcmVhZG9ubHkgbm90ZTogbnVtYmVyO1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9jdGF2ZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2ZyZXE6IG51bWJlcikge1xuICAgIHRoaXMubm90ZSA9IE1hdGgucm91bmQoZnJlcVRvTm90ZShfZnJlcSkpO1xuXG4gICAgdGhpcy5mcmVxdWVuY3kgPSBub3RlVG9GcmVxKHRoaXMubm90ZSk7XG4gICAgdGhpcy5uYW1lID0gbmFtZSh0aGlzLm5vdGUpO1xuICAgIHRoaXMub2N0YXZlID0gb2N0YXZlKHRoaXMubm90ZSk7XG4gIH1cbn1cblxudHlwZSBQaXRjaCA9IHtcbiAgdGFyZ2V0OiBOb3RlO1xuICBub3RlOiBudW1iZXI7XG4gIGZyZXF1ZW5jeTogbnVtYmVyO1xuICBkaWZmOiBudW1iZXI7XG59O1xuXG5jb25zdCBub3RlID0gKGZyZXE/OiBudW1iZXIgfCBudWxsKTogUGl0Y2ggfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoZnJlcSA9PT0gdW5kZWZpbmVkIHx8IGZyZXEgPT09IG51bGwpIHJldHVybjtcblxuICBjb25zdCBuID0gbmV3IE5vdGUoZnJlcSk7XG4gIHJldHVybiB7XG4gICAgZnJlcXVlbmN5OiBmcmVxLFxuICAgIHRhcmdldDogbixcbiAgICBub3RlOiBmcmVxVG9Ob3RlKGZyZXEpLFxuICAgIGRpZmY6IGRpZmYobi5mcmVxdWVuY3ksIGZyZXEpLFxuICB9O1xufTtcblxuZXhwb3J0IHsgbmFtZSwgb2N0YXZlLCBub3RlLCBOb3RlLCBQaXRjaCwgZnJlcVRvTm90ZSwgbm90ZVRvRnJlcSwgZGlmZiB9O1xuIiwiaW1wb3J0IFwibWw1XCI7XG5cbmltcG9ydCB7IG5vdGUsIFBpdGNoIH0gZnJvbSBcInBpdGNoL25vdGVzXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwibG9nXCI7XG5jb25zdCBMT0cgPSBnZXRMb2dnZXIoKTtcblxuZXhwb3J0IHR5cGUgU2FtcGxlID0gUGl0Y2ggfCB1bmRlZmluZWQ7XG5leHBvcnQgdHlwZSBSZWNvcmRpbmcgPSBTYW1wbGVbXTtcblxudHlwZSBQaXRjaEdlbmVyYXRvciA9IEFzeW5jR2VuZXJhdG9yPFNhbXBsZT47XG5cbmNvbnN0IE1PREVMX1VSTCA9XG4gIFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL21sNWpzL21sNS1kYXRhLWFuZC1tb2RlbHMvbW9kZWxzL3BpdGNoLWRldGVjdGlvbi9jcmVwZS9cIjtcblxuYXN5bmMgZnVuY3Rpb24qIG1sNVBpdGNoRGV0ZWN0aW9uKFxuICBjdHg6IEF1ZGlvQ29udGV4dCxcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbVxuKTogUGl0Y2hHZW5lcmF0b3Ige1xuICBjb25zdCBwaXRjaERldGVjdGlvbjogYW55ID0gbWw1LnBpdGNoRGV0ZWN0aW9uKE1PREVMX1VSTCwgY3R4LCBzdHJlYW0pO1xuICBMT0cuaW5mbyhcIkNyZWF0ZWQgcGl0Y2ggZGV0ZWN0aW9uLlwiLCBwaXRjaERldGVjdGlvbik7XG4gIFxuICBhd2FpdCBwaXRjaERldGVjdGlvbi5yZWFkeTtcbiAgTE9HLmluZm8oXCJJbml0aWFsaXplZCB0aGUgbW9kZWwuXCIpO1xuXG4gIHdoaWxlIChzdHJlYW0uYWN0aXZlICYmIGN0eC5zdGF0ZSA9PT0gXCJydW5uaW5nXCIpIHtcbiAgICBjb25zdCBwaXRjaCA9IGF3YWl0IHBpdGNoRGV0ZWN0aW9uLmdldFBpdGNoKCk7XG4gICAgaWYgKHBpdGNoID09PSBudWxsKSB7XG4gICAgICBMT0cuZGVidWcoXCJTa2lwcGluZ1wiKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHlpZWxkIG5vdGUocGl0Y2gpO1xuICB9XG5cbiAgcmV0dXJuO1xufVxuXG5leHBvcnQgeyBQaXRjaEdlbmVyYXRvciwgbWw1UGl0Y2hEZXRlY3Rpb24gfTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbnR5cGUgR2VuZXJhdG9yQ29tcG9uZW50UHJvcHM8VD4gPSB7XG4gIGdlbmVyYXRvcjogQXN5bmNHZW5lcmF0b3I8VCB8IHVuZGVmaW5lZCwgYW55LCBhbnk+O1xuICBjaGlsZHJlbjogYW55O1xuICBvblRpY2s/OiAodDogVCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbn07XG5cbmZ1bmN0aW9uIEdlbmVyYXRvckNvbXBvbmVudDxUPihwcm9wczogR2VuZXJhdG9yQ29tcG9uZW50UHJvcHM8VD4pIHtcbiAgY29uc3QgW2ZsYWcsIHNldEZsYWddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY3VycmVudFZhbHVlLCBzZXRDdXJyZW50VmFsdWVdID0gdXNlU3RhdGU8VCB8IHVuZGVmaW5lZD4oKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBtb3VudGVkID0gdHJ1ZTtcblxuICAgIHByb3BzLmdlbmVyYXRvci5uZXh0KCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmRvbmUgfHwgIW1vdW50ZWQpIHJldHVybjtcblxuICAgICAgc2V0Q3VycmVudFZhbHVlKHJlc3VsdC52YWx1ZSk7XG4gICAgICBzZXRGbGFnKCFmbGFnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW2ZsYWddKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5vblRpY2sgJiYgY3VycmVudFZhbHVlKSB7XG4gICAgICBwcm9wcy5vblRpY2soY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH0sIFtjdXJyZW50VmFsdWVdKTtcblxuICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oY3VycmVudFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cblxuZXhwb3J0IHsgR2VuZXJhdG9yQ29tcG9uZW50IH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBTcGlubmVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICB2YXJpYW50ID0gX3JlZi52YXJpYW50LFxuICAgICAgYW5pbWF0aW9uID0gX3JlZi5hbmltYXRpb24sXG4gICAgICBzaXplID0gX3JlZi5zaXplLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgX3JlZiRhcyA9IF9yZWYuYXMsXG4gICAgICBDb21wb25lbnQgPSBfcmVmJGFzID09PSB2b2lkIDAgPyAnZGl2JyA6IF9yZWYkYXMsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJ2YXJpYW50XCIsIFwiYW5pbWF0aW9uXCIsIFwic2l6ZVwiLCBcImNoaWxkcmVuXCIsIFwiYXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnc3Bpbm5lcicpO1xuICB2YXIgYnNTcGlubmVyUHJlZml4ID0gYnNQcmVmaXggKyBcIi1cIiArIGFuaW1hdGlvbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNTcGlubmVyUHJlZml4LCBzaXplICYmIGJzU3Bpbm5lclByZWZpeCArIFwiLVwiICsgc2l6ZSwgdmFyaWFudCAmJiBcInRleHQtXCIgKyB2YXJpYW50KVxuICB9KSwgY2hpbGRyZW4pO1xufSk7XG5TcGlubmVyLmRpc3BsYXlOYW1lID0gJ1NwaW5uZXInO1xuZXhwb3J0IGRlZmF1bHQgU3Bpbm5lcjsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBQaXRjaEdlbmVyYXRvciwgU2FtcGxlIH0gZnJvbSBcInBpdGNoL3BpdGNoXCI7XG5cbmltcG9ydCB7IEdlbmVyYXRvckNvbXBvbmVudCB9IGZyb20gXCIuL0dlbmVyYXRvckNvbXBvbmVudFwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImxvZ1wiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcblxuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5cbnR5cGUgUmVjb3JkaW5nID0gU2FtcGxlW107XG50eXBlIFBpdGNoUmVjb3JkZXJQcm9wcyA9IHtcbiAgcGl0Y2hHZW5lcmF0b3I/OiBQaXRjaEdlbmVyYXRvcjtcbiAgdGltZW91dE1zOiBudW1iZXI7XG4gIG9uRmluaXNoOiAoc2FtcGxlczogUmVjb3JkaW5nKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFBpdGNoUmVjb3JkZXIoe1xuICBwaXRjaEdlbmVyYXRvcixcbiAgdGltZW91dE1zLFxuICBvbkZpbmlzaCxcbn06IFBpdGNoUmVjb3JkZXJQcm9wcykge1xuICBjb25zdCBbcmVjb3JkaW5nLCBzZXRSZWNvcmRpbmddID0gdXNlU3RhdGU8UmVjb3JkaW5nPihbXSk7XG4gIGNvbnN0IFtzdGFydGVkLCBzZXRTdGFydGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2ZpbmlzaGVkLCBzZXRGaW5pc2hlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgTE9HLmluZm8oXCJTZXR0aW5nIHVwIHRoZSB0aW1lb3V0LlwiKTtcbiAgICBjb25zdCB0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzZXRGaW5pc2hlZCh0cnVlKTtcbiAgICAgIHNldFN0YXJ0ZWQoZmFsc2UpO1xuICAgIH0sIHRpbWVvdXRNcyk7XG5cbiAgICBMT0cuaW5mbyhcIlNldCB1cCB0aW1lciAlZCBmb3IgJWQgbXMuXCIsIHQsIHRpbWVvdXRNcyk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgTE9HLmluZm8oXCJDbGVhcmluZyBvdXQgdGhlIHRpbWVvdXQgJWQuXCIsIHQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHQpO1xuICAgIH07XG4gIH0sIFtzdGFydGVkXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgIExPRy5pbmZvKFwiRmluaXNoaW5nIHJlY29yZGluZy5cIik7XG4gICAgICBvbkZpbmlzaChyZWNvcmRpbmcpO1xuICAgIH1cbiAgfSwgW2ZpbmlzaGVkLCByZWNvcmRpbmddKTtcblxuICBjb25zdCBhZGRTYW1wbGUgPSAocDogU2FtcGxlKSA9PiB7XG4gICAgY29uc3QgbmV3UmVjb3JkaW5nID0gcmVjb3JkaW5nLmNvbmNhdChbcF0pO1xuICAgIHNldFJlY29yZGluZyhuZXdSZWNvcmRpbmcpO1xuICAgIGlmICghc3RhcnRlZCkge1xuICAgICAgc2V0U3RhcnRlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgbGFiZWwgPSAhc3RhcnRlZCA/IChcbiAgICA8c3Bhbj5zaW5nIG5vdyE8L3NwYW4+XG4gICkgOiAoXG4gICAgPFNwaW5uZXIgYW5pbWF0aW9uPVwiZ3Jvd1wiIHZhcmlhbnQ9XCJkYW5nZXJcIiAvPlxuICApO1xuXG4gIHJldHVybiBwaXRjaEdlbmVyYXRvciA/IChcbiAgICA8R2VuZXJhdG9yQ29tcG9uZW50IGdlbmVyYXRvcj17cGl0Y2hHZW5lcmF0b3J9IG9uVGljaz17YWRkU2FtcGxlfT5cbiAgICAgIDxoMz57bGFiZWx9PC9oMz5cbiAgICA8L0dlbmVyYXRvckNvbXBvbmVudD5cbiAgKSA6IChcbiAgICA8U3Bpbm5lciBhbmltYXRpb249XCJib3JkZXJcIiB2YXJpYW50PVwicHJpbWFyeVwiIC8+XG4gICk7XG59XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGZsdWlkOiBmYWxzZVxufTtcbnZhciBDb250YWluZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGZsdWlkID0gX3JlZi5mbHVpZCxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiZmx1aWRcIiwgXCJhc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgdmFyIHByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2NvbnRhaW5lcicpO1xuICB2YXIgc3VmZml4ID0gdHlwZW9mIGZsdWlkID09PSAnc3RyaW5nJyA/IFwiLVwiICsgZmx1aWQgOiAnLWZsdWlkJztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgZmx1aWQgPyBcIlwiICsgcHJlZml4ICsgc3VmZml4IDogcHJlZml4KVxuICB9KSk7XG59KTtcbkNvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdDb250YWluZXInO1xuQ29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENvbnRhaW5lcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBERVZJQ0VfU0laRVMgPSBbJ3hsJywgJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ107XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBub0d1dHRlcnM6IGZhbHNlXG59O1xudmFyIFJvdyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBub0d1dHRlcnMgPSBfcmVmLm5vR3V0dGVycyxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcIm5vR3V0dGVyc1wiLCBcImFzXCJdKTtcblxuICB2YXIgZGVjb3JhdGVkQnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdyb3cnKTtcbiAgdmFyIHNpemVQcmVmaXggPSBkZWNvcmF0ZWRCc1ByZWZpeCArIFwiLWNvbHNcIjtcbiAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgREVWSUNFX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKGJya1BvaW50KSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW2Jya1BvaW50XTtcbiAgICBkZWxldGUgcHJvcHNbYnJrUG9pbnRdO1xuICAgIHZhciBjb2xzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBjb2xzID0gcHJvcFZhbHVlLmNvbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbHMgPSBwcm9wVmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGluZml4ID0gYnJrUG9pbnQgIT09ICd4cycgPyBcIi1cIiArIGJya1BvaW50IDogJyc7XG4gICAgaWYgKGNvbHMgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKFwiXCIgKyBzaXplUHJlZml4ICsgaW5maXggKyBcIi1cIiArIGNvbHMpO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmFwcGx5KHZvaWQgMCwgW2NsYXNzTmFtZSwgZGVjb3JhdGVkQnNQcmVmaXgsIG5vR3V0dGVycyAmJiAnbm8tZ3V0dGVycyddLmNvbmNhdChjbGFzc2VzKSlcbiAgfSkpO1xufSk7XG5Sb3cuZGlzcGxheU5hbWUgPSAnUm93JztcblJvdy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBSb3c7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgREVWSUNFX1NJWkVTID0gWyd4bCcsICdsZycsICdtZCcsICdzbScsICd4cyddO1xudmFyIENvbCA9IFJlYWN0LmZvcndhcmRSZWYoIC8vIE5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IFwiYXNcIiBkdXJpbmcgcHJvcCBkZXN0cnVjdHVyaW5nIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBzdHlsZWQtY29tcG9uZW50cyBnaXRodWIuY29tL3JlYWN0LWJvb3RzdHJhcC9yZWFjdC1ib290c3RyYXAvaXNzdWVzLzM1OTVcbmZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgX3JlZiRhcyA9IF9yZWYuYXMsXG4gICAgICBDb21wb25lbnQgPSBfcmVmJGFzID09PSB2b2lkIDAgPyAnZGl2JyA6IF9yZWYkYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIl0pO1xuXG4gIHZhciBwcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdjb2wnKTtcbiAgdmFyIHNwYW5zID0gW107XG4gIHZhciBjbGFzc2VzID0gW107XG4gIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChicmtQb2ludCkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1ticmtQb2ludF07XG4gICAgZGVsZXRlIHByb3BzW2Jya1BvaW50XTtcbiAgICB2YXIgc3BhbjtcbiAgICB2YXIgb2Zmc2V0O1xuICAgIHZhciBvcmRlcjtcblxuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0JyAmJiBwcm9wVmFsdWUgIT0gbnVsbCkge1xuICAgICAgdmFyIF9wcm9wVmFsdWUkc3BhbiA9IHByb3BWYWx1ZS5zcGFuO1xuICAgICAgc3BhbiA9IF9wcm9wVmFsdWUkc3BhbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wVmFsdWUkc3BhbjtcbiAgICAgIG9mZnNldCA9IHByb3BWYWx1ZS5vZmZzZXQ7XG4gICAgICBvcmRlciA9IHByb3BWYWx1ZS5vcmRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BhbiA9IHByb3BWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaW5maXggPSBicmtQb2ludCAhPT0gJ3hzJyA/IFwiLVwiICsgYnJrUG9pbnQgOiAnJztcbiAgICBpZiAoc3Bhbikgc3BhbnMucHVzaChzcGFuID09PSB0cnVlID8gXCJcIiArIHByZWZpeCArIGluZml4IDogXCJcIiArIHByZWZpeCArIGluZml4ICsgXCItXCIgKyBzcGFuKTtcbiAgICBpZiAob3JkZXIgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKFwib3JkZXJcIiArIGluZml4ICsgXCItXCIgKyBvcmRlcik7XG4gICAgaWYgKG9mZnNldCAhPSBudWxsKSBjbGFzc2VzLnB1c2goXCJvZmZzZXRcIiArIGluZml4ICsgXCItXCIgKyBvZmZzZXQpO1xuICB9KTtcblxuICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgIHNwYW5zLnB1c2gocHJlZml4KTsgLy8gcGxhaW4gJ2NvbCdcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5hcHBseSh2b2lkIDAsIFtjbGFzc05hbWVdLmNvbmNhdChzcGFucywgY2xhc3NlcykpXG4gIH0pKTtcbn0pO1xuQ29sLmRpc3BsYXlOYW1lID0gJ0NvbCc7XG5leHBvcnQgZGVmYXVsdCBDb2w7IiwiaW1wb3J0IGNhblVzZURPTSBmcm9tICcuL2NhblVzZURPTSc7XG5pbXBvcnQgY3NzIGZyb20gJy4vY3NzJztcbmltcG9ydCBsaXN0ZW4gZnJvbSAnLi9saXN0ZW4nO1xuZXhwb3J0IHZhciBUUkFOU0lUSU9OX1NVUFBPUlRFRCA9IGNhblVzZURPTSAmJiAnb250cmFuc2l0aW9uZW5kJyBpbiB3aW5kb3c7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEdXJhdGlvbihub2RlKSB7XG4gIHZhciBzdHIgPSBjc3Mobm9kZSwgJ3RyYW5zaXRpb25EdXJhdGlvbicpIHx8ICcnO1xuICB2YXIgbXVsdCA9IHN0ci5pbmRleE9mKCdtcycpID09PSAtMSA/IDEwMDAgOiAxO1xuICByZXR1cm4gcGFyc2VGbG9hdChzdHIpICogbXVsdDtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZXZ0LmluaXRFdmVudCgndHJhbnNpdGlvbmVuZCcsIHRydWUsIHRydWUpO1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbn1cblxuZnVuY3Rpb24gZW11bGF0ZVRyYW5zaXRpb25FbmQoZWxlbWVudCwgZHVyYXRpb24sIHBhZGRpbmcpIHtcbiAgaWYgKHBhZGRpbmcgPT09IHZvaWQgMCkge1xuICAgIHBhZGRpbmcgPSA1O1xuICB9XG5cbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICB2YXIgaGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpO1xuICB9LCBkdXJhdGlvbiArIHBhZGRpbmcpO1xuICB2YXIgcmVtb3ZlID0gbGlzdGVuKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGNhbGxlZCA9IHRydWU7XG4gIH0sIHtcbiAgICBvbmNlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgIHJlbW92ZSgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGVsZW1lbnQsIGhhbmRsZXIsIGR1cmF0aW9uKSB7XG4gIGlmIChkdXJhdGlvbiA9PSBudWxsKSBkdXJhdGlvbiA9IHBhcnNlRHVyYXRpb24oZWxlbWVudCkgfHwgMDtcbiAgdmFyIHJlbW92ZUVtdWxhdGUgPSBlbXVsYXRlVHJhbnNpdGlvbkVuZChlbGVtZW50LCBkdXJhdGlvbik7XG4gIHZhciByZW1vdmUgPSBsaXN0ZW4oZWxlbWVudCwgJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVFbXVsYXRlKCk7XG4gICAgcmVtb3ZlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zaXRpb25FbmQ7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVsZW1lbnQpXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5cbnZhciBfZmFkZVN0eWxlcztcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICdkb20taGVscGVycy90cmFuc2l0aW9uRW5kJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uLCB7IEVOVEVSRUQsIEVOVEVSSU5HIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJztcbmltcG9ydCB0cmlnZ2VyQnJvd3NlclJlZmxvdyBmcm9tICcuL3RyaWdnZXJCcm93c2VyUmVmbG93JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZVxufTtcbnZhciBmYWRlU3R5bGVzID0gKF9mYWRlU3R5bGVzID0ge30sIF9mYWRlU3R5bGVzW0VOVEVSSU5HXSA9ICdzaG93JywgX2ZhZGVTdHlsZXNbRU5URVJFRF0gPSAnc2hvdycsIF9mYWRlU3R5bGVzKTtcbnZhciBGYWRlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdHJpZ2dlckJyb3dzZXJSZWZsb3cobm9kZSk7XG4gICAgaWYgKHByb3BzLm9uRW50ZXIpIHByb3BzLm9uRW50ZXIobm9kZSk7XG4gIH0sIFtwcm9wc10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGFkZEVuZExpc3RlbmVyOiB0cmFuc2l0aW9uRW5kXG4gIH0sIHByb3BzLCB7XG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXJcbiAgfSksIGZ1bmN0aW9uIChzdGF0dXMsIGlubmVyUHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCdmYWRlJywgY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsIGZhZGVTdHlsZXNbc3RhdHVzXSlcbiAgICB9KSk7XG4gIH0pO1xufSk7XG5GYWRlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkZhZGUuZGlzcGxheU5hbWUgPSAnRmFkZSc7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsIi8vIHJlYWRpbmcgYSBkaW1lbnNpb24gcHJvcCB3aWxsIGNhdXNlIHRoZSBicm93c2VyIHRvIHJlY2FsY3VsYXRlLFxuLy8gd2hpY2ggd2lsbCBsZXQgb3VyIGFuaW1hdGlvbnMgd29ya1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJpZ2dlckJyb3dzZXJSZWZsb3cobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC1leHByZXNzaW9uc1xuICBub2RlLm9mZnNldEhlaWdodDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbGFiZWw6ICdDbG9zZSdcbn07XG52YXIgQ2xvc2VCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCdjbG9zZScsIGNsYXNzTmFtZSksXG4gICAgb25DbGljazogb25DbGlja1xuICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBcIlxceEQ3XCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgfSwgbGFiZWwpKTtcbn0pO1xuQ2xvc2VCdXR0b24uZGlzcGxheU5hbWUgPSAnQ2xvc2VCdXR0b24nO1xuQ2xvc2VCdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2xvc2VCdXR0b24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VCdXR0b247IiwidmFyIHJIeXBoZW4gPSAvLSguKS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShySHlwaGVuLCBmdW5jdGlvbiAoXywgY2hyKSB7XG4gICAgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgY2FtZWxpemUgZnJvbSAnZG9tLWhlbHBlcnMvY2FtZWxpemUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBwYXNjYWxDYXNlID0gZnVuY3Rpb24gcGFzY2FsQ2FzZShzdHIpIHtcbiAgcmV0dXJuIHN0clswXS50b1VwcGVyQ2FzZSgpICsgY2FtZWxpemUoc3RyKS5zbGljZSgxKTtcbn07XG5cbi8vIFRPRE86IGVtc3RyaWN0ZW4gJiBmaXggdGhlIHR5cGluZyBoZXJlISBgY3JlYXRlV2l0aEJzUHJlZml4PFRFbGVtZW50VHlwZT4uLi5gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVXaXRoQnNQcmVmaXgocHJlZml4LCBfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICBkaXNwbGF5TmFtZSA9IF9yZWYkZGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IHBhc2NhbENhc2UocHJlZml4KSA6IF9yZWYkZGlzcGxheU5hbWUsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLkNvbXBvbmVudCxcbiAgICAgIGRlZmF1bHRQcm9wcyA9IF9yZWYuZGVmYXVsdFByb3BzO1xuXG4gIHZhciBCc0NvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCByZWYpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gX3JlZjIuY2xhc3NOYW1lLFxuICAgICAgICBic1ByZWZpeCA9IF9yZWYyLmJzUHJlZml4LFxuICAgICAgICBfcmVmMiRhcyA9IF9yZWYyLmFzLFxuICAgICAgICBUYWcgPSBfcmVmMiRhcyA9PT0gdm9pZCAwID8gQ29tcG9uZW50IHx8ICdkaXYnIDogX3JlZjIkYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNsYXNzTmFtZVwiLCBcImJzUHJlZml4XCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIHJlc29sdmVkUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCBwcmVmaXgpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcmVzb2x2ZWRQcmVmaXgpXG4gICAgfSwgcHJvcHMpKTtcbiAgfSk7XG4gIEJzQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiAgQnNDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgcmV0dXJuIEJzQ29tcG9uZW50O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VVbmNvbnRyb2xsZWQgfSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICdAcmVzdGFydC9ob29rcy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRmFkZSBmcm9tICcuL0ZhZGUnO1xuaW1wb3J0IENsb3NlQnV0dG9uIGZyb20gJy4vQ2xvc2VCdXR0b24nO1xuaW1wb3J0IGRpdldpdGhDbGFzc05hbWUgZnJvbSAnLi9kaXZXaXRoQ2xhc3NOYW1lJztcbmltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBEaXZTdHlsZWRBc0g0ID0gZGl2V2l0aENsYXNzTmFtZSgnaDQnKTtcbkRpdlN0eWxlZEFzSDQuZGlzcGxheU5hbWUgPSAnRGl2U3R5bGVkQXNINCc7XG52YXIgQWxlcnRIZWFkaW5nID0gY3JlYXRlV2l0aEJzUHJlZml4KCdhbGVydC1oZWFkaW5nJywge1xuICBDb21wb25lbnQ6IERpdlN0eWxlZEFzSDRcbn0pO1xudmFyIEFsZXJ0TGluayA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnYWxlcnQtbGluaycsIHtcbiAgQ29tcG9uZW50OiBTYWZlQW5jaG9yXG59KTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHNob3c6IHRydWUsXG4gIHRyYW5zaXRpb246IEZhZGUsXG4gIGNsb3NlTGFiZWw6ICdDbG9zZSBhbGVydCdcbn07XG52YXIgQWxlcnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uICh1bmNvbnRyb2xsZWRQcm9wcywgcmVmKSB7XG4gIHZhciBfdXNlVW5jb250cm9sbGVkID0gdXNlVW5jb250cm9sbGVkKHVuY29udHJvbGxlZFByb3BzLCB7XG4gICAgc2hvdzogJ29uQ2xvc2UnXG4gIH0pLFxuICAgICAgYnNQcmVmaXggPSBfdXNlVW5jb250cm9sbGVkLmJzUHJlZml4LFxuICAgICAgc2hvdyA9IF91c2VVbmNvbnRyb2xsZWQuc2hvdyxcbiAgICAgIGNsb3NlTGFiZWwgPSBfdXNlVW5jb250cm9sbGVkLmNsb3NlTGFiZWwsXG4gICAgICBjbGFzc05hbWUgPSBfdXNlVW5jb250cm9sbGVkLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gX3VzZVVuY29udHJvbGxlZC5jaGlsZHJlbixcbiAgICAgIHZhcmlhbnQgPSBfdXNlVW5jb250cm9sbGVkLnZhcmlhbnQsXG4gICAgICBvbkNsb3NlID0gX3VzZVVuY29udHJvbGxlZC5vbkNsb3NlLFxuICAgICAgZGlzbWlzc2libGUgPSBfdXNlVW5jb250cm9sbGVkLmRpc21pc3NpYmxlLFxuICAgICAgdHJhbnNpdGlvbiA9IF91c2VVbmNvbnRyb2xsZWQudHJhbnNpdGlvbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3VzZVVuY29udHJvbGxlZCwgW1wiYnNQcmVmaXhcIiwgXCJzaG93XCIsIFwiY2xvc2VMYWJlbFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwidmFyaWFudFwiLCBcIm9uQ2xvc2VcIiwgXCJkaXNtaXNzaWJsZVwiLCBcInRyYW5zaXRpb25cIl0pO1xuXG4gIHZhciBwcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdhbGVydCcpO1xuICB2YXIgaGFuZGxlQ2xvc2UgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZmFsc2UsIGUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBUcmFuc2l0aW9uID0gdHJhbnNpdGlvbiA9PT0gdHJ1ZSA/IEZhZGUgOiB0cmFuc2l0aW9uO1xuICB2YXIgYWxlcnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJhbGVydFwiXG4gIH0sIFRyYW5zaXRpb24gPyBwcm9wcyA6IHVuZGVmaW5lZCwge1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeCwgdmFyaWFudCAmJiBwcmVmaXggKyBcIi1cIiArIHZhcmlhbnQsIGRpc21pc3NpYmxlICYmIHByZWZpeCArIFwiLWRpc21pc3NpYmxlXCIpXG4gIH0pLCBkaXNtaXNzaWJsZSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgIG9uQ2xpY2s6IGhhbmRsZUNsb3NlLFxuICAgIGxhYmVsOiBjbG9zZUxhYmVsXG4gIH0pLCBjaGlsZHJlbik7XG4gIGlmICghVHJhbnNpdGlvbikgcmV0dXJuIHNob3cgPyBhbGVydCA6IG51bGw7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxuICB9LCBwcm9wcywge1xuICAgIHJlZjogdW5kZWZpbmVkLFxuICAgIGluOiBzaG93XG4gIH0pLCBhbGVydCk7XG59KTtcbkFsZXJ0LmRpc3BsYXlOYW1lID0gJ0FsZXJ0JztcbkFsZXJ0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkFsZXJ0LkxpbmsgPSBBbGVydExpbms7XG5BbGVydC5IZWFkaW5nID0gQWxlcnRIZWFkaW5nO1xuZXhwb3J0IGRlZmF1bHQgQWxlcnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocCwgcmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICAgIH0pKTtcbiAgfSk7XG59KTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG52YXIgU3RhckZpbGwgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImNvbG9yXCIsIFwic2l6ZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgdmlld0JveDogXCIwIDAgMTYgMTZcIixcbiAgICB3aWR0aDogc2l6ZSxcbiAgICBoZWlnaHQ6IHNpemUsXG4gICAgZmlsbDogY29sb3JcbiAgfSwgcmVzdCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0zLjYxMiAxNS40NDNjLS4zODYuMTk4LS44MjQtLjE0OS0uNzQ2LS41OTJsLjgzLTQuNzNMLjE3MyA2Ljc2NWMtLjMyOS0uMzE0LS4xNTgtLjg4OC4yODMtLjk1bDQuODk4LS42OTZMNy41MzguNzkyYy4xOTctLjM5LjczLS4zOS45MjcgMGwyLjE4NCA0LjMyNyA0Ljg5OC42OTZjLjQ0MS4wNjIuNjEyLjYzNi4yODMuOTVsLTMuNTIzIDMuMzU2LjgzIDQuNzNjLjA3OC40NDMtLjM2Ljc5LS43NDYuNTkyTDggMTMuMTg3bC00LjM4OSAyLjI1NnpcIlxuICB9KSk7XG59KTtcblN0YXJGaWxsLnByb3BUeXBlcyA9IHtcbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKVxufTtcblN0YXJGaWxsLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBzaXplOiAnMWVtJ1xufTtcbmV4cG9ydCBkZWZhdWx0IFN0YXJGaWxsOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbnZhciBTdGFyID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBzaXplID0gX3JlZi5zaXplLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJjb2xvclwiLCBcInNpemVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE2IDE2XCIsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgaGVpZ2h0OiBzaXplLFxuICAgIGZpbGw6IGNvbG9yXG4gIH0sIHJlc3QpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTIuODY2IDE0Ljg1Yy0uMDc4LjQ0NC4zNi43OTEuNzQ2LjU5M2w0LjM5LTIuMjU2IDQuMzg5IDIuMjU2Yy4zODYuMTk4LjgyNC0uMTQ5Ljc0Ni0uNTkybC0uODMtNC43MyAzLjUyMy0zLjM1NmMuMzI5LS4zMTQuMTU4LS44ODgtLjI4My0uOTVsLTQuODk4LS42OTZMOC40NjUuNzkyYS41MTMuNTEzIDAgMCAwLS45MjcgMEw1LjM1NCA1LjEybC00Ljg5OC42OTZjLS40NDEuMDYyLS42MTIuNjM2LS4yODMuOTVsMy41MjMgMy4zNTYtLjgzIDQuNzN6bTQuOTA1LTIuNzY3bC0zLjY4NiAxLjg5NC42OTQtMy45NTdhLjU2NS41NjUgMCAwIDAtLjE2My0uNTA1TDEuNzEgNi43NDVsNC4wNTItLjU3NmEuNTI1LjUyNSAwIDAgMCAuMzkzLS4yODhsMS44NDctMy42NTggMS44NDYgMy42NThhLjUyNS41MjUgMCAwIDAgLjM5My4yODhsNC4wNTIuNTc1LTIuOTA2IDIuNzdhLjU2NC41NjQgMCAwIDAtLjE2My41MDZsLjY5NCAzLjk1Ny0zLjY4Ni0xLjg5NGEuNTAzLjUwMyAwIDAgMC0uNDYxIDB6XCJcbiAgfSkpO1xufSk7XG5TdGFyLnByb3BUeXBlcyA9IHtcbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKVxufTtcblN0YXIuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gIHNpemU6ICcxZW0nXG59O1xuZXhwb3J0IGRlZmF1bHQgU3RhcjsiLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFsZXJ0LCBDb250YWluZXIsIFJvdywgQ29sIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuaW1wb3J0IHsgU3RhciwgU3RhckZpbGwgfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwLWljb25zXCI7XG5cbmltcG9ydCB7IFNhbXBsZSwgUmVjb3JkaW5nIH0gZnJvbSBcInBpdGNoL3BpdGNoXCI7XG5pbXBvcnQgeyBQaXRjaCB9IGZyb20gXCJwaXRjaC9ub3Rlc1wiO1xuaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcblxudHlwZSBSYXRpbmdQcm9wcyA9IHtcbiAgbm86IG51bWJlcjtcbiAgb2Y6IG51bWJlcjtcbn07XG5mdW5jdGlvbiBSYXRpbmcoeyBubywgb2YgfTogUmF0aW5nUHJvcHMpIHtcbiAgbGV0IHN0YXJzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb2Y7IGkrKykge1xuICAgIHN0YXJzLnB1c2goaSA8PSBubyA/IDxTdGFyRmlsbCAvPiA6IDxTdGFyIC8+KTtcbiAgfVxuXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xzeChcInRleHQtcHJpbWFyeVwiLCBcImRpc3BsYXktM1wiKX0+e3N0YXJzfTwvZGl2Pjtcbn1cblxudHlwZSBTdW1tYXJ5UHJvcHMgPSB7XG4gIHJlY29yZGluZzogUmVjb3JkaW5nO1xuICByZWZlcmVuY2U6IFBpdGNoO1xufTtcbmNvbnN0IHN1bSA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gYSArIGI7XG5leHBvcnQgZnVuY3Rpb24gU3VtbWFyeSh7IHJlY29yZGluZywgcmVmZXJlbmNlIH06IFN1bW1hcnlQcm9wcykge1xuICBjb25zdCBub25FbXB0eSA9IHJlY29yZGluZy5maWx0ZXIoKHM/OiBTYW1wbGUpID0+ICEhcyk7XG4gIGNvbnN0IGZyZXFSZXN1bHQgPVxuICAgIG5vbkVtcHR5XG4gICAgICAubWFwKChzOiBTYW1wbGUpID0+IHMhLmZyZXF1ZW5jeSAtIHJlZmVyZW5jZS5mcmVxdWVuY3kpXG4gICAgICAucmVkdWNlKHN1bSwgMCkgLyBub25FbXB0eS5sZW5ndGg7XG5cbiAgY29uc3QgbWlkaVJlc3VsdCA9XG4gICAgbm9uRW1wdHlcbiAgICAgIC5tYXAoKHM6IFNhbXBsZSkgPT4gTWF0aC5hYnMocyEubm90ZSAtIHJlZmVyZW5jZS5ub3RlKSlcbiAgICAgIC5yZWR1Y2Uoc3VtLCAwKSAvIG5vbkVtcHR5Lmxlbmd0aDtcblxuICBsZXQgc3RhckNvdW50OiBudW1iZXI7XG4gIGlmIChtaWRpUmVzdWx0IDw9IDAuNSkge1xuICAgIHN0YXJDb3VudCA9IDU7XG4gIH0gZWxzZSBpZiAobWlkaVJlc3VsdCA8PSAxKSB7XG4gICAgLy8gd2l0aGluIGhhbGYgc3RlcFxuICAgIHN0YXJDb3VudCA9IDQ7XG4gIH0gZWxzZSBpZiAobWlkaVJlc3VsdCA8PSAyKSB7XG4gICAgLy8gd2l0aGluIHdob2xlIHN0ZXBcbiAgICBzdGFyQ291bnQgPSAzO1xuICB9IGVsc2UgaWYgKG1pZGlSZXN1bHQgPD0gNCkge1xuICAgIC8vIHdpdGhpbiB0aGlyZFxuICAgIHN0YXJDb3VudCA9IDI7XG4gIH0gZWxzZSBpZiAobWlkaVJlc3VsdCA8PSA3KSB7XG4gICAgLy8gd2l0aGlubiBmaWZ0aFxuICAgIHN0YXJDb3VudCA9IDE7XG4gIH0gZWxzZSB7XG4gICAgLy8geW91IHN1Y2tcbiAgICBzdGFyQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPFJvdz5cbiAgICAgICAgPENvbCBjbGFzc05hbWU9XCJwYi0zXCI+XG4gICAgICAgICAgPFJhdGluZyBubz17c3RhckNvdW50fSBvZj17NX0gLz5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cbiAgICAgIDxSb3c+XG4gICAgICAgIDxDb2wgY2xhc3NOYW1lPXtjbHN4KFwiY29sLW1kLTZcIiwgXCJvZmZzZXQtbWQtM1wiKX0+XG4gICAgICAgICAgPEFsZXJ0IHZhcmlhbnQ9e1wic3VjY2Vzc1wifT5cbiAgICAgICAgICAgIFJlY2VpdmVkIHtub25FbXB0eS5sZW5ndGh9IHNhbXBsZShzKSBhdmVyYWdpbmcgdG8ge2ZyZXFSZXN1bHR9IGZyb21cbiAgICAgICAgICAgIEM8c3ViPjQ8L3N1Yj4uXG4gICAgICAgICAgPC9BbGVydD5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwibG9nXCI7XG5cbmltcG9ydCB7IG1sNVBpdGNoRGV0ZWN0aW9uLCBQaXRjaEdlbmVyYXRvciwgUmVjb3JkaW5nIH0gZnJvbSBcInBpdGNoL3BpdGNoXCI7XG5pbXBvcnQgeyBQaXRjaCwgbm90ZSwgbm90ZVRvRnJlcSB9IGZyb20gXCJwaXRjaC9ub3Rlc1wiO1xuXG5pbXBvcnQgeyBQaXRjaFJlY29yZGVyIH0gZnJvbSBcIi4vUGl0Y2hSZWNvcmRlclwiO1xuaW1wb3J0IHsgU3VtbWFyeSB9IGZyb20gXCIuL1N1bW1hcnlcIjtcblxuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5jb25zdCBQaXRjaERldGVjdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgW3N0YXJ0ZWQsIHNldElzU3RhcnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gQXVkaW8gaW50ZXJmYWNlc1xuICBjb25zdCBbYXVkaW9Db250ZXh0LCBfXSA9IHVzZVN0YXRlKG5ldyBBdWRpb0NvbnRleHQoKSk7IC8vIHJlYWQtb25seVxuICBjb25zdCBbc3RyZWFtLCBzZXRTdHJlYW1dID0gdXNlU3RhdGU8TWVkaWFTdHJlYW0+KCk7XG4gIGNvbnN0IFtwaXRjaERldGVjdGlvbkdlbmVyYXRvciwgc2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3JdID0gdXNlU3RhdGU8XG4gICAgUGl0Y2hHZW5lcmF0b3JcbiAgPigpO1xuICBjb25zdCBbcmVjb3JkaW5nLCBzZXRSZWNvcmRpbmddID0gdXNlU3RhdGU8UmVjb3JkaW5nPigpO1xuXG4gIC8vIFNldCB1cCB0aGUgbWljcm9waG9uZS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMT0cuaW5mbyhcIkFjcXVpcmluZyBtaWNyb3Bob25lLlwiKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzXG4gICAgICAuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAudGhlbigobmV3U3RyZWFtKSA9PiB7XG4gICAgICAgIExPRy5kZWJ1ZyhcbiAgICAgICAgICBcIk1pY3JvcGhvbmUgaW5pdGlhbGl6ZWQgd2l0aCBzdHJlYW06ICVqLCBhY3RpdmU/LCAlcywgc3RhdGU6ICVzLlwiLFxuICAgICAgICAgIG5ld1N0cmVhbSxcbiAgICAgICAgICBuZXdTdHJlYW0uYWN0aXZlLFxuICAgICAgICAgIG5ld1N0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdLnJlYWR5U3RhdGVcbiAgICAgICAgKTtcbiAgICAgICAgc2V0U3RyZWFtKG5ld1N0cmVhbSk7XG4gICAgICB9KTtcbiAgfSwgW3N0YXJ0ZWRdKTtcblxuICAvLyBDb25maWd1cmUgdGhlIGF1ZGlvIHN0cmVhbS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXN0YXJ0ZWQgfHwgc3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMT0cuaW5mbyhcIlNldHRpbmcgdXAgdGhlIGNvbnRleHQgJWogYW5kIHN0cmVhbSAlalwiLCBhdWRpb0NvbnRleHQsIHN0cmVhbSk7XG4gICAgYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG5cbiAgICBMT0cuaW5mbyhcIkluaXRpYWxpemVkIGF1ZGlvLlwiKTtcbiAgICBzZXRQaXRjaERldGVjdGlvbkdlbmVyYXRvcihtbDVQaXRjaERldGVjdGlvbihhdWRpb0NvbnRleHQsIHN0cmVhbSkpO1xuICAgIGF1ZGlvQ29udGV4dC5yZXN1bWUoKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBMT0cuaW5mbyhcIkNsZWFudXAgdGhlIGF1ZGlvIHNldHRpbmdzXCIpO1xuXG4gICAgICBMT0cuZGVidWcoXCJTdG9wIGFsbCB0cmFja3MgaW4gdGhlIHN0cmVhbSAlai5cIiwgc3RyZWFtKTtcbiAgICAgIHN0cmVhbT8uZ2V0VHJhY2tzKCkuZm9yRWFjaCgodCkgPT4gdC5zdG9wKCkpO1xuXG4gICAgICBMT0cuZGVidWcoXCJTdXNwZW5kIGF1ZGlvIGNvbnRleHQgJWouXCIsIGF1ZGlvQ29udGV4dCk7XG4gICAgICBhdWRpb0NvbnRleHQuc3VzcGVuZCgpO1xuICAgIH07XG4gIH0sIFtzdHJlYW0sIHN0YXJ0ZWRdKTtcblxuICBpZiAocmVjb3JkaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCByZWZlcmVuY2VQaXRjaCA9IG5vdGUobm90ZVRvRnJlcSg2MCkpIGFzIFBpdGNoO1xuXG4gICAgcmV0dXJuIDxTdW1tYXJ5IHJlY29yZGluZz17cmVjb3JkaW5nfSByZWZlcmVuY2U9e3JlZmVyZW5jZVBpdGNofSAvPjtcbiAgfSBlbHNlIGlmIChzdGFydGVkICYmIHBpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQaXRjaFJlY29yZGVyXG4gICAgICAgIG9uRmluaXNoPXsocmVzdWx0KSA9PiB7XG4gICAgICAgICAgTE9HLmluZm8oXCJSZXN1bHQsICVqXCIsIHJlc3VsdCk7XG4gICAgICAgICAgc2V0UmVjb3JkaW5nKHJlc3VsdCk7XG4gICAgICAgICAgc2V0SXNTdGFydGVkKGZhbHNlKTtcbiAgICAgICAgfX1cbiAgICAgICAgcGl0Y2hHZW5lcmF0b3I9e3BpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yfVxuICAgICAgICB0aW1lb3V0TXM9ezUwMDB9XG4gICAgICAvPlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCdXR0b25cbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNTdGFydGVkKHRydWUpfVxuICAgICAgICB2YXJpYW50PVwib3V0bGluZS1wcmltYXJ5XCJcbiAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgID5cbiAgICAgICAgY2xpY2sgdG8gc3RhcnRcbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFBpdGNoRGV0ZWN0aW9uIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuL0FwcC5jc3NcIjtcblxuaW1wb3J0IHsgUGl0Y2hEZXRlY3Rpb24gfSBmcm9tIFwiLi9jb21wb25lbnRzL1BpdGNoRGV0ZWN0aW9uXCI7XG5cbmltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XG5cbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCJsb2dcIjtcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcbmNvbnN0IExPRyA9IGdldExvZ2dlcigpO1xuXG5leHBvcnQgY29uc3QgQXBwID0gKCkgPT4ge1xuICBMT0cuaW5mbyhcIlN0YXJ0aW5nIGFwcC5cIik7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPXtjbHN4KFwidGV4dC1jZW50ZXJcIiwgXCJtdC01XCIpfT5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT17Y2xzeChcImRpc3BsYXktMVwiLCBcInRleHQtcHJpbWFyeVwiLCBcInRpdGxlXCIpfT52b2NhbGx5PC9oMT5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT17XCJ0ZXh0LXNlY29uZGFyeVwifT5cbiAgICAgICAgICBzaW5nIEM8c3ViPjQ8L3N1Yj4hXG4gICAgICAgIDwvaDI+XG4gICAgICA8L2hlYWRlcj5cblxuICAgICAgPG1haW4gY2xhc3NOYW1lPXtjbHN4KFwidGV4dC1jZW50ZXJcIiwgXCJweS01XCIpfSByb2xlPVwibWFpblwiPlxuICAgICAgICA8UGl0Y2hEZXRlY3Rpb24gLz5cbiAgICAgIDwvbWFpbj5cblxuICAgICAgPGZvb3RlciBjbGFzc05hbWU9e2Nsc3goXCJweS0zXCIsIFwiYm9yZGVyLXRvcFwiLCBcInRleHQtbXV0ZWRcIil9PlxuICAgICAgICA8Q29udGFpbmVyPlxuICAgICAgICAgIDxwPnZvY2FsbHkuYXBwIDIwMjA8L3A+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgPC9mb290ZXI+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcblxuUmVhY3RET00ucmVuZGVyKDxBcHA+PC9BcHA+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9