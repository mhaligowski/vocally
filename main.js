!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=28)}([function(t,e){t.exports=React},function(t,e,n){"use strict";function r(t){switch(Object.prototype.toString.call(t)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return l(t,Error)}}function o(t){return"[object String]"===Object.prototype.toString.call(t)}function i(t){return null===t||"object"!=typeof t&&"function"!=typeof t}function a(t){return"[object Object]"===Object.prototype.toString.call(t)}function c(t){return"undefined"!=typeof Event&&l(t,Event)}function u(t){return"undefined"!=typeof Element&&l(t,Element)}function f(t){return"[object RegExp]"===Object.prototype.toString.call(t)}function s(t){return a(t)&&"nativeEvent"in t&&"preventDefault"in t&&"stopPropagation"in t}function l(t,e){try{return t instanceof e}catch(t){return!1}}n.d(e,"b",(function(){return r})),n.d(e,"h",(function(){return o})),n.d(e,"f",(function(){return i})),n.d(e,"e",(function(){return a})),n.d(e,"c",(function(){return c})),n.d(e,"a",(function(){return u})),n.d(e,"g",(function(){return f})),n.d(e,"i",(function(){return s})),n.d(e,"d",(function(){return l}))},function(t,e){t.exports=ReactBootstrap},function(t,e){t.exports=PropTypes},function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return o}));n(1);function r(t,e){return void 0===e&&(e=0),"string"!=typeof t||0===e||t.length<=e?t:t.substr(0,e)+"..."}function o(t,e){var n=t,r=n.length;if(r<=150)return n;e>r&&(e=r);var o=Math.max(e-60,0);o<5&&(o=0);var i=Math.min(o+140,r);return i>r-5&&(i=r),i===r&&(o=Math.max(i-140,0)),n=n.slice(o,i),o>0&&(n="'{snip} "+n),i<r&&(n+=" {snip}"),n}},function(t,e){t.exports=Sentry},function(t,e,n){"use strict";(function(t,r){n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return i}));n(1),n(16);function o(){return"[object process]"===Object.prototype.toString.call(void 0!==t?t:0)}function i(t,e){return t.require(e)}}).call(this,n(27),n(11)(t))},function(t,e){t.exports=ReactDOM},function(t,e){t.exports=LogRocket},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return i}));var r=n(6),o=(n(4),{});function i(){return Object(r.b)()?t:"undefined"!=typeof window?window:"undefined"!=typeof self?self:o}}).call(this,n(12))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(1);function o(t){try{for(var e=t,n=[],r=0,o=0,a=" > ".length,c=void 0;e&&r++<5&&!("html"===(c=i(e))||r>1&&o+n.length*a+c.length>=80);)n.push(c),o+=c.length,e=e.parentNode;return n.reverse().join(" > ")}catch(t){return"<unknown>"}}function i(t){var e,n,o,i,a,c=t,u=[];if(!c||!c.tagName)return"";if(u.push(c.tagName.toLowerCase()),c.id&&u.push("#"+c.id),(e=c.className)&&Object(r.h)(e))for(n=e.split(/\s+/),a=0;a<n.length;a++)u.push("."+n[a]);var f=["type","name","title","alt"];for(a=0;a<f.length;a++)o=f[a],(i=c.getAttribute(o))&&u.push("["+o+'="'+i+'"]');return u.join("")}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=Sentry.Integrations},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){o({ResponderEventPlugin:{extractEvents:function(t,e,n,r){try{if("click"!==t||!n||!r)return;for(var o=n,i=[];o;){var a="function"==typeof o.elementType&&o.elementType.displayName;a&&i.push(a),o=o.return}r.__lrName=i}catch(t){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(7),o=void 0,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;o=i&&i.Events&&i.Events[3]?i.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},t.exports=e.default},function(t,e,n){"use strict";var r=n(25),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function u(t){return r.isMemo(t)?a:c[t.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var f=Object.defineProperty,s=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,m=Object.prototype;t.exports=function t(e,n,r){if("string"!=typeof n){if(m){var o=d(n);o&&o!==m&&t(e,o,r)}var a=s(n);l&&(a=a.concat(l(n)));for(var c=u(e),y=u(n),h=0;h<a.length;++h){var v=a[h];if(!(i[v]||r&&r[v]||y&&y[v]||c&&c[v])){var b=p(n,v);try{f(e,v,b)}catch(t){}}}}return e}},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return s}));n(19);var r=n(10),o=n(1),i=n(18),a=n(17);n(4);function c(t){if(Object(o.b)(t)){var e=t,n={message:e.message,name:e.name,stack:e.stack};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n}if(Object(o.c)(t)){var a=t,c={};c.type=a.type;try{c.target=Object(o.a)(a.target)?Object(r.a)(a.target):Object.prototype.toString.call(a.target)}catch(t){c.target="<unknown>"}try{c.currentTarget=Object(o.a)(a.currentTarget)?Object(r.a)(a.currentTarget):Object.prototype.toString.call(a.currentTarget)}catch(t){c.currentTarget="<unknown>"}for(var i in"undefined"!=typeof CustomEvent&&Object(o.d)(t,CustomEvent)&&(c.detail=a.detail),a)Object.prototype.hasOwnProperty.call(a,i)&&(c[i]=a);return c}return t}function u(e,n){return"domain"===n&&e&&"object"==typeof e&&e._events?"[Domain]":"domainEmitter"===n?"[DomainEmitter]":void 0!==t&&e===t?"[Global]":"undefined"!=typeof window&&e===window?"[Window]":"undefined"!=typeof document&&e===document?"[Document]":Object(o.i)(e)?"[SyntheticEvent]":"number"==typeof e&&e!=e?"[NaN]":void 0===e?"[undefined]":"function"==typeof e?"[Function: "+Object(a.a)(e)+"]":e}function f(t,e,n,r){if(void 0===n&&(n=1/0),void 0===r&&(r=new i.a),0===n)return function(t){var e=Object.prototype.toString.call(t);if("string"==typeof t)return t;if("[object Object]"===e)return"[Object]";if("[object Array]"===e)return"[Array]";var n=u(t);return Object(o.f)(n)?n:e}(e);if(null!=e&&"function"==typeof e.toJSON)return e.toJSON();var a=u(e,t);if(Object(o.f)(a))return a;var s=c(e),l=Array.isArray(e)?[]:{};if(r.memoize(e))return"[Circular ~]";for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(l[p]=f(p,s[p],n-1,r));return r.unmemoize(e),l}function s(t,e){try{return JSON.parse(JSON.stringify(t,(function(t,n){return f(t,n,e)})))}catch(t){return"**non-serializable**"}}}).call(this,n(12))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));function r(t){try{return t&&"function"==typeof t&&t.name||"<anonymous>"}catch(t){return"<anonymous>"}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return t.prototype.memoize=function(t){if(this._hasWeakSet)return!!this._inner.has(t)||(this._inner.add(t),!1);for(var e=0;e<this._inner.length;e++){if(this._inner[e]===t)return!0}return this._inner.push(t),!1},t.prototype.unmemoize=function(t){if(this._hasWeakSet)this._inner.delete(t);else for(var e=0;e<this._inner.length;e++)if(this._inner[e]===t){this._inner.splice(e,1);break}},t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}},,function(t,e,n){var r=n(22),o=n(23);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function c(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function u(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],u=e.base?i[0]+e.base:i[0],f=n[u]||0,s="".concat(u," ").concat(f);n[u]=f+1;var l=c(s),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(a[l].references++,a[l].updater(p)):a.push({identifier:s,updater:h(p,e),references:1}),r.push(s)}return r}function f(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var s,l=(s=[],function(t,e){return s[t]=e,s.filter(Boolean).join("\n")});function p(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var m=null,y=0;function h(t,e){var n,r,o;if(e.singleton){var i=y++;n=m||(m=f(e)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=f(e),r=d.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(t,e),f=0;f<n.length;f++){var s=c(n[f]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(t,e,n){},function(t,e){t.exports=ml5},function(t,e,n){"use strict";t.exports=n(26)},function(t,e,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,f=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,l=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,O=r?Symbol.for("react.scope"):60119;function S(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case o:switch(t=t.type){case l:case p:case a:case u:case c:case m:return t;default:switch(t=t&&t.$$typeof){case s:case d:case v:case h:case f:return t;default:return e}}case i:return e}}}function j(t){return S(t)===p}e.AsyncMode=l,e.ConcurrentMode=p,e.ContextConsumer=s,e.ContextProvider=f,e.Element=o,e.ForwardRef=d,e.Fragment=a,e.Lazy=v,e.Memo=h,e.Portal=i,e.Profiler=u,e.StrictMode=c,e.Suspense=m,e.isAsyncMode=function(t){return j(t)||S(t)===l},e.isConcurrentMode=j,e.isContextConsumer=function(t){return S(t)===s},e.isContextProvider=function(t){return S(t)===f},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===o},e.isForwardRef=function(t){return S(t)===d},e.isFragment=function(t){return S(t)===a},e.isLazy=function(t){return S(t)===v},e.isMemo=function(t){return S(t)===h},e.isPortal=function(t){return S(t)===i},e.isProfiler=function(t){return S(t)===u},e.isStrictMode=function(t){return S(t)===c},e.isSuspense=function(t){return S(t)===m},e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===a||t===p||t===u||t===c||t===m||t===y||"object"==typeof t&&null!==t&&(t.$$typeof===v||t.$$typeof===h||t.$$typeof===f||t.$$typeof===s||t.$$typeof===d||t.$$typeof===g||t.$$typeof===w||t.$$typeof===O||t.$$typeof===b)},e.typeOf=S},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,f=[],s=!1,l=-1;function p(){s&&u&&(s=!1,u.length?f=u.concat(f):l=-1,f.length&&d())}function d(){if(!s){var t=c(p);s=!0;for(var e=f.length;e;){for(u=f,f=[];++l<e;)u&&u[l].run();l=-1,e=f.length}u=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function m(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new m(t,e)),1!==f.length||s||c(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),i=n(7),a=n(5),c=n(13),u=n(8),f=n.n(u),s=n(14),l=n.n(s);n(21);function p(t){var e,n,r="";if("string"==typeof t||"number"==typeof t)r+=t;else if("object"==typeof t)if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=p(t[e]))&&(r&&(r+=" "),r+=n);else for(e in t)t[e]&&(r&&(r+=" "),r+=e);return r}var d=function(){for(var t,e,n=0,r="";n<arguments.length;)(t=arguments[n++])&&(e=p(t))&&(r&&(r+=" "),r+=e);return r},m=function(){return console},y=n(2),h=function(t,e){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function v(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}var b=n(31),g=(n(15),{id:"Tracing"}),w=null;!function(t){function e(e){var n=t.call(this,e)||this;n._mountActivity=null,n._mountSpan=void 0;var r=n.props,o=r.name,i=r.disabled;if(void 0!==i&&i)return n;if(w||(w=Object(a.getCurrentHub)().getIntegration(g)))n._mountActivity=function(t,e){return null===w?null:w.constructor.pushActivity(t,{description:"<"+t+">",op:"react."+e})}(o,"mount");else{var c=O();c&&(n._mountSpan=c.startChild({description:"<"+o+">",op:"react.mount"}))}return n}(function(t,e){function n(){this.constructor=t}h(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)})(e,t),e.prototype.componentDidMount=function(){var t;this._mountSpan?this._mountSpan.finish():(this._mountSpan=function(t){if(null!==t&&null!==w)return w.constructor.getActivitySpan(t)}(this._mountActivity),null!==(t=this._mountActivity)&&null!==w&&w.constructor.popActivity(t),this._mountActivity=null)},e.prototype.componentDidUpdate=function(t){var e=this,n=t.updateProps,r=t.includeUpdates;if((void 0===r||r)&&this._mountSpan&&n!==this.props.updateProps){var o=Object.keys(n).filter((function(t){return n[t]!==e.props.updateProps[t]}));if(o.length>0){var i=Object(b.a)();this._mountSpan.startChild({data:{changedProps:o},description:"<"+this.props.name+">",endTimestamp:i,op:"react.update",startTimestamp:i})}}},e.prototype.componentWillUnmount=function(){var t=this.props,e=t.name,n=t.includeRender,r=void 0===n||n;this._mountSpan&&r&&this._mountSpan.startChild({description:"<"+e+">",endTimestamp:Object(b.a)(),op:"react.render",startTimestamp:this._mountSpan.endTimestamp})},e.prototype.render=function(){return this.props.children},e.defaultProps={disabled:!1,includeRender:!0,includeUpdates:!0}}(r.Component);function O(t){if(void 0===t&&(t=Object(a.getCurrentHub)()),t){var e=t.getScope();if(e)return e.getTransaction()}}n(24);var S=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],j=function(t){return 440*Math.pow((t-69)/12,2)},E=function(t){return 69+12*Math.log2(t/440)},x=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._freq=e,this.note=Math.round(E(e)),this.frequency=j(this.note),this.name=function(t){return S[(t-21)%12]}(this.note),this.octave=function(t){return Math.floor(t/12-1)}(this.note)},T=function(t){if(null==t)return null;var e,n,r=new x(t);return{frequency:t,target:r,note:E(t),diff:(e=r.frequency,n=t,1200*Math.log2(n/e))}},_=function(t){return this instanceof _?(this.v=t,this):new _(t)},C=function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=o[t](e)).value instanceof _?Promise.resolve(n.value.v).then(u,f):s(i[0][2],n)}catch(t){s(i[0][3],t)}var n}function u(t){c("next",t)}function f(t){c("throw",t)}function s(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}},P=m(),A="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function k(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return M(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return M(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var N=function(t){var e=k(Object(r.useState)(!1),2),n=e[0],o=e[1],i=k(Object(r.useState)(),2),a=i[0],c=i[1];return Object(r.useEffect)((function(){var e=!0;return t.generator.next().then((function(t){!t.done&&e&&(c(t.value||void 0),o(!n))})),function(){e=!1}}),[n]),Object(r.useEffect)((function(){t.onTick&&a&&t.onTick(a)}),[a]),"function"==typeof t.children?t.children(a):t.children};function $(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return R(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return R(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var I=m();function z(t){var e=t.pitchGenerator,n=t.timeoutMs,i=t.onFinish,a=$(Object(r.useState)([]),2),c=a[0],u=a[1],f=$(Object(r.useState)(!1),2),s=f[0],l=f[1],p=$(Object(r.useState)(!1),2),d=p[0],m=p[1];Object(r.useEffect)((function(){if(!s)return function(){};I.info("Setting up the timeout.");var t=setTimeout((function(){m(!0),l(!1)}),n);return I.info("Set up timer %d for %d ms.",t,n),function(){I.info("Clearing out the timeout %d.",t),clearTimeout(t)}}),[s]),Object(r.useEffect)((function(){d&&(I.info("Finishing recording."),i(c))}),[d,c]);var h=s?o.a.createElement(y.Spinner,{animation:"grow",variant:"danger"}):o.a.createElement("span",null,"sing now!");return e?o.a.createElement(N,{generator:e,onTick:function(t){var e=c.concat([t]);u(e),s||l(!0)}},o.a.createElement("h3",null,h)):o.a.createElement(y.Spinner,{animation:"border",variant:"primary"})}var D=n(3),L=n.n(D);function F(){return(F=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function B(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var U=Object(r.forwardRef)((function(t,e){var n=t.color,r=t.size,i=B(t,["color","size"]);return o.a.createElement("svg",F({ref:e,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},i),o.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));U.propTypes={color:L.a.string,size:L.a.oneOfType([L.a.string,L.a.number])},U.defaultProps={color:"currentColor",size:"1em"};var q=U;function W(){return(W=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function G(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var J=Object(r.forwardRef)((function(t,e){var n=t.color,r=t.size,i=G(t,["color","size"]);return o.a.createElement("svg",W({ref:e,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},i),o.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));J.propTypes={color:L.a.string,size:L.a.oneOfType([L.a.string,L.a.number])},J.defaultProps={color:"currentColor",size:"1em"};var H=J;function V(t){for(var e=t.no,n=t.of,r=[],i=0;i<n;i+=1)r.push(i<=e?o.a.createElement(q,null):o.a.createElement(H,null));return o.a.createElement("div",{className:d("text-primary","display-3")},r)}var Y=function(t,e){return t+e},K=function(t){var e,n=t.recording,r=t.reference,i=n.filter((function(t){return!!t})),a=i.map((function(t){return t.frequency-r.frequency})).reduce(Y,0)/i.length,c=i.map((function(t){return Math.abs(t.note-r.note)})).reduce(Y,0)/i.length;return e=c<=.5?5:c<=1?4:c<=2?3:c<=4?2:c<=7?1:0,o.a.createElement(y.Container,null,o.a.createElement(y.Row,null,o.a.createElement(y.Col,{className:"pb-3"},o.a.createElement(V,{no:e,of:5}))),o.a.createElement(y.Row,null,o.a.createElement(y.Col,{className:d("col-md-6","offset-md-3")},o.a.createElement(y.Alert,{variant:"success"},"Received ",i.length," sample(s) averaging to ",a," from C",o.a.createElement("sub",null,"4"),"."))))};function Q(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return X(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return X(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Z=m(),tt=function(){!function(t,e){void 0===e&&(e={disabled:!1,hasRenderSpan:!0});var n=v(r.useState((function(){if(!e||!e.disabled){var n=O();return n?n.startChild({description:"<"+t+">",op:"react.mount"}):void 0}})),1)[0];r.useEffect((function(){return n&&n.finish(),function(){n&&e.hasRenderSpan&&n.startChild({description:"<"+t+">",endTimestamp:Object(b.a)(),op:"react.render",startTimestamp:n.endTimestamp})}}),[])}("PitchDetection");var t=Q(Object(r.useState)(!1),2),e=t[0],n=t[1],i=window.AudioContext||window.webkitAudioContext,a=Q(Object(r.useState)(new i),1)[0],c=Q(Object(r.useState)(),2),u=c[0],f=c[1],s=Q(Object(r.useState)(),2),l=s[0],p=s[1],d=Q(Object(r.useState)(),2),m=d[0],h=d[1];if(Object(r.useEffect)((function(){e&&(Z.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(t){Z.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",t,t.active,t.getAudioTracks()[0].readyState),f(t)})))}),[e]),Object(r.useEffect)((function(){return e&&void 0!==u?(Z.info("Setting up the context %j and stream %j",a,u),a.createMediaStreamSource(u),Z.info("Initialized audio."),p(function(t,e){return C(this,arguments,regeneratorRuntime.mark((function n(){var r,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=ml5.pitchDetection(A,t,e),P.info("Created pitch detection.",r),n.next=4,_(r.ready);case 4:P.info("Initialized the model.");case 5:if(!e.active||"running"!==t.state){n.next=19;break}return n.next=8,_(r.getPitch());case 8:if(null!==(o=n.sent)){n.next=13;break}P.debug("Skipping"),n.next=17;break;case 13:return n.next=15,_(T(o));case 15:return n.next=17,n.sent;case 17:n.next=5;break;case 19:case"end":return n.stop()}}),n)})))}(a,u)),a.resume(),function(){Z.info("Cleanup the audio settings"),Z.debug("Stop all tracks in the stream %j.",u),null==u||u.getTracks().forEach((function(t){return t.stop()})),Z.debug("Suspend audio context %j.",a),a.suspend()}):function(){}}),[u,e]),void 0!==m){var g=T(j(60));return o.a.createElement(K,{recording:m,reference:g})}return e&&l?o.a.createElement(z,{onFinish:function(t){Z.info("Result, %j",t),h(t),n(!1)},pitchGenerator:l,timeoutMs:5e3}):o.a.createElement(y.Button,{onClick:function(){return n(!0)},variant:"outline-primary",size:"lg"},"click to start")},et=m(),nt=function(){return et.info("Starting app."),o.a.createElement(y.Container,null,o.a.createElement("header",{className:d("text-center","mt-5")},o.a.createElement("h1",{className:d("display-1","text-primary","title")},"vocally"),o.a.createElement("h2",{className:"text-secondary"},"sing C",o.a.createElement("sub",null,"4"),"!")),o.a.createElement("main",{className:d("text-center","py-5"),role:"main"},o.a.createElement(tt,null)),o.a.createElement("footer",{className:d("py-3","border-top","text-muted")},o.a.createElement(y.Container,null,o.a.createElement("p",null,"vocally.app 2020"))))};a.init({dsn:"https://ffe439ac65b84889a37518037a23a7b1@o433557.ingest.sentry.io/5388917",release:"testing",environment:"testing",integrations:[new c.CaptureConsole({levels:["info"]}),new a.Integrations.BrowserTracing]}),f.a.init("6ayqi7/vocallytest",{release:"testing"}),l()(f.a),i.render(r.createElement(nt,null),document.getElementById("app"))},,,function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return u}));var r=n(9),o=n(6),i={nowSeconds:function(){return Date.now()/1e3}};var a=Object(o.b)()?function(){try{return Object(o.a)(t,"perf_hooks").performance}catch(t){return}}():function(){var t=Object(r.a)().performance;if(t&&t.now)return{now:function(){return t.now()},timeOrigin:Date.now()-t.now()}}(),c=void 0===a?i:{nowSeconds:function(){return(a.timeOrigin+a.now())/1e3}},u=(i.nowSeconds.bind(i),c.nowSeconds.bind(c));!function(){var t=Object(r.a)().performance;if(t)t.timeOrigin?t.timeOrigin:t.timing&&t.timing.navigationStart||Date.now()}()}).call(this,n(11)(t))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,