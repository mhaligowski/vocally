!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t){e.exports=React},function(e,t){e.exports=ReactBootstrap},function(e,t){e.exports=ReactRouterDOM},function(e,t){e.exports=PropTypes},function(e,t){e.exports=Recharts},function(e,t){e.exports=Sentry},function(e,t){e.exports=ReactDOM},function(e,t){e.exports=LogRocket},function(e,t,n){"use strict";t.__esModule=!0,t.LinkContainer=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=n(0),i=u(a),c=u(n(3)),l=n(2);function u(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},m=t.LinkContainer=function(e){function t(){var n,r;s(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=f(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){var t=r.props,n=t.children,o=t.onClick;if(n.props.onClick&&n.props.onClick(e),o&&o(e),!e.defaultPrevented&&0===e.button&&!p(e)){e.preventDefault();var a=r.props,i=a.replace,c=a.to,l=a.history;i?l.replace(c):l.push(c)}},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.history,a=(t.location,t.match,t.staticContext,t.children),c=(t.replace,t.to),u=t.exact,s=t.strict,f=t.activeClassName,p=t.className,m=t.activeStyle,d=t.style,y=t.isActive,h=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["history","location","match","staticContext","children","replace","to","exact","strict","activeClassName","className","activeStyle","style","isActive"]),v=n.createHref("string"==typeof c?{pathname:c}:c),b=i.default.Children.only(a);return i.default.createElement(l.Route,{path:"object"===(void 0===c?"undefined":o(c))?c.pathname:c,exact:u,strict:s,children:function(t){var n=t.location,o=t.match,a=!!(y?y(o,n):o);return i.default.cloneElement(b,r({},h,{className:[p,b.props.className,a?f:null].join(" ").trim(),style:a?r({},d,m):d,href:v,onClick:e.handleClick}))}})},t}(a.Component);m.propTypes={history:c.default.shape({push:c.default.func.isRequired,replace:c.default.func.isRequired,createHref:c.default.func.isRequired}).isRequired,location:c.default.object,match:c.default.object,staticContext:c.default.object,children:c.default.element.isRequired,onClick:c.default.func,replace:c.default.bool,to:c.default.oneOfType([c.default.string,c.default.object]).isRequired,exact:c.default.bool,strict:c.default.bool,className:c.default.string,activeClassName:c.default.string,style:c.default.object,activeStyle:c.default.object,isActive:c.default.func},m.defaultProps={replace:!1,exact:!1,strict:!1,activeClassName:"active"},t.default=(0,l.withRouter)(m)},function(e,t){e.exports=Sentry.Integrations},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){o({ResponderEventPlugin:{extractEvents:function(e,t,n,r){try{if("click"!==e||!n||!r)return;for(var o=n,a=[];o;){var i="function"==typeof o.elementType&&o.elementType.displayName;i&&a.push(i),o=o.return}r.__lrName=a}catch(e){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(6),o=void 0,a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;o=a&&a.Events&&a.Events[3]?a.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.LinkContainer=t.IndexLinkContainer=void 0;var r=a(n(17)),o=a(n(8));function a(e){return e&&e.__esModule?e:{default:e}}t.IndexLinkContainer=r.default,t.LinkContainer=o.default},function(e,t,n){"use strict";var r=n(19),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function l(e){return r.isMemo(e)?i:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=i;var u=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,m=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var o=m(n);o&&o!==d&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var c=l(t),y=l(n),h=0;h<i.length;++h){var v=i[h];if(!(a[v]||r&&r[v]||y&&y[v]||c&&c[v])){var b=p(n,v);try{u(t,v,b)}catch(e){}}}}return t}},,function(e,t,n){var r=n(15),o=n(16);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],l=t.base?a[0]+t.base:a[0],u=n[l]||0,s="".concat(l," ").concat(u);n[l]=u+1;var f=c(s),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(p)):i.push({identifier:s,updater:h(p,t),references:1}),r.push(s)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function m(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,y=0;function h(e,t){var n,r,o;if(t.singleton){var a=y++;n=d||(d=u(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=u(t),r=m.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);i[o].references--}for(var a=l(e,t),u=0;u<n.length;u++){var s=c(n[u]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=a}}}},function(e,t,n){},function(e,t,n){"use strict";t.__esModule=!0,t.IndexLinkContainer=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(0)),a=n(2),i=c(n(8));function c(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=t.IndexLinkContainer=function(e){function t(){return l(this,t),u(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return o.default.createElement(i.default,r({},this.props,{exact:!0}))},t}(o.default.Component);t.default=(0,a.withRouter)(s)},function(e,t){e.exports=ml5},function(e,t,n){"use strict";e.exports=n(20)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,m=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,E=r?Symbol.for("react.responder"):60118,S=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case i:case l:case c:case d:return e;default:switch(e=e&&e.$$typeof){case s:case m:case v:case h:case u:return e;default:return t}}case a:return t}}}function O(e){return w(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=u,t.Element=o,t.ForwardRef=m,t.Fragment=i,t.Lazy=v,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=c,t.Suspense=d,t.isAsyncMode=function(e){return O(e)||w(e)===f},t.isConcurrentMode=O,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===m},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===v},t.isMemo=function(e){return w(e)===h},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===c},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===l||e===c||e===d||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===m||e.$$typeof===g||e.$$typeof===E||e.$$typeof===S||e.$$typeof===b)},t.typeOf=w},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(6),i=n(5),c=n(9),l=n(7),u=n.n(l),s=n(10),f=n.n(s),p=n(2);n(14);function m(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=m(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var d=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=m(e))&&(r&&(r+=" "),r+=t);return r},y=function(){return console};function h(e){return{debug:function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return console.debug(e,n)},info:function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return console.info(e,n)}}}var v=n(1),b=function(e){var t=e.next;return h("Hello").info("Hello"),o.a.createElement(v.Container,null,o.a.createElement(v.Row,{className:d("text-center")},o.a.createElement(v.Col,null,o.a.createElement("h1",{className:"display-6"},"how accurate can you sing?"))),o.a.createElement(v.Row,{className:"mt-5"},o.a.createElement(v.Col,{sm:12,md:6},o.a.createElement("p",null,o.a.createElement("span",{className:"logo"},"vocally")," lets you put your singing"," ",o.a.createElement("strong",null,"voice")," to the test. No sign-ups, no payments, no tracking, no content sharing. Your voice recording is"," ",o.a.createElement("strong",null,"not being stored anywhere "),", so you don‘t have worry about someone listening to you."),o.a.createElement("p",null,"vocally uses state-of-the-art artificial intelligence model that analyses the pitch of your voice over time and compares it to the reference note. Everything without reaching any server!")),o.a.createElement(v.Col,null,o.a.createElement("h3",null,"Checking your pitch accuracy is simple as 1-2-3"),o.a.createElement("ol",null,o.a.createElement("li",null,o.a.createElement("strong",null,"listen")," to the sample"),o.a.createElement("li",null,o.a.createElement("strong",null,"sing")," the tune for 3 seconds"),o.a.createElement("li",null,o.a.createElement("strong",null,"see")," the results immediately")))),o.a.createElement(v.Row,{className:"mt-5"},o.a.createElement(v.Col,null,o.a.createElement("p",{className:d("text-center")},o.a.createElement(p.Link,{to:t},o.a.createElement(v.Button,{variant:"outline-primary",size:"lg"},"start the test now!"))))))},g=n(11),E=n.p+"3941a1eab40276243332df676e06a013.ogg";function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return w(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var O=y(),j=function(){var e=S(Object(r.useState)(!1),2),t=e[0],n=e[1],a=S(Object(r.useState)(new Audio(E)),1)[0];Object(r.useEffect)((function(){O.info("Changed playing: %s",t)}),[t]);var i=t?"playing...":"play the note";return o.a.createElement(v.Button,{variant:"outline-primary",size:"lg",disabled:t,onClick:function(){var e;n(!0),e=function(){n(!1)},a.src=E,a.onended=e,a.muted=!1,a.play()}},i)},x=function(e){var t=e.next;return o.a.createElement(v.Container,{className:"text-center"},o.a.createElement(v.Row,null,o.a.createElement(v.Col,null,o.a.createElement("h2",{className:"display-6"},"step 1: listen to the sample note"))),o.a.createElement(v.Row,{className:"mt-3"},o.a.createElement(v.Col,null,o.a.createElement(v.ButtonGroup,null,o.a.createElement(j,null),o.a.createElement(g.LinkContainer,{to:t},o.a.createElement(v.Button,{variant:"outline-primary",size:"lg"},"start singing!"))))))},C=n(3),_=n.n(C);function A(){return(A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function T(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var k=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,a=T(e,["color","size"]);return o.a.createElement("svg",A({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},a),o.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));k.propTypes={color:_.a.string,size:_.a.oneOfType([_.a.string,_.a.number])},k.defaultProps={color:"currentColor",size:"1em"};var M=k;function N(){return(N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function R(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var P=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,a=R(e,["color","size"]);return o.a.createElement("svg",N({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},a),o.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));P.propTypes={color:_.a.string,size:_.a.oneOfType([_.a.string,_.a.number])},P.defaultProps={color:"currentColor",size:"1em"};var I=P;var $=function(e){for(var t=e.no,n=e.of,r=[],a=0;a<n;a+=1)r.push(a<t?o.a.createElement(M,{key:a}):o.a.createElement(I,{key:a}));return o.a.createElement("div",{className:d("text-primary","display-3")},r)};var L=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],D=function(e){return L[(e-21)%12]},z=function(e){return 440*Math.pow(2,(e-69)/12)},B=function(e){return 69+12*Math.log2(e/440)},F=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._freq=t,this.midiNote=Math.round(B(t)),this.frequency=z(this.midiNote),this.name=D(this.midiNote),this.octave=function(e){return Math.floor(e/12-1)}(this.midiNote)},U=function(e){if(null==e)return null;var t,n,r=new F(e);return{frequency:e,target:r,midiNote:B(e),diff:(t=r.frequency,n=e,1200*Math.log2(n/t))}},q=n(4),G=function(e){var t=e.data,n=e.reference,r=e.domainStart,a=e.domainEnd,i=e.result;return o.a.createElement(q.ResponsiveContainer,{height:400},o.a.createElement(q.LineChart,{height:100,width:400,data:t},o.a.createElement(q.CartesianGrid,{strokeDasharray:"3 3"}),o.a.createElement(q.ReferenceLine,{y:n.midiNote,stroke:"red",strokeDasharray:"3 3"},o.a.createElement(q.Label,{position:"top"},"reference")),o.a.createElement(q.YAxis,{interval:0,minTickGap:1,allowDecimals:!1,domain:[r,a],ticks:Array(a-r).fill(0).map((function(e,t){return t+r})),tick:function(e){return o.a.createElement(q.Text,Object.assign({},e),"".concat(D(e.payload.value)))}}),o.a.createElement(q.Line,{type:"monotone",dataKey:"midiNote",stroke:"#8884d8",strokeWidth:2,dot:!1}),o.a.createElement(q.ReferenceLine,{y:Math.floor((r+a)/2-i),stroke:"none"},o.a.createElement(q.Label,{position:"top"},"you"))))},H=["Why don't you try again?","Off-pitch :(","That's the spirit!","Good!","Almost perfect","Spot on!"],W=function(e){var t=e.rating,n=Math.max(0,Math.min(t-1));return o.a.createElement(v.Alert,{variant:"success",className:d("text-center")},H[n])},K=function(e,t){return e+t},Y=function(e){var t,n=e.recording,r=e.reference,a=n.filter((function(e){return!!e})),i=a.map((function(e){return Math.abs(e.midiNote-r.midiNote)})).reduce(K,0)/a.length;t=i<=.5?5:i<=1?4:i<=2?3:i<=4?2:i<=7?1:0;var c=60-Math.floor(i)-2,l=60+Math.floor(i)+4;return o.a.createElement(v.Container,null,o.a.createElement(v.Row,null,o.a.createElement(v.Col,{className:d("pb-3","col-md-6","offset-md-3","text-center")},o.a.createElement($,{no:t,of:5}))),o.a.createElement(v.Row,null,o.a.createElement(v.Col,{className:d("col-md-6","offset-md-3")},o.a.createElement(W,{rating:t}))),o.a.createElement(v.Row,null,o.a.createElement(v.Col,{className:d("col-md-6","offset-md-3")},o.a.createElement(G,{data:a,domainStart:c,domainEnd:l,reference:r,result:i}))))},J=function(){var e=Object(p.useLocation)().state;return o.a.createElement(Y,{recording:e.recording,reference:e.reference})},V=function(e,t){return(V=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function Q(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}n(12);var X={id:"Tracing"},Z=null;!function(e){function t(t){var n=e.call(this,t)||this;n._mountActivity=null,n._mountSpan=void 0;var r=n.props,o=r.name,a=r.disabled;if(void 0!==a&&a)return n;if(Z||(Z=Object(i.getCurrentHub)().getIntegration(X)))n._mountActivity=function(e,t){return null===Z?null:Z.constructor.pushActivity(e,{description:"<"+e+">",op:"react."+t})}(o,"mount");else{var c=ee();c&&(n._mountSpan=c.startChild({description:"<"+o+">",op:"react.mount"}))}return n}(function(e,t){function n(){this.constructor=e}V(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)})(t,e),t.prototype.componentDidMount=function(){var e;this._mountSpan?this._mountSpan.finish():(this._mountSpan=function(e){if(null!==e&&null!==Z)return Z.constructor.getActivitySpan(e)}(this._mountActivity),null!==(e=this._mountActivity)&&null!==Z&&Z.constructor.popActivity(e),this._mountActivity=null)},t.prototype.componentDidUpdate=function(e){var t=this,n=e.updateProps,r=e.includeUpdates;if((void 0===r||r)&&this._mountSpan&&n!==this.props.updateProps){var o=Object.keys(n).filter((function(e){return n[e]!==t.props.updateProps[e]}));if(o.length>0){var a=Object(i.timestampWithMs)();this._mountSpan.startChild({data:{changedProps:o},description:"<"+this.props.name+">",endTimestamp:a,op:"react.update",startTimestamp:a})}}},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.name,n=e.includeRender,r=void 0===n||n;this._mountSpan&&r&&this._mountSpan.startChild({description:"<"+t+">",endTimestamp:Object(i.timestampWithMs)(),op:"react.render",startTimestamp:this._mountSpan.endTimestamp})},t.prototype.render=function(){return this.props.children},t.defaultProps={disabled:!1,includeRender:!0,includeUpdates:!0}}(r.Component);function ee(e){if(void 0===e&&(e=Object(i.getCurrentHub)()),e){var t=e.getScope();if(t)return t.getTransaction()}}n(18);var te=function(e){return this instanceof te?(this.v=e,this):new te(e)},ne=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),a=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){a.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof te?Promise.resolve(n.value.v).then(l,u):s(a[0][2],n)}catch(e){s(a[0][3],e)}var n}function l(e){c("next",e)}function u(e){c("throw",e)}function s(e,t){e(t),a.shift(),a.length&&c(a[0][0],a[0][1])}},re=y(),oe="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function ae(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ie(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ce=function(){var e=ae(Object(r.useState)(),2),t=e[0],n=e[1],o=h("useMicrophone");return Object(r.useEffect)((function(){o.debug("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){o.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),e.getAudioTracks().forEach((function(e){e.enabled=!1})),n(e)}))}),[]),t};function le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ue(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var se=function(e){var t=le(Object(r.useState)(!1),2),n=t[0],o=t[1],a=le(Object(r.useState)(),2),i=a[0],c=a[1];return Object(r.useEffect)((function(){var t=!0;return e.generator.next().then((function(e){!e.done&&t&&(c(e.value||void 0),o(!n))})),function(){t=!1}}),[n]),Object(r.useEffect)((function(){e.onTick&&i&&e.onTick(i)}),[i]),"function"==typeof e.children?e.children(i):e.children};function fe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return pe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var me=y();function de(e){var t=e.pitchGenerator,n=e.timeoutMs,a=e.onFinish,i=fe(Object(r.useState)([]),2),c=i[0],l=i[1],u=fe(Object(r.useState)(!1),2),s=u[0],f=u[1],p=fe(Object(r.useState)(!1),2),m=p[0],d=p[1],y=fe(Object(r.useState)(0),2),h=y[0],b=y[1];Object(r.useEffect)((function(){if(!s)return function(){};me.info("Setting up the timeout.");var e=setTimeout((function(){d(!0),f(!1)}),n);return me.info("Set up timer %d for %d ms.",e,n),function(){me.info("Clearing out the timeout %d.",e),clearTimeout(e)}}),[s]),Object(r.useEffect)((function(){if(!s)return function(){};b(n/1e3),me.info("Setting the interval with countdown %d.",n);var e=setInterval((function(){return b((function(e){return e-1}))}),1e3);return function(){me.info("Clearing out the interval %d.",e),clearInterval(e)}}),[s]),Object(r.useEffect)((function(){m&&(me.info("Finishing recording."),a(c))}),[m,c]);var g=s?o.a.createElement(v.Button,{variant:"outline-primary",disabled:!0},o.a.createElement(v.Spinner,{as:"span",animation:"grow",role:"status","aria-hidden":"true",size:"sm",className:"mr-2",variant:"danger"}),h,"..."):o.a.createElement("h3",{className:"text-info"},"start singing!");return t?o.a.createElement(se,{generator:t,onTick:function(e){var t=c.concat([e]);l(t),s||f(!0)}},g):o.a.createElement(v.Spinner,{animation:"border",variant:"primary"})}function ye(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return he(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return he(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function he(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ve=function(e){var t=e.next,n=e.reference,a=e.timeout,c=h();c.info("Detection"),function(e,t){void 0===t&&(t={disabled:!1,hasRenderSpan:!0});var n=Q(r.useState((function(){if(!t||!t.disabled){var n=ee();return n?n.startChild({description:"<"+e+">",op:"react.mount"}):void 0}})),1)[0];r.useEffect((function(){return n&&n.finish(),function(){n&&t.hasRenderSpan&&n.startChild({description:"<"+e+">",endTimestamp:Object(i.timestampWithMs)(),op:"react.render",startTimestamp:n.endTimestamp})}}),[])}("Detection");var l,u=window.AudioContext||window.webkitAudioContext,s=ye(Object(r.useState)(new u),1)[0],f=ye(Object(r.useState)(),2),m=f[0],d=f[1],y=ye(Object(r.useState)(),2),b=y[0],g=y[1],E=ce();if(Object(r.useEffect)((function(){if(void 0===E)return function(){};c.info("Setting up the context in state %j and stream %j",s.state,E.id);var e=s.createMediaStreamSource(E);return c.info("Media stream source created.",e),d(function(e,t){return ne(this,arguments,regeneratorRuntime.mark((function n(){var r,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return re.info("Initializing the model."),t.getAudioTracks().forEach((function(e){e.enabled=!0})),n.next=4,te(ml5.pitchDetection(oe,e,t));case 4:return r=n.sent,n.next=7,te(r.ready);case 7:re.info("Starting event loop, %j",r);case 8:if(!t.active||"running"!==e.state){n.next=22;break}return n.next=11,te(r.getPitch());case 11:if(null!==(o=n.sent)){n.next=16;break}re.debug("No pitch detected."),n.next=20;break;case 16:return n.next=18,te(U(o));case 18:return n.next=20,n.sent;case 20:n.next=8;break;case 22:case"end":return n.stop()}}),n)})))}(s,E)),s.resume(),function(){c.info("Cleanup the audio settings"),c.debug("Stop all tracks in the stream %j.",E),null==E||E.getTracks().forEach((function(e){return e.stop()})),c.debug("Suspend audio context %j.",s),s.suspend()}}),[E]),void 0!==b){var S=U(z(n));return o.a.createElement(p.Redirect,{to:{pathname:t,state:{recording:b,reference:S}}})}return m?(c.info("Setting up actual recorder, %j",m),l=o.a.createElement(de,{onFinish:g,pitchGenerator:m,timeoutMs:a})):l=o.a.createElement(v.Spinner,{animation:"border",variant:"primary"}),o.a.createElement(v.Container,null,o.a.createElement(v.Row,{className:"text-center"},o.a.createElement(v.Col,null,o.a.createElement("h2",{className:"display-6"},"step 2: sing the pitch you heard!"))),o.a.createElement(v.Row,{className:"text-center"},o.a.createElement(v.Col,null,l)))},be=y(),ge=function(){return be.info("Starting app."),o.a.createElement(v.Container,null,o.a.createElement(p.BrowserRouter,null,o.a.createElement("header",{className:d("text-center","mt-5")},o.a.createElement(p.Link,{to:"/",className:d("navbar-brand")},o.a.createElement("h1",{className:d("display-1","text-primary","title")},"vocally"))),o.a.createElement("main",{className:d("pb-5"),role:"main"},o.a.createElement(p.Switch,null,o.a.createElement(p.Route,{path:"/preview"},o.a.createElement(x,{next:"/record"})),o.a.createElement(p.Route,{path:"/record"},o.a.createElement(ve,{next:"/summary",reference:60,timeout:3e3})),o.a.createElement(p.Route,{path:"/summary"},o.a.createElement(J,null)),o.a.createElement(p.Route,{path:"/"},o.a.createElement(b,{next:"/preview"})))),o.a.createElement("footer",{className:d("py-3","border-top","text-muted")},o.a.createElement(v.Container,null,o.a.createElement("p",null,"2020-2021 vocally.app")))))};i.init({dsn:"https://ffe439ac65b84889a37518037a23a7b1@o433557.ingest.sentry.io/5388917",release:"testing",environment:"testing",integrations:[new c.CaptureConsole({levels:["info"]}),new i.Integrations.BrowserTracing]}),u.a.init("6ayqi7/vocallytest",{release:"testing"}),f()(u.a),a.render(r.createElement(ge,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,