!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t){e.exports=React},function(e,t){e.exports=ReactBootstrap},function(e,t){e.exports=PropTypes},function(e,t){e.exports=Sentry},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return a}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function a(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e}},,,function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";var r=n(4),o=n(3);o.addGlobalEventProcessor&&Object(o.addGlobalEventProcessor)((function(e){return e.sdk=Object(r.a)(Object(r.a)({},e.sdk),{name:"sentry.javascript.react",packages:Object(r.b)(e.sdk&&e.sdk.packages||[],[{name:"npm:@sentry/react",version:o.SDK_VERSION}]),version:o.SDK_VERSION}),e}))},function(e,t){e.exports=LogRocket},,function(e,t){e.exports=Sentry.Integrations},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){o({ResponderEventPlugin:{extractEvents:function(e,t,n,r){try{if("click"!==e||!n||!r)return;for(var o=n,a=[];o;){var i="function"==typeof o.elementType&&o.elementType.displayName;i&&a.push(i),o=o.return}r.__lrName=a}catch(e){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(7),o=void 0,a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;o=a&&a.Events&&a.Events[3]?a.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},e.exports=t.default},,,function(e,t,n){var r=n(16),o=n(17);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],u=t.base?a[0]+t.base:a[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var f=c(s),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:y(d,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,v=0;function y(e,t){var n,r,o;if(t.singleton){var a=v++;n=m||(m=l(t)),r=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=l(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);i[o].references--}for(var a=u(e,t),l=0;l<n.length;l++){var s=c(n[l]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=a}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(7),i=n(3),c=n(11),u=n(9),l=n.n(u),s=n(12),f=n.n(s);n(15);function d(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=d(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var p=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=d(e))&&(r&&(r+=" "),r+=t);return r},m=function(){return console},v=n(1),y=n(8);n(18);var h=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],b=function(e){return 440*Math.pow((e-69)/12,2)},g=function(e){return 69+12*Math.log2(e/440)},O=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._freq=t,this.note=Math.round(g(t)),this.frequency=b(this.note),this.name=function(e){return h[(e-21)%12]}(this.note),this.octave=function(e){return Math.floor(e/12-1)}(this.note)},j=function(e){if(null==e)return null;var t,n,r=new O(e);return{frequency:e,target:r,note:g(e),diff:(t=r.frequency,n=e,1200*Math.log2(n/t))}},E=function(e){return this instanceof E?(this.v=e,this):new E(e)},S=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),a=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){a.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof E?Promise.resolve(n.value.v).then(u,l):s(a[0][2],n)}catch(e){s(a[0][3],e)}var n}function u(e){c("next",e)}function l(e){c("throw",e)}function s(e,t){e(t),a.shift(),a.length&&c(a[0][0],a[0][1])}},w=m(),x="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function C(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return k(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var T=function(e){var t=C(Object(r.useState)(!1),2),n=t[0],o=t[1],a=C(Object(r.useState)(),2),i=a[0],c=a[1];return Object(r.useEffect)((function(){var t=!0;return e.generator.next().then((function(e){!e.done&&t&&(c(e.value||void 0),o(!n))})),function(){t=!1}}),[n]),Object(r.useEffect)((function(){e.onTick&&i&&e.onTick(i)}),[i]),"function"==typeof e.children?e.children(i):e.children};function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return M(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=m();function _(e){var t=e.pitchGenerator,n=e.timeoutMs,a=e.onFinish,i=A(Object(r.useState)([]),2),c=i[0],u=i[1],l=A(Object(r.useState)(!1),2),s=l[0],f=l[1],d=A(Object(r.useState)(!1),2),p=d[0],m=d[1];Object(r.useEffect)((function(){if(!s)return function(){};I.info("Setting up the timeout.");var e=setTimeout((function(){m(!0),f(!1)}),n);return I.info("Set up timer %d for %d ms.",e,n),function(){I.info("Clearing out the timeout %d.",e),clearTimeout(e)}}),[s]),Object(r.useEffect)((function(){p&&(I.info("Finishing recording."),a(c))}),[p,c]);var y=s?o.a.createElement(v.Spinner,{animation:"grow",variant:"danger"}):o.a.createElement("span",null,"sing now!");return t?o.a.createElement(T,{generator:t,onTick:function(e){var t=c.concat([e]);u(t),s||f(!0)}},o.a.createElement("h3",null,y)):o.a.createElement(v.Spinner,{animation:"border",variant:"primary"})}var P=n(2),R=n.n(P);function N(){return(N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function z(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var L=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,a=z(e,["color","size"]);return o.a.createElement("svg",N({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},a),o.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));L.propTypes={color:R.a.string,size:R.a.oneOfType([R.a.string,R.a.number])},L.defaultProps={color:"currentColor",size:"1em"};var B=L;function D(){return(D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function q(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var F=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,a=q(e,["color","size"]);return o.a.createElement("svg",D({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},a),o.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));F.propTypes={color:R.a.string,size:R.a.oneOfType([R.a.string,R.a.number])},F.defaultProps={color:"currentColor",size:"1em"};var U=F;function G(e){for(var t=e.no,n=e.of,r=[],a=0;a<n;a+=1)r.push(a<=t?o.a.createElement(B,null):o.a.createElement(U,null));return o.a.createElement("div",{className:p("text-primary","display-3")},r)}var $=function(e,t){return e+t},H=function(e){var t,n=e.recording,r=e.reference,a=n.filter((function(e){return!!e})),i=a.map((function(e){return e.frequency-r.frequency})).reduce($,0)/a.length,c=a.map((function(e){return Math.abs(e.note-r.note)})).reduce($,0)/a.length;return t=c<=.5?5:c<=1?4:c<=2?3:c<=4?2:c<=7?1:0,o.a.createElement(v.Container,null,o.a.createElement(v.Row,null,o.a.createElement(v.Col,{className:"pb-3"},o.a.createElement(G,{no:t,of:5}))),o.a.createElement(v.Row,null,o.a.createElement(v.Col,{className:p("col-md-6","offset-md-3")},o.a.createElement(v.Alert,{variant:"success"},"Received ",a.length," sample(s) averaging to ",i," from C",o.a.createElement("sub",null,"4"),"."))))};function K(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return V(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return V(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var J=m(),W=function(){y.default.useProfiler("PitchDetection");var e=K(Object(r.useState)(!1),2),t=e[0],n=e[1],a=K(Object(r.useState)(new AudioContext),1)[0],i=K(Object(r.useState)(),2),c=i[0],u=i[1],l=K(Object(r.useState)(),2),s=l[0],f=l[1],d=K(Object(r.useState)(),2),p=d[0],m=d[1];if(Object(r.useEffect)((function(){t&&(J.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){J.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),u(e)})))}),[t]),Object(r.useEffect)((function(){return t&&void 0!==c?(J.info("Setting up the context %j and stream %j",a,c),a.createMediaStreamSource(c),J.info("Initialized audio."),f(function(e,t){return S(this,arguments,regeneratorRuntime.mark((function n(){var r,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=ml5.pitchDetection(x,e,t),w.info("Created pitch detection.",r),n.next=4,E(r.ready);case 4:w.info("Initialized the model.");case 5:if(!t.active||"running"!==e.state){n.next=19;break}return n.next=8,E(r.getPitch());case 8:if(null!==(o=n.sent)){n.next=13;break}w.debug("Skipping"),n.next=17;break;case 13:return n.next=15,E(j(o));case 15:return n.next=17,n.sent;case 17:n.next=5;break;case 19:case"end":return n.stop()}}),n)})))}(a,c)),a.resume(),function(){J.info("Cleanup the audio settings"),J.debug("Stop all tracks in the stream %j.",c),null==c||c.getTracks().forEach((function(e){return e.stop()})),J.debug("Suspend audio context %j.",a),a.suspend()}):function(){}}),[c,t]),void 0!==p){var h=j(b(60));return o.a.createElement(H,{recording:p,reference:h})}return t&&s?o.a.createElement(_,{onFinish:function(e){J.info("Result, %j",e),m(e),n(!1)},pitchGenerator:s,timeoutMs:5e3}):o.a.createElement(v.Button,{onClick:function(){return n(!0)},variant:"outline-primary",size:"lg"},"click to start")},Y=m(),Q=function(){return Y.info("Starting app."),o.a.createElement(v.Container,null,o.a.createElement("header",{className:p("text-center","mt-5")},o.a.createElement("h1",{className:p("display-1","text-primary","title")},"vocally"),o.a.createElement("h2",{className:"text-secondary"},"sing C",o.a.createElement("sub",null,"4"),"!")),o.a.createElement("main",{className:p("text-center","py-5"),role:"main"},o.a.createElement(W,null)),o.a.createElement("footer",{className:p("py-3","border-top","text-muted")},o.a.createElement(v.Container,null,o.a.createElement("p",null,"vocally.app 2020"))))};i.init({dsn:"https://ffe439ac65b84889a37518037a23a7b1@o433557.ingest.sentry.io/5388917",release:"testing",environment:"testing",integrations:[new c.CaptureConsole({levels:["info"]}),new i.Integrations.Tracing]}),l.a.init("6ayqi7/vocallytest",{release:"testing"}),f()(l.a),a.render(r.createElement(Q,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,