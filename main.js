!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=214)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,l=[],c=!1,f=-1;function h(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&d())}function d(){if(!c){var e=s(h);c=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new p(e,t)),1!==l.length||c||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,"a",(function(){return r}))},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"LEVEL",{value:Symbol.for("level")}),Object.defineProperty(t,"MESSAGE",{value:Symbol.for("message")}),Object.defineProperty(t,"SPLAT",{value:Symbol.for("splat")}),Object.defineProperty(t,"configs",{value:n(114)})},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(122),i=n(123),o=n(27);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return l(this,e,t,n)}function l(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=h(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),i=(e=s(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):h(e,t);if("Buffer"===t.type&&o(t.data))return h(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function h(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return U(e).length;t=(""+t).toLowerCase(),r=!0}}function g(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return O(this,t,n);case"ascii":return R(this,t,n);case"latin1":case"binary":return j(this,t,n);case"base64":return x(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var c=-1;for(o=n;o<s;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(n+u>s&&(n=s-u),o=n;o>=0;o--){for(var f=!0,h=0;h<u;h++)if(l(e,o+h)!==l(t,h)){f=!1;break}if(f)return o}return-1}function v(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function _(e,t,n,r){return q(U(t,e.length-n),e,n,r)}function w(e,t,n,r){return q(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function E(e,t,n,r){return w(e,t,n,r)}function S(e,t,n,r){return q(z(t),e,n,r)}function k(e,t,n,r){return q(function(e,t){for(var n,r,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function x(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function O(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,a,s,u,l=e[i],c=null,f=l>239?4:l>223?3:l>191?2:1;if(i+f<=n)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(u=(15&l)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=f}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return l(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?O(this,0,e):g.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(o,a),l=this.slice(r,i),c=e.slice(t,n),f=0;f<s;++f)if(l[f]!==c[f]){o=l[f],a=c[f];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return E(this,e,t,n);case"base64":return S(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function j(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function T(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=F(e[o]);return i}function M(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function A(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,n,r,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function C(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function N(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(e,t,n,r,o){return o||N(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function I(e,t,n,r,o){return o||N(e,0,n,8),i.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},u.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):C(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);P(this,e,t,n,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<n&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);P(this,e,t,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):C(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return I(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return I(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var a=u.isBuffer(e)?e:U(new u(e,r).toString()),s=a.length;for(o=0;o<n-t;++o)this[o+t]=a[o%s]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function U(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(8))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var a=i.apply(null,r);a&&e.push(a)}else if("object"===o)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(r=function(){return i}.apply(t,[]))||(e.exports=r)}()},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(6).Buffer)},function(e,t,n){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,r,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,n)}));case 3:return t.nextTick((function(){e.call(null,n,r)}));case 4:return t.nextTick((function(){e.call(null,n,r,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return t.nextTick((function(){e.apply(null,o)}))}}}:e.exports=t}).call(this,n(2))},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}function o(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e){var t="function"==typeof Map?new Map:void 0;return(a=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return s(e,arguments,c(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l(r,e)})(e)}function s(e,t,n){return(s=u()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&l(i,n.prototype),i}).apply(null,arguments)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r=(t=a,n=u(),function(){var e,r=c(t);if(n){var o=c(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return i(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),t=r.call(this,"Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ".concat(e.toString().split("\n")[0],"\n")),Error.captureStackTrace(o(t),a),t}return a}(a(Error));e.exports=function(e){if(e.length>2)throw new f(e);function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.options=e}function n(e){return new t(e)}return t.prototype.transform=e,n.Format=t,n}},function(e,t,n){(function(e){var r=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++)n[t[r]]=Object.getOwnPropertyDescriptor(e,t[r]);return n},i=/%[sdj%]/g;t.format=function(e){if(!m(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(s(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,a=String(e).replace(i,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),u=r[n];n<o;u=r[++n])g(u)||!_(u)?a+=" "+u:a+=" "+s(u);return a},t.deprecate=function(n,r){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(r);e.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,a={};function s(e,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&t._extend(r,n),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),c(r,e,r.depth)}function u(e,t){var n=s.styles[t];return n?"["+s.colors[n][0]+"m"+e+"["+s.colors[n][1]+"m":e}function l(e,t){return e}function c(e,n,r){if(e.customInspect&&n&&S(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return m(i)||(i=c(e,i,r)),i}var o=function(e,t){if(y(t))return e.stylize("undefined","undefined");if(m(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(b(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(g(t))return e.stylize("null","null")}(e,n);if(o)return o;var a=Object.keys(n),s=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),E(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return f(n);if(0===a.length){if(S(n)){var u=n.name?": "+n.name:"";return e.stylize("[Function"+u+"]","special")}if(v(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(w(n))return e.stylize(Date.prototype.toString.call(n),"date");if(E(n))return f(n)}var l,_="",k=!1,x=["{","}"];(d(n)&&(k=!0,x=["[","]"]),S(n))&&(_=" [Function"+(n.name?": "+n.name:"")+"]");return v(n)&&(_=" "+RegExp.prototype.toString.call(n)),w(n)&&(_=" "+Date.prototype.toUTCString.call(n)),E(n)&&(_=" "+f(n)),0!==a.length||k&&0!=n.length?r<0?v(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=k?function(e,t,n,r,i){for(var o=[],a=0,s=t.length;a<s;++a)j(t,String(a))?o.push(h(e,t,n,r,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(h(e,t,n,r,i,!0))})),o}(e,n,r,s,a):a.map((function(t){return h(e,n,r,s,t,k)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(l,_,x)):x[0]+_+x[1]}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function h(e,t,n,r,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),j(r,i)||(a="["+i+"]"),s||(e.seen.indexOf(u.value)<0?(s=g(n)?c(e,u.value,null):c(e,u.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),y(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function d(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function g(e){return null===e}function b(e){return"number"==typeof e}function m(e){return"string"==typeof e}function y(e){return void 0===e}function v(e){return _(e)&&"[object RegExp]"===k(e)}function _(e){return"object"==typeof e&&null!==e}function w(e){return _(e)&&"[object Date]"===k(e)}function E(e){return _(e)&&("[object Error]"===k(e)||e instanceof Error)}function S(e){return"function"==typeof e}function k(e){return Object.prototype.toString.call(e)}function x(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(y(o)&&(o=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=e.pid;a[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,r,e)}}else a[n]=function(){};return a[n]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=d,t.isBoolean=p,t.isNull=g,t.isNullOrUndefined=function(e){return null==e},t.isNumber=b,t.isString=m,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=y,t.isRegExp=v,t.isObject=_,t.isDate=w,t.isError=E,t.isFunction=S,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(103);var O=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function R(){var e=new Date,t=[x(e.getHours()),x(e.getMinutes()),x(e.getSeconds())].join(":");return[e.getDate(),O[e.getMonth()],t].join(" ")}function j(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",R(),t.format.apply(t,arguments))},t.inherits=n(104),t._extend=function(e,t){if(!t||!_(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e};var T="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function M(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(T&&e[T]){var t;if("function"!=typeof(t=e[T]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,T,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,r=new Promise((function(e,r){t=e,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(e,r){e?n(e):t(r)}));try{e.apply(this,i)}catch(e){n(e)}return r}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),T&&Object.defineProperty(t,T,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,r(e))},t.promisify.custom=T,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};t.apply(this,n).then((function(t){e.nextTick(a,null,t)}),(function(t){e.nextTick(M,t,a)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,r(t)),n}}).call(this,n(2))},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(137),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(8))},function(e,t,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(n,r){function i(){void 0!==o&&e.removeListener("error",o),n([].slice.call(arguments))}var o;"error"!==t&&(o=function(n){e.removeListener(t,i),r(n)},e.once("error",o)),e.once(t,i)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function f(e,t,n,r){var i,o,a,s;if(l(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=h.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):b(i,i.length)}function g(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function b(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var l=u.length,c=b(u,l);for(n=0;n<l;++n)o(c[n],this,t)}return!0},s.prototype.addListener=function(e,t){return f(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return f(this,e,t,!0)},s.prototype.once=function(e,t){return l(t),this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,i,o,a;if(l(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return p(this,e,!0)},s.prototype.rawListeners=function(e){return p(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},s.prototype.listenerCount=g,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){"use strict";var r=n(143).Buffer,i=r.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(r.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=l,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=c,this.end=f,t=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function c(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function f(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function h(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var n=function(e,t,n){var r=t.length-1;if(r<n)return 0;var i=a(t[r]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=a(t[r]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=a(t[r]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var r=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,r),e.toString("utf8",t,r)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";var r=n(12),i=n(138),o=n(5).LEVEL,a=e.exports=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i.call(this,{objectMode:!0,highWaterMark:t.highWaterMark}),this.format=t.format,this.level=t.level,this.handleExceptions=t.handleExceptions,this.handleRejections=t.handleRejections,this.silent=t.silent,t.log&&(this.log=t.log),t.logv&&(this.logv=t.logv),t.close&&(this.close=t.close),this.once("pipe",(function(t){e.levels=t.levels,e.parent=t})),this.once("unpipe",(function(t){t===e.parent&&(e.parent=null,e.close&&e.close())}))};r.inherits(a,i),a.prototype._write=function(e,t,n){if(this.silent||!0===e.exception&&!this.handleExceptions)return n(null);var r=this.level||this.parent&&this.parent.level;if(!r||this.levels[r]>=this.levels[e[o]]){if(e&&!this.format)return this.log(e,n);var i=void 0,a=void 0;try{a=this.format.transform(Object.assign({},e),this.format.options)}catch(e){i=e}if(i||!a){if(n(),i)throw i;return}return this.log(a,n)}return n(null)},a.prototype._writev=function(e,t){if(this.logv){var n=e.filter(this._accept,this);return n.length?this.logv(n,t):t(null)}for(var r=0;r<e.length;r++)if(this._accept(e[r]))if(!e[r].chunk||this.format){var i=void 0,o=void 0;try{o=this.format.transform(Object.assign({},e[r].chunk),this.format.options)}catch(e){i=e}if(i||!o){if(e[r].callback(),i)throw t(null),i}else this.log(o,e[r].callback)}else this.log(e[r].chunk,e[r].callback);return t(null)},a.prototype._accept=function(e){var t=e.chunk;if(this.silent)return!1;var n=this.level||this.parent&&this.parent.level;return!(!0!==t.exception&&n&&!(this.levels[n]>=this.levels[t[o]])||!this.handleExceptions&&!0===t.exception)},a.prototype._nop=function(){},e.exports.LegacyTransportStream=n(144)},function(e,t,n){"use strict";var r=n(10),i=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=f;var o=Object.create(n(9));o.inherits=n(4);var a=n(62),s=n(42);o.inherits(f,a);for(var u=i(s.prototype),l=0;l<u.length;l++){var c=u[l];f.prototype[c]||(f.prototype[c]=s.prototype[c])}function f(e){if(!(this instanceof f))return new f(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),f.prototype._destroy=function(e,t){this.push(null),this.end(),r.nextTick(t,e)}},function(e,t,n){"use strict";var r=n(51),i=n(54).warn,o=t;o.version=n(134).version,o.transports=n(135),o.config=n(45),o.addColors=r.levels,o.format=r.format,o.createLogger=n(86),o.ExceptionHandler=n(87),o.RejectionHandler=n(91),o.Container=n(212),o.Transport=n(16),o.loggers=new o.Container;var a=o.createLogger();Object.keys(o.config.npm.levels).concat(["log","query","stream","add","remove","clear","profile","startTimer","handleExceptions","unhandleExceptions","handleRejections","unhandleRejections","configure","child"]).forEach((function(e){return o[e]=function(){return a[e].apply(a,arguments)}})),Object.defineProperty(o,"level",{get:function(){return a.level},set:function(e){a.level=e}}),Object.defineProperty(o,"exceptions",{get:function(){return a.exceptions}}),["exitOnError"].forEach((function(e){Object.defineProperty(o,e,{get:function(){return a[e]},set:function(t){a[e]=t}})})),Object.defineProperty(o,"default",{get:function(){return{exceptionHandlers:a.exceptionHandlers,rejectionHandlers:a.rejectionHandlers,transports:a.transports}}}),i.deprecated(o,"setLevels"),i.forFunctions(o,"useFormat",["cli"]),i.forProperties(o,"useFormat",["padLevels","stripColors"]),i.forFunctions(o,"deprecated",["addRewriter","addFilter","clone","extend"]),i.forProperties(o,"deprecated",["emitErrs","levelLength"]),i.moved(o,"createLogger","Logger")},function(e,t){t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n",t.homedir=function(){return"/"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=t.isAsyncGenerator=t.isAsync=void 0;var r,i=n(149),o=(r=i)&&r.__esModule?r:{default:r};function a(e){return"AsyncFunction"===e[Symbol.toStringTag]}t.default=function(e){if("function"!=typeof e)throw new Error("expected a function");return a(e)?(0,o.default)(e):e},t.isAsync=a,t.isAsyncGenerator=function(e){return"AsyncGenerator"===e[Symbol.toStringTag]},t.isAsyncIterable=function(e){return"function"==typeof e[Symbol.asyncIterator]}},function(e,t,n){"use strict";var r={};function i(e,t,n){n||(n=Error);var i=function(e){var n,r;function i(n,r,i){return e.call(this,function(e,n,r){return"string"==typeof t?t:t(e,n,r)}(n,r,i))||this}return r=e,(n=i).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r,i}(n);i.prototype.name=n.name,i.prototype.code=e,r[e]=i}function o(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?"one of ".concat(t," ").concat(e.slice(0,n-1).join(", "),", or ")+e[n-1]:2===n?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}i("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(e,t,n){var r,i,a,s;if("string"==typeof t&&(i="not ",t.substr(!a||a<0?0:+a,i.length)===i)?(r="must not be",t=t.replace(/^not /,"")):r="must be",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(e," argument"))s="The ".concat(e," ").concat(r," ").concat(o(t,"type"));else{var u=function(e,t,n){return"number"!=typeof n&&(n=0),!(n+t.length>e.length)&&-1!==e.indexOf(t,n)}(e,".")?"property":"argument";s='The "'.concat(e,'" ').concat(u," ").concat(r," ").concat(o(t,"type"))}return s+=". Received type ".concat(typeof n)}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.codes=r},function(e,t,n){"use strict";(function(t){var r=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=l;var i=n(69),o=n(73);n(4)(l,i);for(var a=r(o.prototype),s=0;s<a.length;s++){var u=a[s];l.prototype[u]||(l.prototype[u]=o.prototype[u])}function l(e){if(!(this instanceof l))return new l(e);i.call(this,e),o.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",c)))}function c(){this._writableState.ended||t.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})}).call(this,n(2))},function(e,t,n){"use strict";var r=n(10),i=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=f;var o=Object.create(n(9));o.inherits=n(4);var a=n(79),s=n(82);o.inherits(f,a);for(var u=i(s.prototype),l=0;l<u.length;l++){var c=u[l];f.prototype[c]||(f.prototype[c]=s.prototype[c])}function f(e){if(!(this instanceof f))return new f(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),f.prototype._destroy=function(e,t){this.push(null),this.end(),r.nextTick(t,e)}},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t=e.length){if(!t)throw new Error("arity is undefined");return function(...n){return"function"==typeof n[t-1]?e.apply(this,n):new Promise((r,i)=>{n[t-1]=(e,...t)=>{if(e)return i(e);r(t.length>1?t:t[0])},e.apply(this,n)})}},e.exports=t.default},function(e,t,n){(t=e.exports=n(69)).Stream=t,t.Readable=t,t.Writable=n(73),t.Duplex=n(22),t.Transform=n(74),t.PassThrough=n(182),t.finished=n(43),t.pipeline=n(183)},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=i,i.default=i,i.stable=a,i.stableStringify=a;var n=[],r=[];function i(e,t,i){var o;for(!function e(t,i,o,a){var s;if("object"==typeof t&&null!==t){for(s=0;s<o.length;s++)if(o[s]===t){var u=Object.getOwnPropertyDescriptor(a,i);return void(void 0!==u.get?u.configurable?(Object.defineProperty(a,i,{value:"[Circular]"}),n.push([a,i,t,u])):r.push([t,i]):(a[i]="[Circular]",n.push([a,i,t])))}if(o.push(t),Array.isArray(t))for(s=0;s<t.length;s++)e(t[s],s,o,t);else{var l=Object.keys(t);for(s=0;s<l.length;s++){var c=l[s];e(t[c],c,o,t)}}o.pop()}}(e,"",[],void 0),o=0===r.length?JSON.stringify(e,t,i):JSON.stringify(e,s(t),i);0!==n.length;){var a=n.pop();4===a.length?Object.defineProperty(a[0],a[1],a[3]):a[0][a[1]]=a[2]}return o}function o(e,t){return e<t?-1:e>t?1:0}function a(e,t,i){var a,u=function e(t,i,a,s){var u;if("object"==typeof t&&null!==t){for(u=0;u<a.length;u++)if(a[u]===t){var l=Object.getOwnPropertyDescriptor(s,i);return void(void 0!==l.get?l.configurable?(Object.defineProperty(s,i,{value:"[Circular]"}),n.push([s,i,t,l])):r.push([t,i]):(s[i]="[Circular]",n.push([s,i,t])))}if("function"==typeof t.toJSON)return;if(a.push(t),Array.isArray(t))for(u=0;u<t.length;u++)e(t[u],u,a,t);else{var c={},f=Object.keys(t).sort(o);for(u=0;u<f.length;u++){var h=f[u];e(t[h],h,a,t),c[h]=t[h]}if(void 0===s)return c;n.push([s,i,t]),s[i]=c}a.pop()}}(e,"",[],void 0)||e;for(a=0===r.length?JSON.stringify(u,t,i):JSON.stringify(u,s(t),i);0!==n.length;){var l=n.pop();4===l.length?Object.defineProperty(l[0],l[1],l[3]):l[0][l[1]]=l[2]}return a}function s(e){return e=void 0!==e?e:function(e,t){return t},function(t,n){if(r.length>0)for(var i=0;i<r.length;i++){var o=r[i];if(o[1]===t&&o[0]===n){n="[Circular]",r.splice(i,1);break}}return e.call(this,t,n)}}},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),r=!0}return e.apply(this,arguments)}}}).call(this,n(8))},function(e,t,n){"use strict";var r=n(10),i=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=f;var o=Object.create(n(9));o.inherits=n(4);var a=n(139),s=n(55);o.inherits(f,a);for(var u=i(s.prototype),l=0;l<u.length;l++){var c=u[l];f.prototype[c]||(f.prototype[c]=s.prototype[c])}function f(e){if(!(this instanceof f))return new f(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),f.prototype._destroy=function(e,t){this.push(null),this.end(),r.nextTick(t,e)}},function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)i(n,r)&&(e[r]=n[r])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,n,r,i){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),i);else for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){var t,n,r,i,o,a;for(r=0,t=0,n=e.length;t<n;t++)r+=e[t].length;for(a=new Uint8Array(r),i=0,t=0,n=e.length;t<n;t++)o=e[t],a.set(o,i),i+=o.length;return a}},a={arraySet:function(e,t,n,r,i){for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,o)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,a))},t.setTyped(r)},function(e,t,n){e.exports=n(184)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},function(e,t){e.exports=PropTypes},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(52),a=n(5),s=a.LEVEL,u=a.MESSAGE;o.enabled=!0;var l=/\s+/,c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),t.colors&&this.addColors(t.colors),this.options=t}var t,n,a;return t=e,a=[{key:"addColors",value:function(t){var n=Object.keys(t).reduce((function(e,n){return e[n]=l.test(t[n])?t[n].split(l):t[n],e}),{});return e.allColors=Object.assign({},e.allColors||{},n),e.allColors}}],(n=[{key:"addColors",value:function(t){return e.addColors(t)}},{key:"colorize",value:function(t,n,r){if(void 0===r&&(r=n),!Array.isArray(e.allColors[t]))return o[e.allColors[t]](r);for(var i=0,a=e.allColors[t].length;i<a;i++)r=o[e.allColors[t][i]](r);return r}},{key:"transform",value:function(e,t){return t.all&&"string"==typeof e[u]&&(e[u]=this.colorize(e[s],e.level,e[u])),(t.level||t.all||!t.message)&&(e.level=this.colorize(e[s],e.level)),(t.all||t.message)&&(e.message=this.colorize(e[s],e.level,e.message)),e}}])&&i(t.prototype,n),a&&i(t,a),e}();e.exports=function(e){return new c(e)},e.exports.Colorizer=e.exports.Format=c},function(e,t,n){var r=n(6),i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=a),o(i,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e&&"number"==typeof e.length&&e.length>=0&&e.length%1==0},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={},e.exports=t.default},function(e,t,n){(t=e.exports=n(62)).Stream=t,t.Readable=t,t.Writable=n(42),t.Duplex=n(17),t.Transform=n(65),t.PassThrough=n(162)},function(e,t,n){var r=n(6),i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=a),o(i,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";(function(t,r,i){var o=n(10);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=y;var s,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?r:o.nextTick;y.WritableState=m;var l=Object.create(n(9));l.inherits=n(4);var c={deprecate:n(29)},f=n(63),h=n(41).Buffer,d=i.Uint8Array||function(){};var p,g=n(64);function b(){}function m(e,t){s=s||n(17),e=e||{};var r=t instanceof s;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,l=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===e.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,r=n.sync,i=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,r,i){--t.pendingcb,n?(o.nextTick(i,r),o.nextTick(k,e,t),e._writableState.errorEmitted=!0,e.emit("error",r)):(i(r),e._writableState.errorEmitted=!0,e.emit("error",r),k(e,t))}(e,n,r,t,i);else{var a=E(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||w(e,n),r?u(_,e,n,a,i):_(e,n,a,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function y(e){if(s=s||n(17),!(p.call(y,this)||this instanceof s))return new y(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),f.call(this)}function v(e,t,n,r,i,o,a){t.writelen=r,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function _(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,r(),k(e,t)}function w(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var r=t.bufferedRequestCount,i=new Array(r),o=t.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,v(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,f=n.callback;if(v(e,t,!1,t.objectMode?1:l.length,l,c,f),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function S(e,t){e._final((function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),k(e,t)}))}function k(e,t){var n=E(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(S,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}l.inherits(y,f),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===y&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(e,t,n){var r,i=this._writableState,a=!1,s=!i.objectMode&&(r=e,h.isBuffer(r)||r instanceof d);return s&&!h.isBuffer(e)&&(e=function(e){return h.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof n&&(n=b),i.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),o.nextTick(t,n)}(this,n):(s||function(e,t,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(r,a),i=!1),i}(this,i,e,n))&&(i.pendingcb++,a=function(e,t,n,r,i,o){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=h.from(t,n));return t}(t,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=t.objectMode?1:r.length;t.length+=s;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,s,r,i,o);return u}(this,i,s,e,t,n)),a},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},y.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(e,t,n){var r=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(e,t,n){t.ending=!0,k(e,t),n&&(t.finished?o.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,r,n)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(2),n(13).setImmediate,n(8))},function(e,t,n){"use strict";var r=n(21).codes.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,n,o){if("function"==typeof n)return e(t,null,n);n||(n={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];e.apply(this,r)}}}(o||i);var a=n.readable||!1!==n.readable&&t.readable,s=n.writable||!1!==n.writable&&t.writable,u=function(){t.writable||c()},l=t._writableState&&t._writableState.finished,c=function(){s=!1,l=!0,a||o.call(t)},f=t._readableState&&t._readableState.endEmitted,h=function(){a=!1,f=!0,s||o.call(t)},d=function(e){o.call(t,e)},p=function(){var e;return a&&!f?(t._readableState&&t._readableState.ended||(e=new r),o.call(t,e)):s&&!l?(t._writableState&&t._writableState.ended||(e=new r),o.call(t,e)):void 0},g=function(){t.req.on("finish",c)};return!function(e){return e.setHeader&&"function"==typeof e.abort}(t)?s&&!t._writableState&&(t.on("end",u),t.on("close",u)):(t.on("complete",c),t.on("abort",p),t.req?g():t.on("request",g)),t.on("end",h),t.on("finish",c),!1!==n.error&&t.on("error",d),t.on("close",p),function(){t.removeListener("complete",c),t.removeListener("abort",p),t.removeListener("request",g),t.req&&t.req.removeListener("finish",c),t.removeListener("end",u),t.removeListener("close",u),t.removeListener("finish",c),t.removeListener("end",h),t.removeListener("error",d),t.removeListener("close",p)}}},function(e,t,n){var r=n(6),i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=a),o(i,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";var r=n(51),i=n(5).configs;t.cli=r.levels(i.cli),t.npm=r.levels(i.npm),t.syslog=r.levels(i.syslog),t.addColors=r.levels},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(205)),i=s(n(206)),o=s(n(20)),a=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)((function(e,t,n){return(0,r.default)(e,(0,i.default)((0,o.default)(t)),n)}),3),e.exports=t.default},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,o,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,i,o,a,s],c=0;(u=new Error(t.replace(/%s/g,(function(){return l[c++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";var r=n(34),i=!1,o=!1;try{var a={get passive(){return i=!0},get once(){return o=i=!0}};r.a&&(window.addEventListener("test",a,a),window.removeEventListener("test",a,!0))}catch(e){}var s=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!o){var a=r.once,s=r.capture,u=n;!o&&a&&(u=n.__once||function e(r){this.removeEventListener(t,e,s),n.call(this,r)},n.__once=u),e.addEventListener(t,u,i?r:s)}e.addEventListener(t,n,r)};var u=function(e,t,n,r){var i=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,i),n.__once&&e.removeEventListener(t,n.__once,i)};t.a=function(e,t,n,r){return s(e,t,n,r),function(){u(e,t,n,r)}}},,function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],u=t.base?o[0]+t.base:o[0],l=n[u]||0,c="".concat(u," ").concat(l);n[u]=l+1;var f=s(c),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(a[f].references++,a[f].updater(h)):a.push({identifier:c,updater:b(h,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function d(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,g=0;function b(e,t){var n,r,i;if(t.singleton){var o=g++;n=p||(p=l(t)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=l(t),r=d.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=s(n[r]);a[i].references--}for(var o=u(e,t),l=0;l<n.length;l++){var c=s(n[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=o}}}},function(e,t,n){"use strict";var r=t.format=n(11);t.levels=n(101),Object.defineProperty(r,"align",{value:n(118)}),Object.defineProperty(r,"cli",{value:n(119)}),Object.defineProperty(r,"combine",{value:n(120)}),Object.defineProperty(r,"colorize",{value:n(36)}),Object.defineProperty(r,"json",{value:n(121)}),Object.defineProperty(r,"label",{value:n(124)}),Object.defineProperty(r,"logstash",{value:n(125)}),Object.defineProperty(r,"metadata",{value:n(126)}),Object.defineProperty(r,"padLevels",{value:n(53)}),Object.defineProperty(r,"prettyPrint",{value:n(127)}),Object.defineProperty(r,"printf",{value:n(128)}),Object.defineProperty(r,"simple",{value:n(129)}),Object.defineProperty(r,"splat",{value:n(130)}),Object.defineProperty(r,"timestamp",{value:n(131)}),Object.defineProperty(r,"uncolorize",{value:n(133)})},function(e,t,n){var r=n(102);e.exports=r},function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=n(5),u=s.configs,l=s.LEVEL,c=s.MESSAGE,f=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{levels:u.npm.levels};o(this,e),this.paddings=e.paddingForLevels(t.levels,t.filler),this.options=t}var t,n,i;return t=e,i=[{key:"getLongestLevel",value:function(e){var t=Object.keys(e).map((function(e){return e.length}));return Math.max.apply(Math,r(t))}},{key:"paddingForLevel",value:function(e,t,n){var r=n+1-e.length,i=Math.floor(r/t.length);return"".concat(t).concat(t.repeat(i)).slice(0,r)}},{key:"paddingForLevels",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:" ",r=e.getLongestLevel(t);return Object.keys(t).reduce((function(t,i){return t[i]=e.paddingForLevel(i,n,r),t}),{})}}],(n=[{key:"transform",value:function(e,t){return e.message="".concat(this.paddings[e[l]]).concat(e.message),e[c]&&(e[c]="".concat(this.paddings[e[l]]).concat(e[c])),e}}])&&a(t.prototype,n),i&&a(t,i),e}();e.exports=function(e){return new f(e)},e.exports.Padder=e.exports.Format=f},function(e,t,n){"use strict";var r=n(12).format;t.warn={deprecated:function(e){return function(){throw new Error(r("{ %s } was removed in winston@3.0.0.",e))}},useFormat:function(e){return function(){throw new Error([r("{ %s } was removed in winston@3.0.0.",e),"Use a custom winston.format = winston.format(function) instead."].join("\n"))}},forFunctions:function(e,n,r){r.forEach((function(r){e[r]=t.warn[n](r)}))},moved:function(e,t,n){function i(){return function(){throw new Error([r("winston.%s was moved in winston@3.0.0.",n),r("Use a winston.%s instead.",t)].join("\n"))}}Object.defineProperty(e,n,{get:i,set:i})},forProperties:function(e,n,r){r.forEach((function(r){var i=t.warn[n](r);Object.defineProperty(e,r,{get:i,set:i})}))}}},function(e,t,n){"use strict";(function(t,r,i){var o=n(10);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=y;var s,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?r:o.nextTick;y.WritableState=m;var l=Object.create(n(9));l.inherits=n(4);var c={deprecate:n(29)},f=n(56),h=n(37).Buffer,d=i.Uint8Array||function(){};var p,g=n(57);function b(){}function m(e,t){s=s||n(30),e=e||{};var r=t instanceof s;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,l=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===e.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,r=n.sync,i=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,r,i){--t.pendingcb,n?(o.nextTick(i,r),o.nextTick(k,e,t),e._writableState.errorEmitted=!0,e.emit("error",r)):(i(r),e._writableState.errorEmitted=!0,e.emit("error",r),k(e,t))}(e,n,r,t,i);else{var a=E(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||w(e,n),r?u(_,e,n,a,i):_(e,n,a,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function y(e){if(s=s||n(30),!(p.call(y,this)||this instanceof s))return new y(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),f.call(this)}function v(e,t,n,r,i,o,a){t.writelen=r,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function _(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,r(),k(e,t)}function w(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var r=t.bufferedRequestCount,i=new Array(r),o=t.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,v(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,f=n.callback;if(v(e,t,!1,t.objectMode?1:l.length,l,c,f),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function S(e,t){e._final((function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),k(e,t)}))}function k(e,t){var n=E(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(S,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}l.inherits(y,f),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===y&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(e,t,n){var r,i=this._writableState,a=!1,s=!i.objectMode&&(r=e,h.isBuffer(r)||r instanceof d);return s&&!h.isBuffer(e)&&(e=function(e){return h.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof n&&(n=b),i.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),o.nextTick(t,n)}(this,n):(s||function(e,t,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(r,a),i=!1),i}(this,i,e,n))&&(i.pendingcb++,a=function(e,t,n,r,i,o){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=h.from(t,n));return t}(t,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=t.objectMode?1:r.length;t.length+=s;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,s,r,i,o);return u}(this,i,s,e,t,n)),a},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},y.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(e,t,n){var r=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(e,t,n){t.ending=!0,k(e,t),n&&(t.finished?o.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,r,n)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(2),n(13).setImmediate,n(8))},function(e,t,n){e.exports=n(14).EventEmitter},function(e,t,n){"use strict";var r=n(10);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(r.nextTick(i,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(153)),i=a(n(20)),o=a(n(25));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,o.default)((function(e,t,n,o){return(0,r.default)(t)(e,(0,i.default)(n),o)}),4),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(...t){if(null!==e){var n=e;e=null,n.apply(this,t)}}return Object.assign(t,e),t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(...t){if(null===e)throw new Error("Callback was already called.");var n=e;e=null,n.apply(this,t)}},e.exports=t.default},function(e,t,n){"use strict";(function(t,r){var i=n(10);e.exports=v;var o,a=n(27);v.ReadableState=y;n(14).EventEmitter;var s=function(e,t){return e.listeners(t).length},u=n(63),l=n(41).Buffer,c=t.Uint8Array||function(){};var f=Object.create(n(9));f.inherits=n(4);var h=n(159),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,g=n(160),b=n(64);f.inherits(v,u);var m=["error","close","destroy","pause","resume"];function y(e,t){e=e||{};var r=t instanceof(o=o||n(17));this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=n(15).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(o=o||n(17),!(this instanceof v))return new v(e);this._readableState=new y(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function _(e,t,n,r,i){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,S(e)}(e,a)):(i||(o=function(e,t){var n;r=t,l.isBuffer(r)||r instanceof c||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),r?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?w(e,a,t,!1):x(e,a)):w(e,a,t,!1))):r||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function w(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&S(e)),x(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=b.destroy,v.prototype._undestroy=b.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=l.from(e,t),t=""),n=!0),_(this,e,t,!1,n)},v.prototype.unshift=function(e){return _(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=n(15).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};function E(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function S(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(k,e):k(e))}function k(e){d("emit readable"),e.emit("readable"),T(e)}function x(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(O,e,t))}function O(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function R(e){d("readable nexttick read 0"),e.read(0)}function j(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),T(e),t.flowing&&!t.reading&&e.read(0)}function T(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function M(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var r;e<t.head.data.length?(r=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):r=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,r=1,i=n.data;e-=i.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0===(e-=a)){a===o.length?(++r,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++r}return t.length-=r,i}(e,t):function(e,t){var n=l.allocUnsafe(e),r=t.head,i=1;r.data.copy(n),e-=r.data.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(o.copy(n,n.length-e,0,a),0===(e-=a)){a===o.length?(++i,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++i}return t.length-=i,n}(e,t);return r}(e,t.buffer,t.decoder),n);var n}function A(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function L(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}v.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?A(this):S(this),null;if(0===(e=E(e,t))&&t.ended)return 0===t.length&&A(this),null;var r,i=t.needReadable;return d("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",i=!0),t.ended||t.reading?d("reading or ended",i=!1):i&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=E(n,t))),null===(r=e>0?M(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&A(this)),null!==r&&this.emit("data",r),r},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,t);var u=(!t||!1!==t.end)&&e!==r.stdout&&e!==r.stderr?c:v;function l(t,r){d("onunpipe"),t===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),e.removeListener("close",m),e.removeListener("finish",y),e.removeListener("drain",f),e.removeListener("error",b),e.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",v),n.removeListener("data",g),h=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||f())}function c(){d("onend"),e.end()}o.endEmitted?i.nextTick(u):n.once("end",u),e.on("unpipe",l);var f=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,T(e))}}(n);e.on("drain",f);var h=!1;var p=!1;function g(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==L(o.pipes,e))&&!h&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function b(t){d("onerror",t),v(),e.removeListener("error",b),0===s(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",y),v()}function y(){d("onfinish"),e.removeListener("close",m),v()}function v(){d("unpipe"),n.unpipe(e)}return n.on("data",g),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",b),e.once("close",m),e.once("finish",y),e.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n)),this;if(!e){var r=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=L(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n)),this},v.prototype.on=function(e,t){var n=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):i.nextTick(R,this))}return n},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(j,e,t))}(this,e)),this},v.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var i in e.on("end",(function(){if(d("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(t.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<m.length;o++)e.on(m[o],this.emit.bind(this,m[o]));return this._read=function(t){d("wrapped _read",t),r&&(r=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=M}).call(this,n(8),n(2))},function(e,t,n){e.exports=n(14).EventEmitter},function(e,t,n){"use strict";var r=n(10);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(r.nextTick(i,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){"use strict";e.exports=a;var r=n(17),i=Object.create(n(9));function o(e,t){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),r(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);r.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(t,n){u(e,t,n)})):u(this,null,null)}function u(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=n(4),i.inherits(a,r),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,r.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var n=this;r.prototype._destroy.call(this,e,(function(e){t(e),n.emit("close")}))}},function(e,t,n){"use strict";(function(t){var r=n(168);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(e,t){if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0}function o(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var a=n(12),s=Object.prototype.hasOwnProperty,u=Array.prototype.slice,l="foo"===function(){}.name;function c(e){return Object.prototype.toString.call(e)}function f(e){return!o(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var h=e.exports=y,d=/\s*function\s+([^\(\s]*)\s*/;function p(e){if(a.isFunction(e)){if(l)return e.name;var t=e.toString().match(d);return t&&t[1]}}function g(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function b(e){if(l||!a.isFunction(e))return a.inspect(e);var t=p(e);return"[Function"+(t?": "+t:"")+"]"}function m(e,t,n,r,i){throw new h.AssertionError({message:n,actual:e,expected:t,operator:r,stackStartFunction:i})}function y(e,t){e||m(e,!0,t,"==",h.ok)}function v(e,t,n,r){if(e===t)return!0;if(o(e)&&o(t))return 0===i(e,t);if(a.isDate(e)&&a.isDate(t))return e.getTime()===t.getTime();if(a.isRegExp(e)&&a.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(f(e)&&f(t)&&c(e)===c(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(o(e)!==o(t))return!1;var s=(r=r||{actual:[],expected:[]}).actual.indexOf(e);return-1!==s&&s===r.expected.indexOf(t)||(r.actual.push(e),r.expected.push(t),function(e,t,n,r){if(null==e||null==t)return!1;if(a.isPrimitive(e)||a.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=_(e),o=_(t);if(i&&!o||!i&&o)return!1;if(i)return e=u.call(e),t=u.call(t),v(e,t,n);var s,l,c=S(e),f=S(t);if(c.length!==f.length)return!1;for(c.sort(),f.sort(),l=c.length-1;l>=0;l--)if(c[l]!==f[l])return!1;for(l=c.length-1;l>=0;l--)if(s=c[l],!v(e[s],t[s],n,r))return!1;return!0}(e,t,n,r))}return n?e===t:e==t}function _(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function w(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function E(e,t,n,r){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),e&&!i&&m(i,n,"Missing expected exception"+r);var o="string"==typeof r,s=!e&&i&&!n;if((!e&&a.isError(i)&&o&&w(i,n)||s)&&m(i,n,"Got unwanted exception"+r),e&&i&&n&&!w(i,n)||!e&&i)throw i}h.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return g(b(e.actual),128)+" "+e.operator+" "+g(b(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||m;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var n=new Error;if(n.stack){var r=n.stack,i=p(t),o=r.indexOf("\n"+i);if(o>=0){var a=r.indexOf("\n",o+1);r=r.substring(a+1)}this.stack=r}}},a.inherits(h.AssertionError,Error),h.fail=m,h.ok=y,h.equal=function(e,t,n){e!=t&&m(e,t,n,"==",h.equal)},h.notEqual=function(e,t,n){e==t&&m(e,t,n,"!=",h.notEqual)},h.deepEqual=function(e,t,n){v(e,t,!1)||m(e,t,n,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(e,t,n){v(e,t,!0)||m(e,t,n,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(e,t,n){v(e,t,!1)&&m(e,t,n,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function e(t,n,r){v(t,n,!0)&&m(t,n,r,"notDeepStrictEqual",e)},h.strictEqual=function(e,t,n){e!==t&&m(e,t,n,"===",h.strictEqual)},h.notStrictEqual=function(e,t,n){e===t&&m(e,t,n,"!==",h.notStrictEqual)},h.throws=function(e,t,n){E(!0,e,t,n)},h.doesNotThrow=function(e,t,n){E(!1,e,t,n)},h.ifError=function(e){if(e)throw e},h.strict=r((function e(t,n){t||m(t,!0,n,"==",e)}),h,{equal:h.strictEqual,deepEqual:h.deepStrictEqual,notEqual:h.notStrictEqual,notDeepEqual:h.notDeepStrictEqual}),h.strict.strict=h.strict;var S=Object.keys||function(e){var t=[];for(var n in e)s.call(e,n)&&t.push(n);return t}}).call(this,n(8))},function(e,t,n){"use strict";e.exports=function(e,t,n,r){for(var i=65535&e|0,o=e>>>16&65535|0,a=0;0!==n;){n-=a=n>2e3?2e3:n;do{o=o+(i=i+t[r++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},function(e,t,n){"use strict";var r=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();e.exports=function(e,t,n,i){var o=r,a=i+n;e^=-1;for(var s=i;s<a;s++)e=e>>>8^o[255&(e^t[s])];return-1^e}},function(e,t,n){"use strict";(function(t,r){var i;e.exports=x,x.ReadableState=k;n(14).EventEmitter;var o=function(e,t){return e.listeners(t).length},a=n(70),s=n(6).Buffer,u=t.Uint8Array||function(){};var l,c=n(177);l=c&&c.debuglog?c.debuglog("stream"):function(){};var f,h,d,p=n(178),g=n(71),b=n(72).getHighWaterMark,m=n(21).codes,y=m.ERR_INVALID_ARG_TYPE,v=m.ERR_STREAM_PUSH_AFTER_EOF,_=m.ERR_METHOD_NOT_IMPLEMENTED,w=m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;n(4)(x,a);var E=g.errorOrDestroy,S=["error","close","destroy","pause","resume"];function k(e,t,r){i=i||n(22),e=e||{},"boolean"!=typeof r&&(r=t instanceof i),this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=b(this,e,"readableHighWaterMark",r),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(f||(f=n(15).StringDecoder),this.decoder=new f(e.encoding),this.encoding=e.encoding)}function x(e){if(i=i||n(22),!(this instanceof x))return new x(e);var t=this instanceof i;this._readableState=new k(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),a.call(this)}function O(e,t,n,r,i){l("readableAddChunk",t);var o,a=e._readableState;if(null===t)a.reading=!1,function(e,t){if(l("onEofChunk"),t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,t.sync?T(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,M(e)))}(e,a);else if(i||(o=function(e,t){var n;r=t,s.isBuffer(r)||r instanceof u||"string"==typeof t||void 0===t||e.objectMode||(n=new y("chunk",["string","Buffer","Uint8Array"],t));var r;return n}(a,t)),o)E(e,o);else if(a.objectMode||t&&t.length>0)if("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===s.prototype||(t=function(e){return s.from(e)}(t)),r)a.endEmitted?E(e,new w):R(e,a,t,!0);else if(a.ended)E(e,new v);else{if(a.destroyed)return!1;a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?R(e,a,t,!1):A(e,a)):R(e,a,t,!1)}else r||(a.reading=!1,A(e,a));return!a.ended&&(a.length<a.highWaterMark||0===a.length)}function R(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",n)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&T(e)),A(e,t)}Object.defineProperty(x.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),x.prototype.destroy=g.destroy,x.prototype._undestroy=g.undestroy,x.prototype._destroy=function(e,t){t(e)},x.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=s.from(e,t),t=""),n=!0),O(this,e,t,!1,n)},x.prototype.unshift=function(e){return O(this,e,null,!0,!1)},x.prototype.isPaused=function(){return!1===this._readableState.flowing},x.prototype.setEncoding=function(e){f||(f=n(15).StringDecoder);var t=new f(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,i="";null!==r;)i+=t.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};function j(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=1073741824?e=1073741824:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function T(e){var t=e._readableState;l("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,r.nextTick(M,e))}function M(e){var t=e._readableState;l("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,D(e)}function A(e,t){t.readingMore||(t.readingMore=!0,r.nextTick(P,e,t))}function P(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var n=t.length;if(l("maybeReadMore read 0"),e.read(0),n===t.length)break}t.readingMore=!1}function L(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function C(e){l("readable nexttick read 0"),e.read(0)}function N(e,t){l("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),D(e),t.flowing&&!t.reading&&e.read(0)}function D(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function I(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):n=t.buffer.consume(e,t.decoder),n);var n}function B(e){var t=e._readableState;l("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,r.nextTick(F,t,e))}function F(e,t){if(l("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var n=t._writableState;(!n||n.autoDestroy&&n.finished)&&t.destroy()}}function U(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}x.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?B(this):T(this),null;if(0===(e=j(e,t))&&t.ended)return 0===t.length&&B(this),null;var r,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=j(n,t))),null===(r=e>0?I(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&B(this)),null!==r&&this.emit("data",r),r},x.prototype._read=function(e){E(this,new _("_read()"))},x.prototype.pipe=function(e,t){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,l("pipe count=%d opts=%j",i.pipesCount,t);var a=(!t||!1!==t.end)&&e!==r.stdout&&e!==r.stderr?u:b;function s(t,r){l("onunpipe"),t===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,l("cleanup"),e.removeListener("close",p),e.removeListener("finish",g),e.removeListener("drain",c),e.removeListener("error",d),e.removeListener("unpipe",s),n.removeListener("end",u),n.removeListener("end",b),n.removeListener("data",h),f=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||c())}function u(){l("onend"),e.end()}i.endEmitted?r.nextTick(a):n.once("end",a),e.on("unpipe",s);var c=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&o(e,"data")&&(t.flowing=!0,D(e))}}(n);e.on("drain",c);var f=!1;function h(t){l("ondata");var r=e.write(t);l("dest.write",r),!1===r&&((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==U(i.pipes,e))&&!f&&(l("false write response, pause",i.awaitDrain),i.awaitDrain++),n.pause())}function d(t){l("onerror",t),b(),e.removeListener("error",d),0===o(e,"error")&&E(e,t)}function p(){e.removeListener("finish",g),b()}function g(){l("onfinish"),e.removeListener("close",p),b()}function b(){l("unpipe"),n.unpipe(e)}return n.on("data",h),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",d),e.once("close",p),e.once("finish",g),e.emit("pipe",n),i.flowing||(l("pipe resume"),n.resume()),e},x.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n)),this;if(!e){var r=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=U(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n)),this},x.prototype.on=function(e,t){var n=a.prototype.on.call(this,e,t),i=this._readableState;return"data"===e?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===e&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,l("on readable",i.length,i.reading),i.length?T(this):i.reading||r.nextTick(C,this))),n},x.prototype.addListener=x.prototype.on,x.prototype.removeListener=function(e,t){var n=a.prototype.removeListener.call(this,e,t);return"readable"===e&&r.nextTick(L,this),n},x.prototype.removeAllListeners=function(e){var t=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||r.nextTick(L,this),t},x.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,r.nextTick(N,e,t))}(this,e)),e.paused=!1,this},x.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},x.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var i in e.on("end",(function(){if(l("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(l("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(t.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<S.length;o++)e.on(S[o],this.emit.bind(this,S[o]));return this._read=function(t){l("wrapped _read",t),r&&(r=!1,e.resume())},this},"function"==typeof Symbol&&(x.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=n(180)),h(this)}),Object.defineProperty(x.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(x.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(x.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),x._fromList=I,Object.defineProperty(x.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(x.from=function(e,t){return void 0===d&&(d=n(181)),d(x,e,t)})}).call(this,n(8),n(2))},function(e,t,n){e.exports=n(14).EventEmitter},function(e,t,n){"use strict";(function(t){function n(e,t){i(e,t),r(e)}function r(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,o){var a=this,s=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return s||u?(o?o(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,t.nextTick(i,this,e)):t.nextTick(i,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!o&&e?a._writableState?a._writableState.errorEmitted?t.nextTick(r,a):(a._writableState.errorEmitted=!0,t.nextTick(n,a,e)):t.nextTick(n,a,e):o?(t.nextTick(r,a),o(e)):t.nextTick(r,a)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var n=e._readableState,r=e._writableState;n&&n.autoDestroy||r&&r.autoDestroy?e.destroy(t):e.emit("error",t)}}}).call(this,n(2))},function(e,t,n){"use strict";var r=n(21).codes.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,n,i){var o=function(e,t,n){return null!=e.highWaterMark?e.highWaterMark:t?e[n]:null}(t,i,n);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new r(i?n:"highWaterMark",o);return Math.floor(o)}return e.objectMode?16:16384}}},function(e,t,n){"use strict";(function(t,r){function i(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree.next=e}(t,e)}}var o;e.exports=x,x.WritableState=k;var a={deprecate:n(29)},s=n(70),u=n(6).Buffer,l=t.Uint8Array||function(){};var c,f=n(71),h=n(72).getHighWaterMark,d=n(21).codes,p=d.ERR_INVALID_ARG_TYPE,g=d.ERR_METHOD_NOT_IMPLEMENTED,b=d.ERR_MULTIPLE_CALLBACK,m=d.ERR_STREAM_CANNOT_PIPE,y=d.ERR_STREAM_DESTROYED,v=d.ERR_STREAM_NULL_VALUES,_=d.ERR_STREAM_WRITE_AFTER_END,w=d.ERR_UNKNOWN_ENCODING,E=f.errorOrDestroy;function S(){}function k(e,t,a){o=o||n(22),e=e||{},"boolean"!=typeof a&&(a=t instanceof o),this.objectMode=!!e.objectMode,a&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=h(this,e,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===e.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,i=n.sync,o=n.writecb;if("function"!=typeof o)throw new b;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,i,o){--t.pendingcb,n?(r.nextTick(o,i),r.nextTick(A,e,t),e._writableState.errorEmitted=!0,E(e,i)):(o(i),e._writableState.errorEmitted=!0,E(e,i),A(e,t))}(e,n,i,t,o);else{var a=T(n)||e.destroyed;a||n.corked||n.bufferProcessing||!n.bufferedRequest||j(e,n),i?r.nextTick(R,e,n,a,o):R(e,n,a,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function x(e){var t=this instanceof(o=o||n(22));if(!t&&!c.call(x,this))return new x(e);this._writableState=new k(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),s.call(this)}function O(e,t,n,r,i,o,a){t.writelen=r,t.writecb=a,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new y("write")):n?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function R(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,r(),A(e,t)}function j(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var r=t.bufferedRequestCount,o=new Array(r),a=t.corkedRequestsFree;a.entry=n;for(var s=0,u=!0;n;)o[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;o.allBuffers=u,O(e,t,!0,t.length,o,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new i(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,f=n.callback;if(O(e,t,!1,t.objectMode?1:l.length,l,c,f),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function T(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function M(e,t){e._final((function(n){t.pendingcb--,n&&E(e,n),t.prefinished=!0,e.emit("prefinish"),A(e,t)}))}function A(e,t){var n=T(t);if(n&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,r.nextTick(M,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var i=e._readableState;(!i||i.autoDestroy&&i.endEmitted)&&e.destroy()}return n}n(4)(x,s),k.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(k.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(c=Function.prototype[Symbol.hasInstance],Object.defineProperty(x,Symbol.hasInstance,{value:function(e){return!!c.call(this,e)||this===x&&(e&&e._writableState instanceof k)}})):c=function(e){return e instanceof this},x.prototype.pipe=function(){E(this,new m)},x.prototype.write=function(e,t,n){var i,o=this._writableState,a=!1,s=!o.objectMode&&(i=e,u.isBuffer(i)||i instanceof l);return s&&!u.isBuffer(e)&&(e=function(e){return u.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof n&&(n=S),o.ending?function(e,t){var n=new _;E(e,n),r.nextTick(t,n)}(this,n):(s||function(e,t,n,i){var o;return null===n?o=new v:"string"==typeof n||t.objectMode||(o=new p("chunk",["string","Buffer"],n)),!o||(E(e,o),r.nextTick(i,o),!1)}(this,o,e,n))&&(o.pendingcb++,a=function(e,t,n,r,i,o){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=u.from(t,n));return t}(t,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=t.objectMode?1:r.length;t.length+=s;var l=t.length<t.highWaterMark;l||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else O(e,t,!1,s,r,i,o);return l}(this,o,s,e,t,n)),a},x.prototype.cork=function(){this._writableState.corked++},x.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||j(this,e))},x.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new w(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(x.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(x.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),x.prototype._write=function(e,t,n){n(new g("_write()"))},x.prototype._writev=null,x.prototype.end=function(e,t,n){var i=this._writableState;return"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||function(e,t,n){t.ending=!0,A(e,t),n&&(t.finished?r.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,i,n),this},Object.defineProperty(x.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(x.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),x.prototype.destroy=f.destroy,x.prototype._undestroy=f.undestroy,x.prototype._destroy=function(e,t){t(e)}}).call(this,n(8),n(2))},function(e,t,n){"use strict";e.exports=c;var r=n(21).codes,i=r.ERR_METHOD_NOT_IMPLEMENTED,o=r.ERR_MULTIPLE_CALLBACK,a=r.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=r.ERR_TRANSFORM_WITH_LENGTH_0,u=n(22);function l(e,t){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(null===r)return this.emit("error",new o);n.writechunk=null,n.writecb=null,null!=t&&this.push(t),r(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function c(e){if(!(this instanceof c))return new c(e);u.call(this,e),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",f)}function f(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(t,n){h(e,t,n)}))}function h(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new s;if(e._transformState.transforming)throw new a;return e.push(null)}n(4)(c,u),c.prototype.push=function(e,t){return this._transformState.needTransform=!1,u.prototype.push.call(this,e,t)},c.prototype._transform=function(e,t,n){n(new i("_transform()"))},c.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},c.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},c.prototype._destroy=function(e,t){u.prototype._destroy.call(this,e,(function(e){t(e)}))}},function(e,t,n){(function(e){var r=n(188),i=n(77),o=n(194),a=n(195),s=n(84),u=t;u.request=function(t,n){t="string"==typeof t?s.parse(t):o(t);var i=-1===e.location.protocol.search(/^https?:$/)?"http:":"",a=t.protocol||i,u=t.hostname||t.host,l=t.port,c=t.path||"/";u&&-1!==u.indexOf(":")&&(u="["+u+"]"),t.url=(u?a+"//"+u:"")+(l?":"+l:"")+c,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var f=new r(t);return n&&f.on("response",n),f},u.get=function(e,t){var n=u.request(e,t);return n.end(),n},u.ClientRequest=r,u.IncomingMessage=i.IncomingMessage,u.Agent=function(){},u.Agent.defaultMaxSockets=4,u.globalAgent=new u.Agent,u.STATUS_CODES=a,u.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]}).call(this,n(8))},function(e,t,n){(function(e){t.fetch=s(e.fetch)&&s(e.ReadableStream),t.writableStream=s(e.WritableStream),t.abortController=s(e.AbortController),t.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),t.blobConstructor=!0}catch(e){}var n;function r(){if(void 0!==n)return n;if(e.XMLHttpRequest){n=new e.XMLHttpRequest;try{n.open("GET",e.XDomainRequest?"/":"https://example.com")}catch(e){n=null}}else n=null;return n}function i(e){var t=r();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}var o=void 0!==e.ArrayBuffer,a=o&&s(e.ArrayBuffer.prototype.slice);function s(e){return"function"==typeof e}t.arraybuffer=t.fetch||o&&i("arraybuffer"),t.msstream=!t.fetch&&a&&i("ms-stream"),t.mozchunkedarraybuffer=!t.fetch&&o&&i("moz-chunked-arraybuffer"),t.overrideMimeType=t.fetch||!!r()&&s(r().overrideMimeType),t.vbArray=s(e.VBArray),n=null}).call(this,n(8))},function(e,t,n){(function(e,r,i){var o=n(76),a=n(4),s=n(78),u=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},l=t.IncomingMessage=function(t,n,a,u){var l=this;if(s.Readable.call(l),l._mode=a,l.headers={},l.rawHeaders=[],l.trailers={},l.rawTrailers=[],l.on("end",(function(){e.nextTick((function(){l.emit("close")}))})),"fetch"===a){if(l._fetchResponse=n,l.url=n.url,l.statusCode=n.status,l.statusMessage=n.statusText,n.headers.forEach((function(e,t){l.headers[t.toLowerCase()]=e,l.rawHeaders.push(t,e)})),o.writableStream){var c=new WritableStream({write:function(e){return new Promise((function(t,n){l._destroyed?n():l.push(new r(e))?t():l._resumeFetch=t}))},close:function(){i.clearTimeout(u),l._destroyed||l.push(null)},abort:function(e){l._destroyed||l.emit("error",e)}});try{return void n.body.pipeTo(c).catch((function(e){i.clearTimeout(u),l._destroyed||l.emit("error",e)}))}catch(e){}}var f=n.body.getReader();!function e(){f.read().then((function(t){if(!l._destroyed){if(t.done)return i.clearTimeout(u),void l.push(null);l.push(new r(t.value)),e()}})).catch((function(e){i.clearTimeout(u),l._destroyed||l.emit("error",e)}))}()}else{if(l._xhr=t,l._pos=0,l.url=t.responseURL,l.statusCode=t.status,l.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var n=t[1].toLowerCase();"set-cookie"===n?(void 0===l.headers[n]&&(l.headers[n]=[]),l.headers[n].push(t[2])):void 0!==l.headers[n]?l.headers[n]+=", "+t[2]:l.headers[n]=t[2],l.rawHeaders.push(t[1],t[2])}})),l._charset="x-user-defined",!o.overrideMimeType){var h=l.rawHeaders["mime-type"];if(h){var d=h.match(/;\s*charset=([^;])(;|$)/);d&&(l._charset=d[1].toLowerCase())}l._charset||(l._charset="utf-8")}}};a(l,s.Readable),l.prototype._read=function(){var e=this._resumeFetch;e&&(this._resumeFetch=null,e())},l.prototype._onXHRProgress=function(){var e=this,t=e._xhr,n=null;switch(e._mode){case"text:vbarray":if(t.readyState!==u.DONE)break;try{n=new i.VBArray(t.responseBody).toArray()}catch(e){}if(null!==n){e.push(new r(n));break}case"text":try{n=t.responseText}catch(t){e._mode="text:vbarray";break}if(n.length>e._pos){var o=n.substr(e._pos);if("x-user-defined"===e._charset){for(var a=new r(o.length),s=0;s<o.length;s++)a[s]=255&o.charCodeAt(s);e.push(a)}else e.push(o,e._charset);e._pos=n.length}break;case"arraybuffer":if(t.readyState!==u.DONE||!t.response)break;n=t.response,e.push(new r(new Uint8Array(n)));break;case"moz-chunked-arraybuffer":if(n=t.response,t.readyState!==u.LOADING||!n)break;e.push(new r(new Uint8Array(n)));break;case"ms-stream":if(n=t.response,t.readyState!==u.LOADING)break;var l=new i.MSStreamReader;l.onprogress=function(){l.result.byteLength>e._pos&&(e.push(new r(new Uint8Array(l.result.slice(e._pos)))),e._pos=l.result.byteLength)},l.onload=function(){e.push(null)},l.readAsArrayBuffer(n)}e._xhr.readyState===u.DONE&&"ms-stream"!==e._mode&&e.push(null)}}).call(this,n(2),n(6).Buffer,n(8))},function(e,t,n){(t=e.exports=n(79)).Stream=t,t.Readable=t,t.Writable=n(82),t.Duplex=n(23),t.Transform=n(83),t.PassThrough=n(192)},function(e,t,n){"use strict";(function(t,r){var i=n(10);e.exports=v;var o,a=n(27);v.ReadableState=y;n(14).EventEmitter;var s=function(e,t){return e.listeners(t).length},u=n(80),l=n(44).Buffer,c=t.Uint8Array||function(){};var f=Object.create(n(9));f.inherits=n(4);var h=n(189),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,g=n(190),b=n(81);f.inherits(v,u);var m=["error","close","destroy","pause","resume"];function y(e,t){e=e||{};var r=t instanceof(o=o||n(23));this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=n(15).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(o=o||n(23),!(this instanceof v))return new v(e);this._readableState=new y(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function _(e,t,n,r,i){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,S(e)}(e,a)):(i||(o=function(e,t){var n;r=t,l.isBuffer(r)||r instanceof c||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),r?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?w(e,a,t,!1):x(e,a)):w(e,a,t,!1))):r||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function w(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&S(e)),x(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=b.destroy,v.prototype._undestroy=b.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=l.from(e,t),t=""),n=!0),_(this,e,t,!1,n)},v.prototype.unshift=function(e){return _(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=n(15).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};function E(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function S(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(k,e):k(e))}function k(e){d("emit readable"),e.emit("readable"),T(e)}function x(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(O,e,t))}function O(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function R(e){d("readable nexttick read 0"),e.read(0)}function j(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),T(e),t.flowing&&!t.reading&&e.read(0)}function T(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function M(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var r;e<t.head.data.length?(r=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):r=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,r=1,i=n.data;e-=i.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0===(e-=a)){a===o.length?(++r,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++r}return t.length-=r,i}(e,t):function(e,t){var n=l.allocUnsafe(e),r=t.head,i=1;r.data.copy(n),e-=r.data.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(o.copy(n,n.length-e,0,a),0===(e-=a)){a===o.length?(++i,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++i}return t.length-=i,n}(e,t);return r}(e,t.buffer,t.decoder),n);var n}function A(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function L(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}v.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?A(this):S(this),null;if(0===(e=E(e,t))&&t.ended)return 0===t.length&&A(this),null;var r,i=t.needReadable;return d("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",i=!0),t.ended||t.reading?d("reading or ended",i=!1):i&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=E(n,t))),null===(r=e>0?M(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&A(this)),null!==r&&this.emit("data",r),r},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,t);var u=(!t||!1!==t.end)&&e!==r.stdout&&e!==r.stderr?c:v;function l(t,r){d("onunpipe"),t===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),e.removeListener("close",m),e.removeListener("finish",y),e.removeListener("drain",f),e.removeListener("error",b),e.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",v),n.removeListener("data",g),h=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||f())}function c(){d("onend"),e.end()}o.endEmitted?i.nextTick(u):n.once("end",u),e.on("unpipe",l);var f=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,T(e))}}(n);e.on("drain",f);var h=!1;var p=!1;function g(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==L(o.pipes,e))&&!h&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function b(t){d("onerror",t),v(),e.removeListener("error",b),0===s(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",y),v()}function y(){d("onfinish"),e.removeListener("close",m),v()}function v(){d("unpipe"),n.unpipe(e)}return n.on("data",g),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",b),e.once("close",m),e.once("finish",y),e.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n)),this;if(!e){var r=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=L(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n)),this},v.prototype.on=function(e,t){var n=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):i.nextTick(R,this))}return n},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(j,e,t))}(this,e)),this},v.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var i in e.on("end",(function(){if(d("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(t.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<m.length;o++)e.on(m[o],this.emit.bind(this,m[o]));return this._read=function(t){d("wrapped _read",t),r&&(r=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=M}).call(this,n(8),n(2))},function(e,t,n){e.exports=n(14).EventEmitter},function(e,t,n){"use strict";var r=n(10);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(r.nextTick(i,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){"use strict";(function(t,r,i){var o=n(10);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=y;var s,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?r:o.nextTick;y.WritableState=m;var l=Object.create(n(9));l.inherits=n(4);var c={deprecate:n(29)},f=n(80),h=n(44).Buffer,d=i.Uint8Array||function(){};var p,g=n(81);function b(){}function m(e,t){s=s||n(23),e=e||{};var r=t instanceof s;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,l=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===e.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,r=n.sync,i=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,r,i){--t.pendingcb,n?(o.nextTick(i,r),o.nextTick(k,e,t),e._writableState.errorEmitted=!0,e.emit("error",r)):(i(r),e._writableState.errorEmitted=!0,e.emit("error",r),k(e,t))}(e,n,r,t,i);else{var a=E(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||w(e,n),r?u(_,e,n,a,i):_(e,n,a,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function y(e){if(s=s||n(23),!(p.call(y,this)||this instanceof s))return new y(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),f.call(this)}function v(e,t,n,r,i,o,a){t.writelen=r,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function _(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,r(),k(e,t)}function w(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var r=t.bufferedRequestCount,i=new Array(r),o=t.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,v(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,f=n.callback;if(v(e,t,!1,t.objectMode?1:l.length,l,c,f),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function S(e,t){e._final((function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),k(e,t)}))}function k(e,t){var n=E(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(S,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}l.inherits(y,f),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===y&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(e,t,n){var r,i=this._writableState,a=!1,s=!i.objectMode&&(r=e,h.isBuffer(r)||r instanceof d);return s&&!h.isBuffer(e)&&(e=function(e){return h.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof n&&(n=b),i.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),o.nextTick(t,n)}(this,n):(s||function(e,t,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(r,a),i=!1),i}(this,i,e,n))&&(i.pendingcb++,a=function(e,t,n,r,i,o){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=h.from(t,n));return t}(t,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=t.objectMode?1:r.length;t.length+=s;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,s,r,i,o);return u}(this,i,s,e,t,n)),a},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},y.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(e,t,n){var r=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(e,t,n){t.ending=!0,k(e,t),n&&(t.finished?o.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,r,n)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(2),n(13).setImmediate,n(8))},function(e,t,n){"use strict";e.exports=a;var r=n(23),i=Object.create(n(9));function o(e,t){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),r(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);r.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(t,n){u(e,t,n)})):u(this,null,null)}function u(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=n(4),i.inherits(a,r),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,r.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var n=this;r.prototype._destroy.call(this,e,(function(e){t(e),n.emit("close")}))}},function(e,t,n){"use strict";var r=n(196),i=n(198);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=v,t.resolve=function(e,t){return v(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?v(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=v(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),f=["%","/","?",";","#"].concat(c),h=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,g={javascript:!0,"javascript:":!0},b={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=n(199);function v(e,t,n){if(e&&i.isObject(e)&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}o.prototype.parse=function(e,t,n){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),s=-1!==o&&o<e.indexOf("#")?"?":"#",l=e.split(s);l[0]=l[0].replace(/\\/g,"/");var v=e=l.join(s);if(v=v.trim(),!n&&1===e.split("#").length){var _=u.exec(v);if(_)return this.path=v,this.href=v,this.pathname=_[1],_[2]?(this.search=_[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=a.exec(v);if(w){var E=(w=w[0]).toLowerCase();this.protocol=E,v=v.substr(w.length)}if(n||w||v.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===v.substr(0,2);!S||w&&b[w]||(v=v.substr(2),this.slashes=!0)}if(!b[w]&&(S||w&&!m[w])){for(var k,x,O=-1,R=0;R<h.length;R++){-1!==(j=v.indexOf(h[R]))&&(-1===O||j<O)&&(O=j)}-1!==(x=-1===O?v.lastIndexOf("@"):v.lastIndexOf("@",O))&&(k=v.slice(0,x),v=v.slice(x+1),this.auth=decodeURIComponent(k)),O=-1;for(R=0;R<f.length;R++){var j;-1!==(j=v.indexOf(f[R]))&&(-1===O||j<O)&&(O=j)}-1===O&&(O=v.length),this.host=v.slice(0,O),v=v.slice(O),this.parseHost(),this.hostname=this.hostname||"";var T="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!T)for(var M=this.hostname.split(/\./),A=(R=0,M.length);R<A;R++){var P=M[R];if(P&&!P.match(d)){for(var L="",C=0,N=P.length;C<N;C++)P.charCodeAt(C)>127?L+="x":L+=P[C];if(!L.match(d)){var D=M.slice(0,R),I=M.slice(R+1),B=P.match(p);B&&(D.push(B[1]),I.unshift(B[2])),I.length&&(v="/"+I.join(".")+v),this.hostname=D.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=r.toASCII(this.hostname));var F=this.port?":"+this.port:"",U=this.hostname||"";this.host=U+F,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==v[0]&&(v="/"+v))}if(!g[E])for(R=0,A=c.length;R<A;R++){var z=c[R];if(-1!==v.indexOf(z)){var q=encodeURIComponent(z);q===z&&(q=escape(z)),v=v.split(z).join(q)}}var W=v.indexOf("#");-1!==W&&(this.hash=v.substr(W),v=v.slice(0,W));var H=v.indexOf("?");if(-1!==H?(this.search=v.substr(H),this.query=v.substr(H+1),t&&(this.query=y.parse(this.query)),v=v.slice(0,H)):t&&(this.search="",this.query={}),v&&(this.pathname=v),m[E]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var Z=this.search||"";this.path=F+Z}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,a="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=y.stringify(this.query));var s=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+o+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+r},o.prototype.resolve=function(e){return this.resolveObject(v(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var n=new o,r=Object.keys(this),a=0;a<r.length;a++){var s=r[a];n[s]=this[s]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),l=0;l<u.length;l++){var c=u[l];"protocol"!==c&&(n[c]=e[c])}return m[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!m[e.protocol]){for(var f=Object.keys(e),h=0;h<f.length;h++){var d=f[h];n[d]=e[d]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||b[e.protocol])n.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),n.pathname=p.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var g=n.pathname||"",y=n.search||"";n.path=g+y}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var v=n.pathname&&"/"===n.pathname.charAt(0),_=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=_||v||n.host&&e.pathname,E=w,S=n.pathname&&n.pathname.split("/")||[],k=(p=e.pathname&&e.pathname.split("/")||[],n.protocol&&!m[n.protocol]);if(k&&(n.hostname="",n.port=null,n.host&&(""===S[0]?S[0]=n.host:S.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),w=w&&(""===p[0]||""===S[0])),_)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,S=p;else if(p.length)S||(S=[]),S.pop(),S=S.concat(p),n.search=e.search,n.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(k)n.hostname=n.host=S.shift(),(T=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=T.shift(),n.host=n.hostname=T.shift());return n.search=e.search,n.query=e.query,i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!S.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var x=S.slice(-1)[0],O=(n.host||e.host||S.length>1)&&("."===x||".."===x)||""===x,R=0,j=S.length;j>=0;j--)"."===(x=S[j])?S.splice(j,1):".."===x?(S.splice(j,1),R++):R&&(S.splice(j,1),R--);if(!w&&!E)for(;R--;R)S.unshift("..");!w||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),O&&"/"!==S.join("/").substr(-1)&&S.push("");var T,M=""===S[0]||S[0]&&"/"===S[0].charAt(0);k&&(n.hostname=n.host=M?"":S.length?S.shift():"",(T=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=T.shift(),n.host=n.hostname=T.shift()));return(w=w||n.host&&S.length)&&!M&&S.unshift(""),S.length?n.pathname=S.join("/"):(n.pathname=null,n.path=null),i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){"use strict";const r=e=>null!==e&&"object"==typeof e&&"function"==typeof e.pipe;r.writable=e=>r(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState,r.readable=e=>r(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState,r.duplex=e=>r.writable(e)&&r.readable(e),r.transform=e=>r.duplex(e)&&"function"==typeof e._transform&&"object"==typeof e._transformState,e.exports=r},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var i=l(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=n(5).LEVEL,f=n(45),h=n(204),d=n(32)("winston:create-logger");function p(e){return"is"+e.charAt(0).toUpperCase()+e.slice(1)+"Enabled"}e.exports=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.levels=e.levels||f.npm.levels;var t=function(e){o(n,e);var t=s(n);function n(e){return i(this,n),t.call(this,e)}return n}(h),n=new t(e);return Object.keys(e.levels).forEach((function(e){d('Define prototype method for "%s"',e),"log"!==e?(t.prototype[e]=function(){for(var t=this||n,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];if(1===i.length){var a=i[0],s=a&&a.message&&a||{message:a};return s.level=s[c]=e,t._addDefaultMeta(s),t.write(s),this||n}return 0===i.length?(t.log(e,""),t):t.log.apply(t,[e].concat(i))},t.prototype[p(e)]=function(){return(this||n).isLevelEnabled(e)}):console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.')})),n}},function(e,t,n){"use strict";(function(t){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(19),o=n(46),a=n(32)("winston:exception"),s=n(88),u=n(89),l=n(90);e.exports=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t)throw new Error("Logger is required to handle exceptions");this.logger=t,this.handlers=new Map}var n,c,f;return n=e,(c=[{key:"handle",value:function(){for(var e=this,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];r.forEach((function(t){if(Array.isArray(t))return t.forEach((function(t){return e._addHandler(t)}));e._addHandler(t)})),this.catcher||(this.catcher=this._uncaughtException.bind(this),t.on("uncaughtException",this.catcher))}},{key:"unhandle",value:function(){var e=this;this.catcher&&(t.removeListener("uncaughtException",this.catcher),this.catcher=!1,Array.from(this.handlers.values()).forEach((function(t){return e.logger.unpipe(t)})))}},{key:"getAllInfo",value:function(e){var t=e.message;return t||"string"!=typeof e||(t=e),{error:e,level:"error",message:["uncaughtException: ".concat(t||"(no error message)"),e.stack||"  No stack trace"].join("\n"),stack:e.stack,exception:!0,date:(new Date).toString(),process:this.getProcessInfo(),os:this.getOsInfo(),trace:this.getTrace(e)}}},{key:"getProcessInfo",value:function(){return{pid:t.pid,uid:t.getuid?t.getuid():null,gid:t.getgid?t.getgid():null,cwd:t.cwd(),execPath:t.execPath,version:t.version,argv:t.argv,memoryUsage:t.memoryUsage()}}},{key:"getOsInfo",value:function(){return{loadavg:i.loadavg(),uptime:i.uptime()}}},{key:"getTrace",value:function(e){return(e?u.parse(e):u.get()).map((function(e){return{column:e.getColumnNumber(),file:e.getFileName(),function:e.getFunctionName(),line:e.getLineNumber(),method:e.getMethodName(),native:e.isNative()}}))}},{key:"_addHandler",value:function(e){if(!this.handlers.has(e)){e.handleExceptions=!0;var t=new l(e);this.handlers.set(e,t),this.logger.pipe(t)}}},{key:"_uncaughtException",value:function(e){var n,r=this.getAllInfo(e),i=this._getExceptionHandlers(),u="function"==typeof this.logger.exitOnError?this.logger.exitOnError(e):this.logger.exitOnError;function l(){a("doExit",u),a("process._exiting",t._exiting),u&&!t._exiting&&(n&&clearTimeout(n),t.exit(1))}if(!i.length&&u&&(console.warn("winston: exitOnError cannot be true with no exception handlers."),console.warn("winston: not exiting process."),u=!1),!i||0===i.length)return t.nextTick(l);o(i,(function(e,t){var n=s(t),r=e.transport||e;function i(e){return function(){a(e),n()}}r._ending=!0,r.once("finish",i("finished")),r.once("error",i("error"))}),(function(){return u&&l()})),this.logger.log(r),u&&(n=setTimeout(l,3e3))}},{key:"_getExceptionHandlers",value:function(){return this.logger.transports.filter((function(e){return(e.transport||e).handleExceptions}))}}])&&r(n.prototype,c),f&&r(n,f),e}()}).call(this,n(2))},function(e,t,n){"use strict";var r=n(207);e.exports=function(e){var t,n=0;function i(){return n||(n=1,t=e.apply(this,arguments),e=null),t}return i.displayName=r(e),i}},function(e,t){function n(e){for(var t in e)this[t]=e[t]}t.get=function(e){var n=Error.stackTraceLimit;Error.stackTraceLimit=1/0;var r={},i=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t},Error.captureStackTrace(r,e||t.get);var o=r.stack;return Error.prepareStackTrace=i,Error.stackTraceLimit=n,o},t.parse=function(e){if(!e.stack)return[];var t=this;return e.stack.split("\n").slice(1).map((function(e){if(e.match(/^\s*[-]{4,}$/))return t._createParsedCallSite({fileName:e,lineNumber:null,functionName:null,typeName:null,methodName:null,columnNumber:null,native:null});var n=e.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);if(n){var r=null,i=null,o=null,a=null,s=null,u="native"===n[5];if(n[1]){var l=(o=n[1]).lastIndexOf(".");if("."==o[l-1]&&l--,l>0){r=o.substr(0,l),i=o.substr(l+1);var c=r.indexOf(".Module");c>0&&(o=o.substr(c+1),r=r.substr(0,c))}a=null}i&&(a=r,s=i),"<anonymous>"===i&&(s=null,o=null);var f={fileName:n[2]||null,lineNumber:parseInt(n[3],10)||null,functionName:o,typeName:a,methodName:s,columnNumber:parseInt(n[4],10)||null,native:u};return t._createParsedCallSite(f)}})).filter((function(e){return!!e}))};["this","typeName","functionName","methodName","fileName","lineNumber","columnNumber","function","evalOrigin"].forEach((function(e){n.prototype[e]=null,n.prototype["get"+e[0].toUpperCase()+e.substr(1)]=function(){return this[e]}})),["topLevel","eval","native","constructor"].forEach((function(e){n.prototype[e]=!1,n.prototype["is"+e[0].toUpperCase()+e.substr(1)]=function(){return this[e]}})),t._createParsedCallSite=function(e){return new n(e)}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n(26).Writable;e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(u,e);var t,n,r,s=a(u);function u(e){var t;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),t=s.call(this,{objectMode:!0}),!e)throw new Error("ExceptionStream requires a TransportStream instance.");return t.handleExceptions=!0,t.transport=e,t}return t=u,(n=[{key:"_write",value:function(e,t,n){return e.exception?this.transport.log(e,n):(n(),!0)}}])&&i(t.prototype,n),r&&i(t,r),u}(l)},function(e,t,n){"use strict";(function(t){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(19),o=n(46),a=n(32)("winston:rejection"),s=n(88),u=n(89),l=n(90);e.exports=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t)throw new Error("Logger is required to handle rejections");this.logger=t,this.handlers=new Map}var n,c,f;return n=e,(c=[{key:"handle",value:function(){for(var e=this,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];r.forEach((function(t){if(Array.isArray(t))return t.forEach((function(t){return e._addHandler(t)}));e._addHandler(t)})),this.catcher||(this.catcher=this._unhandledRejection.bind(this),t.on("unhandledRejection",this.catcher))}},{key:"unhandle",value:function(){var e=this;this.catcher&&(t.removeListener("unhandledRejection",this.catcher),this.catcher=!1,Array.from(this.handlers.values()).forEach((function(t){return e.logger.unpipe(t)})))}},{key:"getAllInfo",value:function(e){var t=e.message;return t||"string"!=typeof e||(t=e),{error:e,level:"error",message:["unhandledRejection: ".concat(t||"(no error message)"),e.stack||"  No stack trace"].join("\n"),stack:e.stack,exception:!0,date:(new Date).toString(),process:this.getProcessInfo(),os:this.getOsInfo(),trace:this.getTrace(e)}}},{key:"getProcessInfo",value:function(){return{pid:t.pid,uid:t.getuid?t.getuid():null,gid:t.getgid?t.getgid():null,cwd:t.cwd(),execPath:t.execPath,version:t.version,argv:t.argv,memoryUsage:t.memoryUsage()}}},{key:"getOsInfo",value:function(){return{loadavg:i.loadavg(),uptime:i.uptime()}}},{key:"getTrace",value:function(e){return(e?u.parse(e):u.get()).map((function(e){return{column:e.getColumnNumber(),file:e.getFileName(),function:e.getFunctionName(),line:e.getLineNumber(),method:e.getMethodName(),native:e.isNative()}}))}},{key:"_addHandler",value:function(e){if(!this.handlers.has(e)){e.handleRejections=!0;var t=new l(e);this.handlers.set(e,t),this.logger.pipe(t)}}},{key:"_unhandledRejection",value:function(e){var n,r=this.getAllInfo(e),i=this._getRejectionHandlers(),u="function"==typeof this.logger.exitOnError?this.logger.exitOnError(e):this.logger.exitOnError;function l(){a("doExit",u),a("process._exiting",t._exiting),u&&!t._exiting&&(n&&clearTimeout(n),t.exit(1))}if(!i.length&&u&&(console.warn("winston: exitOnError cannot be true with no rejection handlers."),console.warn("winston: not exiting process."),u=!1),!i||0===i.length)return t.nextTick(l);o(i,(function(e,t){var n=s(t),r=e.transport||e;function i(e){return function(){a(e),n()}}r._ending=!0,r.once("finish",i("finished")),r.once("error",i("error"))}),(function(){return u&&l()})),this.logger.log(r),u&&(n=setTimeout(l,3e3))}},{key:"_getRejectionHandlers",value:function(){return this.logger.transports.filter((function(e){return(e.transport||e).handleRejections}))}}])&&r(n.prototype,c),f&&r(n,f),e}()}).call(this,n(2))},function(e,t){e.exports=reactLifecyclesCompat},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(93);function i(e,t){return function(e){var t=Object(r.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var o=/([A-Z])/g;var a=/^ms-/;function s(e){return function(e){return e.replace(o,"-$1").toLowerCase()}(e).replace(a,"-ms-")}var u=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;t.a=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(s(t))||i(e).getPropertyValue(s(t));Object.keys(t).forEach((function(i){var o=t[i];o||0===o?!function(e){return!(!e||!u.test(e))}(i)?n+=s(i)+": "+o+";":r+=i+"("+o+") ":e.style.removeProperty(s(i))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(1),i=n(3),o=n(0);n(47);function a(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function s(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function u(e,t){return Object.keys(t).reduce((function(n,u){var l,c=n,f=c[a(u)],h=c[u],d=Object(i.a)(c,[a(u),u].map(s)),p=t[u],g=function(e,t,n){var r=Object(o.useRef)(void 0!==e),i=Object(o.useState)(t),a=i[0],s=i[1],u=void 0!==e,l=r.current;return r.current=u,!u&&l&&a!==t&&s(t),[u?e:a,Object(o.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];n&&n.apply(void 0,[e].concat(r)),s(e)}),[n])]}(h,f,e[p]),b=g[0],m=g[1];return Object(r.a)({},d,((l={})[u]=b,l[p]=m,l))}),e)}n(33),n(92)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);var i=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function o(e){var t=i(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t,n){var r=n(50),i=n(98);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){var r=n(50),i=n(100);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";var r=n(36).Colorizer;e.exports=function(e){return r.addColors(e.colors||e),e}},function(e,t,n){var r={};e.exports=r,r.themes={};var i=n(12),o=r.styles=n(105),a=Object.defineProperties,s=new RegExp(/[\r\n]+/g);r.supportsColor=n(106).supportsColor,void 0===r.enabled&&(r.enabled=!1!==r.supportsColor()),r.enable=function(){r.enabled=!0},r.disable=function(){r.enabled=!1},r.stripColors=r.strip=function(e){return(""+e).replace(/\x1B\[\d+m/g,"")};r.stylize=function(e,t){if(!r.enabled)return e+"";var n=o[t];return!n&&t in r?r[t](e):n.open+e+n.close};var u=/[|\\{}()[\]^$+*?.]/g;function l(e){var t=function e(){return d.apply(e,arguments)};return t._styles=e,t.__proto__=h,t}var c,f=(c={},o.grey=o.gray,Object.keys(o).forEach((function(e){o[e].closeRe=new RegExp(function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(u,"\\$&")}(o[e].close),"g"),c[e]={get:function(){return l(this._styles.concat(e))}}})),c),h=a((function(){}),f);function d(){var e=Array.prototype.slice.call(arguments),t=e.map((function(e){return null!=e&&e.constructor===String?e:i.inspect(e)})).join(" ");if(!r.enabled||!t)return t;for(var n=-1!=t.indexOf("\n"),a=this._styles,u=a.length;u--;){var l=o[a[u]];t=l.open+t.replace(l.closeRe,l.open)+l.close,n&&(t=t.replace(s,(function(e){return l.close+e+l.open})))}return t}r.setTheme=function(e){if("string"!=typeof e)for(var t in e)!function(t){r[t]=function(n){if("object"==typeof e[t]){var i=n;for(var o in e[t])i=r[e[t][o]](i);return i}return r[e[t]](n)}}(t);else console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));")};var p=function(e,t){var n=t.split("");return(n=n.map(e)).join("")};for(var g in r.trap=n(108),r.zalgo=n(109),r.maps={},r.maps.america=n(110)(r),r.maps.zebra=n(111)(r),r.maps.rainbow=n(112)(r),r.maps.random=n(113)(r),r.maps)!function(e){r[e]=function(t){return p(r.maps[e],t)}}(g);a(r,function(){var e={};return Object.keys(f).forEach((function(t){e[t]={get:function(){return l([t])}}})),e}())},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){var n={};e.exports=n;var r={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],grey:[90,39],brightRed:[91,39],brightGreen:[92,39],brightYellow:[93,39],brightBlue:[94,39],brightMagenta:[95,39],brightCyan:[96,39],brightWhite:[97,39],bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgGray:[100,49],bgGrey:[100,49],bgBrightRed:[101,49],bgBrightGreen:[102,49],bgBrightYellow:[103,49],bgBrightBlue:[104,49],bgBrightMagenta:[105,49],bgBrightCyan:[106,49],bgBrightWhite:[107,49],blackBG:[40,49],redBG:[41,49],greenBG:[42,49],yellowBG:[43,49],blueBG:[44,49],magentaBG:[45,49],cyanBG:[46,49],whiteBG:[47,49]};Object.keys(r).forEach((function(e){var t=r[e],i=n[e]=[];i.open="["+t[0]+"m",i.close="["+t[1]+"m"}))},function(e,t,n){"use strict";(function(t){var r=n(19),i=n(107),o=t.env,a=void 0;function s(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(!1===a)return 0;if(i("color=16m")||i("color=full")||i("color=truecolor"))return 3;if(i("color=256"))return 2;if(e&&!e.isTTY&&!0!==a)return 0;var n=a?1:0;if("win32"===t.platform){var s=r.release().split(".");return Number(t.versions.node.split(".")[0])>=8&&Number(s[0])>=10&&Number(s[2])>=10586?Number(s[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some((function(e){return e in o}))||"codeship"===o.CI_NAME?1:n;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("TERM_PROGRAM"in o){var u=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return u>=3?3:2;case"Hyper":return 3;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)||"COLORTERM"in o?1:(o.TERM,n)}(e))}i("no-color")||i("no-colors")||i("color=false")?a=!1:(i("color")||i("colors")||i("color=true")||i("color=always"))&&(a=!0),"FORCE_COLOR"in o&&(a=0===o.FORCE_COLOR.length||0!==parseInt(o.FORCE_COLOR,10)),e.exports={supportsColor:s,stdout:s(t.stdout),stderr:s(t.stderr)}}).call(this,n(2))},function(e,t,n){"use strict";(function(t){e.exports=function(e,n){var r=(n=n||t.argv).indexOf("--"),i=/^-{1,2}/.test(e)?"":"--",o=n.indexOf(i+e);return-1!==o&&(-1===r||o<r)}}).call(this,n(2))},function(e,t){e.exports=function(e,t){var n="";e=(e=e||"Run the trap, drop the bass").split("");var r={a:["@","Ą","Ⱥ","Ʌ","Δ","Λ","Д"],b:["ß","Ɓ","Ƀ","ɮ","β","฿"],c:["©","Ȼ","Ͼ"],d:["Ð","Ɗ","Ԁ","ԁ","Ԃ","ԃ"],e:["Ë","ĕ","Ǝ","ɘ","Σ","ξ","Ҽ","੬"],f:["Ӻ"],g:["ɢ"],h:["Ħ","ƕ","Ң","Һ","Ӈ","Ԋ"],i:["༏"],j:["Ĵ"],k:["ĸ","Ҡ","Ӄ","Ԟ"],l:["Ĺ"],m:["ʍ","Ӎ","ӎ","Ԡ","ԡ","൩"],n:["Ñ","ŋ","Ɲ","Ͷ","Π","Ҋ"],o:["Ø","õ","ø","Ǿ","ʘ","Ѻ","ם","۝","๏"],p:["Ƿ","Ҏ"],q:["্"],r:["®","Ʀ","Ȑ","Ɍ","ʀ","Я"],s:["§","Ϟ","ϟ","Ϩ"],t:["Ł","Ŧ","ͳ"],u:["Ʊ","Ս"],v:["ט"],w:["Ш","Ѡ","Ѽ","൰"],x:["Ҳ","Ӿ","Ӽ","ӽ"],y:["¥","Ұ","Ӌ"],z:["Ƶ","ɀ"]};return e.forEach((function(e){e=e.toLowerCase();var t=r[e]||[" "],i=Math.floor(Math.random()*t.length);n+=void 0!==r[e]?r[e][i]:e})),n}},function(e,t){e.exports=function(e,t){e=e||"   he is here   ";var n={up:["̍","̎","̄","̅","̿","̑","̆","̐","͒","͗","͑","̇","̈","̊","͂","̓","̈","͊","͋","͌","̃","̂","̌","͐","̀","́","̋","̏","̒","̓","̔","̽","̉","ͣ","ͤ","ͥ","ͦ","ͧ","ͨ","ͩ","ͪ","ͫ","ͬ","ͭ","ͮ","ͯ","̾","͛","͆","̚"],down:["̖","̗","̘","̙","̜","̝","̞","̟","̠","̤","̥","̦","̩","̪","̫","̬","̭","̮","̯","̰","̱","̲","̳","̹","̺","̻","̼","ͅ","͇","͈","͉","͍","͎","͓","͔","͕","͖","͙","͚","̣"],mid:["̕","̛","̀","́","͘","̡","̢","̧","̨","̴","̵","̶","͜","͝","͞","͟","͠","͢","̸","̷","͡"," ҉"]},r=[].concat(n.up,n.down,n.mid);function i(e){return Math.floor(Math.random()*e)}function o(e){var t=!1;return r.filter((function(n){t=n===e})),t}return function(e,t){var r,a,s="";for(a in(t=t||{}).up=void 0===t.up||t.up,t.mid=void 0===t.mid||t.mid,t.down=void 0===t.down||t.down,t.size=void 0!==t.size?t.size:"maxi",e=e.split(""))if(!o(a)){switch(s+=e[a],r={up:0,down:0,mid:0},t.size){case"mini":r.up=i(8),r.mid=i(2),r.down=i(8);break;case"maxi":r.up=i(16)+3,r.mid=i(4)+1,r.down=i(64)+3;break;default:r.up=i(8)+1,r.mid=i(6)/2,r.down=i(8)+1}var u=["up","mid","down"];for(var l in u)for(var c=u[l],f=0;f<=r[c];f++)t[c]&&(s+=n[c][i(n[c].length)])}return s}(e,t)}},function(e,t){e.exports=function(e){return function(t,n,r){if(" "===t)return t;switch(n%3){case 0:return e.red(t);case 1:return e.white(t);case 2:return e.blue(t)}}}},function(e,t){e.exports=function(e){return function(t,n,r){return n%2==0?t:e.inverse(t)}}},function(e,t){e.exports=function(e){var t=["red","yellow","green","blue","magenta"];return function(n,r,i){return" "===n?n:e[t[r++%t.length]](n)}}},function(e,t){e.exports=function(e){var t=["underline","inverse","grey","yellow","red","green","blue","white","cyan","magenta","brightYellow","brightRed","brightGreen","brightBlue","brightWhite","brightCyan","brightMagenta"];return function(n,r,i){return" "===n?n:e[t[Math.round(Math.random()*(t.length-2))]](n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"cli",{value:n(115)}),Object.defineProperty(t,"npm",{value:n(116)}),Object.defineProperty(t,"syslog",{value:n(117)})},function(e,t,n){"use strict";t.levels={error:0,warn:1,help:2,data:3,info:4,debug:5,prompt:6,verbose:7,input:8,silly:9},t.colors={error:"red",warn:"yellow",help:"cyan",data:"grey",info:"green",debug:"blue",prompt:"grey",verbose:"cyan",input:"grey",silly:"magenta"}},function(e,t,n){"use strict";t.levels={error:0,warn:1,info:2,http:3,verbose:4,debug:5,silly:6},t.colors={error:"red",warn:"yellow",info:"green",http:"green",verbose:"cyan",debug:"blue",silly:"magenta"}},function(e,t,n){"use strict";t.levels={emerg:0,alert:1,crit:2,error:3,warning:4,notice:5,info:6,debug:7},t.colors={emerg:"red",alert:"yellow",crit:"red",error:"red",warning:"red",notice:"yellow",info:"green",debug:"blue"}},function(e,t,n){"use strict";var r=n(11);e.exports=r((function(e){return e.message="\t".concat(e.message),e}))},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(36).Colorizer,a=n(53).Padder,s=n(5),u=s.configs,l=s.MESSAGE,c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),t.levels||(t.levels=u.npm.levels),this.colorizer=new o(t),this.padder=new a(t),this.options=t}var t,n,s;return t=e,(n=[{key:"transform",value:function(e,t){return this.colorizer.transform(this.padder.transform(e,t),t),e[l]="".concat(e.level,":").concat(e.message),e}}])&&i(t.prototype,n),s&&i(t,s),e}();e.exports=function(e){return new c(e)},e.exports.Format=c},function(e,t,n){"use strict";var r=n(11);function i(e){if(e.every(o))return function(t){for(var n=t,r=0;r<e.length;r++)if(!(n=e[r].transform(n,e[r].options)))return!1;return n}}function o(e){if("function"!=typeof e.transform)throw new Error(["No transform function found on format. Did you create a format instance?","const myFormat = format(formatFn);","const instance = myFormat();"].join("\n"));return!0}e.exports=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=r(i(t)),a=o();return a.Format=o.Format,a},e.exports.cascade=i},function(e,t,n){"use strict";(function(t){var r=n(11),i=n(5).MESSAGE,o=n(28);function a(e,n){return n instanceof t?n.toString("base64"):"bigint"==typeof n?n.toString():n}e.exports=r((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e[i]=(t.stable?o.stableStringify:o)(e,t.replacer||a,t.space),e}))}).call(this,n(6).Buffer)},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=l(e),a=r[0],s=r[1],u=new o(function(e,t,n){return 3*(t+n)/4-n}(0,a,s)),c=0,f=s>0?a-4:a;for(n=0;n<f;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===s&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,u[c++]=255&t);1===s&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],a=0,s=n-i;a<s;a+=16383)o.push(c(e,a,a+16383>s?s:a+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],i[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var i,o,a=[],s=t;s<n;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,l=u>>1,c=-7,f=n?i-1:0,h=n?-1:1,d=e[t+f];for(f+=h,o=d&(1<<-c)-1,d>>=-c,c+=s;c>0;o=256*o+e[t+f],f+=h,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+e[t+f],f+=h,c-=8);if(0===o)o=1-l;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),o-=l}return(d?-1:1)*a*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var a,s,u,l=8*o-i-1,c=(1<<l)-1,f=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(t*u-1)*Math.pow(2,i),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;e[n+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,l+=i;l>0;e[n+d]=255&a,d+=p,a/=256,l-=8);e[n+d-p]|=128*g}},function(e,t,n){"use strict";var r=n(11);e.exports=r((function(e,t){return t.message?(e.message="[".concat(t.label,"] ").concat(e.message),e):(e.label=t.label,e)}))},function(e,t,n){"use strict";var r=n(11),i=n(5).MESSAGE,o=n(28);e.exports=r((function(e){var t={};return e.message&&(t["@message"]=e.message,delete e.message),e.timestamp&&(t["@timestamp"]=e.timestamp,delete e.timestamp),t["@fields"]=e,e[i]=o(t),e}))},function(e,t,n){"use strict";var r=n(11);function i(e,t,n){var r,i,o,a=t.reduce((function(t,n){return t[n]=e[n],delete e[n],t}),{}),s=Object.keys(e).reduce((function(t,n){return t[n]=e[n],delete e[n],t}),{});return Object.assign(e,a,(o=s,(i=n)in(r={})?Object.defineProperty(r,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[i]=o,r)),e}function o(e,t,n){return e[n]=t.reduce((function(t,n){return t[n]=e[n],delete e[n],t}),{}),e}e.exports=r((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n="metadata";t.key&&(n=t.key);var r=[];return t.fillExcept||t.fillWith||(r.push("level"),r.push("message")),t.fillExcept&&(r=t.fillExcept),r.length>0?i(e,r,n):t.fillWith?o(e,t.fillWith,n):e}))},function(e,t,n){"use strict";var r=n(12).inspect,i=n(11),o=n(5),a=o.LEVEL,s=o.MESSAGE,u=o.SPLAT;e.exports=i((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Object.assign({},e);return delete n[a],delete n[s],delete n[u],e[s]=r(n,!1,t.depth||null,t.colorize),e}))},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(5).MESSAGE,o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.template=t}var t,n,o;return t=e,(n=[{key:"transform",value:function(e){return e[i]=this.template(e),e}}])&&r(t.prototype,n),o&&r(t,o),e}();e.exports=function(e){return new o(e)},e.exports.Printf=e.exports.Format=o},function(e,t,n){"use strict";var r=n(11),i=n(5).MESSAGE,o=n(28);e.exports=r((function(e){var t=o(Object.assign({},e,{level:void 0,message:void 0,splat:void 0})),n=e.padding&&e.padding[e.level]||"";return e[i]="{}"!==t?"".concat(e.level,":").concat(n," ").concat(e.message," ").concat(t):"".concat(e.level,":").concat(n," ").concat(e.message),e}))},function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=n(12),s=n(5).SPLAT,u=/%[scdjifoO%]/g,l=/%%/g,c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t}var t,n,i;return t=e,(n=[{key:"_splat",value:function(e,t){var n=e.message,i=e[s]||e.splat||[],o=n.match(l),u=o&&o.length||0,c=t.length-u-i.length,f=c<0?i.splice(c,-1*c):[],h=f.length;if(h)for(var d=0;d<h;d++)Object.assign(e,f[d]);return e.message=a.format.apply(a,[n].concat(r(i))),e}},{key:"transform",value:function(e){var t=e.message,n=e[s]||e.splat;if(!n||!n.length)return e;var r=t&&t.match&&t.match(u);if(!r&&(n||n.length)){var i=n.length>1?n.splice(0):n,o=i.length;if(o)for(var a=0;a<o;a++)Object.assign(e,i[a]);return e}return r?this._splat(e,r):e}}])&&o(t.prototype,n),i&&o(t,i),e}();e.exports=function(e){return new c(e)}},function(e,t,n){"use strict";var r=n(132),i=n(11);e.exports=i((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.format&&(e.timestamp="function"==typeof t.format?t.format():r.format(new Date,t.format)),e.timestamp||(e.timestamp=(new Date).toISOString()),t.alias&&(e[t.alias]=e.timestamp),e}))},function(e,t,n){"use strict";n.r(t),n.d(t,"assign",(function(){return u})),n.d(t,"format",(function(){return O})),n.d(t,"parse",(function(){return R})),n.d(t,"defaultI18n",(function(){return h})),n.d(t,"setGlobalDateI18n",(function(){return p})),n.d(t,"setGlobalDateMasks",(function(){return x}));var r=/d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g,i="[^\\s]+",o=/\[([^]*?)\]/gm;function a(e,t){for(var n=[],r=0,i=e.length;r<i;r++)n.push(e[r].substr(0,t));return n}var s=function(e){return function(t,n){var r=n[e].map((function(e){return e.toLowerCase()})).indexOf(t.toLowerCase());return r>-1?r:null}};function u(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,i=t;r<i.length;r++){var o=i[r];for(var a in o)e[a]=o[a]}return e}var l=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],c=["January","February","March","April","May","June","July","August","September","October","November","December"],f=a(c,3),h={dayNamesShort:a(l,3),dayNames:l,monthNamesShort:f,monthNames:c,amPm:["am","pm"],DoFn:function(e){return e+["th","st","nd","rd"][e%10>3?0:(e-e%10!=10?1:0)*e%10]}},d=u({},h),p=function(e){return d=u(d,e)},g=function(e){return e.replace(/[|\\{()[^$+*?.-]/g,"\\$&")},b=function(e,t){for(void 0===t&&(t=2),e=String(e);e.length<t;)e="0"+e;return e},m={D:function(e){return String(e.getDate())},DD:function(e){return b(e.getDate())},Do:function(e,t){return t.DoFn(e.getDate())},d:function(e){return String(e.getDay())},dd:function(e){return b(e.getDay())},ddd:function(e,t){return t.dayNamesShort[e.getDay()]},dddd:function(e,t){return t.dayNames[e.getDay()]},M:function(e){return String(e.getMonth()+1)},MM:function(e){return b(e.getMonth()+1)},MMM:function(e,t){return t.monthNamesShort[e.getMonth()]},MMMM:function(e,t){return t.monthNames[e.getMonth()]},YY:function(e){return b(String(e.getFullYear()),4).substr(2)},YYYY:function(e){return b(e.getFullYear(),4)},h:function(e){return String(e.getHours()%12||12)},hh:function(e){return b(e.getHours()%12||12)},H:function(e){return String(e.getHours())},HH:function(e){return b(e.getHours())},m:function(e){return String(e.getMinutes())},mm:function(e){return b(e.getMinutes())},s:function(e){return String(e.getSeconds())},ss:function(e){return b(e.getSeconds())},S:function(e){return String(Math.round(e.getMilliseconds()/100))},SS:function(e){return b(Math.round(e.getMilliseconds()/10),2)},SSS:function(e){return b(e.getMilliseconds(),3)},a:function(e,t){return e.getHours()<12?t.amPm[0]:t.amPm[1]},A:function(e,t){return e.getHours()<12?t.amPm[0].toUpperCase():t.amPm[1].toUpperCase()},ZZ:function(e){var t=e.getTimezoneOffset();return(t>0?"-":"+")+b(100*Math.floor(Math.abs(t)/60)+Math.abs(t)%60,4)},Z:function(e){var t=e.getTimezoneOffset();return(t>0?"-":"+")+b(Math.floor(Math.abs(t)/60),2)+":"+b(Math.abs(t)%60,2)}},y=function(e){return+e-1},v=[null,"[1-9]\\d?"],_=[null,i],w=["isPm",i,function(e,t){var n=e.toLowerCase();return n===t.amPm[0]?0:n===t.amPm[1]?1:null}],E=["timezoneOffset","[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",function(e){var t=(e+"").match(/([+-]|\d\d)/gi);if(t){var n=60*+t[1]+parseInt(t[2],10);return"+"===t[0]?n:-n}return 0}],S={D:["day","[1-9]\\d?"],DD:["day","\\d\\d"],Do:["day","[1-9]\\d?"+i,function(e){return parseInt(e,10)}],M:["month","[1-9]\\d?",y],MM:["month","\\d\\d",y],YY:["year","\\d\\d",function(e){var t=+(""+(new Date).getFullYear()).substr(0,2);return+(""+(+e>68?t-1:t)+e)}],h:["hour","[1-9]\\d?",void 0,"isPm"],hh:["hour","\\d\\d",void 0,"isPm"],H:["hour","[1-9]\\d?"],HH:["hour","\\d\\d"],m:["minute","[1-9]\\d?"],mm:["minute","\\d\\d"],s:["second","[1-9]\\d?"],ss:["second","\\d\\d"],YYYY:["year","\\d{4}"],S:["millisecond","\\d",function(e){return 100*+e}],SS:["millisecond","\\d\\d",function(e){return 10*+e}],SSS:["millisecond","\\d{3}"],d:v,dd:v,ddd:_,dddd:_,MMM:["month",i,s("monthNamesShort")],MMMM:["month",i,s("monthNames")],a:w,A:w,ZZ:E,Z:E},k={default:"ddd MMM DD YYYY HH:mm:ss",shortDate:"M/D/YY",mediumDate:"MMM D, YYYY",longDate:"MMMM D, YYYY",fullDate:"dddd, MMMM D, YYYY",isoDate:"YYYY-MM-DD",isoDateTime:"YYYY-MM-DDTHH:mm:ssZ",shortTime:"HH:mm",mediumTime:"HH:mm:ss",longTime:"HH:mm:ss.SSS"},x=function(e){return u(k,e)},O=function(e,t,n){if(void 0===t&&(t=k.default),void 0===n&&(n={}),"number"==typeof e&&(e=new Date(e)),"[object Date]"!==Object.prototype.toString.call(e)||isNaN(e.getTime()))throw new Error("Invalid Date pass to format");var i=[];t=(t=k[t]||t).replace(o,(function(e,t){return i.push(t),"@@@"}));var a=u(u({},d),n);return(t=t.replace(r,(function(t){return m[t](e,a)}))).replace(/@@@/g,(function(){return i.shift()}))};function R(e,t,n){if(void 0===n&&(n={}),"string"!=typeof t)throw new Error("Invalid format in fecha parse");if(t=k[t]||t,e.length>1e3)return null;var i={year:(new Date).getFullYear(),month:0,day:1,hour:0,minute:0,second:0,millisecond:0,isPm:null,timezoneOffset:null},a=[],s=[],l=t.replace(o,(function(e,t){return s.push(g(t)),"@@@"})),c={},f={};l=g(l).replace(r,(function(e){var t=S[e],n=t[0],r=t[1],i=t[3];if(c[n])throw new Error("Invalid format. "+n+" specified twice in format");return c[n]=!0,i&&(f[i]=!0),a.push(t),"("+r+")"})),Object.keys(f).forEach((function(e){if(!c[e])throw new Error("Invalid format. "+e+" is required in specified format")})),l=l.replace(/@@@/g,(function(){return s.shift()}));var h=e.match(new RegExp(l,"i"));if(!h)return null;for(var p=u(u({},d),n),b=1;b<h.length;b++){var m=a[b-1],y=m[0],v=m[2],_=v?v(h[b],p):+h[b];if(null==_)return null;i[y]=_}1===i.isPm&&null!=i.hour&&12!=+i.hour?i.hour=+i.hour+12:0===i.isPm&&12==+i.hour&&(i.hour=0);for(var w=new Date(i.year,i.month,i.day,i.hour,i.minute,i.second,i.millisecond),E=[["month","getMonth"],["day","getDate"],["hour","getHours"],["minute","getMinutes"],["second","getSeconds"]],x=(b=0,E.length);b<x;b++)if(c[E[b][0]]&&i[E[b][0]]!==w[E[b][1]]())return null;return null==i.timezoneOffset?w:new Date(Date.UTC(i.year,i.month,i.day,i.hour,i.minute-i.timezoneOffset,i.second,i.millisecond))}var j={format:O,parse:R,defaultI18n:h,setGlobalDateI18n:p,setGlobalDateMasks:x};t.default=j},function(e,t,n){"use strict";var r=n(52),i=n(11),o=n(5).MESSAGE;e.exports=i((function(e,t){return!1!==t.level&&(e.level=r.strip(e.level)),!1!==t.message&&(e.message=r.strip(e.message)),!1!==t.raw&&e[o]&&(e[o]=r.strip(e[o])),e}))},function(e){e.exports=JSON.parse('{"name":"winston","description":"A logger for just about everything.","version":"3.3.3","author":"Charlie Robbins <charlie.robbins@gmail.com>","maintainers":["Jarrett Cruger <jcrugzz@gmail.com>","Chris Alderson <chrisalderson@protonmail.com>","David Hyde <dabh@stanford.edu>"],"repository":{"type":"git","url":"https://github.com/winstonjs/winston.git"},"keywords":["winston","logger","logging","logs","sysadmin","bunyan","pino","loglevel","tools","json","stream"],"dependencies":{"async":"^3.1.0","@dabh/diagnostics":"^2.0.2","is-stream":"^2.0.0","logform":"^2.2.0","one-time":"^1.0.0","readable-stream":"^3.4.0","stack-trace":"0.0.x","triple-beam":"^1.3.0","winston-transport":"^4.4.0"},"devDependencies":{"@babel/cli":"^7.10.3","@babel/core":"^7.10.3","@babel/preset-env":"^7.10.3","@types/node":"^14.0.13","abstract-winston-transport":"^0.5.1","assume":"^2.2.0","colors":"^1.4.0","cross-spawn-async":"^2.2.5","eslint-config-populist":"^4.2.0","hock":"^1.4.1","mocha":"^8.0.1","nyc":"^15.1.0","rimraf":"^3.0.2","split2":"^3.1.1","std-mocks":"^1.0.1","through2":"^3.0.1","winston-compat":"^0.1.5"},"main":"./lib/winston","browser":"./dist/winston","types":"./index.d.ts","scripts":{"lint":"populist lib/*.js lib/winston/*.js lib/winston/**/*.js","pretest":"npm run lint","test":"nyc --reporter=text --reporter lcov npm run test:mocha","test:mocha":"mocha test/*.test.js test/**/*.test.js --exit","build":"./node_modules/.bin/rimraf dist && babel lib -d dist","prepublishOnly":"npm run build"},"engines":{"node":">= 6.4.0"},"license":"MIT","_resolved":"https://registry.npmjs.org/winston/-/winston-3.3.3.tgz","_integrity":"sha512-oEXTISQnC8VlSAKf1KYSSd7J6IWuRPQqDdo8eoRNaYKLvwSb5+79Z3Yi1lrl6KDpU6/VWaxpakDAtb1oQ4n9aw==","_from":"winston@3.3.3"}')},function(e,t,n){"use strict";Object.defineProperty(t,"Console",{configurable:!0,enumerable:!0,get:function(){return n(136)}}),Object.defineProperty(t,"File",{configurable:!0,enumerable:!0,get:function(){return n(145)}}),Object.defineProperty(t,"Http",{configurable:!0,enumerable:!0,get:function(){return n(187)}}),Object.defineProperty(t,"Stream",{configurable:!0,enumerable:!0,get:function(){return n(203)}})},function(e,t,n){"use strict";(function(t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var i=l(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=n(19),f=n(5),h=f.LEVEL,d=f.MESSAGE,p=n(16);e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(f,e);var n,r,u,l=s(f);function f(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i(this,f),(e=l.call(this,t)).name=t.name||"console",e.stderrLevels=e._stringArrayToSet(t.stderrLevels),e.consoleWarnLevels=e._stringArrayToSet(t.consoleWarnLevels),e.eol=t.eol||c.EOL,e.setMaxListeners(30),e}return n=f,(r=[{key:"log",value:function(e,n){var r=this;return t((function(){return r.emit("logged",e)})),this.stderrLevels[e[h]]?(console._stderr?console._stderr.write("".concat(e[d]).concat(this.eol)):console.error(e[d]),void(n&&n())):this.consoleWarnLevels[e[h]]?(console._stderr?console._stderr.write("".concat(e[d]).concat(this.eol)):console.warn(e[d]),void(n&&n())):(console._stdout?console._stdout.write("".concat(e[d]).concat(this.eol)):console.log(e[d]),void(n&&n()))}},{key:"_stringArrayToSet",value:function(e,t){if(!e)return{};if(t=t||"Cannot make set from type other than Array of string elements",!Array.isArray(e))throw new Error(t);return e.reduce((function(e,n){if("string"!=typeof n)throw new Error(t);return e[n]=!0,e}),{})}}])&&o(n.prototype,r),u&&o(n,u),f}(p)}).call(this,n(13).setImmediate)},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,a,s,u=1,l={},c=!1,f=e.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(e);h=h&&h.setTimeout?h:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},r=function(e){o.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),h.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return l[u]=i,r(u),u++},h.clearImmediate=d}function d(e){delete l[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=l[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{d(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(8),n(2))},function(e,t,n){e.exports=n(55)},function(e,t,n){"use strict";(function(t,r){var i=n(10);e.exports=v;var o,a=n(27);v.ReadableState=y;n(14).EventEmitter;var s=function(e,t){return e.listeners(t).length},u=n(56),l=n(37).Buffer,c=t.Uint8Array||function(){};var f=Object.create(n(9));f.inherits=n(4);var h=n(140),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,g=n(141),b=n(57);f.inherits(v,u);var m=["error","close","destroy","pause","resume"];function y(e,t){e=e||{};var r=t instanceof(o=o||n(30));this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=n(15).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(o=o||n(30),!(this instanceof v))return new v(e);this._readableState=new y(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function _(e,t,n,r,i){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,S(e)}(e,a)):(i||(o=function(e,t){var n;r=t,l.isBuffer(r)||r instanceof c||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),r?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?w(e,a,t,!1):x(e,a)):w(e,a,t,!1))):r||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function w(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&S(e)),x(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=b.destroy,v.prototype._undestroy=b.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=l.from(e,t),t=""),n=!0),_(this,e,t,!1,n)},v.prototype.unshift=function(e){return _(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=n(15).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};function E(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function S(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(k,e):k(e))}function k(e){d("emit readable"),e.emit("readable"),T(e)}function x(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(O,e,t))}function O(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function R(e){d("readable nexttick read 0"),e.read(0)}function j(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),T(e),t.flowing&&!t.reading&&e.read(0)}function T(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function M(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var r;e<t.head.data.length?(r=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):r=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,r=1,i=n.data;e-=i.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0===(e-=a)){a===o.length?(++r,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++r}return t.length-=r,i}(e,t):function(e,t){var n=l.allocUnsafe(e),r=t.head,i=1;r.data.copy(n),e-=r.data.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(o.copy(n,n.length-e,0,a),0===(e-=a)){a===o.length?(++i,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++i}return t.length-=i,n}(e,t);return r}(e,t.buffer,t.decoder),n);var n}function A(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function L(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}v.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?A(this):S(this),null;if(0===(e=E(e,t))&&t.ended)return 0===t.length&&A(this),null;var r,i=t.needReadable;return d("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",i=!0),t.ended||t.reading?d("reading or ended",i=!1):i&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=E(n,t))),null===(r=e>0?M(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&A(this)),null!==r&&this.emit("data",r),r},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,t);var u=(!t||!1!==t.end)&&e!==r.stdout&&e!==r.stderr?c:v;function l(t,r){d("onunpipe"),t===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),e.removeListener("close",m),e.removeListener("finish",y),e.removeListener("drain",f),e.removeListener("error",b),e.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",v),n.removeListener("data",g),h=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||f())}function c(){d("onend"),e.end()}o.endEmitted?i.nextTick(u):n.once("end",u),e.on("unpipe",l);var f=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,T(e))}}(n);e.on("drain",f);var h=!1;var p=!1;function g(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==L(o.pipes,e))&&!h&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function b(t){d("onerror",t),v(),e.removeListener("error",b),0===s(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",y),v()}function y(){d("onfinish"),e.removeListener("close",m),v()}function v(){d("unpipe"),n.unpipe(e)}return n.on("data",g),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",b),e.once("close",m),e.once("finish",y),e.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n)),this;if(!e){var r=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=L(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n)),this},v.prototype.on=function(e,t){var n=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):i.nextTick(R,this))}return n},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(j,e,t))}(this,e)),this},v.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var i in e.on("end",(function(){if(d("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(t.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<m.length;o++)e.on(m[o],this.emit.bind(this,m[o]));return this._read=function(t){d("wrapped _read",t),r&&(r=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=M}).call(this,n(8),n(2))},function(e,t){},function(e,t,n){"use strict";var r=n(37).Buffer,i=n(142);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var t,n,i,o=r.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,n=o,i=s,t.copy(n,i),s+=a.data.length,a=a.next;return o},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var r=n(6),i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";var r=n(12),i=n(5).LEVEL,o=n(16),a=e.exports=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(o.call(this,e),!e.transport||"function"!=typeof e.transport.log)throw new Error("Invalid transport, must be an object with a log method.");function t(e){this.emit("error",e,this.transport)}this.transport=e.transport,this.level=this.level||e.transport.level,this.handleExceptions=this.handleExceptions||e.transport.handleExceptions,this._deprecated(),this.transport.__winstonError||(this.transport.__winstonError=t.bind(this),this.transport.on("error",this.transport.__winstonError))};r.inherits(a,o),a.prototype._write=function(e,t,n){if(this.silent||!0===e.exception&&!this.handleExceptions)return n(null);(!this.level||this.levels[this.level]>=this.levels[e[i]])&&this.transport.log(e[i],e.message,e,this._nop),n(null)},a.prototype._writev=function(e,t){for(var n=0;n<e.length;n++)this._accept(e[n])&&(this.transport.log(e[n].chunk[i],e[n].chunk.message,e[n].chunk,this._nop),e[n].callback());return t(null)},a.prototype._deprecated=function(){console.error([this.transport.name+" is a legacy winston transport. Consider upgrading: ","- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"].join("\n"))},a.prototype.close=function(){this.transport.close&&this.transport.close(),this.transport.__winstonError&&(this.transport.removeListener("error",this.transport.__winstonError),this.transport.__winstonError=null)}},function(e,t,n){"use strict";(function(t,r){function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var i=f(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return l(this,n)}}function l(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?c(e):t}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=n(58),d=n(146),p=n(147),g=n(157),b=n(5).MESSAGE,m=n(26),y=m.Stream,v=m.PassThrough,_=n(16),w=n(32)("winston:file"),E=n(19),S=n(186);e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(_,e);var n,l,f,m=u(_);function _(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};function n(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];r.slice(1).forEach((function(n){if(t[n])throw new Error("Cannot set ".concat(n," and ").concat(e," together"))}))}if(o(this,_),(e=m.call(this,t)).name=t.name||"file",e._stream=new v,e._stream.setMaxListeners(30),e._onError=e._onError.bind(c(e)),t.filename||t.dirname)n("filename or dirname","stream"),e._basename=e.filename=t.filename?d.basename(t.filename):"winston.log",e.dirname=t.dirname||d.dirname(t.filename),e.options=t.options||{flags:"a"};else{if(!t.stream)throw new Error("Cannot log to file without filename or stream.");console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream"),n("stream","filename","maxsize"),e._dest=e._stream.pipe(e._setupStream(t.stream)),e.dirname=d.dirname(e._dest.path)}return e.maxsize=t.maxsize||null,e.rotationFormat=t.rotationFormat||!1,e.zippedArchive=t.zippedArchive||!1,e.maxFiles=t.maxFiles||null,e.eol=t.eol||E.EOL,e.tailable=t.tailable||!1,e._size=0,e._pendingSize=0,e._created=0,e._drain=!1,e._opening=!1,e._ending=!1,e.dirname&&e._createLogDirIfNotExist(e.dirname),e.open(),e}return n=_,(l=[{key:"finishIfEnding",value:function(){var e=this;this._ending&&(this._opening?this.once("open",(function(){e._stream.once("finish",(function(){return e.emit("finish")})),t((function(){return e._stream.end()}))})):(this._stream.once("finish",(function(){return e.emit("finish")})),t((function(){return e._stream.end()}))))}},{key:"log",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(this.silent)return n(),!0;if(this._drain)this._stream.once("drain",(function(){t._drain=!1,t.log(e,n)}));else{if(!this._rotate){var i="".concat(e[b]).concat(this.eol),o=r.byteLength(i);this._pendingSize+=o,this._opening&&!this.rotatedWhileOpening&&this._needsNewFile(this._size+this._pendingSize)&&(this.rotatedWhileOpening=!0);var a=this._stream.write(i,s.bind(this));return a?n():(this._drain=!0,this._stream.once("drain",(function(){t._drain=!1,n()}))),w("written",a,this._drain),this.finishIfEnding(),a}this._stream.once("rotate",(function(){t._rotate=!1,t.log(e,n)}))}function s(){var t=this;this._size+=o,this._pendingSize-=o,w("logged %s %s",this._size,i),this.emit("logged",e),this._opening||this._needsNewFile()&&(this._rotate=!0,this._endStream((function(){return t._rotateFile()})))}}},{key:"query",value:function(e,t){"function"==typeof e&&(t=e,e={}),e=function(e){return(e=e||{}).rows=e.rows||e.limit||10,e.start=e.start||0,e.until=e.until||new Date,"object"!==i(e.until)&&(e.until=new Date(e.until)),e.from=e.from||e.until-864e5,"object"!==i(e.from)&&(e.from=new Date(e.from)),e.order=e.order||"desc",e}(e);var n=d.join(this.dirname,this.filename),r="",o=[],a=0,s=h.createReadStream(n,{encoding:"utf8"});function u(t,n){try{var r=JSON.parse(t);(function(t){if(t&&"object"===i(t)){var n=new Date(t.timestamp);if(!(e.from&&n<e.from||e.until&&n>e.until||e.level&&e.level!==t.level))return!0}})(r)&&function(t){e.rows&&o.length>=e.rows&&"desc"!==e.order?s.readable&&s.destroy():(e.fields&&(t=e.fields.reduce((function(e,n){return e[n]=t[n],e}),{})),"desc"===e.order&&o.length>=e.rows&&o.shift(),o.push(t))}(r)}catch(e){n||s.emit("error",e)}}s.on("error",(function(e){if(s.readable&&s.destroy(),t)return"ENOENT"!==e.code?t(e):t(null,o)})),s.on("data",(function(t){for(var n=(t=(r+t).split(/\n+/)).length-1,i=0;i<n;i++)(!e.start||a>=e.start)&&u(t[i]),a++;r=t[n]})),s.on("close",(function(){r&&u(r,!0),"desc"===e.order&&(o=o.reverse()),t&&t(null,o)}))}},{key:"stream",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=d.join(this.dirname,this.filename),n=new y,r={file:t,start:e.start};return n.destroy=S(r,(function(e,t){if(e)return n.emit("error",e);try{n.emit("data",t),t=JSON.parse(t),n.emit("log",t)}catch(e){n.emit("error",e)}})),n}},{key:"open",value:function(){var e=this;this.filename&&(this._opening||(this._opening=!0,this.stat((function(t,n){if(t)return e.emit("error",t);w("stat done: %s { size: %s }",e.filename,n),e._size=n,e._dest=e._createStream(e._stream),e._opening=!1,e.once("open",(function(){e._stream.eventNames().includes("rotate")?e._stream.emit("rotate"):e._rotate=!1}))}))))}},{key:"stat",value:function(e){var t=this,n=this._getFile(),r=d.join(this.dirname,n);h.stat(r,(function(i,o){return i&&"ENOENT"===i.code?(w("ENOENT ok",r),t.filename=n,e(null,0)):i?(w("err ".concat(i.code," ").concat(r)),e(i)):!o||t._needsNewFile(o.size)?t._incFile((function(){return t.stat(e)})):(t.filename=n,void e(null,o.size))}))}},{key:"close",value:function(e){var t=this;this._stream&&this._stream.end((function(){e&&e(),t.emit("flush"),t.emit("closed")}))}},{key:"_needsNewFile",value:function(e){return e=e||this._size,this.maxsize&&e>=this.maxsize}},{key:"_onError",value:function(e){this.emit("error",e)}},{key:"_setupStream",value:function(e){return e.on("error",this._onError),e}},{key:"_cleanupStream",value:function(e){return e.removeListener("error",this._onError),e}},{key:"_rotateFile",value:function(){var e=this;this._incFile((function(){return e.open()}))}},{key:"_endStream",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this._dest?(this._stream.unpipe(this._dest),this._dest.end((function(){e._cleanupStream(e._dest),t()}))):t()}},{key:"_createStream",value:function(e){var t=this,n=d.join(this.dirname,this.filename);w("create stream start",n,this.options);var r=h.createWriteStream(n,this.options).on("error",(function(e){return w(e)})).on("close",(function(){return w("close",r.path,r.bytesWritten)})).on("open",(function(){w("file open ok",n),t.emit("open",n),e.pipe(r),t.rotatedWhileOpening&&(t._stream=new v,t._stream.setMaxListeners(30),t._rotateFile(),t.rotatedWhileOpening=!1,t._cleanupStream(r),e.end())}));if(w("create stream ok",n),this.zippedArchive){var i=g.createGzip();return i.pipe(r),i}return r}},{key:"_incFile",value:function(e){w("_incFile",this.filename);var t=d.extname(this._basename),n=d.basename(this._basename,t);this.tailable?this._checkMaxFilesTailable(t,n,e):(this._created+=1,this._checkMaxFilesIncrementing(t,n,e))}},{key:"_getFile",value:function(){var e=d.extname(this._basename),t=d.basename(this._basename,e),n=this.rotationFormat?this.rotationFormat():this._created,r=!this.tailable&&this._created?"".concat(t).concat(n).concat(e):"".concat(t).concat(e);return this.zippedArchive&&!this.tailable?"".concat(r,".gz"):r}},{key:"_checkMaxFilesIncrementing",value:function(e,n,r){if(!this.maxFiles||this._created<this.maxFiles)return t(r);var i=this._created-this.maxFiles,o=0!==i?i:"",a=this.zippedArchive?".gz":"",s="".concat(n).concat(o).concat(e).concat(a),u=d.join(this.dirname,s);h.unlink(u,r)}},{key:"_checkMaxFilesTailable",value:function(e,t,n){var r=this,i=[];if(this.maxFiles){for(var o=this.zippedArchive?".gz":"",a=this.maxFiles-1;a>1;a--)i.push(function(n,r){var i=this,a="".concat(t).concat(n-1).concat(e).concat(o),s=d.join(this.dirname,a);h.exists(s,(function(u){if(!u)return r(null);a="".concat(t).concat(n).concat(e).concat(o),h.rename(s,d.join(i.dirname,a),r)}))}.bind(this,a));p(i,(function(){h.rename(d.join(r.dirname,"".concat(t).concat(e)),d.join(r.dirname,"".concat(t,"1").concat(e).concat(o)),n)}))}}},{key:"_createLogDirIfNotExist",value:function(e){h.existsSync(e)||h.mkdirSync(e,{recursive:!0})}}])&&a(n.prototype,l),f&&a(n,f),_}(_)}).call(this,n(13).setImmediate,n(6).Buffer)},function(e,t,n){(function(e){function n(e,t){for(var n=0,r=e.length-1;r>=0;r--){var i=e[r];"."===i?e.splice(r,1):".."===i?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}t.resolve=function(){for(var t="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var a=o>=0?arguments[o]:e.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(t=a+"/"+t,i="/"===a.charAt(0))}return(i?"/":"")+(t=n(r(t.split("/"),(function(e){return!!e})),!i).join("/"))||"."},t.normalize=function(e){var o=t.isAbsolute(e),a="/"===i(e,-1);return(e=n(r(e.split("/"),(function(e){return!!e})),!o).join("/"))||o||(e="."),e&&a&&(e+="/"),(o?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,n){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var i=r(e.split("/")),o=r(n.split("/")),a=Math.min(i.length,o.length),s=a,u=0;u<a;u++)if(i[u]!==o[u]){s=u;break}var l=[];for(u=s;u<i.length;u++)l.push("..");return(l=l.concat(o.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,i=!0,o=e.length-1;o>=1;--o)if(47===(t=e.charCodeAt(o))){if(!i){r=o;break}}else i=!1;return-1===r?n?"/":".":n&&1===r?"/":e.slice(0,r)},t.basename=function(e,t){var n=function(e){"string"!=typeof e&&(e+="");var t,n=0,r=-1,i=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!i){n=t+1;break}}else-1===r&&(i=!1,r=t+1);return-1===r?"":e.slice(n,r)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,n=0,r=-1,i=!0,o=0,a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(47!==s)-1===r&&(i=!1,r=a+1),46===s?-1===t?t=a:1!==o&&(o=1):-1!==t&&(o=-1);else if(!i){n=a+1;break}}return-1===t||-1===r||0===o||1===o&&t===r-1&&t===n+1?"":e.slice(t,r)};var i="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(2))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,r.default)(i.default,e,t)};var r=o(n(148)),i=o(n(152));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(38)),i=a(n(20)),o=a(n(25));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,o.default)((e,t,n)=>{var o=(0,r.default)(t)?[]:{};e(t,(e,t,n)=>{(0,i.default)(e)((e,...r)=>{r.length<2&&([r]=r),o[t]=r,n(e)})},e=>n(e,o))},3),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,o.isAsync)(e))return function(...t){const n=t.pop();return s(e.apply(this,t),n)};return(0,r.default)((function(t,n){var r;try{r=e.apply(this,t)}catch(e){return n(e)}if(r&&"function"==typeof r.then)return s(r,n);n(null,r)}))};var r=a(n(150)),i=a(n(151)),o=n(20);function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){return e.then(e=>{u(t,null,e)},e=>{u(t,e&&e.message?e:new Error(e))})}function u(e,t,n){try{e(t,n)}catch(e){(0,i.default)(e=>{throw e},e)}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(...t){var n=t.pop();return e.call(this,t,n)}},e.exports=t.default},function(e,t,n){"use strict";(function(e,n){Object.defineProperty(t,"__esModule",{value:!0}),t.fallback=a,t.wrap=s;var r,i=t.hasSetImmediate="function"==typeof e&&e,o=t.hasNextTick="object"==typeof n&&"function"==typeof n.nextTick;function a(e){setTimeout(e,0)}function s(e){return(t,...n)=>e(()=>t(...n))}r=i?e:o?n.nextTick:a,t.default=s(r)}).call(this,n(13).setImmediate,n(2))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(59)),i=o(n(25));function o(e){return e&&e.__esModule?e:{default:e}}t.default=(0,i.default)((function(e,t,n){return(0,r.default)(e,1,t,n)}),3),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(60)),i=l(n(154)),o=l(n(61)),a=n(20),s=l(n(156)),u=l(n(39));function l(e){return e&&e.__esModule?e:{default:e}}t.default=e=>(t,n,l)=>{if(l=(0,r.default)(l),e<=0)throw new RangeError("concurrency limit cannot be less than 1");if(!t)return l(null);if((0,a.isAsyncGenerator)(t))return(0,s.default)(t,e,n,l);if((0,a.isAsyncIterable)(t))return(0,s.default)(t[Symbol.asyncIterator](),e,n,l);var c=(0,i.default)(t),f=!1,h=!1,d=0,p=!1;function g(e,t){if(!h)if(d-=1,e)f=!0,l(e);else if(!1===e)f=!0,h=!0;else{if(t===u.default||f&&d<=0)return f=!0,l(null);p||b()}}function b(){for(p=!0;d<e&&!f;){var t=c();if(null===t)return f=!0,void(d<=0&&l(null));d+=1,n(t.value,t.key,(0,o.default)(g))}p=!1}b()},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,r.default)(e))return function(e){var t=-1,n=e.length;return function(){return++t<n?{value:e[t],key:t}:null}}(e);var t=(0,i.default)(e);return t?function(e){var t=-1;return function(){var n=e.next();return n.done?null:(t++,{value:n.value,key:t})}}(t):(n=e,o=n?Object.keys(n):[],a=-1,s=o.length,function(){var e=o[++a];return a<s?{value:n[e],key:e}:null});var n,o,a,s};var r=o(n(38)),i=o(n(155));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e[Symbol.iterator]&&e[Symbol.iterator]()},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){let i=!1,a=!1,s=!1,u=0,l=0;function c(){u>=t||s||i||(s=!0,e.next().then(({value:e,done:t})=>{if(!a&&!i){if(s=!1,t)return i=!0,void(u<=0&&r(null));u++,n(e,l,f),l++,c()}}).catch(h))}function f(e,t){if(u-=1,!a)return e?h(e):!1===e?(i=!0,void(a=!0)):t===o.default||i&&u<=0?(i=!0,r(null)):void c()}function h(e){a||(s=!1,i=!0,r(e))}c()};var r,i=n(39),o=(r=i)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";(function(e){var r=n(6).Buffer,i=n(158).Transform,o=n(167),a=n(12),s=n(66).ok,u=n(6).kMaxLength,l="Cannot create final Buffer. It would be larger than 0x"+u.toString(16)+" bytes";o.Z_MIN_WINDOWBITS=8,o.Z_MAX_WINDOWBITS=15,o.Z_DEFAULT_WINDOWBITS=15,o.Z_MIN_CHUNK=64,o.Z_MAX_CHUNK=1/0,o.Z_DEFAULT_CHUNK=16384,o.Z_MIN_MEMLEVEL=1,o.Z_MAX_MEMLEVEL=9,o.Z_DEFAULT_MEMLEVEL=8,o.Z_MIN_LEVEL=-1,o.Z_MAX_LEVEL=9,o.Z_DEFAULT_LEVEL=o.Z_DEFAULT_COMPRESSION;for(var c=Object.keys(o),f=0;f<c.length;f++){var h=c[f];h.match(/^Z/)&&Object.defineProperty(t,h,{enumerable:!0,value:o[h],writable:!1})}for(var d={Z_OK:o.Z_OK,Z_STREAM_END:o.Z_STREAM_END,Z_NEED_DICT:o.Z_NEED_DICT,Z_ERRNO:o.Z_ERRNO,Z_STREAM_ERROR:o.Z_STREAM_ERROR,Z_DATA_ERROR:o.Z_DATA_ERROR,Z_MEM_ERROR:o.Z_MEM_ERROR,Z_BUF_ERROR:o.Z_BUF_ERROR,Z_VERSION_ERROR:o.Z_VERSION_ERROR},p=Object.keys(d),g=0;g<p.length;g++){var b=p[g];d[d[b]]=b}function m(e,t,n){var i=[],o=0;function a(){for(var t;null!==(t=e.read());)i.push(t),o+=t.length;e.once("readable",a)}function s(){var t,a=null;o>=u?a=new RangeError(l):t=r.concat(i,o),i=[],e.close(),n(a,t)}e.on("error",(function(t){e.removeListener("end",s),e.removeListener("readable",a),n(t)})),e.on("end",s),e.end(t),a()}function y(e,t){if("string"==typeof t&&(t=r.from(t)),!r.isBuffer(t))throw new TypeError("Not a string or buffer");var n=e._finishFlushFlag;return e._processChunk(t,n)}function v(e){if(!(this instanceof v))return new v(e);R.call(this,e,o.DEFLATE)}function _(e){if(!(this instanceof _))return new _(e);R.call(this,e,o.INFLATE)}function w(e){if(!(this instanceof w))return new w(e);R.call(this,e,o.GZIP)}function E(e){if(!(this instanceof E))return new E(e);R.call(this,e,o.GUNZIP)}function S(e){if(!(this instanceof S))return new S(e);R.call(this,e,o.DEFLATERAW)}function k(e){if(!(this instanceof k))return new k(e);R.call(this,e,o.INFLATERAW)}function x(e){if(!(this instanceof x))return new x(e);R.call(this,e,o.UNZIP)}function O(e){return e===o.Z_NO_FLUSH||e===o.Z_PARTIAL_FLUSH||e===o.Z_SYNC_FLUSH||e===o.Z_FULL_FLUSH||e===o.Z_FINISH||e===o.Z_BLOCK}function R(e,n){var a=this;if(this._opts=e=e||{},this._chunkSize=e.chunkSize||t.Z_DEFAULT_CHUNK,i.call(this,e),e.flush&&!O(e.flush))throw new Error("Invalid flush flag: "+e.flush);if(e.finishFlush&&!O(e.finishFlush))throw new Error("Invalid flush flag: "+e.finishFlush);if(this._flushFlag=e.flush||o.Z_NO_FLUSH,this._finishFlushFlag=void 0!==e.finishFlush?e.finishFlush:o.Z_FINISH,e.chunkSize&&(e.chunkSize<t.Z_MIN_CHUNK||e.chunkSize>t.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<t.Z_MIN_WINDOWBITS||e.windowBits>t.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<t.Z_MIN_LEVEL||e.level>t.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<t.Z_MIN_MEMLEVEL||e.memLevel>t.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=t.Z_FILTERED&&e.strategy!=t.Z_HUFFMAN_ONLY&&e.strategy!=t.Z_RLE&&e.strategy!=t.Z_FIXED&&e.strategy!=t.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!r.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new o.Zlib(n);var s=this;this._hadError=!1,this._handle.onerror=function(e,n){j(s),s._hadError=!0;var r=new Error(e);r.errno=n,r.code=t.codes[n],s.emit("error",r)};var u=t.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(u=e.level);var l=t.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(l=e.strategy),this._handle.init(e.windowBits||t.Z_DEFAULT_WINDOWBITS,u,e.memLevel||t.Z_DEFAULT_MEMLEVEL,l,e.dictionary),this._buffer=r.allocUnsafe(this._chunkSize),this._offset=0,this._level=u,this._strategy=l,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!a._handle},configurable:!0,enumerable:!0})}function j(t,n){n&&e.nextTick(n),t._handle&&(t._handle.close(),t._handle=null)}function T(e){e.emit("close")}Object.defineProperty(t,"codes",{enumerable:!0,value:Object.freeze(d),writable:!1}),t.Deflate=v,t.Inflate=_,t.Gzip=w,t.Gunzip=E,t.DeflateRaw=S,t.InflateRaw=k,t.Unzip=x,t.createDeflate=function(e){return new v(e)},t.createInflate=function(e){return new _(e)},t.createDeflateRaw=function(e){return new S(e)},t.createInflateRaw=function(e){return new k(e)},t.createGzip=function(e){return new w(e)},t.createGunzip=function(e){return new E(e)},t.createUnzip=function(e){return new x(e)},t.deflate=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new v(t),e,n)},t.deflateSync=function(e,t){return y(new v(t),e)},t.gzip=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new w(t),e,n)},t.gzipSync=function(e,t){return y(new w(t),e)},t.deflateRaw=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new S(t),e,n)},t.deflateRawSync=function(e,t){return y(new S(t),e)},t.unzip=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new x(t),e,n)},t.unzipSync=function(e,t){return y(new x(t),e)},t.inflate=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new _(t),e,n)},t.inflateSync=function(e,t){return y(new _(t),e)},t.gunzip=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new E(t),e,n)},t.gunzipSync=function(e,t){return y(new E(t),e)},t.inflateRaw=function(e,t,n){return"function"==typeof t&&(n=t,t={}),m(new k(t),e,n)},t.inflateRawSync=function(e,t){return y(new k(t),e)},a.inherits(R,i),R.prototype.params=function(n,r,i){if(n<t.Z_MIN_LEVEL||n>t.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+n);if(r!=t.Z_FILTERED&&r!=t.Z_HUFFMAN_ONLY&&r!=t.Z_RLE&&r!=t.Z_FIXED&&r!=t.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+r);if(this._level!==n||this._strategy!==r){var a=this;this.flush(o.Z_SYNC_FLUSH,(function(){s(a._handle,"zlib binding closed"),a._handle.params(n,r),a._hadError||(a._level=n,a._strategy=r,i&&i())}))}else e.nextTick(i)},R.prototype.reset=function(){return s(this._handle,"zlib binding closed"),this._handle.reset()},R.prototype._flush=function(e){this._transform(r.alloc(0),"",e)},R.prototype.flush=function(t,n){var i=this,a=this._writableState;("function"==typeof t||void 0===t&&!n)&&(n=t,t=o.Z_FULL_FLUSH),a.ended?n&&e.nextTick(n):a.ending?n&&this.once("end",n):a.needDrain?n&&this.once("drain",(function(){return i.flush(t,n)})):(this._flushFlag=t,this.write(r.alloc(0),"",n))},R.prototype.close=function(t){j(this,t),e.nextTick(T,this)},R.prototype._transform=function(e,t,n){var i,a=this._writableState,s=(a.ending||a.ended)&&(!e||a.length===e.length);return null===e||r.isBuffer(e)?this._handle?(s?i=this._finishFlushFlag:(i=this._flushFlag,e.length>=a.length&&(this._flushFlag=this._opts.flush||o.Z_NO_FLUSH)),void this._processChunk(e,i,n)):n(new Error("zlib binding closed")):n(new Error("invalid input"))},R.prototype._processChunk=function(e,t,n){var i=e&&e.length,o=this._chunkSize-this._offset,a=0,c=this,f="function"==typeof n;if(!f){var h,d=[],p=0;this.on("error",(function(e){h=e})),s(this._handle,"zlib binding closed");do{var g=this._handle.writeSync(t,e,a,i,this._buffer,this._offset,o)}while(!this._hadError&&y(g[0],g[1]));if(this._hadError)throw h;if(p>=u)throw j(this),new RangeError(l);var b=r.concat(d,p);return j(this),b}s(this._handle,"zlib binding closed");var m=this._handle.write(t,e,a,i,this._buffer,this._offset,o);function y(u,l){if(this&&(this.buffer=null,this.callback=null),!c._hadError){var h=o-l;if(s(h>=0,"have should not go down"),h>0){var g=c._buffer.slice(c._offset,c._offset+h);c._offset+=h,f?c.push(g):(d.push(g),p+=g.length)}if((0===l||c._offset>=c._chunkSize)&&(o=c._chunkSize,c._offset=0,c._buffer=r.allocUnsafe(c._chunkSize)),0===l){if(a+=i-u,i=u,!f)return!0;var b=c._handle.write(t,e,a,i,c._buffer,c._offset,c._chunkSize);return b.callback=y,void(b.buffer=e)}if(!f)return!1;n()}}m.buffer=e,m.callback=y},a.inherits(v,R),a.inherits(_,R),a.inherits(w,R),a.inherits(E,R),a.inherits(S,R),a.inherits(k,R),a.inherits(x,R)}).call(this,n(2))},function(e,t,n){e.exports=i;var r=n(14).EventEmitter;function i(){r.call(this)}n(4)(i,r),i.Readable=n(40),i.Writable=n(163),i.Duplex=n(164),i.Transform=n(165),i.PassThrough=n(166),i.Stream=i,i.prototype.pipe=function(e,t){var n=this;function i(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),e.on("drain",o),e._isStdio||t&&!1===t.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,e.end())}function u(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(c(),0===r.listenerCount(this,"error"))throw e}function c(){n.removeListener("data",i),e.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",l),e.removeListener("error",l),n.removeListener("end",c),n.removeListener("close",c),e.removeListener("close",c)}return n.on("error",l),e.on("error",l),n.on("end",c),n.on("close",c),e.on("close",c),e.emit("pipe",n),e}},function(e,t){},function(e,t,n){"use strict";var r=n(41).Buffer,i=n(161);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var t,n,i,o=r.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,n=o,i=s,t.copy(n,i),s+=a.data.length,a=a.next;return o},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){"use strict";e.exports=o;var r=n(65),i=Object.create(n(9));function o(e){if(!(this instanceof o))return new o(e);r.call(this,e)}i.inherits=n(4),i.inherits(o,r),o.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(42)},function(e,t,n){e.exports=n(17)},function(e,t,n){e.exports=n(40).Transform},function(e,t,n){e.exports=n(40).PassThrough},function(e,t,n){"use strict";(function(e,r){var i=n(66),o=n(169),a=n(170),s=n(173),u=n(176);for(var l in u)t[l]=u[l];t.NONE=0,t.DEFLATE=1,t.INFLATE=2,t.GZIP=3,t.GUNZIP=4,t.DEFLATERAW=5,t.INFLATERAW=6,t.UNZIP=7;function c(e){if("number"!=typeof e||e<t.DEFLATE||e>t.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=e,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}c.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,i(this.init_done,"close before init"),i(this.mode<=t.UNZIP),this.mode===t.DEFLATE||this.mode===t.GZIP||this.mode===t.DEFLATERAW?a.deflateEnd(this.strm):this.mode!==t.INFLATE&&this.mode!==t.GUNZIP&&this.mode!==t.INFLATERAW&&this.mode!==t.UNZIP||s.inflateEnd(this.strm),this.mode=t.NONE,this.dictionary=null)},c.prototype.write=function(e,t,n,r,i,o,a){return this._write(!0,e,t,n,r,i,o,a)},c.prototype.writeSync=function(e,t,n,r,i,o,a){return this._write(!1,e,t,n,r,i,o,a)},c.prototype._write=function(n,o,a,s,u,l,c,f){if(i.equal(arguments.length,8),i(this.init_done,"write before init"),i(this.mode!==t.NONE,"already finalized"),i.equal(!1,this.write_in_progress,"write already in progress"),i.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,i.equal(!1,void 0===o,"must provide flush value"),this.write_in_progress=!0,o!==t.Z_NO_FLUSH&&o!==t.Z_PARTIAL_FLUSH&&o!==t.Z_SYNC_FLUSH&&o!==t.Z_FULL_FLUSH&&o!==t.Z_FINISH&&o!==t.Z_BLOCK)throw new Error("Invalid flush value");if(null==a&&(a=e.alloc(0),u=0,s=0),this.strm.avail_in=u,this.strm.input=a,this.strm.next_in=s,this.strm.avail_out=f,this.strm.output=l,this.strm.next_out=c,this.flush=o,!n)return this._process(),this._checkError()?this._afterSync():void 0;var h=this;return r.nextTick((function(){h._process(),h._after()})),this},c.prototype._afterSync=function(){var e=this.strm.avail_out,t=this.strm.avail_in;return this.write_in_progress=!1,[t,e]},c.prototype._process=function(){var e=null;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=a.deflate(this.strm,this.flush);break;case t.UNZIP:switch(this.strm.avail_in>0&&(e=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===e)break;if(31!==this.strm.input[e]){this.mode=t.INFLATE;break}if(this.gzip_id_bytes_read=1,e++,1===this.strm.avail_in)break;case 1:if(null===e)break;139===this.strm.input[e]?(this.gzip_id_bytes_read=2,this.mode=t.GUNZIP):this.mode=t.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:for(this.err=s.inflate(this.strm,this.flush),this.err===t.Z_NEED_DICT&&this.dictionary&&(this.err=s.inflateSetDictionary(this.strm,this.dictionary),this.err===t.Z_OK?this.err=s.inflate(this.strm,this.flush):this.err===t.Z_DATA_ERROR&&(this.err=t.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===t.GUNZIP&&this.err===t.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=s.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},c.prototype._checkError=function(){switch(this.err){case t.Z_OK:case t.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===t.Z_FINISH)return this._error("unexpected end of file"),!1;break;case t.Z_STREAM_END:break;case t.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},c.prototype._after=function(){if(this._checkError()){var e=this.strm.avail_out,t=this.strm.avail_in;this.write_in_progress=!1,this.callback(t,e),this.pending_close&&this.close()}},c.prototype._error=function(e){this.strm.msg&&(e=this.strm.msg),this.onerror(e,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},c.prototype.init=function(e,n,r,o,a){i(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),i(e>=8&&e<=15,"invalid windowBits"),i(n>=-1&&n<=9,"invalid compression level"),i(r>=1&&r<=9,"invalid memlevel"),i(o===t.Z_FILTERED||o===t.Z_HUFFMAN_ONLY||o===t.Z_RLE||o===t.Z_FIXED||o===t.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(n,e,r,o,a),this._setDictionary()},c.prototype.params=function(){throw new Error("deflateParams Not supported")},c.prototype.reset=function(){this._reset(),this._setDictionary()},c.prototype._init=function(e,n,r,i,u){switch(this.level=e,this.windowBits=n,this.memLevel=r,this.strategy=i,this.flush=t.Z_NO_FLUSH,this.err=t.Z_OK,this.mode!==t.GZIP&&this.mode!==t.GUNZIP||(this.windowBits+=16),this.mode===t.UNZIP&&(this.windowBits+=32),this.mode!==t.DEFLATERAW&&this.mode!==t.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new o,this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=a.deflateInit2(this.strm,this.level,t.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:case t.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==t.Z_OK&&this._error("Init error"),this.dictionary=u,this.write_in_progress=!1,this.init_done=!0},c.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:this.err=a.deflateSetDictionary(this.strm,this.dictionary)}this.err!==t.Z_OK&&this._error("Failed to set dictionary")}},c.prototype._reset=function(){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:case t.GZIP:this.err=a.deflateReset(this.strm);break;case t.INFLATE:case t.INFLATERAW:case t.GUNZIP:this.err=s.inflateReset(this.strm)}this.err!==t.Z_OK&&this._error("Failed to reset stream")},t.Zlib=c}).call(this,n(6).Buffer,n(2))},function(e,t){e.exports=ObjectAssign},function(e,t,n){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(e,t,n){"use strict";var r,i=n(31),o=n(171),a=n(67),s=n(68),u=n(172);function l(e,t){return e.msg=u[t],t}function c(e){return(e<<1)-(e>4?9:0)}function f(e){for(var t=e.length;--t>=0;)e[t]=0}function h(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(i.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function d(e,t){o._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,h(e.strm)}function p(e,t){e.pending_buf[e.pending++]=t}function g(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function b(e,t){var n,r,i=e.max_chain_length,o=e.strstart,a=e.prev_length,s=e.nice_match,u=e.strstart>e.w_size-262?e.strstart-(e.w_size-262):0,l=e.window,c=e.w_mask,f=e.prev,h=e.strstart+258,d=l[o+a-1],p=l[o+a];e.prev_length>=e.good_match&&(i>>=2),s>e.lookahead&&(s=e.lookahead);do{if(l[(n=t)+a]===p&&l[n+a-1]===d&&l[n]===l[o]&&l[++n]===l[o+1]){o+=2,n++;do{}while(l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&o<h);if(r=258-(h-o),o=h-258,r>a){if(e.match_start=t,a=r,r>=s)break;d=l[o+a-1],p=l[o+a]}}}while((t=f[t&c])>u&&0!=--i);return a<=e.lookahead?a:e.lookahead}function m(e){var t,n,r,o,u,l,c,f,h,d,p=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=p+(p-262)){i.arraySet(e.window,e.window,p,p,0),e.match_start-=p,e.strstart-=p,e.block_start-=p,t=n=e.hash_size;do{r=e.head[--t],e.head[t]=r>=p?r-p:0}while(--n);t=n=p;do{r=e.prev[--t],e.prev[t]=r>=p?r-p:0}while(--n);o+=p}if(0===e.strm.avail_in)break;if(l=e.strm,c=e.window,f=e.strstart+e.lookahead,h=o,d=void 0,(d=l.avail_in)>h&&(d=h),n=0===d?0:(l.avail_in-=d,i.arraySet(c,l.input,l.next_in,d,f),1===l.state.wrap?l.adler=a(l.adler,c,d,f):2===l.state.wrap&&(l.adler=s(l.adler,c,d,f)),l.next_in+=d,l.total_in+=d,d),e.lookahead+=n,e.lookahead+e.insert>=3)for(u=e.strstart-e.insert,e.ins_h=e.window[u],e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+3-1])&e.hash_mask,e.prev[u&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=u,u++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<262&&0!==e.strm.avail_in)}function y(e,t){for(var n,r;;){if(e.lookahead<262){if(m(e),e.lookahead<262&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-262&&(e.match_length=b(e,n)),e.match_length>=3)if(r=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function v(e,t){for(var n,r,i;;){if(e.lookahead<262){if(m(e),e.lookahead<262&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-262&&(e.match_length=b(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-3,r=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,r&&(d(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=o._tr_tally(e,0,e.window[e.strstart-1]))&&d(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function _(e,t,n,r,i){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=i}function w(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function E(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:113,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):l(e,-2)}function S(e){var t,n=E(e);return 0===n&&((t=e.state).window_size=2*t.w_size,f(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),n}function k(e,t,n,r,o,a){if(!e)return-2;var s=1;if(-1===t&&(t=6),r<0?(s=0,r=-r):r>15&&(s=2,r-=16),o<1||o>9||8!==n||r<8||r>15||t<0||t>9||a<0||a>4)return l(e,-2);8===r&&(r=9);var u=new w;return e.state=u,u.strm=e,u.wrap=s,u.gzhead=null,u.w_bits=r,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=t,u.strategy=a,u.method=n,S(e)}r=[new _(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(m(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,d(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-262&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(d(e,!1),e.strm.avail_out),1)})),new _(4,4,8,4,y),new _(4,5,16,8,y),new _(4,6,32,32,y),new _(4,4,16,16,v),new _(8,16,32,32,v),new _(8,16,128,128,v),new _(8,32,128,256,v),new _(32,128,258,1024,v),new _(32,258,258,4096,v)],t.deflateInit=function(e,t){return k(e,t,8,15,8,0)},t.deflateInit2=k,t.deflateReset=S,t.deflateResetKeep=E,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?-2:(e.state.gzhead=t,0):-2},t.deflate=function(e,t){var n,i,a,u;if(!e||!e.state||t>5||t<0)return e?l(e,-2):-2;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return l(e,0===e.avail_out?-5:-2);if(i.strm=e,n=i.last_flush,i.last_flush=t,42===i.status)if(2===i.wrap)e.adler=0,p(i,31),p(i,139),p(i,8),i.gzhead?(p(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),p(i,255&i.gzhead.time),p(i,i.gzhead.time>>8&255),p(i,i.gzhead.time>>16&255),p(i,i.gzhead.time>>24&255),p(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),p(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(p(i,255&i.gzhead.extra.length),p(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=s(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(p(i,0),p(i,0),p(i,0),p(i,0),p(i,0),p(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),p(i,3),i.status=113);else{var b=8+(i.w_bits-8<<4)<<8;b|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(b|=32),b+=31-b%31,i.status=113,g(i,b),0!==i.strstart&&(g(i,e.adler>>>16),g(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),h(e),a=i.pending,i.pending!==i.pending_buf_size));)p(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),h(e),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,p(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),h(e),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,p(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&h(e),i.pending+2<=i.pending_buf_size&&(p(i,255&e.adler),p(i,e.adler>>8&255),e.adler=0,i.status=113)):i.status=113),0!==i.pending){if(h(e),0===e.avail_out)return i.last_flush=-1,0}else if(0===e.avail_in&&c(t)<=c(n)&&4!==t)return l(e,-5);if(666===i.status&&0!==e.avail_in)return l(e,-5);if(0!==e.avail_in||0!==i.lookahead||0!==t&&666!==i.status){var y=2===i.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(m(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var n,r,i,a,s=e.window;;){if(e.lookahead<=258){if(m(e),e.lookahead<=258&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(r=s[i=e.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=e.strstart+258;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);e.match_length=258-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}(i,t):r[i.level].func(i,t);if(3!==y&&4!==y||(i.status=666),1===y||3===y)return 0===e.avail_out&&(i.last_flush=-1),0;if(2===y&&(1===t?o._tr_align(i):5!==t&&(o._tr_stored_block(i,0,0,!1),3===t&&(f(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),h(e),0===e.avail_out))return i.last_flush=-1,0}return 4!==t?0:i.wrap<=0?1:(2===i.wrap?(p(i,255&e.adler),p(i,e.adler>>8&255),p(i,e.adler>>16&255),p(i,e.adler>>24&255),p(i,255&e.total_in),p(i,e.total_in>>8&255),p(i,e.total_in>>16&255),p(i,e.total_in>>24&255)):(g(i,e.adler>>>16),g(i,65535&e.adler)),h(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?0:1)},t.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&113!==t&&666!==t?l(e,-2):(e.state=null,113===t?l(e,-3):0):-2},t.deflateSetDictionary=function(e,t){var n,r,o,s,u,l,c,h,d=t.length;if(!e||!e.state)return-2;if(2===(s=(n=e.state).wrap)||1===s&&42!==n.status||n.lookahead)return-2;for(1===s&&(e.adler=a(e.adler,t,d,0)),n.wrap=0,d>=n.w_size&&(0===s&&(f(n.head),n.strstart=0,n.block_start=0,n.insert=0),h=new i.Buf8(n.w_size),i.arraySet(h,t,d-n.w_size,n.w_size,0),t=h,d=n.w_size),u=e.avail_in,l=e.next_in,c=e.input,e.avail_in=d,e.next_in=0,e.input=t,m(n);n.lookahead>=3;){r=n.strstart,o=n.lookahead-2;do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--o);n.strstart=r,n.lookahead=2,m(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=l,e.input=c,e.avail_in=u,n.wrap=s,0},t.deflateInfo="pako deflate (from Nodeca project)"},function(e,t,n){"use strict";var r=n(31);function i(e){for(var t=e.length;--t>=0;)e[t]=0}var o=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],a=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],u=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],l=new Array(576);i(l);var c=new Array(60);i(c);var f=new Array(512);i(f);var h=new Array(256);i(h);var d=new Array(29);i(d);var p,g,b,m=new Array(30);function y(e,t,n,r,i){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=e&&e.length}function v(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function _(e){return e<256?f[e]:f[256+(e>>>7)]}function w(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function E(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,w(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function S(e,t,n){E(e,n[2*t],n[2*t+1])}function k(e,t){var n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}function x(e,t,n){var r,i,o=new Array(16),a=0;for(r=1;r<=15;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=t;i++){var s=e[2*i+1];0!==s&&(e[2*i]=k(o[s]++,s))}}function O(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function R(e){e.bi_valid>8?w(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function j(e,t,n,r){var i=2*t,o=2*n;return e[i]<e[o]||e[i]===e[o]&&r[t]<=r[n]}function T(e,t,n){for(var r=e.heap[n],i=n<<1;i<=e.heap_len&&(i<e.heap_len&&j(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!j(t,r,e.heap[i],e.depth));)e.heap[n]=e.heap[i],n=i,i<<=1;e.heap[n]=r}function M(e,t,n){var r,i,s,u,l=0;if(0!==e.last_lit)do{r=e.pending_buf[e.d_buf+2*l]<<8|e.pending_buf[e.d_buf+2*l+1],i=e.pending_buf[e.l_buf+l],l++,0===r?S(e,i,t):(S(e,(s=h[i])+256+1,t),0!==(u=o[s])&&E(e,i-=d[s],u),S(e,s=_(--r),n),0!==(u=a[s])&&E(e,r-=m[s],u))}while(l<e.last_lit);S(e,256,t)}function A(e,t){var n,r,i,o=t.dyn_tree,a=t.stat_desc.static_tree,s=t.stat_desc.has_stree,u=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<u;n++)0!==o[2*n]?(e.heap[++e.heap_len]=l=n,e.depth[n]=0):o[2*n+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[i]=0,e.opt_len--,s&&(e.static_len-=a[2*i+1]);for(t.max_code=l,n=e.heap_len>>1;n>=1;n--)T(e,o,n);i=u;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],T(e,o,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,o[2*i]=o[2*n]+o[2*r],e.depth[i]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,o[2*n+1]=o[2*r+1]=i,e.heap[1]=i++,T(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,i,o,a,s,u=t.dyn_tree,l=t.max_code,c=t.stat_desc.static_tree,f=t.stat_desc.has_stree,h=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,g=0;for(o=0;o<=15;o++)e.bl_count[o]=0;for(u[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)(o=u[2*u[2*(r=e.heap[n])+1]+1]+1)>p&&(o=p,g++),u[2*r+1]=o,r>l||(e.bl_count[o]++,a=0,r>=d&&(a=h[r-d]),s=u[2*r],e.opt_len+=s*(o+a),f&&(e.static_len+=s*(c[2*r+1]+a)));if(0!==g){do{for(o=p-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[p]--,g-=2}while(g>0);for(o=p;0!==o;o--)for(r=e.bl_count[o];0!==r;)(i=e.heap[--n])>l||(u[2*i+1]!==o&&(e.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),r--)}}(e,t),x(o,l,e.bl_count)}function P(e,t,n){var r,i,o=-1,a=t[1],s=0,u=7,l=4;for(0===a&&(u=138,l=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=t[2*(r+1)+1],++s<u&&i===a||(s<l?e.bl_tree[2*i]+=s:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=0,o=i,0===a?(u=138,l=3):i===a?(u=6,l=3):(u=7,l=4))}function L(e,t,n){var r,i,o=-1,a=t[1],s=0,u=7,l=4;for(0===a&&(u=138,l=3),r=0;r<=n;r++)if(i=a,a=t[2*(r+1)+1],!(++s<u&&i===a)){if(s<l)do{S(e,i,e.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(S(e,i,e.bl_tree),s--),S(e,16,e.bl_tree),E(e,s-3,2)):s<=10?(S(e,17,e.bl_tree),E(e,s-3,3)):(S(e,18,e.bl_tree),E(e,s-11,7));s=0,o=i,0===a?(u=138,l=3):i===a?(u=6,l=3):(u=7,l=4)}}i(m);var C=!1;function N(e,t,n,i){E(e,0+(i?1:0),3),function(e,t,n,i){R(e),i&&(w(e,n),w(e,~n)),r.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n,!0)}t._tr_init=function(e){C||(!function(){var e,t,n,r,i,u=new Array(16);for(n=0,r=0;r<28;r++)for(d[r]=n,e=0;e<1<<o[r];e++)h[n++]=r;for(h[n-1]=r,i=0,r=0;r<16;r++)for(m[r]=i,e=0;e<1<<a[r];e++)f[i++]=r;for(i>>=7;r<30;r++)for(m[r]=i<<7,e=0;e<1<<a[r]-7;e++)f[256+i++]=r;for(t=0;t<=15;t++)u[t]=0;for(e=0;e<=143;)l[2*e+1]=8,e++,u[8]++;for(;e<=255;)l[2*e+1]=9,e++,u[9]++;for(;e<=279;)l[2*e+1]=7,e++,u[7]++;for(;e<=287;)l[2*e+1]=8,e++,u[8]++;for(x(l,287,u),e=0;e<30;e++)c[2*e+1]=5,c[2*e]=k(e,5);p=new y(l,o,257,286,15),g=new y(c,a,0,30,15),b=new y(new Array(0),s,0,19,7)}(),C=!0),e.l_desc=new v(e.dyn_ltree,p),e.d_desc=new v(e.dyn_dtree,g),e.bl_desc=new v(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,O(e)},t._tr_stored_block=N,t._tr_flush_block=function(e,t,n,r){var i,o,a=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),A(e,e.l_desc),A(e,e.d_desc),a=function(e){var t;for(P(e,e.dyn_ltree,e.l_desc.max_code),P(e,e.dyn_dtree,e.d_desc.max_code),A(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*u[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(o=e.static_len+3+7>>>3)<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!==t?N(e,t,n,r):4===e.strategy||o===i?(E(e,2+(r?1:0),3),M(e,l,c)):(E(e,4+(r?1:0),3),function(e,t,n,r){var i;for(E(e,t-257,5),E(e,n-1,5),E(e,r-4,4),i=0;i<r;i++)E(e,e.bl_tree[2*u[i]+1],3);L(e,e.dyn_ltree,t-1),L(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),M(e,e.dyn_ltree,e.dyn_dtree)),O(e),r&&R(e)},t._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(h[n]+256+1)]++,e.dyn_dtree[2*_(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){E(e,2,3),S(e,256,l),function(e){16===e.bi_valid?(w(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},function(e,t,n){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(e,t,n){"use strict";var r=n(31),i=n(67),o=n(68),a=n(174),s=n(175);function u(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function c(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(852),t.distcode=t.distdyn=new r.Buf32(592),t.sane=1,t.back=-1,0):-2}function f(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,c(e)):-2}function h(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?-2:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,f(e))):-2}function d(e,t){var n,r;return e?(r=new l,e.state=r,r.window=null,0!==(n=h(e,t))&&(e.state=null),n):-2}var p,g,b=!0;function m(e){if(b){var t;for(p=new r.Buf32(512),g=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(1,e.lens,0,288,p,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(2,e.lens,0,32,g,0,e.work,{bits:5}),b=!1}e.lencode=p,e.lenbits=9,e.distcode=g,e.distbits=5}function y(e,t,n,i){var o,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),r.arraySet(a.window,t,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,t,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}t.inflateReset=f,t.inflateReset2=h,t.inflateResetKeep=c,t.inflateInit=function(e){return d(e,15)},t.inflateInit2=d,t.inflate=function(e,t){var n,l,c,f,h,d,p,g,b,v,_,w,E,S,k,x,O,R,j,T,M,A,P,L,C=0,N=new r.Buf8(4),D=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return-2;12===(n=e.state).mode&&(n.mode=13),h=e.next_out,c=e.output,p=e.avail_out,f=e.next_in,l=e.input,d=e.avail_in,g=n.hold,b=n.bits,v=d,_=p,A=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;b<16;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(2&n.wrap&&35615===g){n.check=0,N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0),g=0,b=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&g)<<8)+(g>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&g)){e.msg="unknown compression method",n.mode=30;break}if(b-=4,M=8+(15&(g>>>=4)),0===n.wbits)n.wbits=M;else if(M>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<M,e.adler=n.check=1,n.mode=512&g?10:12,g=0,b=0;break;case 2:for(;b<16;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(n.flags=g,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=g>>8&1),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0)),g=0,b=0,n.mode=3;case 3:for(;b<32;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}n.head&&(n.head.time=g),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,N[2]=g>>>16&255,N[3]=g>>>24&255,n.check=o(n.check,N,4,0)),g=0,b=0,n.mode=4;case 4:for(;b<16;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}n.head&&(n.head.xflags=255&g,n.head.os=g>>8),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0)),g=0,b=0,n.mode=5;case 5:if(1024&n.flags){for(;b<16;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}n.length=g,n.head&&(n.head.extra_len=g),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0)),g=0,b=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&((w=n.length)>d&&(w=d),w&&(n.head&&(M=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,l,f,w,M)),512&n.flags&&(n.check=o(n.check,l,w,f)),d-=w,f+=w,n.length-=w),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===d)break e;w=0;do{M=l[f+w++],n.head&&M&&n.length<65536&&(n.head.name+=String.fromCharCode(M))}while(M&&w<d);if(512&n.flags&&(n.check=o(n.check,l,w,f)),d-=w,f+=w,M)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===d)break e;w=0;do{M=l[f+w++],n.head&&M&&n.length<65536&&(n.head.comment+=String.fromCharCode(M))}while(M&&w<d);if(512&n.flags&&(n.check=o(n.check,l,w,f)),d-=w,f+=w,M)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;b<16;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(g!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}g=0,b=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;b<32;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}e.adler=n.check=u(g),g=0,b=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=h,e.avail_out=p,e.next_in=f,e.avail_in=d,n.hold=g,n.bits=b,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){g>>>=7&b,b-=7&b,n.mode=27;break}for(;b<3;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}switch(n.last=1&g,b-=1,3&(g>>>=1)){case 0:n.mode=14;break;case 1:if(m(n),n.mode=20,6===t){g>>>=2,b-=2;break e}break;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}g>>>=2,b-=2;break;case 14:for(g>>>=7&b,b-=7&b;b<32;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if((65535&g)!=(g>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&g,g=0,b=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(w=n.length){if(w>d&&(w=d),w>p&&(w=p),0===w)break e;r.arraySet(c,l,f,w,h),d-=w,f+=w,p-=w,h+=w,n.length-=w;break}n.mode=12;break;case 17:for(;b<14;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(n.nlen=257+(31&g),g>>>=5,b-=5,n.ndist=1+(31&g),g>>>=5,b-=5,n.ncode=4+(15&g),g>>>=4,b-=4,n.nlen>286||n.ndist>30){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;b<3;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}n.lens[D[n.have++]]=7&g,g>>>=3,b-=3}for(;n.have<19;)n.lens[D[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,P={bits:n.lenbits},A=s(0,n.lens,0,19,n.lencode,0,n.work,P),n.lenbits=P.bits,A){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;x=(C=n.lencode[g&(1<<n.lenbits)-1])>>>16&255,O=65535&C,!((k=C>>>24)<=b);){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(O<16)g>>>=k,b-=k,n.lens[n.have++]=O;else{if(16===O){for(L=k+2;b<L;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(g>>>=k,b-=k,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}M=n.lens[n.have-1],w=3+(3&g),g>>>=2,b-=2}else if(17===O){for(L=k+3;b<L;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}b-=k,M=0,w=3+(7&(g>>>=k)),g>>>=3,b-=3}else{for(L=k+7;b<L;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}b-=k,M=0,w=11+(127&(g>>>=k)),g>>>=7,b-=7}if(n.have+w>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;w--;)n.lens[n.have++]=M}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,P={bits:n.lenbits},A=s(1,n.lens,0,n.nlen,n.lencode,0,n.work,P),n.lenbits=P.bits,A){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,P={bits:n.distbits},A=s(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,P),n.distbits=P.bits,A){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(d>=6&&p>=258){e.next_out=h,e.avail_out=p,e.next_in=f,e.avail_in=d,n.hold=g,n.bits=b,a(e,_),h=e.next_out,c=e.output,p=e.avail_out,f=e.next_in,l=e.input,d=e.avail_in,g=n.hold,b=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;x=(C=n.lencode[g&(1<<n.lenbits)-1])>>>16&255,O=65535&C,!((k=C>>>24)<=b);){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(x&&0==(240&x)){for(R=k,j=x,T=O;x=(C=n.lencode[T+((g&(1<<R+j)-1)>>R)])>>>16&255,O=65535&C,!(R+(k=C>>>24)<=b);){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}g>>>=R,b-=R,n.back+=R}if(g>>>=k,b-=k,n.back+=k,n.length=O,0===x){n.mode=26;break}if(32&x){n.back=-1,n.mode=12;break}if(64&x){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&x,n.mode=22;case 22:if(n.extra){for(L=n.extra;b<L;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}n.length+=g&(1<<n.extra)-1,g>>>=n.extra,b-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;x=(C=n.distcode[g&(1<<n.distbits)-1])>>>16&255,O=65535&C,!((k=C>>>24)<=b);){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(0==(240&x)){for(R=k,j=x,T=O;x=(C=n.distcode[T+((g&(1<<R+j)-1)>>R)])>>>16&255,O=65535&C,!(R+(k=C>>>24)<=b);){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}g>>>=R,b-=R,n.back+=R}if(g>>>=k,b-=k,n.back+=k,64&x){e.msg="invalid distance code",n.mode=30;break}n.offset=O,n.extra=15&x,n.mode=24;case 24:if(n.extra){for(L=n.extra;b<L;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}n.offset+=g&(1<<n.extra)-1,g>>>=n.extra,b-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===p)break e;if(w=_-p,n.offset>w){if((w=n.offset-w)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}w>n.wnext?(w-=n.wnext,E=n.wsize-w):E=n.wnext-w,w>n.length&&(w=n.length),S=n.window}else S=c,E=h-n.offset,w=n.length;w>p&&(w=p),p-=w,n.length-=w;do{c[h++]=S[E++]}while(--w);0===n.length&&(n.mode=21);break;case 26:if(0===p)break e;c[h++]=n.length,p--,n.mode=21;break;case 27:if(n.wrap){for(;b<32;){if(0===d)break e;d--,g|=l[f++]<<b,b+=8}if(_-=p,e.total_out+=_,n.total+=_,_&&(e.adler=n.check=n.flags?o(n.check,c,_,h-_):i(n.check,c,_,h-_)),_=p,(n.flags?g:u(g))!==n.check){e.msg="incorrect data check",n.mode=30;break}g=0,b=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;b<32;){if(0===d)break e;d--,g+=l[f++]<<b,b+=8}if(g!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}g=0,b=0}n.mode=29;case 29:A=1;break e;case 30:A=-3;break e;case 31:return-4;case 32:default:return-2}return e.next_out=h,e.avail_out=p,e.next_in=f,e.avail_in=d,n.hold=g,n.bits=b,(n.wsize||_!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&y(e,e.output,e.next_out,_-e.avail_out)?(n.mode=31,-4):(v-=e.avail_in,_-=e.avail_out,e.total_in+=v,e.total_out+=_,n.total+=_,n.wrap&&_&&(e.adler=n.check=n.flags?o(n.check,c,_,e.next_out-_):i(n.check,c,_,e.next_out-_)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0===v&&0===_||4===t)&&0===A&&(A=-5),A)},t.inflateEnd=function(e){if(!e||!e.state)return-2;var t=e.state;return t.window&&(t.window=null),e.state=null,0},t.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?-2:(n.head=t,t.done=!1,0):-2},t.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?-2:11===n.mode&&i(1,t,r,0)!==n.check?-3:y(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,0):-2},t.inflateInfo="pako inflate (from Nodeca project)"},function(e,t,n){"use strict";e.exports=function(e,t){var n,r,i,o,a,s,u,l,c,f,h,d,p,g,b,m,y,v,_,w,E,S,k,x,O;n=e.state,r=e.next_in,x=e.input,i=r+(e.avail_in-5),o=e.next_out,O=e.output,a=o-(t-e.avail_out),s=o+(e.avail_out-257),u=n.dmax,l=n.wsize,c=n.whave,f=n.wnext,h=n.window,d=n.hold,p=n.bits,g=n.lencode,b=n.distcode,m=(1<<n.lenbits)-1,y=(1<<n.distbits)-1;e:do{p<15&&(d+=x[r++]<<p,p+=8,d+=x[r++]<<p,p+=8),v=g[d&m];t:for(;;){if(d>>>=_=v>>>24,p-=_,0===(_=v>>>16&255))O[o++]=65535&v;else{if(!(16&_)){if(0==(64&_)){v=g[(65535&v)+(d&(1<<_)-1)];continue t}if(32&_){n.mode=12;break e}e.msg="invalid literal/length code",n.mode=30;break e}w=65535&v,(_&=15)&&(p<_&&(d+=x[r++]<<p,p+=8),w+=d&(1<<_)-1,d>>>=_,p-=_),p<15&&(d+=x[r++]<<p,p+=8,d+=x[r++]<<p,p+=8),v=b[d&y];n:for(;;){if(d>>>=_=v>>>24,p-=_,!(16&(_=v>>>16&255))){if(0==(64&_)){v=b[(65535&v)+(d&(1<<_)-1)];continue n}e.msg="invalid distance code",n.mode=30;break e}if(E=65535&v,p<(_&=15)&&(d+=x[r++]<<p,(p+=8)<_&&(d+=x[r++]<<p,p+=8)),(E+=d&(1<<_)-1)>u){e.msg="invalid distance too far back",n.mode=30;break e}if(d>>>=_,p-=_,E>(_=o-a)){if((_=E-_)>c&&n.sane){e.msg="invalid distance too far back",n.mode=30;break e}if(S=0,k=h,0===f){if(S+=l-_,_<w){w-=_;do{O[o++]=h[S++]}while(--_);S=o-E,k=O}}else if(f<_){if(S+=l+f-_,(_-=f)<w){w-=_;do{O[o++]=h[S++]}while(--_);if(S=0,f<w){w-=_=f;do{O[o++]=h[S++]}while(--_);S=o-E,k=O}}}else if(S+=f-_,_<w){w-=_;do{O[o++]=h[S++]}while(--_);S=o-E,k=O}for(;w>2;)O[o++]=k[S++],O[o++]=k[S++],O[o++]=k[S++],w-=3;w&&(O[o++]=k[S++],w>1&&(O[o++]=k[S++]))}else{S=o-E;do{O[o++]=O[S++],O[o++]=O[S++],O[o++]=O[S++],w-=3}while(w>2);w&&(O[o++]=O[S++],w>1&&(O[o++]=O[S++]))}break}}break}}while(r<i&&o<s);r-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=r,e.next_out=o,e.avail_in=r<i?i-r+5:5-(r-i),e.avail_out=o<s?s-o+257:257-(o-s),n.hold=d,n.bits=p}},function(e,t,n){"use strict";var r=n(31),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,n,u,l,c,f,h){var d,p,g,b,m,y,v,_,w,E=h.bits,S=0,k=0,x=0,O=0,R=0,j=0,T=0,M=0,A=0,P=0,L=null,C=0,N=new r.Buf16(16),D=new r.Buf16(16),I=null,B=0;for(S=0;S<=15;S++)N[S]=0;for(k=0;k<u;k++)N[t[n+k]]++;for(R=E,O=15;O>=1&&0===N[O];O--);if(R>O&&(R=O),0===O)return l[c++]=20971520,l[c++]=20971520,h.bits=1,0;for(x=1;x<O&&0===N[x];x++);for(R<x&&(R=x),M=1,S=1;S<=15;S++)if(M<<=1,(M-=N[S])<0)return-1;if(M>0&&(0===e||1!==O))return-1;for(D[1]=0,S=1;S<15;S++)D[S+1]=D[S]+N[S];for(k=0;k<u;k++)0!==t[n+k]&&(f[D[t[n+k]]++]=k);if(0===e?(L=I=f,y=19):1===e?(L=i,C-=257,I=o,B-=257,y=256):(L=a,I=s,y=-1),P=0,k=0,S=x,m=c,j=R,T=0,g=-1,b=(A=1<<R)-1,1===e&&A>852||2===e&&A>592)return 1;for(;;){v=S-T,f[k]<y?(_=0,w=f[k]):f[k]>y?(_=I[B+f[k]],w=L[C+f[k]]):(_=96,w=0),d=1<<S-T,x=p=1<<j;do{l[m+(P>>T)+(p-=d)]=v<<24|_<<16|w|0}while(0!==p);for(d=1<<S-1;P&d;)d>>=1;if(0!==d?(P&=d-1,P+=d):P=0,k++,0==--N[S]){if(S===O)break;S=t[n+f[k]]}if(S>R&&(P&b)!==g){for(0===T&&(T=R),m+=x,M=1<<(j=S-T);j+T<O&&!((M-=N[j+T])<=0);)j++,M<<=1;if(A+=1<<j,1===e&&A>852||2===e&&A>592)return 1;l[g=P&b]=R<<24|j<<16|m-c|0}}return 0!==P&&(l[m+P]=S-T<<24|64<<16|0),h.bits=R,0}},function(e,t,n){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(e,t){},function(e,t,n){"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=n(6).Buffer,s=n(179).inspect,u=s&&s.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,n,l;return t=e,(n=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n}},{key:"concat",value:function(e){if(0===this.length)return a.alloc(0);for(var t,n,r,i=a.allocUnsafe(e>>>0),o=this.head,s=0;o;)t=o.data,n=i,r=s,a.prototype.copy.call(t,n,r),s+=o.data.length,o=o.next;return i}},{key:"consume",value:function(e,t){var n;return e<this.head.data.length?(n=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):n=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),n}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,n=1,r=t.data;for(e-=r.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?r+=i:r+=i.slice(0,e),0==(e-=o)){o===i.length?(++n,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++n}return this.length-=n,r}},{key:"_getBuffer",value:function(e){var t=a.allocUnsafe(e),n=this.head,r=1;for(n.data.copy(t),e-=n.data.length;n=n.next;){var i=n.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0==(e-=o)){o===i.length?(++r,n.next?this.head=n.next:this.head=this.tail=null):(this.head=n,n.data=i.slice(o));break}++r}return this.length-=r,t}},{key:u,value:function(e,t){return s(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}])&&o(t.prototype,n),l&&o(t,l),e}()},function(e,t){},function(e,t,n){"use strict";(function(t){var r;function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=n(43),a=Symbol("lastResolve"),s=Symbol("lastReject"),u=Symbol("error"),l=Symbol("ended"),c=Symbol("lastPromise"),f=Symbol("handlePromise"),h=Symbol("stream");function d(e,t){return{value:e,done:t}}function p(e){var t=e[a];if(null!==t){var n=e[h].read();null!==n&&(e[c]=null,e[a]=null,e[s]=null,t(d(n,!1)))}}function g(e){t.nextTick(p,e)}var b=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((i(r={get stream(){return this[h]},next:function(){var e=this,n=this[u];if(null!==n)return Promise.reject(n);if(this[l])return Promise.resolve(d(void 0,!0));if(this[h].destroyed)return new Promise((function(n,r){t.nextTick((function(){e[u]?r(e[u]):n(d(void 0,!0))}))}));var r,i=this[c];if(i)r=new Promise(function(e,t){return function(n,r){e.then((function(){t[l]?n(d(void 0,!0)):t[f](n,r)}),r)}}(i,this));else{var o=this[h].read();if(null!==o)return Promise.resolve(d(o,!1));r=new Promise(this[f])}return this[c]=r,r}},Symbol.asyncIterator,(function(){return this})),i(r,"return",(function(){var e=this;return new Promise((function(t,n){e[h].destroy(null,(function(e){e?n(e):t(d(void 0,!0))}))}))})),r),b);e.exports=function(e){var t,n=Object.create(m,(i(t={},h,{value:e,writable:!0}),i(t,a,{value:null,writable:!0}),i(t,s,{value:null,writable:!0}),i(t,u,{value:null,writable:!0}),i(t,l,{value:e._readableState.endEmitted,writable:!0}),i(t,f,{value:function(e,t){var r=n[h].read();r?(n[c]=null,n[a]=null,n[s]=null,e(d(r,!1))):(n[a]=e,n[s]=t)},writable:!0}),t));return n[c]=null,o(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=n[s];return null!==t&&(n[c]=null,n[a]=null,n[s]=null,t(e)),void(n[u]=e)}var r=n[a];null!==r&&(n[c]=null,n[a]=null,n[s]=null,r(d(void 0,!0))),n[l]=!0})),e.on("readable",g.bind(null,n)),n}}).call(this,n(2))},function(e,t){e.exports=function(){throw new Error("Readable.from is not available in the browser")}},function(e,t,n){"use strict";e.exports=i;var r=n(74);function i(e){if(!(this instanceof i))return new i(e);r.call(this,e)}n(4)(i,r),i.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){"use strict";var r;var i=n(21).codes,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(e){if(e)throw e}function u(e,t,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var s=!1;e.on("close",(function(){s=!0})),void 0===r&&(r=n(43)),r(e,{readable:t,writable:i},(function(e){if(e)return o(e);s=!0,o()}));var u=!1;return function(t){if(!s&&!u)return u=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new a("pipe"))}}function l(e){e()}function c(e,t){return e.pipe(t)}function f(e){return e.length?"function"!=typeof e[e.length-1]?s:e.pop():s}e.exports=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,i=f(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new o("streams");var a=t.map((function(e,n){var o=n<t.length-1;return u(e,o,n>0,(function(e){r||(r=e),e&&a.forEach(l),o||(a.forEach(l),i(r))}))}));return t.reduce(c)}},function(e,t,n){var r=n(185)((function e(t,n){return(n=n||{}).namespace=t,n.prod=!0,n.dev=!1,n.force||e.force?e.yep(n):e.nope(n)}));e.exports=r},function(e,t){var n=[],r=[],i=function(){};function o(e){return!~n.indexOf(e)&&(n.push(e),!0)}function a(e){i=e}function s(e){for(var t=[],r=0;r<n.length;r++)if(n[r].async)t.push(n[r]);else if(n[r](e))return!0;return!!t.length&&new Promise((function(n){Promise.all(t.map((function(t){return t(e)}))).then((function(e){n(e.some(Boolean))}))}))}function u(e){return!~r.indexOf(e)&&(r.push(e),!0)}function l(){i.apply(i,arguments)}function c(e){for(var t=0;t<r.length;t++)e=r[t].apply(r[t],arguments);return e}function f(e,t){var n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&(e[r]=t[r]);return e}function h(e){return e.enabled=!1,e.modify=u,e.set=a,e.use=o,f((function(){return!1}),e)}function d(e){return e.enabled=!0,e.modify=u,e.set=a,e.use=o,f((function(){var t=Array.prototype.slice.call(arguments,0);return l.call(l,e,c(t,e)),!0}),e)}e.exports=function(e){return e.introduce=f,e.enabled=s,e.process=c,e.modify=u,e.write=l,e.nope=h,e.yep=d,e.set=a,e.use=o,e}},function(e,t,n){"use strict";(function(t){var r=n(58),i=n(15).StringDecoder,o=n(26).Stream;function a(){}e.exports=function(e,n){var s=t.alloc(65536),u=new i("utf8"),l=new o,c="",f=0,h=0;return-1===e.start&&delete e.start,l.readable=!0,l.destroy=function(){l.destroyed=!0,l.emit("end"),l.emit("close")},r.open(e.file,"a+","0644",(function(t,i){if(t)return n?n(t):l.emit("error",t),void l.destroy();!function t(){if(!l.destroyed)return r.read(i,s,0,s.length,f,(function(r,i){if(r)return n?n(r):l.emit("error",r),void l.destroy();if(!i)return c&&((null==e.start||h>e.start)&&(n?n(null,c):l.emit("line",c)),h++,c=""),setTimeout(t,1e3);var o=u.write(s.slice(0,i));n||l.emit("data",o);for(var a=(o=(c+o).split(/\n+/)).length-1,d=0;d<a;d++)(null==e.start||h>e.start)&&(n?n(null,o[d]):l.emit("line",o[d])),h++;return c=o[a],f+=i,t()}));r.close(i,a)}()})),n?l.destroy:l}}).call(this,n(6).Buffer)},function(e,t,n){"use strict";(function(t,r){function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d(e);if(t){var i=d(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=n(75),g=n(202),b=n(26).Stream,m=n(16);e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(h,e);var n,i,o,s=f(h);function h(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return u(this,h),(e=s.call(this,t)).options=t,e.name=t.name||"http",e.ssl=!!t.ssl,e.host=t.host||"localhost",e.port=t.port,e.auth=t.auth,e.path=t.path||"",e.agent=t.agent,e.headers=t.headers||{},e.headers["content-type"]="application/json",e.port||(e.port=e.ssl?443:80),e}return n=h,(i=[{key:"log",value:function(e,n){var r=this;this._request(e,(function(t,n){n&&200!==n.statusCode&&(t=new Error("Invalid HTTP Status Code: ".concat(n.statusCode))),t?r.emit("warn",t):r.emit("logged",e)})),n&&t(n)}},{key:"query",value:function(e,t){"function"==typeof e&&(t=e,e={}),(e={method:"query",params:this.normalizeQuery(e)}).params.path&&(e.path=e.params.path,delete e.params.path),e.params.auth&&(e.auth=e.params.auth,delete e.params.auth),this._request(e,(function(e,n,r){if(n&&200!==n.statusCode&&(e=new Error("Invalid HTTP Status Code: ".concat(n.statusCode))),e)return t(e);if("string"==typeof r)try{r=JSON.parse(r)}catch(e){return t(e)}t(null,r)}))}},{key:"stream",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new b;(e={method:"stream",params:e}).params.path&&(e.path=e.params.path,delete e.params.path),e.params.auth&&(e.auth=e.params.auth,delete e.params.auth);var n="",r=this._request(e);return t.destroy=function(){return r.destroy()},r.on("data",(function(e){for(var r=(e=(n+e).split(/\n+/)).length-1,i=0;i<r;i++)try{t.emit("log",JSON.parse(e[i]))}catch(e){t.emit("error",e)}n=e[r]})),r.on("error",(function(e){return t.emit("error",e)})),t}},{key:"_request",value:function(e,t){var n=(e=e||{}).auth||this.auth,i=e.path||this.path||"";delete e.auth,delete e.path;var o=Object.assign({},this.headers);n&&n.bearer&&(o.Authorization="Bearer ".concat(n.bearer));var s=(this.ssl?g:p).request(a(a({},this.options),{},{method:"POST",host:this.host,port:this.port,path:"/".concat(i.replace(/^\//,"")),headers:o,auth:n&&n.username&&n.password?"".concat(n.username,":").concat(n.password):"",agent:this.agent}));s.on("error",t),s.on("response",(function(e){return e.on("end",(function(){return t(null,e)})).resume()})),s.end(r.from(JSON.stringify(e),"utf8"))}}])&&l(n.prototype,i),o&&l(n,o),h}(m)}).call(this,n(13).setImmediate,n(6).Buffer)},function(e,t,n){(function(t,r,i){var o=n(76),a=n(4),s=n(77),u=n(78),l=n(193),c=s.IncomingMessage,f=s.readyStates;var h=e.exports=function(e){var n,r=this;u.Writable.call(r),r._opts=e,r._body=[],r._headers={},e.auth&&r.setHeader("Authorization","Basic "+new t(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(t){r.setHeader(t,e.headers[t])}));var i=!0;if("disable-fetch"===e.mode||"requestTimeout"in e&&!o.abortController)i=!1,n=!0;else if("prefer-streaming"===e.mode)n=!1;else if("allow-wrong-content-type"===e.mode)n=!o.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");n=!0}r._mode=function(e,t){return o.fetch&&t?"fetch":o.mozchunkedarraybuffer?"moz-chunked-arraybuffer":o.msstream?"ms-stream":o.arraybuffer&&e?"arraybuffer":o.vbArray&&e?"text:vbarray":"text"}(n,i),r._fetchTimer=null,r.on("finish",(function(){r._onFinish()}))};a(h,u.Writable),h.prototype.setHeader=function(e,t){var n=e.toLowerCase();-1===d.indexOf(n)&&(this._headers[n]={name:e,value:t})},h.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];return t?t.value:null},h.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},h.prototype._onFinish=function(){var e=this;if(!e._destroyed){var n=e._opts,a=e._headers,s=null;"GET"!==n.method&&"HEAD"!==n.method&&(s=o.arraybuffer?l(t.concat(e._body)):o.blobConstructor?new r.Blob(e._body.map((function(e){return l(e)})),{type:(a["content-type"]||{}).value||""}):t.concat(e._body).toString());var u=[];if(Object.keys(a).forEach((function(e){var t=a[e].name,n=a[e].value;Array.isArray(n)?n.forEach((function(e){u.push([t,e])})):u.push([t,n])})),"fetch"===e._mode){var c=null;if(o.abortController){var h=new AbortController;c=h.signal,e._fetchAbortController=h,"requestTimeout"in n&&0!==n.requestTimeout&&(e._fetchTimer=r.setTimeout((function(){e.emit("requestTimeout"),e._fetchAbortController&&e._fetchAbortController.abort()}),n.requestTimeout))}r.fetch(e._opts.url,{method:e._opts.method,headers:u,body:s||void 0,mode:"cors",credentials:n.withCredentials?"include":"same-origin",signal:c}).then((function(t){e._fetchResponse=t,e._connect()}),(function(t){r.clearTimeout(e._fetchTimer),e._destroyed||e.emit("error",t)}))}else{var d=e._xhr=new r.XMLHttpRequest;try{d.open(e._opts.method,e._opts.url,!0)}catch(t){return void i.nextTick((function(){e.emit("error",t)}))}"responseType"in d&&(d.responseType=e._mode.split(":")[0]),"withCredentials"in d&&(d.withCredentials=!!n.withCredentials),"text"===e._mode&&"overrideMimeType"in d&&d.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in n&&(d.timeout=n.requestTimeout,d.ontimeout=function(){e.emit("requestTimeout")}),u.forEach((function(e){d.setRequestHeader(e[0],e[1])})),e._response=null,d.onreadystatechange=function(){switch(d.readyState){case f.LOADING:case f.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(d.onprogress=function(){e._onXHRProgress()}),d.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{d.send(s)}catch(t){return void i.nextTick((function(){e.emit("error",t)}))}}}},h.prototype._onXHRProgress=function(){(function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},h.prototype._connect=function(){var e=this;e._destroyed||(e._response=new c(e._xhr,e._fetchResponse,e._mode,e._fetchTimer),e._response.on("error",(function(t){e.emit("error",t)})),e.emit("response",e._response))},h.prototype._write=function(e,t,n){this._body.push(e),n()},h.prototype.abort=h.prototype.destroy=function(){this._destroyed=!0,r.clearTimeout(this._fetchTimer),this._response&&(this._response._destroyed=!0),this._xhr?this._xhr.abort():this._fetchAbortController&&this._fetchAbortController.abort()},h.prototype.end=function(e,t,n){"function"==typeof e&&(n=e,e=void 0),u.Writable.prototype.end.call(this,e,t,n)},h.prototype.flushHeaders=function(){},h.prototype.setTimeout=function(){},h.prototype.setNoDelay=function(){},h.prototype.setSocketKeepAlive=function(){};var d=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]}).call(this,n(6).Buffer,n(8),n(2))},function(e,t){},function(e,t,n){"use strict";var r=n(44).Buffer,i=n(191);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var t,n,i,o=r.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,n=o,i=s,t.copy(n,i),s+=a.data.length,a=a.next;return o},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){"use strict";e.exports=o;var r=n(83),i=Object.create(n(9));function o(e){if(!(this instanceof o))return new o(e);r.call(this,e)}i.inherits=n(4),i.inherits(o,r),o.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){var r=n(6).Buffer;e.exports=function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(r.isBuffer(e)){for(var t=new Uint8Array(e.length),n=e.length,i=0;i<n;i++)t[i]=e[i];return t.buffer}throw new Error("Argument must be a Buffer")}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var i in r)n.call(r,i)&&(e[i]=r[i])}return e};var n=Object.prototype.hasOwnProperty},function(e,t){e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(e,t,n){(function(e,r){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){t&&t.nodeType,e&&e.nodeType;var a="object"==typeof r&&r;a.global!==a&&a.window!==a&&a.self;var s,u=2147483647,l=/^xn--/,c=/[^\x20-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,p=String.fromCharCode;function g(e){throw new RangeError(h[e])}function b(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function m(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+b((e=e.replace(f,".")).split("."),t).join(".")}function y(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function v(e){return b(e,(function(e){var t="";return e>65535&&(t+=p((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=p(e)})).join("")}function _(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,n){var r=0;for(e=n?d(e/700):e>>1,e+=d(e/t);e>455;r+=36)e=d(e/35);return d(r+36*e/(e+38))}function E(e){var t,n,r,i,o,a,s,l,c,f,h,p=[],b=e.length,m=0,y=128,_=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&g("not-basic"),p.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<b;){for(o=m,a=1,s=36;i>=b&&g("invalid-input"),((l=(h=e.charCodeAt(i++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:36)>=36||l>d((u-m)/a))&&g("overflow"),m+=l*a,!(l<(c=s<=_?1:s>=_+26?26:s-_));s+=36)a>d(u/(f=36-c))&&g("overflow"),a*=f;_=w(m-o,t=p.length+1,0==o),d(m/t)>u-y&&g("overflow"),y+=d(m/t),m%=t,p.splice(m++,0,y)}return v(p)}function S(e){var t,n,r,i,o,a,s,l,c,f,h,b,m,v,E,S=[];for(b=(e=y(e)).length,t=128,n=0,o=72,a=0;a<b;++a)(h=e[a])<128&&S.push(p(h));for(r=i=S.length,i&&S.push("-");r<b;){for(s=u,a=0;a<b;++a)(h=e[a])>=t&&h<s&&(s=h);for(s-t>d((u-n)/(m=r+1))&&g("overflow"),n+=(s-t)*m,t=s,a=0;a<b;++a)if((h=e[a])<t&&++n>u&&g("overflow"),h==t){for(l=n,c=36;!(l<(f=c<=o?1:c>=o+26?26:c-o));c+=36)E=l-f,v=36-f,S.push(p(_(f+E%v,0))),l=d(E/v);S.push(p(_(l,0))),o=w(n,m,r==i),n=0,++r}++n,++t}return S.join("")}s={version:"1.4.1",ucs2:{decode:y,encode:v},decode:E,encode:S,toASCII:function(e){return m(e,(function(e){return c.test(e)?"xn--"+S(e):e}))},toUnicode:function(e){return m(e,(function(e){return l.test(e)?E(e.slice(4).toLowerCase()):e}))}},void 0===(i=function(){return s}.call(t,n,t,e))||(e.exports=i)}()}).call(this,n(197)(e),n(8))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){"use strict";t.decode=t.parse=n(200),t.encode=t.stringify=n(201)},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,o){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var l=e.length;u>0&&l>u&&(l=u);for(var c=0;c<l;++c){var f,h,d,p,g=e[c].replace(s,"%20"),b=g.indexOf(n);b>=0?(f=g.substr(0,b),h=g.substr(b+1)):(f=g,h=""),d=decodeURIComponent(f),p=decodeURIComponent(h),r(a,d)?i(a[d])?a[d].push(p):a[d]=[a[d],p]:a[d]=p}return a};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,s){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?o(a(e),(function(a){var s=encodeURIComponent(r(a))+n;return i(e[a])?o(e[a],(function(e){return s+encodeURIComponent(r(e))})).join(t):s+encodeURIComponent(r(e[a]))})).join(t):s?encodeURIComponent(r(s))+n+encodeURIComponent(r(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){var r=n(75),i=n(84),o=e.exports;for(var a in r)r.hasOwnProperty(a)&&(o[a]=r[a]);function s(e){if("string"==typeof e&&(e=i.parse(e)),e.protocol||(e.protocol="https:"),"https:"!==e.protocol)throw new Error('Protocol "'+e.protocol+'" not supported. Expected "https:"');return e}o.request=function(e,t){return e=s(e),r.request.call(this,e,t)},o.get=function(e,t){return e=s(e),r.get.call(this,e,t)}},function(e,t,n){"use strict";(function(t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var i=l(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=n(85),f=n(5).MESSAGE,h=n(19),d=n(16);e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(d,e);var n,r,u,l=s(d);function d(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(i(this,d),e=l.call(this,t),!t.stream||!c(t.stream))throw new Error("options.stream is required.");return e._stream=t.stream,e._stream.setMaxListeners(1/0),e.isObjectMode=t.stream._writableState.objectMode,e.eol=t.eol||h.EOL,e}return n=d,(r=[{key:"log",value:function(e,n){var r=this;if(t((function(){return r.emit("logged",e)})),this.isObjectMode)return this._stream.write(e),void(n&&n());this._stream.write("".concat(e[f]).concat(this.eol)),n&&n()}}])&&o(n.prototype,r),u&&o(n,u),d}(d)}).call(this,n(13).setImmediate)},function(e,t,n){"use strict";(function(t){function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var i=l(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=n(26),f=c.Stream,h=c.Transform,d=n(46),p=n(5),g=p.LEVEL,b=p.SPLAT,m=n(85),y=n(87),v=n(91),_=n(208),w=n(209),E=n(54).warn,S=n(45),k=/%[scdjifoO%]/g,x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(p,e);var u,l,c,h=s(p);function p(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(t=h.call(this,{objectMode:!0})).configure(e),t}return u=p,(l=[{key:"child",value:function(e){var t=this;return Object.create(t,{write:{value:function(n){var r=Object.assign({},e,n);n instanceof Error&&(r.stack=n.stack,r.message=n.message),t.write(r)}}})}},{key:"configure",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.silent,i=t.format,o=t.defaultMeta,a=t.levels,s=t.level,u=void 0===s?"info":s,l=t.exitOnError,c=void 0===l||l,f=t.transports,h=t.colors,d=t.emitErrs,p=t.formatters,g=t.padLevels,b=t.rewriters,m=t.stripColors,_=t.exceptionHandlers,w=t.rejectionHandlers;if(this.transports.length&&this.clear(),this.silent=r,this.format=i||this.format||n(210)(),this.defaultMeta=o||null,this.levels=a||this.levels||S.npm.levels,this.level=u,this.exceptions=new y(this),this.rejections=new v(this),this.profilers={},this.exitOnError=c,f&&(f=Array.isArray(f)?f:[f]).forEach((function(t){return e.add(t)})),h||d||p||g||b||m)throw new Error(["{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.","Use a custom winston.format(function) instead.","See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"));_&&this.exceptions.handle(_),w&&this.rejections.handle(w)}},{key:"isLevelEnabled",value:function(e){var t=this,n=O(this.levels,e);if(null===n)return!1;var r=O(this.levels,this.level);return null!==r&&(this.transports&&0!==this.transports.length?-1!==this.transports.findIndex((function(e){var i=O(t.levels,e.level);return null===i&&(i=r),i>=n})):r>=n)}},{key:"log",value:function(e,t){for(var n,o,a=arguments.length,s=new Array(a>2?a-2:0),u=2;u<a;u++)s[u-2]=arguments[u];if(1===arguments.length)return e[g]=e.level,this._addDefaultMeta(e),this.write(e),this;if(2===arguments.length)return t&&"object"===i(t)?(t[g]=t.level=e,this._addDefaultMeta(t),this.write(t),this):(this.write((r(o={},g,e),r(o,"level",e),r(o,"message",t),o)),this);var l=s[0];if("object"===i(l)&&null!==l){var c=t&&t.match&&t.match(k);if(!c){var f,h=Object.assign({},this.defaultMeta,l,(r(f={},g,e),r(f,b,s),r(f,"level",e),r(f,"message",t),f));return l.message&&(h.message="".concat(h.message," ").concat(l.message)),l.stack&&(h.stack=l.stack),this.write(h),this}}return this.write(Object.assign({},this.defaultMeta,(r(n={},g,e),r(n,b,s),r(n,"level",e),r(n,"message",t),n))),this}},{key:"_transform",value:function(e,t,n){if(this.silent)return n();e[g]||(e[g]=e.level),this.levels[e[g]]||0===this.levels[e[g]]||console.error("[winston] Unknown logger level: %s",e[g]),this._readableState.pipes||console.error("[winston] Attempt to write logs with no transports %j",e);try{this.push(this.format.transform(e,this.format.options))}catch(e){throw e}finally{n()}}},{key:"_final",value:function(e){var n=this.transports.slice();d(n,(function(e,n){if(!e||e.finished)return t(n);e.once("finish",n),e.end()}),e)}},{key:"add",value:function(e){var t=!m(e)||e.log.length>2?new _({transport:e}):e;if(!t._writableState||!t._writableState.objectMode)throw new Error("Transports must WritableStreams in objectMode. Set { objectMode: true }.");return this._onEvent("error",t),this._onEvent("warn",t),this.pipe(t),e.handleExceptions&&this.exceptions.handle(),e.handleRejections&&this.rejections.handle(),this}},{key:"remove",value:function(e){if(!e)return this;var t=e;return(!m(e)||e.log.length>2)&&(t=this.transports.filter((function(t){return t.transport===e}))[0]),t&&this.unpipe(t),this}},{key:"clear",value:function(){return this.unpipe(),this}},{key:"close",value:function(){return this.clear(),this.emit("close"),this}},{key:"setLevels",value:function(){E.deprecated("setLevels")}},{key:"query",value:function(e,t){"function"==typeof e&&(t=e,e={}),e=e||{};var n={},r=Object.assign({},e.query||{});d(this.transports.filter((function(e){return!!e.query})),(function(t,i){!function(t,n){e.query&&"function"==typeof t.formatQuery&&(e.query=t.formatQuery(r)),t.query(e,(function(r,i){if(r)return n(r);"function"==typeof t.formatResults&&(i=t.formatResults(i,e.format)),n(null,i)}))}(t,(function(e,r){i&&((r=e||r)&&(n[t.name]=r),i()),i=null}))}),(function(){return t(null,n)}))}},{key:"stream",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new f,n=[];return t._streams=n,t.destroy=function(){for(var e=n.length;e--;)n[e].destroy()},this.transports.filter((function(e){return!!e.stream})).forEach((function(r){var i=r.stream(e);i&&(n.push(i),i.on("log",(function(e){e.transport=e.transport||[],e.transport.push(r.name),t.emit("log",e)})),i.on("error",(function(e){e.transport=e.transport||[],e.transport.push(r.name),t.emit("error",e)})))})),t}},{key:"startTimer",value:function(){return new w(this)}},{key:"profile",value:function(e){var t=Date.now();if(this.profilers[e]){var n=this.profilers[e];delete this.profilers[e];for(var r=arguments.length,o=new Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];"function"==typeof o[o.length-2]&&(console.warn("Callback function no longer supported as of winston@3.0.0"),o.pop());var s="object"===i(o[o.length-1])?o.pop():{};return s.level=s.level||"info",s.durationMs=t-n,s.message=s.message||e,this.write(s)}return this.profilers[e]=t,this}},{key:"handleExceptions",value:function(){var e;console.warn("Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()"),(e=this.exceptions).handle.apply(e,arguments)}},{key:"unhandleExceptions",value:function(){var e;console.warn("Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()"),(e=this.exceptions).unhandle.apply(e,arguments)}},{key:"cli",value:function(){throw new Error(["Logger.cli() was removed in winston@3.0.0","Use a custom winston.formats.cli() instead.","See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"))}},{key:"_onEvent",value:function(e,t){t["__winston"+e]||(t["__winston"+e]=function(n){"error"!==e||this.transports.includes(t)||this.add(t),this.emit(e,n,t)}.bind(this),t.on(e,t["__winston"+e]))}},{key:"_addDefaultMeta",value:function(e){this.defaultMeta&&Object.assign(e,this.defaultMeta)}}])&&o(u.prototype,l),c&&o(u,c),p}(h);function O(e,t){var n=e[t];return n||0===n?n:null}Object.defineProperty(x.prototype,"transports",{configurable:!1,enumerable:!0,get:function(){var e=this._readableState.pipes;return Array.isArray(e)?e:[e].filter(Boolean)}}),e.exports=x}).call(this,n(13).setImmediate)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(38)),i=c(n(39)),o=c(n(59)),a=c(n(60)),s=c(n(61)),u=c(n(20)),l=c(n(25));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t,n){n=(0,a.default)(n);var r=0,o=0,{length:u}=e,l=!1;function c(e,t){!1===e&&(l=!0),!0!==l&&(e?n(e):++o!==u&&t!==i.default||n(null))}for(0===u&&n(null);r<u;r++)t(e[r],r,(0,s.default)(c))}function h(e,t,n){return(0,o.default)(e,1/0,t,n)}t.default=(0,l.default)((function(e,t,n){return((0,r.default)(e)?f:h)(e,(0,u.default)(t),n)}),3),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(t,n,r)=>e(t,r)},e.exports=t.default},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){if("string"==typeof e.displayName&&e.constructor.name)return e.displayName;if("string"==typeof e.name&&e.name)return e.name;if("object"==typeof e&&e.constructor&&"string"==typeof e.constructor.name)return e.constructor.name;var t=e.toString(),n=r.call(e).slice(8,-1);return(t="Function"===n?t.substring(t.indexOf("(")+1,t.indexOf(")")):n)||"anonymous"}},function(e,t,n){"use strict";const r=n(12),{LEVEL:i}=n(5),o=n(16),a=e.exports=function(e={}){if(o.call(this,e),!e.transport||"function"!=typeof e.transport.log)throw new Error("Invalid transport, must be an object with a log method.");this.transport=e.transport,this.level=this.level||e.transport.level,this.handleExceptions=this.handleExceptions||e.transport.handleExceptions,this._deprecated(),this.transport.__winstonError||(this.transport.__winstonError=function(e){this.emit("error",e,this.transport)}.bind(this),this.transport.on("error",this.transport.__winstonError))};r.inherits(a,o),a.prototype._write=function(e,t,n){if(this.silent||!0===e.exception&&!this.handleExceptions)return n(null);(!this.level||this.levels[this.level]>=this.levels[e[i]])&&this.transport.log(e[i],e.message,e,this._nop),n(null)},a.prototype._writev=function(e,t){for(let t=0;t<e.length;t++)this._accept(e[t])&&(this.transport.log(e[t].chunk[i],e[t].chunk.message,e[t].chunk,this._nop),e[t].callback());return t(null)},a.prototype._deprecated=function(){console.error([this.transport.name+" is a legacy winston transport. Consider upgrading: ","- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"].join("\n"))},a.prototype.close=function(){this.transport.close&&this.transport.close(),this.transport.__winstonError&&(this.transport.removeListener("error",this.transport.__winstonError),this.transport.__winstonError=null)}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t)throw new Error("Logger is required for profiling.");this.logger=t,this.start=Date.now()}var t,n,o;return t=e,(n=[{key:"done",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];"function"==typeof t[t.length-1]&&(console.warn("Callback function no longer supported as of winston@3.0.0"),t.pop());var i="object"===r(t[t.length-1])?t.pop():{};return i.level=i.level||"info",i.durationMs=Date.now()-this.start,this.logger.write(i)}}])&&i(t.prototype,n),o&&i(t,o),e}()},function(e,t,n){"use strict";(function(t){const r=n(211),{MESSAGE:i}=n(5),o=n(28);function a(e,n){return n instanceof t?n.toString("base64"):"bigint"==typeof n?n.toString():n}e.exports=r((e,t={})=>(e[i]=(t.stable?o.stableStringify:o)(e,t.replacer||a,t.space),e))}).call(this,n(6).Buffer)},function(e,t,n){"use strict";class r extends Error{constructor(e){super(`Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ${e.toString().split("\n")[0]}\n`),Error.captureStackTrace(this,r)}}e.exports=e=>{if(e.length>2)throw new r(e);function t(e={}){this.options=e}function n(e){return new t(e)}return t.prototype.transform=e,n.Format=t,n}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(86);e.exports=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.loggers=new Map,this.options=t}var t,n,a;return t=e,(n=[{key:"add",value:function(e,t){var n=this;if(!this.loggers.has(e)){var r=(t=Object.assign({},t||this.options)).transports||this.options.transports;t.transports=r?r.slice():[];var i=o(t);i.on("close",(function(){return n._delete(e)})),this.loggers.set(e,i)}return this.loggers.get(e)}},{key:"get",value:function(e,t){return this.add(e,t)}},{key:"has",value:function(e){return!!this.loggers.has(e)}},{key:"close",value:function(e){var t=this;if(e)return this._removeLogger(e);this.loggers.forEach((function(e,n){return t._removeLogger(n)}))}},{key:"_removeLogger",value:function(e){this.loggers.has(e)&&(this.loggers.get(e).close(),this._delete(e))}},{key:"_delete",value:function(e){this.loggers.delete(e)}}])&&i(t.prototype,n),a&&i(t,a),e}()},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(24),a=n.n(o),s=(n(97),n(99),n(1)),u=n(3),l=n(7),c=n.n(l),f=i.a.createContext({});f.Consumer,f.Provider;function h(e,t){var n=Object(r.useContext)(f);return e||n[t]||t}var d=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];e.apply(this,r),t.apply(this,r)}}),null)};function p(e){return!e||"#"===e.trim()}var g=i.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,o=e.disabled,a=e.onKeyDown,l=Object(u.a)(e,["as","disabled","onKeyDown"]),c=function(e){var t=l.href,n=l.onClick;(o||p(t))&&e.preventDefault(),o?e.stopPropagation():n&&n(e)};return p(l.href)&&(l.role=l.role||"button",l.href=l.href||"#"),o&&(l.tabIndex=-1,l["aria-disabled"]=!0),i.a.createElement(r,Object(s.a)({ref:t},l,{onClick:c,onKeyDown:d((function(e){" "===e.key&&(e.preventDefault(),c(e))}),a)}))}));g.displayName="SafeAnchor";var b=g,m=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.size,a=e.active,l=e.className,f=e.block,d=e.type,p=e.as,g=Object(u.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),m=h(n,"btn"),y=c()(l,m,a&&"active",m+"-"+r,f&&m+"-block",o&&m+"-"+o);if(g.href)return i.a.createElement(b,Object(s.a)({},g,{as:p,ref:t,className:c()(y,g.disabled&&"disabled")}));t&&(g.ref=t),d?g.type=d:p||(g.type="button");var v=p||"button";return i.a.createElement(v,Object(s.a)({},g,{className:y}))}));m.displayName="Button",m.defaultProps={variant:"primary",active:!1,disabled:!1};var y=m,v=n(18),_=n.n(v);let w;function E(){return void 0===w&&(w=_.a.createLogger({level:"debug",transports:[new _.a.transports.Console],format:_.a.format.combine(_.a.format.colorize(),_.a.format.splat(),_.a.format.simple())})),w}n(213);const S=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],k=e=>440*Math.pow(2,(e-69)/12),x=e=>69+12*Math.log2(e/440);class O{constructor(e){this._freq=e,this.note=Math.round(x(e)),this.frequency=k(this.note),this.name=(e=>S[(e-21)%12])(this.note),this.octave=(e=>Math.floor(e/12-1))(this.note)}}const R=e=>{if(null==e)return;const t=new O(e);return{frequency:e,target:t,note:x(e),diff:(n=t.frequency,r=e,1200*Math.log2(r/n))};var n,r};var j=function(e){return this instanceof j?(this.v=e,this):new j(e)},T=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof j?Promise.resolve(n.value.v).then(u,l):c(o[0][2],n)}catch(e){c(o[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}};const M=E(),A="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function P(e){const[t,n]=Object(r.useState)(!1),[i,o]=Object(r.useState)();return Object(r.useEffect)(()=>{let r=!0;return e.generator.next().then(e=>{!e.done&&r&&(o(e.value),n(!t))}),()=>{r=!1}},[t]),Object(r.useEffect)(()=>{e.onTick&&i&&e.onTick(i)},[i]),e.children(i)}const L=E();function C({pitchGenerator:e,timeoutMs:t,onFinish:n}){const[o,a]=Object(r.useState)([]),[s,u]=Object(r.useState)(!1);Object(r.useEffect)(()=>{L.info("Setting up the timeout.");const e=setTimeout(()=>{L.debug("Finishing the stream with %d samples.",o.length),u(!0)},t);return L.info("Set up timer %d for %d ms.",e,t),()=>{L.info("Clearing out the timeout %d.",e),clearTimeout(e)}},[]),Object(r.useEffect)(()=>{s&&(L.info("Finishing recording."),n(o))},[s,o]);return e?i.a.createElement(i.a.Fragment,null,i.a.createElement(P,{generator:e,onTick:e=>{const t=o.concat([e]);a(t),L.debug("Recording size: %d",o.length)}},e=>i.a.createElement("h3",null,"Listening..."))):i.a.createElement("span",null,"Initializing...")}var N=n(95),D=n(96),I=n(34),B=n(94),F=n(48);I.a&&window;function U(e,t,n){void 0===n&&(n=5);var r=!1,i=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),o=Object(F.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(i),o()}}var z=function(e,t,n){var r,i,o;null==n&&(r=e,i=Object(B.a)(r,"transitionDuration")||"",o=-1===i.indexOf("ms")?1e3:1,n=parseFloat(i)*o||0);var a=U(e,n),s=Object(F.a)(e,"transitionend",t);return function(){a(),s()}},q=n(33),W=n(35),H=n.n(W),Z=!1,Y=i.a.createContext(null),G=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var i,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(i="exited",r.appearStatus="entering"):i="entered":i=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:i},r.nextCallback=null,r}Object(q.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[a.a.findDOMNode(this),r],o=i[0],s=i[1],u=this.getTimeouts(),l=r?u.appear:u.enter;!e&&!n||Z?this.safeSetState({status:"entered"},(function(){t.props.onEntered(o)})):(this.props.onEnter(o,s),this.safeSetState({status:"entering"},(function(){t.props.onEntering(o,s),t.onTransitionEnd(l,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(o,s)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:a.a.findDOMNode(this);t&&!Z?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:a.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=i[0],s=i[1];this.props.addEndListener(o,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(u.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.a.createElement(Y.Provider,{value:null},"function"==typeof n?n(e,r):i.a.cloneElement(i.a.Children.only(n),r))},t}(i.a.Component);function V(){}G.contextType=Y,G.propTypes={},G.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:V,onEntering:V,onEntered:V,onExit:V,onExiting:V,onExited:V},G.UNMOUNTED="unmounted",G.EXITED="exited",G.ENTERING="entering",G.ENTERED="entered",G.EXITING="exiting";var K,X=G;var J=((K={}).entering="show",K.entered="show",K),$=i.a.forwardRef((function(e,t){var n=e.className,o=e.children,a=Object(u.a)(e,["className","children"]),l=Object(r.useCallback)((function(e){!function(e){e.offsetHeight}(e),a.onEnter&&a.onEnter(e)}),[a]);return i.a.createElement(X,Object(s.a)({ref:t,addEndListener:z},a,{onEnter:l}),(function(e,t){return i.a.cloneElement(o,Object(s.a)({},t,{className:c()("fade",n,o.props.className,J[e])}))}))}));$.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},$.displayName="Fade";var Q=$,ee={label:H.a.string.isRequired,onClick:H.a.func},te=i.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,o=e.className,a=Object(u.a)(e,["label","onClick","className"]);return i.a.createElement("button",Object(s.a)({ref:t,type:"button",className:c()("close",o),onClick:r},a),i.a.createElement("span",{"aria-hidden":"true"},"×"),i.a.createElement("span",{className:"sr-only"},n))}));te.displayName="CloseButton",te.propTypes=ee,te.defaultProps={label:"Close"};var ne=te,re=/-(.)/g;var ie=function(e){return e[0].toUpperCase()+(t=e,t.replace(re,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function oe(e,t){var n=void 0===t?{}:t,r=n.displayName,o=void 0===r?ie(e):r,a=n.Component,l=n.defaultProps,f=i.a.forwardRef((function(t,n){var r=t.className,o=t.bsPrefix,l=t.as,f=void 0===l?a||"div":l,d=Object(u.a)(t,["className","bsPrefix","as"]),p=h(o,e);return i.a.createElement(f,Object(s.a)({ref:n,className:c()(r,p)},d))}));return f.defaultProps=l,f.displayName=o,f}var ae,se=(ae="h4",i.a.forwardRef((function(e,t){return i.a.createElement("div",Object(s.a)({},e,{ref:t,className:c()(e.className,ae)}))})));se.displayName="DivStyledAsH4";var ue=oe("alert-heading",{Component:se}),le=oe("alert-link",{Component:b}),ce={show:!0,transition:Q,closeLabel:"Close alert"},fe=i.a.forwardRef((function(e,t){var n=Object(N.a)(e,{show:"onClose"}),r=n.bsPrefix,o=n.show,a=n.closeLabel,l=n.className,f=n.children,d=n.variant,p=n.onClose,g=n.dismissible,b=n.transition,m=Object(u.a)(n,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),y=h(r,"alert"),v=Object(D.a)((function(e){p&&p(!1,e)})),_=!0===b?Q:b,w=i.a.createElement("div",Object(s.a)({role:"alert"},_?m:void 0,{ref:t,className:c()(l,y,d&&y+"-"+d,g&&y+"-dismissible")}),g&&i.a.createElement(ne,{onClick:v,label:a}),f);return _?i.a.createElement(_,Object(s.a)({unmountOnExit:!0},m,{ref:void 0,in:o}),w):o?w:null}));fe.displayName="Alert",fe.defaultProps=ce,fe.Link=le,fe.Heading=ue;var he=fe;E();function de({recording:e,reference:t}){const n=e.filter(e=>!!e).map(e=>e.frequency-t.frequency),r=n.reduce((e,t)=>e+t,0);return i.a.createElement(he,{variant:"success"},"Received ",n.length," sample(s) averaging to ",r/n.length," from C4.")}const pe=E(),ge=()=>{const[e,t]=Object(r.useState)(!1),[n,o]=Object(r.useState)(new AudioContext),[a,s]=Object(r.useState)(),[u,l]=Object(r.useState)(),[c,f]=Object(r.useState)();if(Object(r.useEffect)(()=>{e&&(pe.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then(e=>{pe.debug("Microphone initialized with stream: %j.",e),pe.debug("New stream is active? %j",e.active),s(e)}))},[e]),Object(r.useEffect)(()=>{if(e&&void 0!==a)return pe.info("Setting up the context %j and stream %j",n,a),n.createMediaStreamSource(a),pe.info("Initialized audio."),l(function(e,t){return T(this,arguments,(function*(){let n=!1;const r=ml5.pitchDetection(A,e,t);for(M.info("Created pitch detection.",r),yield j(r.ready),M.info("Initialized the model.");t.active&&"running"===e.state;){const e=yield j(r.getPitch());n||(M.info("Got first detection %j.",e),n=!0),yield yield j(R(e))}return yield j(void 0)}))}(n,a)),n.resume(),()=>{pe.info("Cleanup the audio settings"),pe.debug("Stop all tracks in the stream %j.",a),null==a||a.getTracks().forEach(e=>e.stop()),pe.debug("Suspend audio context %j.",n),n.suspend()}},[a,e]),void 0!==c){const e=R(k(60));return i.a.createElement(de,{recording:c,reference:e})}return e&&u?i.a.createElement(C,{onFinish:e=>{pe.info("Result",e),t(!1),f(c)},pitchGenerator:u,timeoutMs:1e4}):i.a.createElement(y,{onClick:()=>t(!0),variant:"outline-primary",size:"lg"},"Start")};var be=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,o=e.as,a=void 0===o?"div":o,l=e.className,f=Object(u.a)(e,["bsPrefix","fluid","as","className"]),d=h(n,"container"),p="string"==typeof r?"-"+r:"-fluid";return i.a.createElement(a,Object(s.a)({ref:t},f,{className:c()(l,r?""+d+p:d)}))}));be.displayName="Container",be.defaultProps={fluid:!1};var me=be,ye=["xl","lg","md","sm","xs"],ve=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.noGutters,a=e.as,l=void 0===a?"div":a,f=Object(u.a)(e,["bsPrefix","className","noGutters","as"]),d=h(n,"row"),p=d+"-cols",g=[];return ye.forEach((function(e){var t,n=f[e];delete f[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&g.push(""+p+r+"-"+t)})),i.a.createElement(l,Object(s.a)({ref:t},f,{className:c.a.apply(void 0,[r,d,o&&"no-gutters"].concat(g))}))}));ve.displayName="Row",ve.defaultProps={noGutters:!1};var _e=ve,we=["xl","lg","md","sm","xs"],Ee=i.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.as,a=void 0===o?"div":o,l=Object(u.a)(e,["bsPrefix","className","as"]),f=h(n,"col"),d=[],p=[];return we.forEach((function(e){var t,n,r,i=l[e];if(delete l[e],"object"==typeof i&&null!=i){var o=i.span;t=void 0===o||o,n=i.offset,r=i.order}else t=i;var a="xs"!==e?"-"+e:"";t&&d.push(!0===t?""+f+a:""+f+a+"-"+t),null!=r&&p.push("order"+a+"-"+r),null!=n&&p.push("offset"+a+"-"+n)})),d.length||d.push(f),i.a.createElement(a,Object(s.a)({},l,{ref:t,className:c.a.apply(void 0,[r].concat(d,p))}))}));Ee.displayName="Col";var Se=Ee;function ke(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=ke(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var xe=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=ke(e))&&(r&&(r+=" "),r+=t);return r};const Oe=E();o.render(r.createElement(()=>(Oe.info("Starting app."),i.a.createElement(me,null,i.a.createElement(_e,{as:"header",className:"text-center"},i.a.createElement("h1",{className:xe("display-1","mt-5","title")},"vocally"),i.a.createElement("h2",null,"sing C",i.a.createElement("sub",null,"4"))),i.a.createElement(_e,{as:"section",className:"text-center"},i.a.createElement(Se,null,i.a.createElement(ge,null))),i.a.createElement(_e,{as:"footer"}))),null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHJpcGxlLWJlYW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC93cmFwQXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9lcnJvcnMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RET01cIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvYXdhaXRpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYXN0LXNhZmUtc3RyaW5naWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGFiaC9kaWFnbm9zdGljcy9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vY2FuVXNlRE9NLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIlByb3BUeXBlc1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvY29sb3JpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2JyZWFrTG9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NvbmZpZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9hZGRFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vcmVtb3ZlRXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2xpc3Rlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xvcnMvc2FmZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L3BhZC1sZXZlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9lYWNoT2ZMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvb25jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvb25seU9uY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9ub2RlX21vZHVsZXMvaXMtc3RyZWFtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi9jcmVhdGUtbG9nZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi9leGNlcHRpb24taGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb25lLXRpbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YWNrLXRyYWNlL2xpYi9zdGFjay10cmFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vZXhjZXB0aW9uLXN0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vcmVqZWN0aW9uLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RMaWZlY3ljbGVzQ29tcGF0XCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vaHlwaGVuYXRlU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9pc1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvZXNtL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9lc20vaG9vay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJlc3RhcnQvaG9va3MvZXNtL3VzZUNvbW1pdHRlZFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJlc3RhcnQvaG9va3MvZXNtL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzcz8xNjBhIiwid2VicGFjazovLy8uL3NyYy9BcHAuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvbGV2ZWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xvcnMvbGliL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3JzL2xpYi9zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbG9ycy9saWIvc3lzdGVtL3N1cHBvcnRzLWNvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3JzL2xpYi9zeXN0ZW0vaGFzLWZsYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbG9ycy9saWIvY3VzdG9tL3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbG9ycy9saWIvY3VzdG9tL3phbGdvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xvcnMvbGliL21hcHMvYW1lcmljYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3JzL2xpYi9tYXBzL3plYnJhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xvcnMvbGliL21hcHMvcmFpbmJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3JzL2xpYi9tYXBzL3JhbmRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHJpcGxlLWJlYW0vY29uZmlnL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmlwbGUtYmVhbS9jb25maWcvY2xpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmlwbGUtYmVhbS9jb25maWcvbnBtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmlwbGUtYmVhbS9jb25maWcvc3lzbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvYWxpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9jbGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9jb21iaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvbGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9sb2dzdGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvcHJldHR5LXByaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvcHJpbnRmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3Qvc2ltcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3Qvc3BsYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC90aW1lc3RhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZlY2hhL2xpYi9mZWNoYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L3VuY29sb3JpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3RyYW5zcG9ydHMvY29uc29sZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9kaXN0L2xlZ2FjeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vdHJhbnNwb3J0cy9maWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jL3Nlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvcGFyYWxsZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2FzeW5jaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9pbml0aWFsUGFyYW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2VhY2hPZlNlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvZWFjaE9mTGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9nZXRJdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvYXN5bmNFYWNoT2ZMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS16bGliL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS16bGliL2xpYi9iaW5kaW5nLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIk9iamVjdEFzc2lnblwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZGVmbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi90cmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmZhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mdHJlZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYnVmZmVyX2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9hc3luY19pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Zyb20tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BkYWJoL2RpYWdub3N0aWNzL2Jyb3dzZXIvcHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGRhYmgvZGlhZ25vc3RpY3MvZGlhZ25vc3RpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3RhaWwtZmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vdHJhbnNwb3J0cy9odHRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1hcnJheWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWlsdGluLXN0YXR1cy1jb2Rlcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlLWxpYnMtYnJvd3Nlci9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHR0cHMtYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vdHJhbnNwb3J0cy9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMvZWFjaE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC93aXRob3V0SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZuLm5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2xlZ2FjeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vcHJvZmlsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtbDVcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9TYWZlQW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9nLnRzIiwid2VicGFjazovLy8uL3NyYy9waXRjaC9ub3Rlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGl0Y2gvcGl0Y2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvR2VuZXJhdG9yQ29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QaXRjaFJlY29yZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL3RyYW5zaXRpb25FbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9GYWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL3RyaWdnZXJCcm93c2VyUmVmbG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0Nsb3NlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vY3JlYXRlV2l0aEJzUHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0FsZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL2RpdldpdGhDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU3VtbWFyeS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGl0Y2hEZXRlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Sb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQ29sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWFjdCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJlIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJBcnJheSIsInB1c2giLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImtleXMiLCJpbmRleE9mIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsImZvciIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJfX3Byb3RvX18iLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsInVuZGVmaW5lZCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsIm9iaiIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJidWZmZXIiLCJ2YWwiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsInRvU3RyaW5nIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJzdHIiLCJieXRlQXJyYXkiLCJjaGFyQ29kZUF0IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsIk1hdGgiLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImZyb21DaGFyQ29kZSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZ2xvYmFsIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsIm1hdGNoIiwiam9pbiIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZ1R5cGUiLCJpbm5lciIsImRlZmF1bHQiLCJnIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsInJlIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0Vycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiZm4iLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiQ2xhc3MiLCJfY2FjaGUiLCJNYXAiLCJoYXMiLCJXcmFwcGVyIiwiX2NvbnN0cnVjdCIsIl9nZXRQcm90b3R5cGVPZiIsIl9zZXRQcm90b3R5cGVPZiIsIlBhcmVudCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiaW5zdGFuY2UiLCJzaGFtIiwiUHJveHkiLCJEYXRlIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIkludmFsaWRGb3JtYXRFcnJvciIsIl9FcnJvciIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9pbmhlcml0cyIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX3N1cGVyIiwicmVzdWx0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJmb3JtYXRGbiIsIl90aGlzIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJzcGxpdCIsImNhcHR1cmVTdGFja1RyYWNlIiwiRm9ybWF0Iiwib3B0aW9ucyIsImNyZWF0ZUZvcm1hdFdyYXAiLCJvcHRzIiwidHJhbnNmb3JtIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZm9ybWF0UmVnRXhwIiwiZm9ybWF0IiwiZiIsIm9iamVjdHMiLCJKU09OIiwic3RyaW5naWZ5IiwiXyIsImRlcHJlY2F0ZSIsIm1zZyIsIm5vRGVwcmVjYXRpb24iLCJ3YXJuZWQiLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsImNvbnNvbGUiLCJ0cmFjZSIsImVycm9yIiwiZGVidWdFbnZpcm9uIiwiZGVidWdzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImhhc2giLCJmb3JFYWNoIiwiaWR4IiwiYXJyYXlUb0hhc2giLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9ybWF0RXJyb3IiLCJSZWdFeHAiLCJvdXRwdXQiLCJiYXNlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEFycmF5IiwibWFwIiwicG9wIiwicmVkdWNlIiwicHJldiIsImN1ciIsIm51bUxpbmVzRXN0IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJkZXNjIiwibGluZSIsImFyIiwicGFkIiwiZGVidWdsb2ciLCJOT0RFX0RFQlVHIiwidG9VcHBlckNhc2UiLCJ0ZXN0IiwicGlkIiwibW9udGhzIiwidGltZXN0YW1wIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJwcm9wIiwibG9nIiwiaW5oZXJpdHMiLCJvcmlnaW4iLCJhZGQiLCJrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wiLCJjYWxsYmFja2lmeU9uUmVqZWN0ZWQiLCJyZWFzb24iLCJjYiIsIm5ld1JlYXNvbiIsInByb21pc2lmeSIsIm9yaWdpbmFsIiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyIiwiZGVmaW5lUHJvcGVydGllcyIsImN1c3RvbSIsImNhbGxiYWNraWZ5IiwiY2FsbGJhY2tpZmllZCIsIm1heWJlQ2IiLCJ0aGVuIiwicmVqIiwiVGltZW91dCIsImlkIiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiaXRlbSIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJzZXRJbW1lZGlhdGUiLCJjbGVhckltbWVkaWF0ZSIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk51bWJlcklzTmFOIiwiRXZlbnRFbWl0dGVyIiwiaW5pdCIsImVtaXR0ZXIiLCJldmVudExpc3RlbmVyIiwiZXJyb3JMaXN0ZW5lciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJfYWRkTGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0IiwidyIsImNvdW50Iiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50Iiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwibWVzc2FnZSIsImNvbnRleHQiLCJoYW5kbGVyIiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInNwbGljZU9uZSIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJTdHJpbmdEZWNvZGVyIiwibmIiLCJlbmMiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidGV4dCIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwidXRpbCIsIldyaXRhYmxlIiwiTEVWRUwiLCJUcmFuc3BvcnRTdHJlYW0iLCJvYmplY3RNb2RlIiwiaGlnaFdhdGVyTWFyayIsImxldmVsIiwiaGFuZGxlRXhjZXB0aW9ucyIsImhhbmRsZVJlamVjdGlvbnMiLCJzaWxlbnQiLCJsb2d2IiwibG9nZ2VyIiwibGV2ZWxzIiwicGFyZW50IiwiX3dyaXRlIiwiaW5mbyIsImNhbGxiYWNrIiwiZXhjZXB0aW9uIiwiZXJyU3RhdGUiLCJ0cmFuc2Zvcm1lZCIsIl93cml0ZXYiLCJjaHVua3MiLCJpbmZvcyIsImZpbHRlciIsIl9hY2NlcHQiLCJjaHVuayIsIl9ub3AiLCJMZWdhY3lUcmFuc3BvcnRTdHJlYW0iLCJwbmEiLCJvYmplY3RLZXlzIiwiRHVwbGV4IiwiUmVhZGFibGUiLCJ2IiwibWV0aG9kIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsIl9yZWFkYWJsZVN0YXRlIiwiZGVzdHJveWVkIiwiX2Rlc3Ryb3kiLCJsb2dmb3JtIiwid2luc3RvbiIsInRyYW5zcG9ydHMiLCJjb25maWciLCJhZGRDb2xvcnMiLCJjcmVhdGVMb2dnZXIiLCJFeGNlcHRpb25IYW5kbGVyIiwiUmVqZWN0aW9uSGFuZGxlciIsIkNvbnRhaW5lciIsIlRyYW5zcG9ydCIsImxvZ2dlcnMiLCJkZWZhdWx0TG9nZ2VyIiwibnBtIiwiZXhjZXB0aW9ucyIsImV4Y2VwdGlvbkhhbmRsZXJzIiwicmVqZWN0aW9uSGFuZGxlcnMiLCJkZXByZWNhdGVkIiwiZm9yRnVuY3Rpb25zIiwiZm9yUHJvcGVydGllcyIsIm1vdmVkIiwiZW5kaWFubmVzcyIsImhvc3RuYW1lIiwibG9jYXRpb24iLCJsb2FkYXZnIiwidXB0aW1lIiwiZnJlZW1lbSIsIk1BWF9WQUxVRSIsInRvdGFsbWVtIiwiY3B1cyIsInJlbGVhc2UiLCJuYXZpZ2F0b3IiLCJhcHBWZXJzaW9uIiwibmV0d29ya0ludGVyZmFjZXMiLCJnZXROZXR3b3JrSW50ZXJmYWNlcyIsImFyY2giLCJwbGF0Zm9ybSIsInRtcGRpciIsInRtcERpciIsIkVPTCIsImhvbWVkaXIiLCJpc0FzeW5jSXRlcmFibGUiLCJpc0FzeW5jR2VuZXJhdG9yIiwiaXNBc3luYyIsIl9hc3luY2lmeSIsIl9hc3luY2lmeTIiLCJhc3luY0ZuIiwiYXN5bmNJdGVyYXRvciIsImNvZGVzIiwiY3JlYXRlRXJyb3JUeXBlIiwiQmFzZSIsIk5vZGVFcnJvciIsIl9CYXNlIiwiZ2V0TWVzc2FnZSIsIm9uZU9mIiwiZXhwZWN0ZWQiLCJ0aGluZyIsImRldGVybWluZXIiLCJzZWFyY2giLCJ0aGlzX2xlbiIsInN1YnN0cmluZyIsImVuZHNXaXRoIiwiZ2V0QnVmZmVyIiwiUmVhY3RET00iLCJhcml0eSIsImNiQXJncyIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsIlBhc3NUaHJvdWdoIiwiZmluaXNoZWQiLCJwaXBlbGluZSIsInN0YWJsZSIsImRldGVybWluaXN0aWNTdHJpbmdpZnkiLCJzdGFibGVTdHJpbmdpZnkiLCJyZXBsYWNlclN0YWNrIiwicmVwbGFjZXIiLCJzcGFjZXIiLCJkZWNpcmMiLCJrIiwic3RhY2siLCJwcm9wZXJ0eURlc2NyaXB0b3IiLCJyZXBsYWNlR2V0dGVyVmFsdWVzIiwicGFydCIsImNvbXBhcmVGdW5jdGlvbiIsInRtcCIsImRldGVybWluaXN0aWNEZWNpcmMiLCJzb3J0Iiwic3BsaWNlIiwibG9jYWxTdG9yYWdlIiwiVFlQRURfT0siLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJfaGFzIiwic291cmNlcyIsInNocmlua0J1ZiIsImZuVHlwZWQiLCJhcnJheVNldCIsImRlc3QiLCJzcmNfb2ZmcyIsImRlc3Rfb2ZmcyIsImZsYXR0ZW5DaHVua3MiLCJmblVudHlwZWQiLCJzZXRUeXBlZCIsIkJ1ZjgiLCJCdWYxNiIsIkJ1ZjMyIiwiX2luaGVyaXRzTG9vc2UiLCJQcm9wVHlwZXMiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsIl9yZXF1aXJlIiwiTUVTU0FHRSIsImVuYWJsZWQiLCJoYXNTcGFjZSIsIkNvbG9yaXplciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImNscnMiLCJuZXh0Q29sb3JzIiwiYWNjIiwiYWxsQ29sb3JzIiwibG9va3VwIiwiYWxsIiwiY29sb3JpemUiLCJjb3B5UHJvcHMiLCJTYWZlQnVmZmVyIiwiQ29ya2VkUmVxdWVzdCIsIm5leHQiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJwZW5kaW5nY2IiLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJvbkNvcmtlZEZpbmlzaCIsImFzeW5jV3JpdGUiLCJXcml0YWJsZVN0YXRlIiwiaW50ZXJuYWxVdGlsIiwiT3VyVWludDhBcnJheSIsInJlYWxIYXNJbnN0YW5jZSIsImRlc3Ryb3lJbXBsIiwibm9wIiwic3RyZWFtIiwiaXNEdXBsZXgiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsImRlZmF1bHRFbmNvZGluZyIsIndyaXRpbmciLCJjb3JrZWQiLCJzeW5jIiwiYnVmZmVyUHJvY2Vzc2luZyIsIm9ud3JpdGUiLCJ3cml0ZWNiIiwid3JpdGVsZW4iLCJvbndyaXRlU3RhdGVVcGRhdGUiLCJmaW5pc2hNYXliZSIsImVycm9yRW1pdHRlZCIsIm9ud3JpdGVFcnJvciIsIm5lZWRGaW5pc2giLCJidWZmZXJlZFJlcXVlc3QiLCJjbGVhckJ1ZmZlciIsImFmdGVyV3JpdGUiLCJsYXN0QnVmZmVyZWRSZXF1ZXN0IiwicHJlZmluaXNoZWQiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsIndyaXRldiIsImRlc3Ryb3kiLCJmaW5hbCIsIl9maW5hbCIsImRvV3JpdGUiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiY3VycmVudCIsImhhc0luc3RhbmNlIiwicGlwZSIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWQiLCJ2YWxpZENodW5rIiwibmV3Q2h1bmsiLCJkZWNvZGVDaHVuayIsImxhc3QiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFIiwiZW9zIiwiY2FsbGVkIiwiX2xlbiIsIl9rZXkiLCJvbmxlZ2FjeWZpbmlzaCIsIm9uZmluaXNoIiwid3JpdGFibGVFbmRlZCIsInJlYWRhYmxlRW5kZWQiLCJlbmRFbWl0dGVkIiwib25lcnJvciIsIm9uY2xvc2UiLCJvbnJlcXVlc3QiLCJyZXEiLCJzZXRIZWFkZXIiLCJhYm9ydCIsImlzUmVxdWVzdCIsImNvbmZpZ3MiLCJjbGkiLCJzeXNsb2ciLCJfZWFjaE9mMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfd2l0aG91dEluZGV4MiIsIl93cmFwQXN5bmMyIiwiX2F3YWl0aWZ5MiIsImNvbGwiLCJpdGVyYXRlZSIsImNvbmRpdGlvbiIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJvcHRpb25zU3VwcG9ydGVkIiwib25jZVN1cHBvcnRlZCIsImNhblVzZURPTSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibm9kZSIsImV2ZW50TmFtZSIsImNhcHR1cmUiLCJ3cmFwcGVkSGFuZGxlciIsIl9fb25jZSIsIm9uY2VIYW5kbGVyIiwiZXZlbnQiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJkb2N1bWVudCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJhcnIyIiwiUGFkZGVyIiwicGFkZGluZ3MiLCJwYWRkaW5nRm9yTGV2ZWxzIiwiZmlsbGVyIiwibHZscyIsIm1heExlbmd0aCIsInRhcmdldExlbiIsInJlcCIsInJlcGVhdCIsImdldExvbmdlc3RMZXZlbCIsInBhZGRpbmdGb3JMZXZlbCIsInVzZUZvcm1hdCIsIm1vdmVkVG8iLCJtb3ZlZE5vdGljZSIsIm5vdGljZSIsImVtaXRFcnJvck5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsInJlYWRpbmciLCJfZWFjaE9mTGltaXQzIiwid3JhcHBlciIsImNhbGxGbiIsIlJlYWRhYmxlU3RhdGUiLCJFRWxpc3RlbmVyQ291bnQiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJvbkVvZkNodW5rIiwiY2h1bmtJbnZhbGlkIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImhvd011Y2hUb1JlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibWF5YmVSZWFkTW9yZV8iLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0IiwiY2xlYXIiLCJoYXNTdHJpbmdzIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmRyYWluIiwib25kYXRhIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJpbmNyZWFzZWRBd2FpdERyYWluIiwicGF1c2UiLCJyZXN1bWUiLCJkZXN0cyIsImV2Iiwid3JhcCIsInBhdXNlZCIsIl9mcm9tTGlzdCIsImFmdGVyVHJhbnNmb3JtIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNodW5rIiwicnMiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsIl90cmFuc2Zvcm0iLCJmbHVzaCIsIl9mbHVzaCIsImRvbmUiLCJfdGhpczIiLCJlcnIyIiwib2JqZWN0QXNzaWduIiwicFNsaWNlIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwicFRvU3RyaW5nIiwiYXJyYnVmIiwiRGF0YVZpZXciLCJhc3NlcnQiLCJvayIsInJlZ2V4IiwiZ2V0TmFtZSIsImZ1bmMiLCJ0cnVuY2F0ZSIsInNvbWV0aGluZyIsInJhd25hbWUiLCJmYWlsIiwib3BlcmF0b3IiLCJzdGFja1N0YXJ0RnVuY3Rpb24iLCJBc3NlcnRpb25FcnJvciIsIl9kZWVwRXF1YWwiLCJzdHJpY3QiLCJtZW1vcyIsImdldFRpbWUiLCJtdWx0aWxpbmUiLCJsYXN0SW5kZXgiLCJpZ25vcmVDYXNlIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYWN0dWFsSW5kZXgiLCJhY3R1YWxWaXNpdGVkT2JqZWN0cyIsImFJc0FyZ3MiLCJpc0FyZ3VtZW50cyIsImJJc0FyZ3MiLCJrYSIsImtiIiwib2JqRXF1aXYiLCJleHBlY3RlZEV4Y2VwdGlvbiIsImlzUHJvdG90eXBlT2YiLCJfdGhyb3dzIiwic2hvdWxkVGhyb3ciLCJibG9jayIsIl90cnlCbG9jayIsInVzZXJQcm92aWRlZE1lc3NhZ2UiLCJpc1VuZXhwZWN0ZWRFeGNlcHRpb24iLCJnZW5lcmF0ZWRNZXNzYWdlIiwiZm5fbmFtZSIsIm5leHRfbGluZSIsImVxdWFsIiwibm90RXF1YWwiLCJkZWVwRXF1YWwiLCJkZWVwU3RyaWN0RXF1YWwiLCJub3REZWVwRXF1YWwiLCJub3REZWVwU3RyaWN0RXF1YWwiLCJzdHJpY3RFcXVhbCIsIm5vdFN0cmljdEVxdWFsIiwidGhyb3dzIiwiZG9lc05vdFRocm93IiwiaWZFcnJvciIsImFkbGVyIiwiczEiLCJzMiIsImNyY1RhYmxlIiwidGFibGUiLCJtYWtlVGFibGUiLCJjcmMiLCJjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IiLCJnZXRIaWdoV2F0ZXJNYXJrIiwiX3JlcXVpcmUkY29kZXMiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YiLCJFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCIsIkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQiLCJlcnJvck9yRGVzdHJveSIsImVtaXRDbG9zZSIsImF1dG9EZXN0cm95IiwiY29udGVudCIsInVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nIiwiZmlyc3QiLCJjb25zdW1lIiwid1N0YXRlIiwiaXRlcmFibGUiLCJlbWl0RXJyb3JBbmRDbG9zZU5UIiwiZW1pdENsb3NlTlQiLCJyU3RhdGUiLCJFUlJfSU5WQUxJRF9PUFRfVkFMVUUiLCJkdXBsZXhLZXkiLCJoaWdoV2F0ZXJNYXJrRnJvbSIsIkVSUl9NVUxUSVBMRV9DQUxMQkFDSyIsIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUiLCJFUlJfU1RSRUFNX0RFU1RST1lFRCIsIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMiLCJFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCIsIkVSUl9VTktOT1dOX0VOQ09ESU5HIiwiRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyIsIkVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCIsInJlc3BvbnNlIiwiZXh0ZW5kIiwic3RhdHVzQ29kZXMiLCJ1cmwiLCJodHRwIiwicmVxdWVzdCIsInBhcnNlIiwiZGVmYXVsdFByb3RvY29sIiwicHJvdG9jb2wiLCJob3N0IiwicG9ydCIsInBhdGgiLCJoZWFkZXJzIiwiQ2xpZW50UmVxdWVzdCIsIkluY29taW5nTWVzc2FnZSIsIkFnZW50IiwiZGVmYXVsdE1heFNvY2tldHMiLCJnbG9iYWxBZ2VudCIsIlNUQVRVU19DT0RFUyIsIk1FVEhPRFMiLCJ3cml0YWJsZVN0cmVhbSIsIldyaXRhYmxlU3RyZWFtIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYmxvYkNvbnN0cnVjdG9yIiwiQmxvYiIsInhociIsImdldFhIUiIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiY2hlY2tUeXBlU3VwcG9ydCIsInJlc3BvbnNlVHlwZSIsImhhdmVBcnJheUJ1ZmZlciIsImhhdmVTbGljZSIsImFycmF5YnVmZmVyIiwiZmV0Y2giLCJtc3N0cmVhbSIsIm1vemNodW5rZWRhcnJheWJ1ZmZlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJ2YkFycmF5IiwiVkJBcnJheSIsInJTdGF0ZXMiLCJyZWFkeVN0YXRlcyIsIlVOU0VOVCIsIk9QRU5FRCIsIkhFQURFUlNfUkVDRUlWRUQiLCJMT0FESU5HIiwiRE9ORSIsImZldGNoVGltZXIiLCJfbW9kZSIsInJhd0hlYWRlcnMiLCJ0cmFpbGVycyIsInJhd1RyYWlsZXJzIiwiX2ZldGNoUmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJoZWFkZXIiLCJjYXBhYmlsaXR5IiwiX2Rlc3Ryb3llZCIsIl9yZXN1bWVGZXRjaCIsImJvZHkiLCJwaXBlVG8iLCJjYXRjaCIsInJlYWRlciIsImdldFJlYWRlciIsIl94aHIiLCJfcG9zIiwicmVzcG9uc2VVUkwiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJtYXRjaGVzIiwiX2NoYXJzZXQiLCJtaW1lVHlwZSIsImNoYXJzZXRNYXRjaCIsIl9vblhIUlByb2dyZXNzIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlQm9keSIsInRvQXJyYXkiLCJyZXNwb25zZVRleHQiLCJuZXdEYXRhIiwiTVNTdHJlYW1SZWFkZXIiLCJvbnByb2dyZXNzIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJwdW55Y29kZSIsIlVybCIsInNsYXNoZXMiLCJhdXRoIiwicXVlcnkiLCJwYXRobmFtZSIsImhyZWYiLCJ1cmxQYXJzZSIsInJlbGF0aXZlIiwicmVzb2x2ZU9iamVjdCIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicXVlcnlzdHJpbmciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJ1IiwicXVlcnlJbmRleCIsInNwbGl0dGVyIiwidVNwbGl0IiwicmVzdCIsInNpbXBsZVBhdGgiLCJleGVjIiwicHJvdG8iLCJsb3dlclByb3RvIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsInRvQVNDSUkiLCJoIiwiYWUiLCJlc2MiLCJlc2NhcGUiLCJxbSIsImNoYXJBdCIsInJlbCIsInRrZXlzIiwidGsiLCJ0a2V5IiwicmtleXMiLCJyayIsInJrZXkiLCJyZWxQYXRoIiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsImF1dGhJbkhvc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0Fic29sdXRlIiwiaXNTdHJlYW0iLCJkdXBsZXgiLCJfY3JlYXRlU3VwZXIiLCJMb2dnZXIiLCJpc0xldmVsRW5hYmxlZEZ1bmN0aW9uTmFtZSIsIkRlcml2ZWRMb2dnZXIiLCJfTG9nZ2VyIiwiX2FkZERlZmF1bHRNZXRhIiwiaXNMZXZlbEVuYWJsZWQiLCJvcyIsImFzeW5jRm9yRWFjaCIsInN0YWNrVHJhY2UiLCJFeGNlcHRpb25TdHJlYW0iLCJoYW5kbGVycyIsIl9hZGRIYW5kbGVyIiwiY2F0Y2hlciIsIl91bmNhdWdodEV4Y2VwdGlvbiIsInZhbHVlcyIsImRhdGUiLCJnZXRQcm9jZXNzSW5mbyIsImdldE9zSW5mbyIsImdldFRyYWNlIiwidWlkIiwiZ2V0dWlkIiwiZ2lkIiwiZ2V0Z2lkIiwiZXhlY1BhdGgiLCJtZW1vcnlVc2FnZSIsInNpdGUiLCJjb2x1bW4iLCJnZXRDb2x1bW5OdW1iZXIiLCJmaWxlIiwiZ2V0RmlsZU5hbWUiLCJnZXRGdW5jdGlvbk5hbWUiLCJnZXRMaW5lTnVtYmVyIiwiZ2V0TWV0aG9kTmFtZSIsImlzTmF0aXZlIiwiZ2V0QWxsSW5mbyIsIl9nZXRFeGNlcHRpb25IYW5kbGVycyIsImRvRXhpdCIsImV4aXRPbkVycm9yIiwiZ3JhY2VmdWxFeGl0IiwiX2V4aXRpbmciLCJleGl0IiwidHJhbnNwb3J0Iiwib25Eb25lIiwiX2VuZGluZyIsIm9uZXRpbWUiLCJkaXNwbGF5TmFtZSIsIkNhbGxTaXRlIiwicHJvcGVydGllcyIsImJlbG93Rm4iLCJvbGRMaW1pdCIsInN0YWNrVHJhY2VMaW1pdCIsImR1bW15T2JqZWN0IiwidjhIYW5kbGVyIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJ2OFN0YWNrVHJhY2UiLCJfY3JlYXRlUGFyc2VkQ2FsbFNpdGUiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJmdW5jdGlvbk5hbWUiLCJ0eXBlTmFtZSIsIm1ldGhvZE5hbWUiLCJjb2x1bW5OdW1iZXIiLCJsaW5lTWF0Y2giLCJtZXRob2RTdGFydCIsIm9iamVjdEVuZCIsImNhbGxTaXRlIiwiX1dyaXRhYmxlIiwiX3VuaGFuZGxlZFJlamVjdGlvbiIsIl9nZXRSZWplY3Rpb25IYW5kbGVycyIsInJlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsIm93bmVyRG9jdW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwicHN1ZWRvRWxlbWVudCIsImRvYyIsImRlZmF1bHRWaWV3Iiwib3duZXJXaW5kb3ciLCJyVXBwZXIiLCJtc1BhdHRlcm4iLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJoeXBoZW5hdGUiLCJzdXBwb3J0ZWRUcmFuc2Zvcm1zIiwidHJhbnNmb3JtcyIsImdldFByb3BlcnR5VmFsdWUiLCJpc1RyYW5zZm9ybSIsInJlbW92ZVByb3BlcnR5IiwiZGVmYXVsdEtleSIsIl90b1Byb3BlcnR5S2V5IiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwiX3RvUHJpbWl0aXZlIiwidXNlVW5jb250cm9sbGVkIiwiZmllbGROYW1lIiwiX2V4dGVuZHMyIiwiX3JlZiIsImRlZmF1bHRWYWx1ZSIsInByb3BzVmFsdWUiLCJoYW5kbGVyTmFtZSIsIl91c2VVbmNvbnRyb2xsZWRQcm9wIiwicHJvcFZhbHVlIiwid2FzUHJvcFJlZiIsIl91c2VTdGF0ZSIsInN0YXRlVmFsdWUiLCJzZXRTdGF0ZSIsImlzUHJvcCIsIndhc1Byb3AiLCJ1c2VVbmNvbnRyb2xsZWRQcm9wIiwidXNlRXZlbnRDYWxsYmFjayIsImFwaSIsImxvY2FscyIsInRoZW1lcyIsImFuc2lTdHlsZXMiLCJkZWZpbmVQcm9wcyIsIm5ld0xpbmVSZWdleCIsInN1cHBvcnRzQ29sb3IiLCJlbmFibGUiLCJkaXNhYmxlIiwic3RyaXBDb2xvcnMiLCJzdHJpcCIsInN0eWxlTWFwIiwibWF0Y2hPcGVyYXRvcnNSZSIsImJ1aWxkIiwiX3N0eWxlcyIsImJ1aWxkZXIiLCJhcHBseVN0eWxlIiwiZ3JleSIsImdyYXkiLCJjbG9zZVJlIiwiZXNjYXBlU3RyaW5nUmVnZXhwIiwibmV3TGluZXNQcmVzZW50IiwibmVzdGVkU3R5bGVzIiwic2V0VGhlbWUiLCJ0aGVtZSIsInNlcXVlbmNlciIsImV4cGxvZGVkIiwidHJhcCIsInphbGdvIiwibWFwcyIsImFtZXJpY2EiLCJ6ZWJyYSIsInJhaW5ib3ciLCJyYW5kb20iLCJyZXNldCIsImJvbGQiLCJkaW0iLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJpbnZlcnNlIiwiaGlkZGVuIiwic3RyaWtldGhyb3VnaCIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJ3aGl0ZSIsImJyaWdodFJlZCIsImJyaWdodEdyZWVuIiwiYnJpZ2h0WWVsbG93IiwiYnJpZ2h0Qmx1ZSIsImJyaWdodE1hZ2VudGEiLCJicmlnaHRDeWFuIiwiYnJpZ2h0V2hpdGUiLCJiZ0JsYWNrIiwiYmdSZWQiLCJiZ0dyZWVuIiwiYmdZZWxsb3ciLCJiZ0JsdWUiLCJiZ01hZ2VudGEiLCJiZ0N5YW4iLCJiZ1doaXRlIiwiYmdHcmF5IiwiYmdHcmV5IiwiYmdCcmlnaHRSZWQiLCJiZ0JyaWdodEdyZWVuIiwiYmdCcmlnaHRZZWxsb3ciLCJiZ0JyaWdodEJsdWUiLCJiZ0JyaWdodE1hZ2VudGEiLCJiZ0JyaWdodEN5YW4iLCJiZ0JyaWdodFdoaXRlIiwiYmxhY2tCRyIsInJlZEJHIiwiZ3JlZW5CRyIsInllbGxvd0JHIiwiYmx1ZUJHIiwibWFnZW50YUJHIiwiY3lhbkJHIiwid2hpdGVCRyIsImhhc0ZsYWciLCJmb3JjZUNvbG9yIiwiZ2V0U3VwcG9ydExldmVsIiwiaGFzQmFzaWMiLCJoYXMyNTYiLCJoYXMxNm0iLCJ0cmFuc2xhdGVMZXZlbCIsImlzVFRZIiwib3NSZWxlYXNlIiwic29tZSIsInNpZ24iLCJDSV9OQU1FIiwiVEVBTUNJVFlfVkVSU0lPTiIsIlRFUk1fUFJPR1JBTV9WRVJTSU9OIiwiVEVSTV9QUk9HUkFNIiwiVEVSTSIsIkZPUkNFX0NPTE9SIiwiZmxhZyIsInRlcm1pbmF0b3JQb3MiLCJwcmVmaXgiLCJxIiwieiIsImNoYXJzIiwicmFuZCIsInNvdWwiLCJkb3duIiwibWlkIiwicmFuZG9tTnVtYmVyIiwicmFuZ2UiLCJpc0NoYXIiLCJjaGFyYWN0ZXIiLCJib29sIiwiY291bnRzIiwiaGVDb21lcyIsImxldHRlciIsInJhaW5ib3dDb2xvcnMiLCJhdmFpbGFibGUiLCJyb3VuZCIsImhlbHAiLCJwcm9tcHQiLCJ2ZXJib3NlIiwic2lsbHkiLCJlbWVyZyIsImFsZXJ0IiwiY3JpdCIsIl9yZXF1aXJlMyIsIkNsaUZvcm1hdCIsImNvbG9yaXplciIsInBhZGRlciIsImNhc2NhZGUiLCJmb3JtYXRzIiwiZXZlcnkiLCJpc1ZhbGlkRm9ybWF0IiwiZm10IiwiY29tYmluZWRGb3JtYXQiLCJqc29uU3RyaW5naWZ5Iiwic3BhY2UiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJudW0iLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiYWJzIiwiTE4yIiwibGFiZWwiLCJsb2dzdGFzaCIsImZpbGxFeGNlcHQiLCJmaWxsRXhjZXB0S2V5cyIsIm1ldGFkYXRhS2V5Iiwic2F2ZWRLZXlzIiwibWV0YWRhdGEiLCJmaWxsV2l0aCIsImZpbGxXaXRoS2V5cyIsIlNQTEFUIiwic3RyaXBwZWQiLCJQcmludGYiLCJ0ZW1wbGF0ZUZuIiwidGVtcGxhdGUiLCJzdHJpbmdpZmllZFJlc3QiLCJzcGxhdCIsInBhZGRpbmciLCJlc2NhcGVkUGVyY2VudCIsIlNwbGF0dGVyIiwidG9rZW5zIiwicGVyY2VudHMiLCJlc2NhcGVzIiwiZXh0cmFTcGxhdCIsIm1ldGFzIiwibWV0YWxlbiIsIl9zcGxhdCIsImZlY2hhIiwidG9JU09TdHJpbmciLCJhbGlhcyIsInRva2VuIiwid29yZCIsImxpdGVyYWwiLCJzaG9ydGVuIiwic0xlbiIsIm5ld0FyciIsIm1vbnRoVXBkYXRlIiwiYXJyTmFtZSIsImkxOG4iLCJvcmlnT2JqIiwiX2EiLCJhcmdzXzEiLCJkYXlOYW1lcyIsIm1vbnRoTmFtZXMiLCJtb250aE5hbWVzU2hvcnQiLCJkZWZhdWx0STE4biIsImRheU5hbWVzU2hvcnQiLCJhbVBtIiwiRG9GbiIsImRheU9mTW9udGgiLCJnbG9iYWxJMThuIiwic2V0R2xvYmFsRGF0ZUkxOG4iLCJyZWdleEVzY2FwZSIsImZvcm1hdEZsYWdzIiwiRCIsImRhdGVPYmoiLCJERCIsIkRvIiwiZ2V0RGF5IiwiZGQiLCJkZGQiLCJkZGRkIiwiTSIsIk1NIiwiTU1NIiwiTU1NTSIsIllZIiwiZ2V0RnVsbFllYXIiLCJZWVlZIiwiaGgiLCJIIiwiSEgiLCJtbSIsInNzIiwiUyIsImdldE1pbGxpc2Vjb25kcyIsIlNTIiwiU1NTIiwiQSIsIlpaIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJaIiwibW9udGhQYXJzZSIsImVtcHR5RGlnaXRzIiwiZW1wdHlXb3JkIiwidGltZXpvbmVPZmZzZXQiLCJtaW51dGVzIiwicGFyc2VGbGFncyIsImNlbnQiLCJnbG9iYWxNYXNrcyIsInNob3J0RGF0ZSIsIm1lZGl1bURhdGUiLCJsb25nRGF0ZSIsImZ1bGxEYXRlIiwiaXNvRGF0ZSIsImlzb0RhdGVUaW1lIiwic2hvcnRUaW1lIiwibWVkaXVtVGltZSIsImxvbmdUaW1lIiwic2V0R2xvYmFsRGF0ZU1hc2tzIiwibWFza3MiLCJtYXNrIiwibGl0ZXJhbHMiLCIkMCIsIiQxIiwiY29tYmluZWRJMThuU2V0dGluZ3MiLCJkYXRlU3RyIiwiZGF0ZUluZm8iLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJpc1BtIiwicGFyc2VJbmZvIiwibmV3Rm9ybWF0Iiwic3BlY2lmaWVkRmllbGRzIiwicmVxdWlyZWRGaWVsZHMiLCJmaWVsZCIsInJlcXVpcmVkRmllbGQiLCJwYXJzZXIiLCJkYXRlV2l0aG91dFRaIiwidmFsaWRhdGVGaWVsZHMiLCJVVEMiLCJyYXciLCJfVHJhbnNwb3J0U3RyZWFtIiwiQ29uc29sZSIsInN0ZGVyckxldmVscyIsIl9zdHJpbmdBcnJheVRvU2V0IiwiY29uc29sZVdhcm5MZXZlbHMiLCJlb2wiLCJfc3RkZXJyIiwiX3N0ZG91dCIsInN0ckFycmF5IiwiZXJyTXNnIiwiZWwiLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJhdHRhY2hFdmVudCIsInRhc2siLCJ0cmFuc3BvcnRFcnJvciIsIl9kZXByZWNhdGVkIiwiX193aW5zdG9uRXJyb3IiLCJmcyIsImFzeW5jU2VyaWVzIiwiemxpYiIsIl9yZXF1aXJlMiIsInRhaWxGaWxlIiwiRmlsZSIsInRocm93SWYiLCJfc3RyZWFtIiwiX29uRXJyb3IiLCJmaWxlbmFtZSIsImRpcm5hbWUiLCJfYmFzZW5hbWUiLCJiYXNlbmFtZSIsImZsYWdzIiwiX2Rlc3QiLCJfc2V0dXBTdHJlYW0iLCJtYXhzaXplIiwicm90YXRpb25Gb3JtYXQiLCJ6aXBwZWRBcmNoaXZlIiwibWF4RmlsZXMiLCJ0YWlsYWJsZSIsIl9zaXplIiwiX3BlbmRpbmdTaXplIiwiX2NyZWF0ZWQiLCJfZHJhaW4iLCJfb3BlbmluZyIsIl9jcmVhdGVMb2dEaXJJZk5vdEV4aXN0IiwiX3RoaXMzIiwiX3JvdGF0ZSIsInJvdGF0ZWRXaGlsZU9wZW5pbmciLCJfbmVlZHNOZXdGaWxlIiwid3JpdHRlbiIsImxvZ2dlZCIsImZpbmlzaElmRW5kaW5nIiwiX3RoaXM0IiwiX2VuZFN0cmVhbSIsIl9yb3RhdGVGaWxlIiwicm93cyIsInVudGlsIiwib3JkZXIiLCJub3JtYWxpemVRdWVyeSIsImJ1ZmYiLCJyZXN1bHRzIiwicm93IiwiY3JlYXRlUmVhZFN0cmVhbSIsImF0dGVtcHQiLCJjaGVjayIsImZpZWxkcyIsInJldmVyc2UiLCJfdGhpczUiLCJzdGF0IiwiX2NyZWF0ZVN0cmVhbSIsIl90aGlzNiIsIl9nZXRGaWxlIiwiZnVsbHBhdGgiLCJfaW5jRmlsZSIsIl90aGlzNyIsIl90aGlzOCIsIl90aGlzOSIsIl9jbGVhbnVwU3RyZWFtIiwiX3RoaXMxMCIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiYnl0ZXNXcml0dGVuIiwiZ3ppcCIsImNyZWF0ZUd6aXAiLCJleHRuYW1lIiwiX2NoZWNrTWF4RmlsZXNUYWlsYWJsZSIsIl9jaGVja01heEZpbGVzSW5jcmVtZW50aW5nIiwiaXNSb3RhdGlvbiIsIm9sZGVzdCIsImlzT2xkZXN0IiwiaXNaaXBwZWQiLCJmaWxlUGF0aCIsInVubGluayIsIl90aGlzMTIiLCJ0YXNrcyIsIl90aGlzMTEiLCJ0bXBwYXRoIiwiZXhpc3RzIiwicmVuYW1lIiwiZGlyUGF0aCIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJyZWN1cnNpdmUiLCJub3JtYWxpemVBcnJheSIsImFsbG93QWJvdmVSb290IiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsIm5vcm1hbGl6ZSIsInRyYWlsaW5nU2xhc2giLCJwYXRocyIsInRvIiwiZnJvbVBhcnRzIiwidG9QYXJ0cyIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwic2VwIiwiZGVsaW1pdGVyIiwiaGFzUm9vdCIsIm1hdGNoZWRTbGFzaCIsInN0YXJ0RG90Iiwic3RhcnRQYXJ0IiwicHJlRG90U3RhdGUiLCJfcGFyYWxsZWwzIiwiX2VhY2hPZlNlcmllczIiLCJfaXNBcnJheUxpa2UyIiwiZWFjaGZuIiwidGFza0NiIiwiX3dyYXBBc3luYyIsImhhbmRsZVByb21pc2UiLCJfaW5pdGlhbFBhcmFtczIiLCJfc2V0SW1tZWRpYXRlMiIsImludm9rZUNhbGxiYWNrIiwiZmFsbGJhY2siLCJfZGVmZXIiLCJoYXNTZXRJbW1lZGlhdGUiLCJoYXNOZXh0VGljayIsImRlZmVyIiwiX2VhY2hPZkxpbWl0MiIsIl9vbmNlMiIsIl9pdGVyYXRvcjIiLCJfb25seU9uY2UyIiwiX2FzeW5jRWFjaE9mTGltaXQyIiwiX2JyZWFrTG9vcDIiLCJuZXh0RWxlbSIsImNhbmNlbGVkIiwicnVubmluZyIsImxvb3BpbmciLCJpdGVyYXRlZUNhbGxiYWNrIiwicmVwbGVuaXNoIiwiZWxlbSIsImNyZWF0ZUFycmF5SXRlcmF0b3IiLCJfZ2V0SXRlcmF0b3IyIiwiY3JlYXRlRVMyMDE1SXRlcmF0b3IiLCJva2V5cyIsImdlbmVyYXRvciIsImF3YWl0aW5nIiwiaXRlckRvbmUiLCJoYW5kbGVFcnJvciIsIl9icmVha0xvb3AiLCJrUmFuZ2VFcnJvck1lc3NhZ2UiLCJaX01JTl9XSU5ET1dCSVRTIiwiWl9NQVhfV0lORE9XQklUUyIsIlpfREVGQVVMVF9XSU5ET1dCSVRTIiwiWl9NSU5fQ0hVTksiLCJaX01BWF9DSFVOSyIsIlpfREVGQVVMVF9DSFVOSyIsIlpfTUlOX01FTUxFVkVMIiwiWl9NQVhfTUVNTEVWRUwiLCJaX0RFRkFVTFRfTUVNTEVWRUwiLCJaX01JTl9MRVZFTCIsIlpfTUFYX0xFVkVMIiwiWl9ERUZBVUxUX0xFVkVMIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiYmtleXMiLCJiayIsImJrZXkiLCJaX09LIiwiWl9TVFJFQU1fRU5EIiwiWl9ORUVEX0RJQ1QiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX01FTV9FUlJPUiIsIlpfQlVGX0VSUk9SIiwiWl9WRVJTSU9OX0VSUk9SIiwiY2tleXMiLCJjayIsImNrZXkiLCJ6bGliQnVmZmVyIiwiZW5naW5lIiwiYnVmZmVycyIsIm5yZWFkIiwib25FbmQiLCJ6bGliQnVmZmVyU3luYyIsImZsdXNoRmxhZyIsIl9maW5pc2hGbHVzaEZsYWciLCJfcHJvY2Vzc0NodW5rIiwiRGVmbGF0ZSIsIlpsaWIiLCJERUZMQVRFIiwiSW5mbGF0ZSIsIklORkxBVEUiLCJHemlwIiwiR1pJUCIsIkd1bnppcCIsIkdVTlpJUCIsIkRlZmxhdGVSYXciLCJERUZMQVRFUkFXIiwiSW5mbGF0ZVJhdyIsIklORkxBVEVSQVciLCJVbnppcCIsIlVOWklQIiwiaXNWYWxpZEZsdXNoRmxhZyIsIlpfTk9fRkxVU0giLCJaX1BBUlRJQUxfRkxVU0giLCJaX1NZTkNfRkxVU0giLCJaX0ZVTExfRkxVU0giLCJaX0ZJTklTSCIsIlpfQkxPQ0siLCJfb3B0cyIsIl9jaHVua1NpemUiLCJjaHVua1NpemUiLCJmaW5pc2hGbHVzaCIsIl9mbHVzaEZsYWciLCJ3aW5kb3dCaXRzIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsImRpY3Rpb25hcnkiLCJfaGFuZGxlIiwiX2hhZEVycm9yIiwiZXJybm8iLCJfY2xvc2UiLCJfYnVmZmVyIiwiX29mZnNldCIsIl9sZXZlbCIsIl9zdHJhdGVneSIsImZyZWV6ZSIsImNyZWF0ZURlZmxhdGUiLCJjcmVhdGVJbmZsYXRlIiwiY3JlYXRlRGVmbGF0ZVJhdyIsImNyZWF0ZUluZmxhdGVSYXciLCJjcmVhdGVHdW56aXAiLCJjcmVhdGVVbnppcCIsImRlZmxhdGUiLCJkZWZsYXRlU3luYyIsImd6aXBTeW5jIiwiZGVmbGF0ZVJhdyIsImRlZmxhdGVSYXdTeW5jIiwidW56aXAiLCJ1bnppcFN5bmMiLCJpbmZsYXRlIiwiaW5mbGF0ZVN5bmMiLCJndW56aXAiLCJndW56aXBTeW5jIiwiaW5mbGF0ZVJhdyIsImluZmxhdGVSYXdTeW5jIiwicGFyYW1zIiwia2luZCIsIndzIiwiYXZhaWxJbkJlZm9yZSIsImF2YWlsT3V0QmVmb3JlIiwiaW5PZmYiLCJhc3luYyIsIndyaXRlU3luYyIsImF2YWlsSW5BZnRlciIsImF2YWlsT3V0QWZ0ZXIiLCJoYXZlIiwibmV3UmVxIiwiRUUiLCJfaXNTdGRpbyIsImRpZE9uRW5kIiwiY2xlYW51cCIsIlpzdHJlYW0iLCJ6bGliX2RlZmxhdGUiLCJ6bGliX2luZmxhdGUiLCJjb25zdGFudHMiLCJOT05FIiwiaW5pdF9kb25lIiwid3JpdGVfaW5fcHJvZ3Jlc3MiLCJwZW5kaW5nX2Nsb3NlIiwiZ3ppcF9pZF9ieXRlc19yZWFkIiwiZGVmbGF0ZUVuZCIsInN0cm0iLCJpbmZsYXRlRW5kIiwiaW5fb2ZmIiwiaW5fbGVuIiwib3V0X29mZiIsIm91dF9sZW4iLCJhdmFpbF9pbiIsIm5leHRfaW4iLCJhdmFpbF9vdXQiLCJuZXh0X291dCIsIl9wcm9jZXNzIiwiX2NoZWNrRXJyb3IiLCJfYWZ0ZXJTeW5jIiwiX2FmdGVyIiwibmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiX2Vycm9yIiwiX2luaXQiLCJfc2V0RGljdGlvbmFyeSIsIl9yZXNldCIsImRlZmxhdGVJbml0MiIsIlpfREVGTEFURUQiLCJpbmZsYXRlSW5pdDIiLCJkZWZsYXRlU2V0RGljdGlvbmFyeSIsImRlZmxhdGVSZXNldCIsImluZmxhdGVSZXNldCIsIk9iamVjdEFzc2lnbiIsInRvdGFsX2luIiwidG90YWxfb3V0IiwiZGF0YV90eXBlIiwiY29uZmlndXJhdGlvbl90YWJsZSIsInV0aWxzIiwidHJlZXMiLCJhZGxlcjMyIiwiY3JjMzIiLCJlcnJvckNvZGUiLCJyYW5rIiwiemVybyIsImZsdXNoX3BlbmRpbmciLCJwZW5kaW5nIiwicGVuZGluZ19idWYiLCJwZW5kaW5nX291dCIsImZsdXNoX2Jsb2NrX29ubHkiLCJfdHJfZmx1c2hfYmxvY2siLCJibG9ja19zdGFydCIsInN0cnN0YXJ0IiwicHV0X2J5dGUiLCJwdXRTaG9ydE1TQiIsImxvbmdlc3RfbWF0Y2giLCJjdXJfbWF0Y2giLCJjaGFpbl9sZW5ndGgiLCJtYXhfY2hhaW5fbGVuZ3RoIiwic2NhbiIsImJlc3RfbGVuIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwiX3dpbiIsIndtYXNrIiwid19tYXNrIiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJmaWxsX3dpbmRvdyIsIm1vcmUiLCJfd19zaXplIiwid2luZG93X3NpemUiLCJoYXNoX3NpemUiLCJpbnNfaCIsImhhc2hfc2hpZnQiLCJoYXNoX21hc2siLCJkZWZsYXRlX2Zhc3QiLCJoYXNoX2hlYWQiLCJiZmx1c2giLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsIk1JTl9NQVRDSCIsImxhc3RfbGl0IiwiZGVmbGF0ZV9zbG93IiwibWF4X2luc2VydCIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJDb25maWciLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJEZWZsYXRlU3RhdGUiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJkeW5fbHRyZWUiLCJIRUFQX1NJWkUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsImJsX2NvdW50IiwiTUFYX0JJVFMiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImxfYnVmIiwibGl0X2J1ZnNpemUiLCJkX2J1ZiIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJkZWZsYXRlUmVzZXRLZWVwIiwiX3RyX2luaXQiLCJtYXhfYmxvY2tfc2l6ZSIsIm1heF9zdGFydCIsImRlZmxhdGVJbml0IiwiZGVmbGF0ZVNldEhlYWRlciIsIm9sZF9mbHVzaCIsImJlZyIsImhjcmMiLCJleHRyYSIsImNvbW1lbnQiLCJic3RhdGUiLCJkZWZsYXRlX2h1ZmYiLCJkZWZsYXRlX3JsZSIsIl90cl9hbGlnbiIsIl90cl9zdG9yZWRfYmxvY2siLCJhdmFpbCIsInRtcERpY3QiLCJkaWN0TGVuZ3RoIiwiZGVmbGF0ZUluZm8iLCJleHRyYV9sYml0cyIsImV4dHJhX2RiaXRzIiwiZXh0cmFfYmxiaXRzIiwiYmxfb3JkZXIiLCJzdGF0aWNfbHRyZWUiLCJzdGF0aWNfZHRyZWUiLCJEX0NPREVTIiwiX2Rpc3RfY29kZSIsIl9sZW5ndGhfY29kZSIsIk1BWF9NQVRDSCIsImJhc2VfbGVuZ3RoIiwic3RhdGljX2xfZGVzYyIsInN0YXRpY19kX2Rlc2MiLCJzdGF0aWNfYmxfZGVzYyIsImJhc2VfZGlzdCIsIlN0YXRpY1RyZWVEZXNjIiwic3RhdGljX3RyZWUiLCJleHRyYV9iaXRzIiwiZXh0cmFfYmFzZSIsImVsZW1zIiwibWF4X2xlbmd0aCIsImhhc19zdHJlZSIsIlRyZWVEZXNjIiwiZHluX3RyZWUiLCJzdGF0X2Rlc2MiLCJtYXhfY29kZSIsImRfY29kZSIsImRpc3QiLCJwdXRfc2hvcnQiLCJzZW5kX2JpdHMiLCJzZW5kX2NvZGUiLCJ0cmVlIiwiYmlfcmV2ZXJzZSIsImdlbl9jb2RlcyIsImJpdHMiLCJuZXh0X2NvZGUiLCJpbml0X2Jsb2NrIiwiTElURVJBTFMiLCJFTkRfQkxPQ0siLCJiaV93aW5kdXAiLCJzbWFsbGVyIiwiX24yIiwiX20yIiwicHFkb3duaGVhcCIsImNvbXByZXNzX2Jsb2NrIiwibHRyZWUiLCJkdHJlZSIsImxjIiwibHgiLCJidWlsZF90cmVlIiwic3RyZWUiLCJ4Yml0cyIsIm92ZXJmbG93IiwiZ2VuX2JpdGxlbiIsInNjYW5fdHJlZSIsImN1cmxlbiIsInByZXZsZW4iLCJuZXh0bGVuIiwibWF4X2NvdW50IiwibWluX2NvdW50IiwiUkVQXzNfNiIsIlJFUFpfM18xMCIsIlJFUFpfMTFfMTM4Iiwic2VuZF90cmVlIiwic3RhdGljX2luaXRfZG9uZSIsInN0b3JlZF9sZW4iLCJjb3B5X2Jsb2NrIiwiTEVOR1RIX0NPREVTIiwiTF9DT0RFUyIsInRyX3N0YXRpY19pbml0Iiwib3B0X2xlbmIiLCJzdGF0aWNfbGVuYiIsIm1heF9ibGluZGV4IiwiYmxhY2tfbWFzayIsImRldGVjdF9kYXRhX3R5cGUiLCJCTF9DT0RFUyIsImJ1aWxkX2JsX3RyZWUiLCJsY29kZXMiLCJkY29kZXMiLCJibGNvZGVzIiwic2VuZF9hbGxfdHJlZXMiLCJTVEFUSUNfVFJFRVMiLCJiaV9mbHVzaCIsIjIiLCIxIiwiMCIsImluZmxhdGVfZmFzdCIsImluZmxhdGVfdGFibGUiLCJ6c3dhcDMyIiwiSW5mbGF0ZVN0YXRlIiwiaGF2ZWRpY3QiLCJkbWF4Iiwid2JpdHMiLCJ3c2l6ZSIsIndoYXZlIiwid25leHQiLCJob2xkIiwibGVuY29kZSIsImRpc3Rjb2RlIiwibGVuYml0cyIsImRpc3RiaXRzIiwibmNvZGUiLCJubGVuIiwibmRpc3QiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsInNhbmUiLCJiYWNrIiwid2FzIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVSZXNldDIiLCJsZW5maXgiLCJkaXN0Zml4IiwidmlyZ2luIiwiZml4ZWR0YWJsZXMiLCJzeW0iLCJ1cGRhdGV3aW5kb3ciLCJpbmZsYXRlSW5pdCIsInB1dCIsImxlZnQiLCJfaW4iLCJfb3V0IiwiZnJvbV9zb3VyY2UiLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiLCJsYXN0X2JpdHMiLCJsYXN0X29wIiwibGFzdF92YWwiLCJoZXJlIiwiaGJ1ZiIsImluZl9sZWF2ZSIsInhmbGFncyIsImV4dHJhX2xlbiIsImluZmxhdGVHZXRIZWFkZXIiLCJpbmZsYXRlSW5mbyIsInNfd2luZG93IiwibGNvZGUiLCJkY29kZSIsImxtYXNrIiwiZG1hc2siLCJvcCIsInRvcCIsImRvbGVuIiwiZG9kaXN0IiwibGJhc2UiLCJsZXh0IiwiZGJhc2UiLCJkZXh0IiwibGVuc19pbmRleCIsInRhYmxlX2luZGV4IiwiaW5jciIsImxvdyIsInJvb3QiLCJjdXJyIiwiZHJvcCIsInVzZWQiLCJodWZmIiwiYmFzZV9pbmRleCIsIk1BWEJJVFMiLCJvZmZzIiwiZXh0cmFfaW5kZXgiLCJaX1RSRUVTIiwiWl9OT19DT01QUkVTU0lPTiIsIlpfQkVTVF9TUEVFRCIsIlpfQkVTVF9DT01QUkVTU0lPTiIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwiX2RlZmluZVByb3BlcnR5IiwiX2dldFN0cmluZyIsIl9nZXRCdWZmZXIiLCJfb2JqZWN0U3ByZWFkIiwiX09iamVjdCRzZXRQcm90b3R5cGVPIiwia0xhc3RSZXNvbHZlIiwia0xhc3RSZWplY3QiLCJrRXJyb3IiLCJrRW5kZWQiLCJrTGFzdFByb21pc2UiLCJrSGFuZGxlUHJvbWlzZSIsImtTdHJlYW0iLCJjcmVhdGVJdGVyUmVzdWx0IiwicmVhZEFuZFJlc29sdmUiLCJvblJlYWRhYmxlIiwiQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsImxhc3RQcm9taXNlIiwid3JhcEZvck5leHQiLCJfT2JqZWN0JGNyZWF0ZSIsIkVSUl9NSVNTSU5HX0FSR1MiLCJkZXN0cm95ZXIiLCJjbG9zZWQiLCJwb3BDYWxsYmFjayIsInN0cmVhbXMiLCJkZXN0cm95cyIsImRpYWdub3N0aWNzIiwicHJvZCIsIm5hbWVzcGFjZSIsImRldiIsImZvcmNlIiwieWVwIiwibm9wZSIsImFkYXB0ZXJzIiwibW9kaWZpZXJzIiwidXNlIiwiYWRhcHRlciIsIm1vZGlmeSIsImludHJvZHVjZSIsImRlY29kZSIsImZkIiwiaHR0cHMiLCJIdHRwIiwic3NsIiwiYWdlbnQiLCJfcmVxdWVzdCIsImJlYXJlciIsIkF1dGhvcml6YXRpb24iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidG9BcnJheUJ1ZmZlciIsInByZWZlckJpbmFyeSIsIl9ib2R5IiwiX2hlYWRlcnMiLCJ1c2VGZXRjaCIsImRlY2lkZU1vZGUiLCJfZmV0Y2hUaW1lciIsIl9vbkZpbmlzaCIsImxvd2VyTmFtZSIsInVuc2FmZUhlYWRlcnMiLCJnZXRIZWFkZXIiLCJyZW1vdmVIZWFkZXIiLCJoZWFkZXJzT2JqIiwiaGVhZGVyc0xpc3QiLCJrZXlOYW1lIiwic2lnbmFsIiwiY29udHJvbGxlciIsIl9mZXRjaEFib3J0Q29udHJvbGxlciIsInJlcXVlc3RUaW1lb3V0IiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJfY29ubmVjdCIsIm9udGltZW91dCIsInNldFJlcXVlc3RIZWFkZXIiLCJfcmVzcG9uc2UiLCJzZW5kIiwic3RhdHVzVmFsaWQiLCJmbHVzaEhlYWRlcnMiLCJzZXROb0RlbGF5Iiwic2V0U29ja2V0S2VlcEFsaXZlIiwiYXJyYXlDb3B5Iiwibm9kZVR5cGUiLCJmcmVlR2xvYmFsIiwibWF4SW50IiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJtYXBEb21haW4iLCJ1Y3MyZGVjb2RlIiwiY291bnRlciIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImVuY29kZSIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJjdXJyZW50VmFsdWUiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwid2VicGFja1BvbHlmaWxsIiwiY2hpbGRyZW4iLCJxcyIsImVxIiwicmVnZXhwIiwibWF4S2V5cyIsImtzdHIiLCJ2c3RyIiwic3RyaW5naWZ5UHJpbWl0aXZlIiwia3MiLCJ2YWxpZGF0ZVBhcmFtcyIsImlzT2JqZWN0TW9kZSIsIlByb2ZpbGVyIiwiX1RyYW5zZm9ybSIsImNvbmZpZ3VyZSIsImRlZmF1bHRSZXF1ZXN0TWV0YWRhdGEiLCJpbmZvQ2xvbmUiLCJkZWZhdWx0TWV0YSIsIl9yZWYkbGV2ZWwiLCJfcmVmJGV4aXRPbkVycm9yIiwiZW1pdEVycnMiLCJmb3JtYXR0ZXJzIiwicGFkTGV2ZWxzIiwicmV3cml0ZXJzIiwicmVqZWN0aW9ucyIsInByb2ZpbGVycyIsImdpdmVuTGV2ZWxWYWx1ZSIsImdldExldmVsVmFsdWUiLCJjb25maWd1cmVkTGV2ZWxWYWx1ZSIsImZpbmRJbmRleCIsInRyYW5zcG9ydExldmVsVmFsdWUiLCJfT2JqZWN0JGFzc2lnbjIiLCJfdGhpcyR3cml0ZSIsIm1ldGEiLCJfT2JqZWN0JGFzc2lnbiIsImV4IiwiX29uRXZlbnQiLCJxdWVyeU9iamVjdCIsImZvcm1hdFF1ZXJ5IiwiZm9ybWF0UmVzdWx0cyIsInF1ZXJ5VHJhbnNwb3J0IiwiX3N0cmVhbXMiLCJub3ciLCJ0aW1lRW5kIiwiX2xlbjIiLCJfa2V5MiIsImR1cmF0aW9uTXMiLCJfdGhpcyRleGNlcHRpb25zIiwiX3RoaXMkZXhjZXB0aW9uczIiLCJ1bmhhbmRsZSIsImVhY2hPZkFycmF5TGlrZSIsImNvbXBsZXRlZCIsIml0ZXJhdG9yQ2FsbGJhY2siLCJlYWNoT2ZHZW5lcmljIiwibmFtZWQiLCJzdXBlciIsIl9kZWxldGUiLCJfcmVtb3ZlTG9nZ2VyIiwibWw1IiwiVGhlbWVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJ1c2VCb290c3RyYXBQcmVmaXgiLCJkZWZhdWx0UHJlZml4IiwicHJlZml4ZXMiLCJmdW5jcyIsImlzVHJpdmlhbEhyZWYiLCJTYWZlQW5jaG9yIiwiZm9yd2FyZFJlZiIsIl9yZWYkYXMiLCJhcyIsIkNvbXBvbmVudCIsImRpc2FibGVkIiwib25LZXlEb3duIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJyb2xlIiwidGFiSW5kZXgiLCJCdXR0b24iLCJic1ByZWZpeCIsInZhcmlhbnQiLCJjbGFzc05hbWUiLCJkZWZhdWx0UHJvcHMiLCJJTlNUQU5DRSIsImdldExvZ2dlciIsImNvbWJpbmUiLCJub3RlcyIsIm5vdGVUb0ZyZXEiLCJub3RlIiwiZnJlcVRvTm90ZSIsImZyZXEiLCJsb2cyIiwiTm90ZSIsIl9mcmVxIiwiZnJlcXVlbmN5Iiwib2N0YXZlIiwiZGlmZiIsIkxPRyIsIk1PREVMX1VSTCIsIkdlbmVyYXRvckNvbXBvbmVudCIsInNldEZsYWciLCJzZXRDdXJyZW50VmFsdWUiLCJtb3VudGVkIiwib25UaWNrIiwiUGl0Y2hSZWNvcmRlciIsInBpdGNoR2VuZXJhdG9yIiwidGltZW91dE1zIiwib25GaW5pc2giLCJyZWNvcmRpbmciLCJzZXRSZWNvcmRpbmciLCJzZXRGaW5pc2hlZCIsIm5ld1JlY29yZGluZyIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiZWxlbWVudCIsImR1cmF0aW9uIiwiZXZ0IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJsaXN0ZW4iLCJtdWx0IiwicGFyc2VGbG9hdCIsInJlbW92ZUVtdWxhdGUiLCJfUmVhY3QkQ29tcG9uZW50IiwiVHJhbnNpdGlvbiIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJwcmV2U3RhdGUiLCJfcHJvdG8iLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZVN0YXR1cyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsImFwcGVhcmluZyIsIl9yZWYyIiwibm9kZVJlZiIsImZpbmRET01Ob2RlIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJlZCIsIm9uRW50ZXIiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJjYW5jZWwiLCJuZXh0U3RhdGUiLCJzZXROZXh0Q2FsbGJhY2siLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJfcmVmMyIsIm1heWJlTmV4dENhbGxiYWNrIiwicmVuZGVyIiwiX3RoaXMkcHJvcHMiLCJjaGlsZFByb3BzIiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsImNsb25lRWxlbWVudCIsIkNoaWxkcmVuIiwib25seSIsImNvbnRleHRUeXBlIiwicHJvcFR5cGVzIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIl9mYWRlU3R5bGVzIiwiZmFkZVN0eWxlcyIsIkZhZGUiLCJoYW5kbGVFbnRlciIsIm9mZnNldEhlaWdodCIsInRyaWdnZXJCcm93c2VyUmVmbG93IiwiaW5uZXJQcm9wcyIsImlzUmVxdWlyZWQiLCJDbG9zZUJ1dHRvbiIsInJIeXBoZW4iLCJjaHIiLCJjcmVhdGVXaXRoQnNQcmVmaXgiLCJfdGVtcCIsIl9yZWYkZGlzcGxheU5hbWUiLCJCc0NvbXBvbmVudCIsIl9yZWYyJGFzIiwiVGFnIiwicmVzb2x2ZWRQcmVmaXgiLCJEaXZTdHlsZWRBc0g0IiwiQWxlcnRIZWFkaW5nIiwiQWxlcnRMaW5rIiwic2hvdyIsInRyYW5zaXRpb24iLCJjbG9zZUxhYmVsIiwiQWxlcnQiLCJ1bmNvbnRyb2xsZWRQcm9wcyIsIl91c2VVbmNvbnRyb2xsZWQiLCJvbkNsb3NlIiwiZGlzbWlzc2libGUiLCJoYW5kbGVDbG9zZSIsIkxpbmsiLCJIZWFkaW5nIiwiU3VtbWFyeSIsInJlZmVyZW5jZSIsInN1bSIsIlBpdGNoRGV0ZWN0aW9uIiwic3RhcnRlZCIsInNldElzU3RhcnRlZCIsImF1ZGlvQ29udGV4dCIsIkF1ZGlvQ29udGV4dCIsInNldFN0cmVhbSIsInBpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yIiwic2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJhdWRpbyIsInZpZGVvIiwibmV3U3RyZWFtIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJwaXRjaERldGVjdGlvbiIsInJlYWR5IiwicGl0Y2giLCJnZXRQaXRjaCIsIm1sNVBpdGNoRGV0ZWN0aW9uIiwiZ2V0VHJhY2tzIiwic3RvcCIsInN1c3BlbmQiLCJyZWZlcmVuY2VQaXRjaCIsImZsdWlkIiwic3VmZml4IiwiREVWSUNFX1NJWkVTIiwiUm93Iiwibm9HdXR0ZXJzIiwiZGVjb3JhdGVkQnNQcmVmaXgiLCJzaXplUHJlZml4IiwiYnJrUG9pbnQiLCJjb2xzIiwiaW5maXgiLCJDb2wiLCJzcGFucyIsInNwYW4iLCJfcHJvcFZhbHVlJHNwYW4iLCJ0b1ZhbCIsIm1peCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFB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ZkEsR0FBT2doQixHQU1YLE9BQU9oaEIsRUFHTyxrQkFFZCxJQURBLElBQVNzaEIsRUFBSzllLEVBQVZwTyxFQUFFLEVBQVc0TCxFQUFJLEdBQ2Q1TCxFQUFJb0MsVUFBVUMsU0FDaEI2cUIsRUFBTTlxQixVQUFVcEMsUUFDZm9PLEVBQUlzNkUsR0FBTXg3RCxNQUNidGhCLElBQVFBLEdBQU8sS0FDZkEsR0FBT3dDLEdBSVYsT0FBT3hDLEdDNUJSLE1BQU0sR0FBTWd5RSxJQ05aLFNBQWdCLGdCRFFHLEtBQ2pCLEdBQUl6M0QsS0FBSyxpQkFFUCxrQkFBQyxHQUFTLEtBQ1Isa0JBQUMsR0FBRyxDQUFDeTJELEdBQUcsU0FBU2EsVUFBVSxlQUN6Qix3QkFBSUEsVUFBVyxHQUFLLFlBQWEsT0FBUSxVQUFRLFdBQ2pELDRCLFNBQ1Esb0NBSVYsa0JBQUMsR0FBRyxDQUFDYixHQUFHLFVBQVVhLFVBQVUsZUFDMUIsa0JBQUMsR0FBRyxLQUNGLGtCQUFDNEksR0FBYyxRQUluQixrQkFBQyxHQUFHLENBQUN6SixHQUFHLGFDekJNLE1BQVN2bEQsU0FBU3V4RCxlQUFlIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjE0KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgc2hhcmVhYmxlIHN5bWJvbCBjb25zdGFudCB0aGF0IGNhbiBiZSB1c2VkXG4gKiBhcyBhIG5vbi1lbnVtZXJhYmxlIC8gc2VtaS1oaWRkZW4gbGV2ZWwgaWRlbnRpZmllclxuICogdG8gYWxsb3cgdGhlIHJlYWRhYmxlIGxldmVsIHByb3BlcnR5IHRvIGJlIG11dGFibGUgZm9yXG4gKiBvcGVyYXRpb25zIGxpa2UgY29sb3JpemF0aW9uXG4gKlxuICogQHR5cGUge1N5bWJvbH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdMRVZFTCcsIHtcbiAgdmFsdWU6IFN5bWJvbC5mb3IoJ2xldmVsJylcbn0pO1xuXG4vKipcbiAqIEEgc2hhcmVhYmxlIHN5bWJvbCBjb25zdGFudCB0aGF0IGNhbiBiZSB1c2VkXG4gKiBhcyBhIG5vbi1lbnVtZXJhYmxlIC8gc2VtaS1oaWRkZW4gbWVzc2FnZSBpZGVudGlmaWVyXG4gKiB0byBhbGxvdyB0aGUgZmluYWwgbWVzc2FnZSBwcm9wZXJ0eSB0byBub3QgaGF2ZVxuICogc2lkZSBlZmZlY3RzIG9uIGFub3RoZXIuXG4gKlxuICogQHR5cGUge1N5bWJvbH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdNRVNTQUdFJywge1xuICB2YWx1ZTogU3ltYm9sLmZvcignbWVzc2FnZScpXG59KTtcblxuLyoqXG4gKiBBIHNoYXJlYWJsZSBzeW1ib2wgY29uc3RhbnQgdGhhdCBjYW4gYmUgdXNlZFxuICogYXMgYSBub24tZW51bWVyYWJsZSAvIHNlbWktaGlkZGVuIG1lc3NhZ2UgaWRlbnRpZmllclxuICogdG8gYWxsb3cgdGhlIGV4dHJhY3RlZCBzcGxhdCBwcm9wZXJ0eSBiZSBoaWRkZW5cbiAqXG4gKiBAdHlwZSB7U3ltYm9sfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1NQTEFUJywge1xuICB2YWx1ZTogU3ltYm9sLmZvcignc3BsYXQnKVxufSk7XG5cbi8qKlxuICogQSBzaGFyZWFibGUgb2JqZWN0IGNvbnN0YW50ICB0aGF0IGNhbiBiZSB1c2VkXG4gKiBhcyBhIHN0YW5kYXJkIGNvbmZpZ3VyYXRpb24gZm9yIHdpbnN0b25AMy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NvbmZpZ3MnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL2NvbmZpZycpXG59KTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAhcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIid1c2Ugc3RyaWN0Jztcbi8qXG4gKiBEaXNwbGF5cyBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgdGhlIHNvdXJjZSBvZlxuICogdGhlIGZvcm1hdCB3aGVuIGl0IGlzIGludmFsaWQuXG4gKi9cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7IF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7IGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHsgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7IF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7IH07IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTsgfVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHsgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbnZhciBJbnZhbGlkRm9ybWF0RXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoSW52YWxpZEZvcm1hdEVycm9yLCBfRXJyb3IpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSW52YWxpZEZvcm1hdEVycm9yKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkRm9ybWF0RXJyb3IoZm9ybWF0Rm4pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW52YWxpZEZvcm1hdEVycm9yKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJGb3JtYXQgZnVuY3Rpb25zIG11c3QgYmUgc3luY2hyb25vdXMgdGFraW5nIGEgdHdvIGFyZ3VtZW50czogKGluZm8sIG9wdHMpXFxuRm91bmQ6IFwiLmNvbmNhdChmb3JtYXRGbi50b1N0cmluZygpLnNwbGl0KCdcXG4nKVswXSwgXCJcXG5cIikpO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBJbnZhbGlkRm9ybWF0RXJyb3IpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBJbnZhbGlkRm9ybWF0RXJyb3I7XG59KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuLypcbiAqIGZ1bmN0aW9uIGZvcm1hdCAoZm9ybWF0Rm4pXG4gKiBSZXR1cm5zIGEgY3JlYXRlIGZ1bmN0aW9uIGZvciB0aGUgYGZvcm1hdEZuYC5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZvcm1hdEZuKSB7XG4gIGlmIChmb3JtYXRGbi5sZW5ndGggPiAyKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRGb3JtYXRFcnJvcihmb3JtYXRGbik7XG4gIH1cbiAgLypcbiAgICogZnVuY3Rpb24gRm9ybWF0IChvcHRpb25zKVxuICAgKiBCYXNlIHByb3RvdHlwZSB3aGljaCBjYWxscyBhIGBfZm9ybWF0YFxuICAgKiBmdW5jdGlvbiBhbmQgcHVzaGVzIHRoZSByZXN1bHQuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gRm9ybWF0KCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgRm9ybWF0LnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmb3JtYXRGbjsgLy9cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBuZXcgaW5zdGFuY2VzIG9mXG4gIC8vIEZvcm1hdFdyYXAgZm9yIHNpbXBsZSBzeW50YXggbGlrZTpcbiAgLy9cbiAgLy8gcmVxdWlyZSgnd2luc3RvbicpLmZvcm1hdHMuanNvbigpO1xuICAvL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1hdFdyYXAob3B0cykge1xuICAgIHJldHVybiBuZXcgRm9ybWF0KG9wdHMpO1xuICB9IC8vXG4gIC8vIEV4cG9zZSB0aGUgRm9ybWF0V3JhcCB0aHJvdWdoIHRoZSBjcmVhdGUgZnVuY3Rpb25cbiAgLy8gZm9yIHRlc3RhYmlsaXR5LlxuICAvL1xuXG5cbiAgY3JlYXRlRm9ybWF0V3JhcC5Gb3JtYXQgPSBGb3JtYXQ7XG4gIHJldHVybiBjcmVhdGVGb3JtYXRXcmFwO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxuICBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB2YXIgZGVzY3JpcHRvcnMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc2NyaXB0b3JzW2tleXNbaV1dID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gIH07XG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xuICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIGZuLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICk7XG59XG5cbmV4cG9ydHMucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbFxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAvLyBgIXJlYXNvbmAgZ3VhcmQgaW5zcGlyZWQgYnkgYmx1ZWJpcmQgKFJlZjogaHR0cHM6Ly9nb28uZ2wvdDVJUzZNKS5cbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXG4gIC8vIG9jY3VycmVkXCIsIHdlIGVycm9yLXdyYXAgc28gdGhlIGNhbGxiYWNrIGNvbnN1bWVyIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIFwidGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBudWxsXCIgb3IgXCJ0aGUgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB1bmRlZmluZWRcIi5cbiAgaWYgKCFyZWFzb24pIHtcbiAgICB2YXIgbmV3UmVhc29uID0gbmV3IEVycm9yKCdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWUnKTtcbiAgICBuZXdSZWFzb24ucmVhc29uID0gcmVhc29uO1xuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgfVxuICByZXR1cm4gY2IocmVhc29uKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gIH1cblxuICAvLyBXZSBETyBOT1QgcmV0dXJuIHRoZSBwcm9taXNlIGFzIGl0IGdpdmVzIHRoZSB1c2VyIGEgZmFsc2Ugc2Vuc2UgdGhhdFxuICAvLyB0aGUgcHJvbWlzZSBpcyBhY3R1YWxseSBzb21laG93IHJlbGF0ZWQgdG8gdGhlIGNhbGxiYWNrJ3MgZXhlY3V0aW9uXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgZnVuY3Rpb24gY2FsbGJhY2tpZmllZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxuICAgIC8vIGltcGxpY2F0aW9ucyAoc3RhY2ssIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBhc3luY19ob29rc2ApXG4gICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLCBudWxsLCByZXQpIH0sXG4gICAgICAgICAgICBmdW5jdGlvbihyZWopIHsgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFja2lmeU9uUmVqZWN0ZWQsIHJlaiwgY2IpIH0pO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYWxsYmFja2lmaWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XG4gIHJldHVybiBjYWxsYmFja2lmaWVkO1xufVxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBldmVudExpc3RlbmVyKCkge1xuICAgICAgaWYgKGVycm9yTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgdmFyIGVycm9yTGlzdGVuZXI7XG5cbiAgICAvLyBBZGRpbmcgYW4gZXJyb3IgbGlzdGVuZXIgaXMgbm90IG9wdGlvbmFsIGJlY2F1c2VcbiAgICAvLyBpZiBhbiBlcnJvciBpcyB0aHJvd24gb24gYW4gZXZlbnQgZW1pdHRlciB3ZSBjYW5ub3RcbiAgICAvLyBndWFyYW50ZWUgdGhhdCB0aGUgYWN0dWFsIGV2ZW50IHdlIGFyZSB3YWl0aW5nIHdpbGxcbiAgICAvLyBiZSBmaXJlZC4gVGhlIHJlc3VsdCBjb3VsZCBiZSBhIHNpbGVudCB3YXkgdG8gY3JlYXRlXG4gICAgLy8gbWVtb3J5IG9yIGZpbGUgZGVzY3JpcHRvciBsZWFrcywgd2hpY2ggaXMgc29tZXRoaW5nXG4gICAgLy8gd2Ugc2hvdWxkIGF2b2lkLlxuICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICBlcnJvckxpc3RlbmVyID0gZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCBldmVudExpc3RlbmVyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuXG4gICAgICBlbWl0dGVyLm9uY2UoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgZW1pdHRlci5vbmNlKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBMRVZFTCA9IF9yZXF1aXJlLkxFVkVMO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgVHJhbnNwb3J0U3RyZWFtLiBUaGlzIGlzIHRoZSBiYXNlIHByb3RvdHlwZVxuICogdGhhdCBhbGwgYHdpbnN0b24gPj0gM2AgdHJhbnNwb3J0cyBzaG91bGQgaW5oZXJpdCBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIFRyYW5zcG9ydFN0cmVhbSBpbnN0YW5jZVxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMubGV2ZWwgLSBIaWdoZXN0IGxldmVsIGFjY29yZGluZyB0byBSRkM1NDI0LlxuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmhhbmRsZUV4Y2VwdGlvbnMgLSBJZiB0cnVlLCBpbmZvIHdpdGhcbiAqIHsgZXhjZXB0aW9uOiB0cnVlIH0gd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5sb2cgLSBDdXN0b20gbG9nIGZ1bmN0aW9uIGZvciBzaW1wbGUgVHJhbnNwb3J0XG4gKiBjcmVhdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5jbG9zZSAtIENhbGxlZCBvbiBcInVucGlwZVwiIGZyb20gcGFyZW50LlxuICovXG5cblxudmFyIFRyYW5zcG9ydFN0cmVhbSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVHJhbnNwb3J0U3RyZWFtKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBXcml0YWJsZS5jYWxsKHRoaXMsIHsgb2JqZWN0TW9kZTogdHJ1ZSwgaGlnaFdhdGVyTWFyazogb3B0aW9ucy5oaWdoV2F0ZXJNYXJrIH0pO1xuXG4gIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gIHRoaXMubGV2ZWwgPSBvcHRpb25zLmxldmVsO1xuICB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgPSBvcHRpb25zLmhhbmRsZUV4Y2VwdGlvbnM7XG4gIHRoaXMuaGFuZGxlUmVqZWN0aW9ucyA9IG9wdGlvbnMuaGFuZGxlUmVqZWN0aW9ucztcbiAgdGhpcy5zaWxlbnQgPSBvcHRpb25zLnNpbGVudDtcblxuICBpZiAob3B0aW9ucy5sb2cpIHRoaXMubG9nID0gb3B0aW9ucy5sb2c7XG4gIGlmIChvcHRpb25zLmxvZ3YpIHRoaXMubG9ndiA9IG9wdGlvbnMubG9ndjtcbiAgaWYgKG9wdGlvbnMuY2xvc2UpIHRoaXMuY2xvc2UgPSBvcHRpb25zLmNsb3NlO1xuXG4gIC8vIEdldCB0aGUgbGV2ZWxzIGZyb20gdGhlIHNvdXJjZSB3ZSBhcmUgcGlwZWQgZnJvbS5cbiAgdGhpcy5vbmNlKCdwaXBlJywgZnVuY3Rpb24gKGxvZ2dlcikge1xuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdGhpcyBib29ra2VlcGluZyBjYW4gb25seSBzdXBwb3J0IG11bHRpcGxlXG4gICAgLy8gTG9nZ2VyIHBhcmVudHMgd2l0aCB0aGUgc2FtZSBgbGV2ZWxzYC4gVGhpcyBjb21lcyBpbnRvIHBsYXkgaW5cbiAgICAvLyB0aGUgYHdpbnN0b24uQ29udGFpbmVyYCBjb2RlIGluIHdoaWNoIGBjb250YWluZXIuYWRkYCB0YWtlc1xuICAgIC8vIGEgZnVsbHkgcmVhbGl6ZWQgc2V0IG9mIG9wdGlvbnMgd2l0aCBwcmUtY29uc3RydWN0ZWQgVHJhbnNwb3J0U3RyZWFtcy5cbiAgICBfdGhpcy5sZXZlbHMgPSBsb2dnZXIubGV2ZWxzO1xuICAgIF90aGlzLnBhcmVudCA9IGxvZ2dlcjtcbiAgfSk7XG5cbiAgLy8gSWYgYW5kL29yIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyByZW1vdmVkIGZyb20gdGhpcyBpbnN0YW5jZVxuICB0aGlzLm9uY2UoJ3VucGlwZScsIGZ1bmN0aW9uIChzcmMpIHtcbiAgICAvLyBSZW1hcmsgKGluZGV4emVybyk6IHRoaXMgYm9va2tlZXBpbmcgY2FuIG9ubHkgc3VwcG9ydCBtdWx0aXBsZVxuICAgIC8vIExvZ2dlciBwYXJlbnRzIHdpdGggdGhlIHNhbWUgYGxldmVsc2AuIFRoaXMgY29tZXMgaW50byBwbGF5IGluXG4gICAgLy8gdGhlIGB3aW5zdG9uLkNvbnRhaW5lcmAgY29kZSBpbiB3aGljaCBgY29udGFpbmVyLmFkZGAgdGFrZXNcbiAgICAvLyBhIGZ1bGx5IHJlYWxpemVkIHNldCBvZiBvcHRpb25zIHdpdGggcHJlLWNvbnN0cnVjdGVkIFRyYW5zcG9ydFN0cmVhbXMuXG4gICAgaWYgKHNyYyA9PT0gX3RoaXMucGFyZW50KSB7XG4gICAgICBfdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgaWYgKF90aGlzLmNsb3NlKSB7XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8qXG4gKiBJbmhlcml0IGZyb20gV3JpdGVhYmxlIHVzaW5nIE5vZGUuanMgYnVpbHQtaW5zXG4gKi9cbnV0aWwuaW5oZXJpdHMoVHJhbnNwb3J0U3RyZWFtLCBXcml0YWJsZSk7XG5cbi8qKlxuICogV3JpdGVzIHRoZSBpbmZvIG9iamVjdCB0byBvdXIgdHJhbnNwb3J0IGluc3RhbmNlLlxuICogQHBhcmFtIHttaXhlZH0gaW5mbyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cblRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlKGluZm8sIGVuYywgY2FsbGJhY2spIHtcbiAgaWYgKHRoaXMuc2lsZW50IHx8IGluZm8uZXhjZXB0aW9uID09PSB0cnVlICYmICF0aGlzLmhhbmRsZUV4Y2VwdGlvbnMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gIH1cblxuICAvLyBSZW1hcms6IFRoaXMgaGFzIHRvIGJlIGhhbmRsZWQgaW4gdGhlIGJhc2UgdHJhbnNwb3J0IG5vdyBiZWNhdXNlIHdlXG4gIC8vIGNhbm5vdCBjb25kaXRpb25hbGx5IHdyaXRlIHRvIG91ciBwaXBlIHRhcmdldHMgYXMgc3RyZWFtLiBXZSBhbHdheXNcbiAgLy8gcHJlZmVyIGFueSBleHBsaWNpdCBsZXZlbCBzZXQgb24gdGhlIFRyYW5zcG9ydCBpdHNlbGYgZmFsbGluZyBiYWNrIHRvXG4gIC8vIGFueSBsZXZlbCBzZXQgb24gdGhlIHBhcmVudC5cbiAgdmFyIGxldmVsID0gdGhpcy5sZXZlbCB8fCB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5sZXZlbDtcblxuICBpZiAoIWxldmVsIHx8IHRoaXMubGV2ZWxzW2xldmVsXSA+PSB0aGlzLmxldmVsc1tpbmZvW0xFVkVMXV0pIHtcbiAgICBpZiAoaW5mbyAmJiAhdGhpcy5mb3JtYXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvZyhpbmZvLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdmFyIGVyclN0YXRlID0gdm9pZCAwO1xuICAgIHZhciB0cmFuc2Zvcm1lZCA9IHZvaWQgMDtcblxuICAgIC8vIFdlIHRyYXAoYW5kIHJlLXRocm93KSBhbnkgZXJyb3JzIGdlbmVyYXRlZCBieSB0aGUgdXNlci1wcm92aWRlZCBmb3JtYXQsIGJ1dCBhbHNvXG4gICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIHN0cmVhbXMgY2FsbGJhY2sgaXMgaW52b2tlZCBzbyB0aGF0IHdlIGNhbiBjb250aW51ZSBmbG93aW5nLlxuICAgIHRyeSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IHRoaXMuZm9ybWF0LnRyYW5zZm9ybShPYmplY3QuYXNzaWduKHt9LCBpbmZvKSwgdGhpcy5mb3JtYXQub3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlcnJTdGF0ZSA9IGVycjtcbiAgICB9XG5cbiAgICBpZiAoZXJyU3RhdGUgfHwgIXRyYW5zZm9ybWVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FsbGJhY2stcmV0dXJuXG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgaWYgKGVyclN0YXRlKSB0aHJvdyBlcnJTdGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5sb2codHJhbnNmb3JtZWQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhudWxsKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIHRoZSBiYXRjaCBvZiBpbmZvIG9iamVjdHMgKGkuZS4gXCJvYmplY3QgY2h1bmtzXCIpIHRvIG91ciB0cmFuc3BvcnRcbiAqIGluc3RhbmNlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lY2Vzc2FyeSBmaWx0ZXJpbmcuXG4gKiBAcGFyYW0ge21peGVkfSBjaHVua3MgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm5zIGRlc2NyaXB0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGV2ID0gZnVuY3Rpb24gX3dyaXRldihjaHVua3MsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLmxvZ3YpIHtcbiAgICB2YXIgaW5mb3MgPSBjaHVua3MuZmlsdGVyKHRoaXMuX2FjY2VwdCwgdGhpcyk7XG4gICAgaWYgKCFpbmZvcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICB9XG5cbiAgICAvLyBSZW1hcmsgKGluZGV4emVybyk6IGZyb20gYSBwZXJmb3JtYW5jZSBwZXJzcGVjdGl2ZSBpZiBUcmFuc3BvcnRcbiAgICAvLyBpbXBsZW1lbnRlcnMgZG8gY2hvb3NlIHRvIGltcGxlbWVudCBsb2d2IHNob3VsZCB3ZSBtYWtlIGl0IHRoZWlyXG4gICAgLy8gcmVzcG9uc2liaWxpdHkgdG8gaW52b2tlIHRoZWlyIGZvcm1hdD9cbiAgICByZXR1cm4gdGhpcy5sb2d2KGluZm9zLCBjYWxsYmFjayk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghdGhpcy5fYWNjZXB0KGNodW5rc1tpXSkpIGNvbnRpbnVlO1xuXG4gICAgaWYgKGNodW5rc1tpXS5jaHVuayAmJiAhdGhpcy5mb3JtYXQpIHtcbiAgICAgIHRoaXMubG9nKGNodW5rc1tpXS5jaHVuaywgY2h1bmtzW2ldLmNhbGxiYWNrKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBlcnJTdGF0ZSA9IHZvaWQgMDtcbiAgICB2YXIgdHJhbnNmb3JtZWQgPSB2b2lkIDA7XG5cbiAgICAvLyBXZSB0cmFwKGFuZCByZS10aHJvdykgYW55IGVycm9ycyBnZW5lcmF0ZWQgYnkgdGhlIHVzZXItcHJvdmlkZWQgZm9ybWF0LCBidXQgYWxzb1xuICAgIC8vIGd1YXJhbnRlZSB0aGF0IHRoZSBzdHJlYW1zIGNhbGxiYWNrIGlzIGludm9rZWQgc28gdGhhdCB3ZSBjYW4gY29udGludWUgZmxvd2luZy5cbiAgICB0cnkge1xuICAgICAgdHJhbnNmb3JtZWQgPSB0aGlzLmZvcm1hdC50cmFuc2Zvcm0oT2JqZWN0LmFzc2lnbih7fSwgY2h1bmtzW2ldLmNodW5rKSwgdGhpcy5mb3JtYXQub3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlcnJTdGF0ZSA9IGVycjtcbiAgICB9XG5cbiAgICBpZiAoZXJyU3RhdGUgfHwgIXRyYW5zZm9ybWVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FsbGJhY2stcmV0dXJuXG4gICAgICBjaHVua3NbaV0uY2FsbGJhY2soKTtcbiAgICAgIGlmIChlcnJTdGF0ZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FsbGJhY2stcmV0dXJuXG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB0aHJvdyBlcnJTdGF0ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2codHJhbnNmb3JtZWQsIGNodW5rc1tpXS5jYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xufTtcblxuLyoqXG4gKiBQcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNmaWVkIGBpbmZvYCBvbiB0aGVcbiAqIFdyaXRlUmVxLCBgd3JpdGVgLCBzaG91bGQgYmUgcGFzc2VkIGRvd24gaW50byB0aGUgZGVyaXZlZFxuICogVHJhbnNwb3J0U3RyZWFtJ3MgSS9PIHZpYSBgLmxvZyhpbmZvLCBjYWxsYmFjaylgLlxuICogQHBhcmFtIHtXcml0ZVJlcX0gd3JpdGUgLSB3aW5zdG9uQDMgTm9kZS5qcyBXcml0ZVJlcSBmb3IgdGhlIGBpbmZvYCBvYmplY3RcbiAqIHJlcHJlc2VudGluZyB0aGUgbG9nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBWYWx1ZSBpbmRpY2F0aW5nIGlmIHRoZSBgd3JpdGVgIHNob3VsZCBiZSBhY2NlcHRlZCAmXG4gKiBsb2dnZWQuXG4gKi9cblRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX2FjY2VwdCA9IGZ1bmN0aW9uIF9hY2NlcHQod3JpdGUpIHtcbiAgdmFyIGluZm8gPSB3cml0ZS5jaHVuaztcbiAgaWYgKHRoaXMuc2lsZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gV2UgYWx3YXlzIHByZWZlciBhbnkgZXhwbGljaXQgbGV2ZWwgc2V0IG9uIHRoZSBUcmFuc3BvcnQgaXRzZWxmXG4gIC8vIGZhbGxpbmcgYmFjayB0byBhbnkgbGV2ZWwgc2V0IG9uIHRoZSBwYXJlbnQuXG4gIHZhciBsZXZlbCA9IHRoaXMubGV2ZWwgfHwgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQubGV2ZWw7XG5cbiAgLy8gSW1tZWRpYXRlbHkgY2hlY2sgdGhlIGF2ZXJhZ2UgY2FzZTogbG9nIGxldmVsIGZpbHRlcmluZy5cbiAgaWYgKGluZm8uZXhjZXB0aW9uID09PSB0cnVlIHx8ICFsZXZlbCB8fCB0aGlzLmxldmVsc1tsZXZlbF0gPj0gdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgLy8gRW5zdXJlIHRoZSBpbmZvIG9iamVjdCBpcyB2YWxpZCBiYXNlZCBvbiBgeyBleGNlcHRpb24gfWA6XG4gICAgLy8gMS4geyBoYW5kbGVFeGNlcHRpb25zOiB0cnVlIH06IGFsbCBgaW5mb2Agb2JqZWN0cyBhcmUgdmFsaWRcbiAgICAvLyAyLiB7IGV4Y2VwdGlvbjogZmFsc2UgfTogYWNjZXB0ZWQgYnkgYWxsIHRyYW5zcG9ydHMuXG4gICAgaWYgKHRoaXMuaGFuZGxlRXhjZXB0aW9ucyB8fCBpbmZvLmV4Y2VwdGlvbiAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBfbm9wIGlzIHNob3J0IGZvciBcIk5vIG9wZXJhdGlvblwiXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSW50ZW50aW9uYWxseSBmYWxzZS5cbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fbm9wID0gZnVuY3Rpb24gX25vcCgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICByZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG59O1xuXG4vLyBFeHBvc2UgbGVnYWN5IHN0cmVhbVxubW9kdWxlLmV4cG9ydHMuTGVnYWN5VHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnLi9sZWdhY3knKTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCIvKipcbiAqIHdpbnN0b24uanM6IFRvcC1sZXZlbCBpbmNsdWRlIGRlZmluaW5nIFdpbnN0b24uXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsb2dmb3JtID0gcmVxdWlyZSgnbG9nZm9ybScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL3dpbnN0b24vY29tbW9uJyksXG4gICAgd2FybiA9IF9yZXF1aXJlLndhcm47XG4vKipcbiAqIFNldHVwIHRvIGV4cG9zZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxuXG52YXIgd2luc3RvbiA9IGV4cG9ydHM7XG4vKipcbiAqIEV4cG9zZSB2ZXJzaW9uLiBVc2UgYHJlcXVpcmVgIG1ldGhvZCBmb3IgYHdlYnBhY2tgIHN1cHBvcnQuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cbndpbnN0b24udmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG4vKipcbiAqIEluY2x1ZGUgdHJhbnNwb3J0cyBkZWZpbmVkIGJ5IGRlZmF1bHQgYnkgd2luc3RvblxuICogQHR5cGUge0FycmF5fVxuICovXG5cbndpbnN0b24udHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vd2luc3Rvbi90cmFuc3BvcnRzJyk7XG4vKipcbiAqIEV4cG9zZSB1dGlsaXR5IG1ldGhvZHNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxud2luc3Rvbi5jb25maWcgPSByZXF1aXJlKCcuL3dpbnN0b24vY29uZmlnJyk7XG4vKipcbiAqIEhvaXN0IGZvcm1hdC1yZWxhdGVkIGZ1bmN0aW9uYWxpdHkgZnJvbSBsb2dmb3JtLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG53aW5zdG9uLmFkZENvbG9ycyA9IGxvZ2Zvcm0ubGV2ZWxzO1xuLyoqXG4gKiBIb2lzdCBmb3JtYXQtcmVsYXRlZCBmdW5jdGlvbmFsaXR5IGZyb20gbG9nZm9ybS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxud2luc3Rvbi5mb3JtYXQgPSBsb2dmb3JtLmZvcm1hdDtcbi8qKlxuICogRXhwb3NlIGNvcmUgTG9nZ2luZy1yZWxhdGVkIHByb3RvdHlwZXMuXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKi9cblxud2luc3Rvbi5jcmVhdGVMb2dnZXIgPSByZXF1aXJlKCcuL3dpbnN0b24vY3JlYXRlLWxvZ2dlcicpO1xuLyoqXG4gKiBFeHBvc2UgY29yZSBMb2dnaW5nLXJlbGF0ZWQgcHJvdG90eXBlcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxud2luc3Rvbi5FeGNlcHRpb25IYW5kbGVyID0gcmVxdWlyZSgnLi93aW5zdG9uL2V4Y2VwdGlvbi1oYW5kbGVyJyk7XG4vKipcbiAqIEV4cG9zZSBjb3JlIExvZ2dpbmctcmVsYXRlZCBwcm90b3R5cGVzLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG53aW5zdG9uLlJlamVjdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuL3dpbnN0b24vcmVqZWN0aW9uLWhhbmRsZXInKTtcbi8qKlxuICogRXhwb3NlIGNvcmUgTG9nZ2luZy1yZWxhdGVkIHByb3RvdHlwZXMuXG4gKiBAdHlwZSB7Q29udGFpbmVyfVxuICovXG5cbndpbnN0b24uQ29udGFpbmVyID0gcmVxdWlyZSgnLi93aW5zdG9uL2NvbnRhaW5lcicpO1xuLyoqXG4gKiBFeHBvc2UgY29yZSBMb2dnaW5nLXJlbGF0ZWQgcHJvdG90eXBlcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxud2luc3Rvbi5UcmFuc3BvcnQgPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuLyoqXG4gKiBXZSBjcmVhdGUgYW5kIGV4cG9zZSBhIGRlZmF1bHQgYENvbnRhaW5lcmAgdG8gYHdpbnN0b24ubG9nZ2Vyc2Agc28gdGhhdCB0aGVcbiAqIHByb2dyYW1tZXIgbWF5IG1hbmFnZSBtdWx0aXBsZSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlcyB3aXRob3V0IGFueVxuICogYWRkaXRpb25hbCBvdmVyaGVhZC5cbiAqIEBleGFtcGxlXG4gKiAgIC8vIHNvbWUtZmlsZTEuanNcbiAqICAgY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnd2luc3RvbicpLmxvZ2dlcnMuZ2V0KCdzb21ldGhpbmcnKTtcbiAqXG4gKiAgIC8vIHNvbWUtZmlsZTIuanNcbiAqICAgY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnd2luc3RvbicpLmxvZ2dlcnMuZ2V0KCdzb21ldGhpbmcnKTtcbiAqL1xuXG53aW5zdG9uLmxvZ2dlcnMgPSBuZXcgd2luc3Rvbi5Db250YWluZXIoKTtcbi8qKlxuICogV2UgY3JlYXRlIGFuZCBleHBvc2UgYSAnZGVmYXVsdExvZ2dlcicgc28gdGhhdCB0aGUgcHJvZ3JhbW1lciBtYXkgZG8gdGhlXG4gKiBmb2xsb3dpbmcgd2l0aG91dCB0aGUgbmVlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2Ygd2luc3Rvbi5Mb2dnZXIgZGlyZWN0bHk6XG4gKiBAZXhhbXBsZVxuICogICBjb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuICogICB3aW5zdG9uLmxvZygnaW5mbycsICdzb21lIG1lc3NhZ2UnKTtcbiAqICAgd2luc3Rvbi5lcnJvcignc29tZSBlcnJvcicpO1xuICovXG5cbnZhciBkZWZhdWx0TG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoKTsgLy8gUGFzcyB0aHJvdWdoIHRoZSB0YXJnZXQgbWV0aG9kcyBvbnRvIGB3aW5zdG9uLlxuXG5PYmplY3Qua2V5cyh3aW5zdG9uLmNvbmZpZy5ucG0ubGV2ZWxzKS5jb25jYXQoWydsb2cnLCAncXVlcnknLCAnc3RyZWFtJywgJ2FkZCcsICdyZW1vdmUnLCAnY2xlYXInLCAncHJvZmlsZScsICdzdGFydFRpbWVyJywgJ2hhbmRsZUV4Y2VwdGlvbnMnLCAndW5oYW5kbGVFeGNlcHRpb25zJywgJ2hhbmRsZVJlamVjdGlvbnMnLCAndW5oYW5kbGVSZWplY3Rpb25zJywgJ2NvbmZpZ3VyZScsICdjaGlsZCddKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgcmV0dXJuIHdpbnN0b25bbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlclttZXRob2RdLmFwcGx5KGRlZmF1bHRMb2dnZXIsIGFyZ3VtZW50cyk7XG4gIH07XG59KTtcbi8qKlxuICogRGVmaW5lIGdldHRlciAvIHNldHRlciBmb3IgdGhlIGRlZmF1bHQgbG9nZ2VyIGxldmVsIHdoaWNoIG5lZWQgdG8gYmUgZXhwb3NlZFxuICogYnkgd2luc3Rvbi5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbnN0b24sICdsZXZlbCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRMb2dnZXIubGV2ZWw7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgIGRlZmF1bHRMb2dnZXIubGV2ZWwgPSB2YWw7XG4gIH1cbn0pO1xuLyoqXG4gKiBEZWZpbmUgZ2V0dGVyIGZvciBgZXhjZXB0aW9uc2Agd2hpY2ggcmVwbGFjZXMgYGhhbmRsZUV4Y2VwdGlvbnNgIGFuZFxuICogYHVuaGFuZGxlRXhjZXB0aW9uc2AuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5zdG9uLCAnZXhjZXB0aW9ucycsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRMb2dnZXIuZXhjZXB0aW9ucztcbiAgfVxufSk7XG4vKipcbiAqIERlZmluZSBnZXR0ZXJzIC8gc2V0dGVycyBmb3IgYXBwcm9wcmlhdGUgcHJvcGVydGllcyBvZiB0aGUgZGVmYXVsdCBsb2dnZXJcbiAqIHdoaWNoIG5lZWQgdG8gYmUgZXhwb3NlZCBieSB3aW5zdG9uLlxuICogQHR5cGUge0xvZ2dlcn1cbiAqL1xuXG5bJ2V4aXRPbkVycm9yJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luc3RvbiwgcHJvcCwge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXJbcHJvcF07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIGRlZmF1bHRMb2dnZXJbcHJvcF0gPSB2YWw7XG4gICAgfVxuICB9KTtcbn0pO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCB0cmFuc3BvcnRzIGFuZCBleGNlcHRpb25IYW5kbGVycyBmb3IgdGhlIGRlZmF1bHQgd2luc3RvbiBsb2dnZXIuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5zdG9uLCAnZGVmYXVsdCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4Y2VwdGlvbkhhbmRsZXJzOiBkZWZhdWx0TG9nZ2VyLmV4Y2VwdGlvbkhhbmRsZXJzLFxuICAgICAgcmVqZWN0aW9uSGFuZGxlcnM6IGRlZmF1bHRMb2dnZXIucmVqZWN0aW9uSGFuZGxlcnMsXG4gICAgICB0cmFuc3BvcnRzOiBkZWZhdWx0TG9nZ2VyLnRyYW5zcG9ydHNcbiAgICB9O1xuICB9XG59KTsgLy8gSGF2ZSBmcmllbmRsaWVyIGJyZWFrYWdlIG5vdGljZXMgZm9yIHByb3BlcnRpZXMgdGhhdCB3ZXJlIGV4cG9zZWQgYnkgZGVmYXVsdFxuLy8gb24gd2luc3RvbiA8IDMuMC5cblxud2Fybi5kZXByZWNhdGVkKHdpbnN0b24sICdzZXRMZXZlbHMnKTtcbndhcm4uZm9yRnVuY3Rpb25zKHdpbnN0b24sICd1c2VGb3JtYXQnLCBbJ2NsaSddKTtcbndhcm4uZm9yUHJvcGVydGllcyh3aW5zdG9uLCAndXNlRm9ybWF0JywgWydwYWRMZXZlbHMnLCAnc3RyaXBDb2xvcnMnXSk7XG53YXJuLmZvckZ1bmN0aW9ucyh3aW5zdG9uLCAnZGVwcmVjYXRlZCcsIFsnYWRkUmV3cml0ZXInLCAnYWRkRmlsdGVyJywgJ2Nsb25lJywgJ2V4dGVuZCddKTtcbndhcm4uZm9yUHJvcGVydGllcyh3aW5zdG9uLCAnZGVwcmVjYXRlZCcsIFsnZW1pdEVycnMnLCAnbGV2ZWxMZW5ndGgnXSk7IC8vIFRocm93IGEgdXNlZnVsIGVycm9yIHdoZW4gdXNlcnMgYXR0ZW1wdCB0byBydW4gYG5ldyB3aW5zdG9uLkxvZ2dlcmAuXG5cbndhcm4ubW92ZWQod2luc3RvbiwgJ2NyZWF0ZUxvZ2dlcicsICdMb2dnZXInKTsiLCJleHBvcnRzLmVuZGlhbm5lc3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnTEUnIH07XG5cbmV4cG9ydHMuaG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmhvc3RuYW1lXG4gICAgfVxuICAgIGVsc2UgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0cy5sb2FkYXZnID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfTtcblxuZXhwb3J0cy51cHRpbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAwIH07XG5cbmV4cG9ydHMuZnJlZW1lbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG5cbmV4cG9ydHMudG90YWxtZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG59O1xuXG5leHBvcnRzLmNwdXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXSB9O1xuXG5leHBvcnRzLnR5cGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnQnJvd3NlcicgfTtcblxuZXhwb3J0cy5yZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmFwcFZlcnNpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbn07XG5cbmV4cG9ydHMubmV0d29ya0ludGVyZmFjZXNcbj0gZXhwb3J0cy5nZXROZXR3b3JrSW50ZXJmYWNlc1xuPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7fSB9O1xuXG5leHBvcnRzLmFyY2ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnamF2YXNjcmlwdCcgfTtcblxuZXhwb3J0cy5wbGF0Zm9ybSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdicm93c2VyJyB9O1xuXG5leHBvcnRzLnRtcGRpciA9IGV4cG9ydHMudG1wRGlyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnL3RtcCc7XG59O1xuXG5leHBvcnRzLkVPTCA9ICdcXG4nO1xuXG5leHBvcnRzLmhvbWVkaXIgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAnLydcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNBc3luY0l0ZXJhYmxlID0gZXhwb3J0cy5pc0FzeW5jR2VuZXJhdG9yID0gZXhwb3J0cy5pc0FzeW5jID0gdW5kZWZpbmVkO1xuXG52YXIgX2FzeW5jaWZ5ID0gcmVxdWlyZSgnLi4vYXN5bmNpZnknKTtcblxudmFyIF9hc3luY2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY2lmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzQXN5bmMoZm4pIHtcbiAgICByZXR1cm4gZm5bU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0FzeW5jRnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc0FzeW5jR2VuZXJhdG9yKGZuKSB7XG4gICAgcmV0dXJuIGZuW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdBc3luY0dlbmVyYXRvcic7XG59XG5cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIHdyYXBBc3luYyhhc3luY0ZuKSB7XG4gICAgaWYgKHR5cGVvZiBhc3luY0ZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGEgZnVuY3Rpb24nKTtcbiAgICByZXR1cm4gaXNBc3luYyhhc3luY0ZuKSA/ICgwLCBfYXN5bmNpZnkyLmRlZmF1bHQpKGFzeW5jRm4pIDogYXN5bmNGbjtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gd3JhcEFzeW5jO1xuZXhwb3J0cy5pc0FzeW5jID0gaXNBc3luYztcbmV4cG9ydHMuaXNBc3luY0dlbmVyYXRvciA9IGlzQXN5bmNHZW5lcmF0b3I7XG5leHBvcnRzLmlzQXN5bmNJdGVyYWJsZSA9IGlzQXN5bmNJdGVyYWJsZTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgY29kZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHtcbiAgaWYgKCFCYXNlKSB7XG4gICAgQmFzZSA9IEVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBOb2RlRXJyb3IgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQmFzZSkge1xuICAgIF9pbmhlcml0c0xvb3NlKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHJldHVybiBfQmFzZS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vZGVFcnJvcjtcbiAgfShCYXNlKTtcblxuICBOb2RlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBCYXNlLm5hbWU7XG4gIE5vZGVFcnJvci5wcm90b3R5cGUuY29kZSA9IGNvZGU7XG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuICdUaGUgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwiJyArIG5hbWUgKyAnXCInO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLCBmdW5jdGlvbiAobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfVxuXG4gIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQodHlwZW9mIGFjdHVhbCk7XG4gIHJldHVybiBtc2c7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GJywgJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEJywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICdUaGUgJyArIG5hbWUgKyAnIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJywgJ1ByZW1hdHVyZSBjbG9zZScpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0RFU1RST1lFRCcsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAnQ2Fubm90IGNhbGwgJyArIG5hbWUgKyAnIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NVUxUSVBMRV9DQUxMQkFDSycsICdDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9DQU5OT1RfUElQRScsICdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EJywgJ3dyaXRlIGFmdGVyIGVuZCcpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX05VTExfVkFMVUVTJywgJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJywgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1VOS05PV05fRU5DT0RJTkcnLCBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiAnVW5rbm93biBlbmNvZGluZzogJyArIGFyZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQnLCAnc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbm1vZHVsZS5leHBvcnRzLmNvZGVzID0gY29kZXM7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG4ndXNlIHN0cmljdCc7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG5cbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIEFsbG93IHRoZSBrZXlzIGFycmF5IHRvIGJlIEdDJ2VkLlxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcblxuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG4gICAgICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbiAgICB9XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7XG4gIH1cbn0pOyAvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5cbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBJZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCwgdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjsgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cblxuICBwcm9jZXNzLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pOyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhd2FpdGlmeTtcbi8vIGNvbmRpdGlvbmFsbHkgcHJvbWlzaWZ5IGEgZnVuY3Rpb24uXG4vLyBvbmx5IHJldHVybiBhIHByb21pc2UgaWYgYSBjYWxsYmFjayBpcyBvbWl0dGVkXG5mdW5jdGlvbiBhd2FpdGlmeShhc3luY0ZuLCBhcml0eSA9IGFzeW5jRm4ubGVuZ3RoKSB7XG4gICAgaWYgKCFhcml0eSkgdGhyb3cgbmV3IEVycm9yKCdhcml0eSBpcyB1bmRlZmluZWQnKTtcbiAgICBmdW5jdGlvbiBhd2FpdGFibGUoLi4uYXJncykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJpdHkgLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGFzeW5jRm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYXJnc1thcml0eSAtIDFdID0gKGVyciwgLi4uY2JBcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoY2JBcmdzLmxlbmd0aCA+IDEgPyBjYkFyZ3MgOiBjYkFyZ3NbMF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFzeW5jRm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdGFibGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuZXhwb3J0cy5maW5pc2hlZCA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvZW5kLW9mLXN0cmVhbS5qcycpO1xuZXhwb3J0cy5waXBlbGluZSA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMnKTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdpZnlcbnN0cmluZ2lmeS5kZWZhdWx0ID0gc3RyaW5naWZ5XG5zdHJpbmdpZnkuc3RhYmxlID0gZGV0ZXJtaW5pc3RpY1N0cmluZ2lmeVxuc3RyaW5naWZ5LnN0YWJsZVN0cmluZ2lmeSA9IGRldGVybWluaXN0aWNTdHJpbmdpZnlcblxudmFyIGFyciA9IFtdXG52YXIgcmVwbGFjZXJTdGFjayA9IFtdXG5cbi8vIFJlZ3VsYXIgc3RyaW5naWZ5XG5mdW5jdGlvbiBzdHJpbmdpZnkgKG9iaiwgcmVwbGFjZXIsIHNwYWNlcikge1xuICBkZWNpcmMob2JqLCAnJywgW10sIHVuZGVmaW5lZClcbiAgdmFyIHJlc1xuICBpZiAocmVwbGFjZXJTdGFjay5sZW5ndGggPT09IDApIHtcbiAgICByZXMgPSBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyLCBzcGFjZXIpXG4gIH0gZWxzZSB7XG4gICAgcmVzID0gSlNPTi5zdHJpbmdpZnkob2JqLCByZXBsYWNlR2V0dGVyVmFsdWVzKHJlcGxhY2VyKSwgc3BhY2VyKVxuICB9XG4gIHdoaWxlIChhcnIubGVuZ3RoICE9PSAwKSB7XG4gICAgdmFyIHBhcnQgPSBhcnIucG9wKClcbiAgICBpZiAocGFydC5sZW5ndGggPT09IDQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYXJ0WzBdLCBwYXJ0WzFdLCBwYXJ0WzNdKVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0WzBdW3BhcnRbMV1dID0gcGFydFsyXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5mdW5jdGlvbiBkZWNpcmMgKHZhbCwgaywgc3RhY2ssIHBhcmVudCkge1xuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RhY2tbaV0gPT09IHZhbCkge1xuICAgICAgICB2YXIgcHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIGspXG4gICAgICAgIGlmIChwcm9wZXJ0eURlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocHJvcGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcmVudCwgaywgeyB2YWx1ZTogJ1tDaXJjdWxhcl0nIH0pXG4gICAgICAgICAgICBhcnIucHVzaChbcGFyZW50LCBrLCB2YWwsIHByb3BlcnR5RGVzY3JpcHRvcl0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VyU3RhY2sucHVzaChbdmFsLCBrXSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50W2tdID0gJ1tDaXJjdWxhcl0nXG4gICAgICAgICAgYXJyLnB1c2goW3BhcmVudCwgaywgdmFsXSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgc3RhY2sucHVzaCh2YWwpXG4gICAgLy8gT3B0aW1pemUgZm9yIEFycmF5cy4gQmlnIGFycmF5cyBjb3VsZCBraWxsIHRoZSBwZXJmb3JtYW5jZSBvdGhlcndpc2UhXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICBkZWNpcmModmFsW2ldLCBpLCBzdGFjaywgdmFsKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbClcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldXG4gICAgICAgIGRlY2lyYyh2YWxba2V5XSwga2V5LCBzdGFjaywgdmFsKVxuICAgICAgfVxuICAgIH1cbiAgICBzdGFjay5wb3AoKVxuICB9XG59XG5cbi8vIFN0YWJsZS1zdHJpbmdpZnlcbmZ1bmN0aW9uIGNvbXBhcmVGdW5jdGlvbiAoYSwgYikge1xuICBpZiAoYSA8IGIpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoYSA+IGIpIHtcbiAgICByZXR1cm4gMVxuICB9XG4gIHJldHVybiAwXG59XG5cbmZ1bmN0aW9uIGRldGVybWluaXN0aWNTdHJpbmdpZnkgKG9iaiwgcmVwbGFjZXIsIHNwYWNlcikge1xuICB2YXIgdG1wID0gZGV0ZXJtaW5pc3RpY0RlY2lyYyhvYmosICcnLCBbXSwgdW5kZWZpbmVkKSB8fCBvYmpcbiAgdmFyIHJlc1xuICBpZiAocmVwbGFjZXJTdGFjay5sZW5ndGggPT09IDApIHtcbiAgICByZXMgPSBKU09OLnN0cmluZ2lmeSh0bXAsIHJlcGxhY2VyLCBzcGFjZXIpXG4gIH0gZWxzZSB7XG4gICAgcmVzID0gSlNPTi5zdHJpbmdpZnkodG1wLCByZXBsYWNlR2V0dGVyVmFsdWVzKHJlcGxhY2VyKSwgc3BhY2VyKVxuICB9XG4gIHdoaWxlIChhcnIubGVuZ3RoICE9PSAwKSB7XG4gICAgdmFyIHBhcnQgPSBhcnIucG9wKClcbiAgICBpZiAocGFydC5sZW5ndGggPT09IDQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYXJ0WzBdLCBwYXJ0WzFdLCBwYXJ0WzNdKVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0WzBdW3BhcnRbMV1dID0gcGFydFsyXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGRldGVybWluaXN0aWNEZWNpcmMgKHZhbCwgaywgc3RhY2ssIHBhcmVudCkge1xuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RhY2tbaV0gPT09IHZhbCkge1xuICAgICAgICB2YXIgcHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIGspXG4gICAgICAgIGlmIChwcm9wZXJ0eURlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocHJvcGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcmVudCwgaywgeyB2YWx1ZTogJ1tDaXJjdWxhcl0nIH0pXG4gICAgICAgICAgICBhcnIucHVzaChbcGFyZW50LCBrLCB2YWwsIHByb3BlcnR5RGVzY3JpcHRvcl0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VyU3RhY2sucHVzaChbdmFsLCBrXSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50W2tdID0gJ1tDaXJjdWxhcl0nXG4gICAgICAgICAgYXJyLnB1c2goW3BhcmVudCwgaywgdmFsXSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWwudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc3RhY2sucHVzaCh2YWwpXG4gICAgLy8gT3B0aW1pemUgZm9yIEFycmF5cy4gQmlnIGFycmF5cyBjb3VsZCBraWxsIHRoZSBwZXJmb3JtYW5jZSBvdGhlcndpc2UhXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICBkZXRlcm1pbmlzdGljRGVjaXJjKHZhbFtpXSwgaSwgc3RhY2ssIHZhbClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIGEgdGVtcG9yYXJ5IG9iamVjdCBpbiB0aGUgcmVxdWlyZWQgd2F5XG4gICAgICB2YXIgdG1wID0ge31cbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsKS5zb3J0KGNvbXBhcmVGdW5jdGlvbilcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldXG4gICAgICAgIGRldGVybWluaXN0aWNEZWNpcmModmFsW2tleV0sIGtleSwgc3RhY2ssIHZhbClcbiAgICAgICAgdG1wW2tleV0gPSB2YWxba2V5XVxuICAgICAgfVxuICAgICAgaWYgKHBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFyci5wdXNoKFtwYXJlbnQsIGssIHZhbF0pXG4gICAgICAgIHBhcmVudFtrXSA9IHRtcFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRtcFxuICAgICAgfVxuICAgIH1cbiAgICBzdGFjay5wb3AoKVxuICB9XG59XG5cbi8vIHdyYXBzIHJlcGxhY2VyIGZ1bmN0aW9uIHRvIGhhbmRsZSB2YWx1ZXMgd2UgY291bGRuJ3QgcmVwbGFjZVxuLy8gYW5kIG1hcmsgdGhlbSBhcyBbQ2lyY3VsYXJdXG5mdW5jdGlvbiByZXBsYWNlR2V0dGVyVmFsdWVzIChyZXBsYWNlcikge1xuICByZXBsYWNlciA9IHJlcGxhY2VyICE9PSB1bmRlZmluZWQgPyByZXBsYWNlciA6IGZ1bmN0aW9uIChrLCB2KSB7IHJldHVybiB2IH1cbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgIGlmIChyZXBsYWNlclN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVwbGFjZXJTdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IHJlcGxhY2VyU3RhY2tbaV1cbiAgICAgICAgaWYgKHBhcnRbMV0gPT09IGtleSAmJiBwYXJ0WzBdID09PSB2YWwpIHtcbiAgICAgICAgICB2YWwgPSAnW0NpcmN1bGFyXSdcbiAgICAgICAgICByZXBsYWNlclN0YWNrLnNwbGljZShpLCAxKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWwpXG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgVFlQRURfT0sgPSAgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKTtcblxuZnVuY3Rpb24gX2hhcyhvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiAob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgICBpZiAoX2hhcyhzb3VyY2UsIHApKSB7XG4gICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuXG4vLyByZWR1Y2UgYnVmZmVyIHNpemUsIGF2b2lkaW5nIG1lbSBjb3B5XG5leHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IHNpemUpIHsgcmV0dXJuIGJ1ZjsgfVxuICBpZiAoYnVmLnN1YmFycmF5KSB7IHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7IH1cbiAgYnVmLmxlbmd0aCA9IHNpemU7XG4gIHJldHVybiBidWY7XG59O1xuXG5cbnZhciBmblR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7XG4gICAgICBkZXN0LnNldChzcmMuc3ViYXJyYXkoc3JjX29mZnMsIHNyY19vZmZzICsgbGVuKSwgZGVzdF9vZmZzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07XG4gICAgfVxuICB9LFxuICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0byBzaW5nbGUgYXJyYXkuXG4gIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIChjaHVua3MpIHtcbiAgICB2YXIgaSwgbCwgbGVuLCBwb3MsIGNodW5rLCByZXN1bHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgZGF0YSBsZW5ndGhcbiAgICBsZW4gPSAwO1xuICAgIGZvciAoaSA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBqb2luIGNodW5rc1xuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgcG9zID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY2h1bmsgPSBjaHVua3NbaV07XG4gICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZm5VbnR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgY2h1bmtzKTtcbiAgfVxufTtcblxuXG4vLyBFbmFibGUvRGlzYWJsZSB0eXBlZCBhcnJheXMgdXNlLCBmb3IgdGVzdGluZ1xuLy9cbmV4cG9ydHMuc2V0VHlwZWQgPSBmdW5jdGlvbiAob24pIHtcbiAgaWYgKG9uKSB7XG4gICAgZXhwb3J0cy5CdWY4ICA9IFVpbnQ4QXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBJbnQzMkFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVHlwZWQpO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYzMiA9IEFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVW50eXBlZCk7XG4gIH1cbn07XG5cbmV4cG9ydHMuc2V0VHlwZWQoVFlQRURfT0spO1xuIiwiLy9cbi8vIFNlbGVjdCB0aGUgY29ycmVjdCBidWlsZCB2ZXJzaW9uIGRlcGVuZGluZyBvbiB0aGUgZW52aXJvbm1lbnQuXG4vL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7IiwibW9kdWxlLmV4cG9ydHMgPSBQcm9wVHlwZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBjb2xvcnMgPSByZXF1aXJlKCdjb2xvcnMvc2FmZScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpLFxuICAgIExFVkVMID0gX3JlcXVpcmUuTEVWRUwsXG4gICAgTUVTU0FHRSA9IF9yZXF1aXJlLk1FU1NBR0U7IC8vXG4vLyBGaXggY29sb3JzIG5vdCBhcHBlYXJpbmcgaW4gbm9uLXR0eSBlbnZpcm9ubWVudHNcbi8vXG5cblxuY29sb3JzLmVuYWJsZWQgPSB0cnVlO1xuLyoqXG4gKiBAcHJvcGVydHkge1JlZ0V4cH0gaGFzU3BhY2VcbiAqIFNpbXBsZSByZWdleCB0byBjaGVjayBmb3IgcHJlc2VuY2Ugb2Ygc3BhY2VzLlxuICovXG5cbnZhciBoYXNTcGFjZSA9IC9cXHMrLztcbi8qXG4gKiBDb2xvcml6ZXIgZm9ybWF0LiBXcmFwcyB0aGUgYGxldmVsYCBhbmQvb3IgYG1lc3NhZ2VgIHByb3BlcnRpZXNcbiAqIG9mIHRoZSBgaW5mb2Agb2JqZWN0cyB3aXRoIEFOU0kgY29sb3IgY29kZXMgYmFzZWQgb24gYSBmZXcgb3B0aW9ucy5cbiAqL1xuXG52YXIgQ29sb3JpemVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29sb3JpemVyKCkge1xuICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvcml6ZXIpO1xuXG4gICAgaWYgKG9wdHMuY29sb3JzKSB7XG4gICAgICB0aGlzLmFkZENvbG9ycyhvcHRzLmNvbG9ycyk7XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0cztcbiAgfVxuICAvKlxuICAgKiBBZGRzIHRoZSBjb2xvcnMgT2JqZWN0IHRvIHRoZSBzZXQgb2YgYWxsQ29sb3JzXG4gICAqIGtub3duIGJ5IHRoZSBDb2xvcml6ZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyBTZXQgb2YgY29sb3IgbWFwcGluZ3MgdG8gYWRkLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhDb2xvcml6ZXIsIFt7XG4gICAga2V5OiBcImFkZENvbG9yc1wiLFxuXG4gICAgLypcbiAgICAgKiBBZGRzIHRoZSBjb2xvcnMgT2JqZWN0IHRvIHRoZSBzZXQgb2YgYWxsQ29sb3JzXG4gICAgICoga25vd24gYnkgdGhlIENvbG9yaXplclxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyBTZXQgb2YgY29sb3IgbWFwcGluZ3MgdG8gYWRkLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDb2xvcnMoY2xycykge1xuICAgICAgcmV0dXJuIENvbG9yaXplci5hZGRDb2xvcnMoY2xycyk7XG4gICAgfVxuICAgIC8qXG4gICAgICogZnVuY3Rpb24gY29sb3JpemUgKGxvb2t1cCwgbGV2ZWwsIG1lc3NhZ2UpXG4gICAgICogUGVyZm9ybXMgbXVsdGktc3RlcCBjb2xvcml6YXRpb24gdXNpbmcgY29sb3JzL3NhZmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNvbG9yaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbG9yaXplKGxvb2t1cCwgbGV2ZWwsIG1lc3NhZ2UpIHtcbiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbWVzc2FnZSA9IGxldmVsO1xuICAgICAgfSAvL1xuICAgICAgLy8gSWYgdGhlIGNvbG9yIGZvciB0aGUgbGV2ZWwgaXMganVzdCBhIHN0cmluZ1xuICAgICAgLy8gdGhlbiBhdHRlbXB0IHRvIGNvbG9yaXplIHRoZSBtZXNzYWdlIHdpdGggaXQuXG4gICAgICAvL1xuXG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShDb2xvcml6ZXIuYWxsQ29sb3JzW2xvb2t1cF0pKSB7XG4gICAgICAgIHJldHVybiBjb2xvcnNbQ29sb3JpemVyLmFsbENvbG9yc1tsb29rdXBdXShtZXNzYWdlKTtcbiAgICAgIH0gLy9cbiAgICAgIC8vIElmIGl0IGlzIGFuIEFycmF5IHRoZW4gaXRlcmF0ZSBvdmVyIHRoYXQgQXJyYXksIGFwcGx5aW5nXG4gICAgICAvLyB0aGUgY29sb3JzIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gICAgICAvL1xuXG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBDb2xvcml6ZXIuYWxsQ29sb3JzW2xvb2t1cF0ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbWVzc2FnZSA9IGNvbG9yc1tDb2xvcml6ZXIuYWxsQ29sb3JzW2xvb2t1cF1baV1dKG1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBmdW5jdGlvbiB0cmFuc2Zvcm0gKGluZm8sIG9wdHMpXG4gICAgICogQXR0ZW1wdHMgdG8gY29sb3JpemUgdGhlIHsgbGV2ZWwsIG1lc3NhZ2UgfSBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBgbG9nZm9ybWAgaW5mbyBvYmplY3QuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKGluZm8sIG9wdHMpIHtcbiAgICAgIGlmIChvcHRzLmFsbCAmJiB0eXBlb2YgaW5mb1tNRVNTQUdFXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5mb1tNRVNTQUdFXSA9IHRoaXMuY29sb3JpemUoaW5mb1tMRVZFTF0sIGluZm8ubGV2ZWwsIGluZm9bTUVTU0FHRV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5sZXZlbCB8fCBvcHRzLmFsbCB8fCAhb3B0cy5tZXNzYWdlKSB7XG4gICAgICAgIGluZm8ubGV2ZWwgPSB0aGlzLmNvbG9yaXplKGluZm9bTEVWRUxdLCBpbmZvLmxldmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdHMuYWxsIHx8IG9wdHMubWVzc2FnZSkge1xuICAgICAgICBpbmZvLm1lc3NhZ2UgPSB0aGlzLmNvbG9yaXplKGluZm9bTEVWRUxdLCBpbmZvLmxldmVsLCBpbmZvLm1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJhZGRDb2xvcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29sb3JzKGNscnMpIHtcbiAgICAgIHZhciBuZXh0Q29sb3JzID0gT2JqZWN0LmtleXMoY2xycykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGxldmVsKSB7XG4gICAgICAgIGFjY1tsZXZlbF0gPSBoYXNTcGFjZS50ZXN0KGNscnNbbGV2ZWxdKSA/IGNscnNbbGV2ZWxdLnNwbGl0KGhhc1NwYWNlKSA6IGNscnNbbGV2ZWxdO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgQ29sb3JpemVyLmFsbENvbG9ycyA9IE9iamVjdC5hc3NpZ24oe30sIENvbG9yaXplci5hbGxDb2xvcnMgfHwge30sIG5leHRDb2xvcnMpO1xuICAgICAgcmV0dXJuIENvbG9yaXplci5hbGxDb2xvcnM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbG9yaXplcjtcbn0oKTtcbi8qXG4gKiBmdW5jdGlvbiBjb2xvcml6ZSAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNvbG9yaXplIEZvcm1hdCB0aGF0IGFwcGxpZXNcbiAqIGxldmVsIGNvbG9ycyB0byBgaW5mb2Agb2JqZWN0cy4gVGhpcyB3YXMgcHJldmlvdXNseSBleHBvc2VkXG4gKiBhcyB7IGNvbG9yaXplOiB0cnVlIH0gdG8gdHJhbnNwb3J0cyBpbiBgd2luc3RvbiA8IDMuMC4wYC5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcml6ZXIob3B0cyk7XG59OyAvL1xuLy8gQXR0YWNoIHRoZSBDb2xvcml6ZXIgZm9yIHJlZ2lzdHJhdGlvbiBwdXJwb3Nlc1xuLy9cblxuXG5tb2R1bGUuZXhwb3J0cy5Db2xvcml6ZXIgPSBtb2R1bGUuZXhwb3J0cy5Gb3JtYXQgPSBDb2xvcml6ZXI7IiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBcnJheUxpa2U7XG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB2YWx1ZS5sZW5ndGggPj0gMCAmJiB2YWx1ZS5sZW5ndGggJSAxID09PSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vLyBBIHRlbXBvcmFyeSB2YWx1ZSB1c2VkIHRvIGlkZW50aWZ5IGlmIHRoZSBsb29wIHNob3VsZCBiZSBicm9rZW4uXG4vLyBTZWUgIzEwNjQsICMxMjkzXG5jb25zdCBicmVha0xvb3AgPSB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJyZWFrTG9vcDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qIDxyZXBsYWNlbWVudD4gKi9cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgd3JpdGFibGVId20gPSBvcHRpb25zLndyaXRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmICh3cml0YWJsZUh3bSB8fCB3cml0YWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL2VuZC1vZi1zdHJlYW0gd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuXG5mdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZW9zKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gIHZhciByZWFkYWJsZSA9IG9wdHMucmVhZGFibGUgfHwgb3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlO1xuICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTtcblxuICB2YXIgb25sZWdhY3lmaW5pc2ggPSBmdW5jdGlvbiBvbmxlZ2FjeWZpbmlzaCgpIHtcbiAgICBpZiAoIXN0cmVhbS53cml0YWJsZSkgb25maW5pc2goKTtcbiAgfTtcblxuICB2YXIgd3JpdGFibGVFbmRlZCA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZSAmJiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQ7XG5cbiAgdmFyIG9uZmluaXNoID0gZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgd3JpdGFibGUgPSBmYWxzZTtcbiAgICB3cml0YWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIHJlYWRhYmxlRW5kZWQgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGUgJiYgc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ7XG5cbiAgdmFyIG9uZW5kID0gZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgcmVhZGFibGUgPSBmYWxzZTtcbiAgICByZWFkYWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXdyaXRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICB9O1xuXG4gIHZhciBvbmNsb3NlID0gZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICB2YXIgZXJyO1xuXG4gICAgaWYgKHJlYWRhYmxlICYmICFyZWFkYWJsZUVuZGVkKSB7XG4gICAgICBpZiAoIXN0cmVhbS5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBpZiAod3JpdGFibGUgJiYgIXdyaXRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24gb25yZXF1ZXN0KCkge1xuICAgIHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgfTtcblxuICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcbiAgICBzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICB9IGVsc2UgaWYgKHdyaXRhYmxlICYmICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAvLyBsZWdhY3kgc3RyZWFtc1xuICAgIHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gIH1cblxuICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcbiAgc3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlb3M7IiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIi8qKlxuICogaW5kZXguanM6IERlZmF1bHQgc2V0dGluZ3MgZm9yIGFsbCBsZXZlbHMgdGhhdCB3aW5zdG9uIGtub3dzIGFib3V0LlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nZm9ybSA9IHJlcXVpcmUoJ2xvZ2Zvcm0nKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBjb25maWdzID0gX3JlcXVpcmUuY29uZmlncztcbi8qKlxuICogRXhwb3J0IGNvbmZpZyBzZXQgZm9yIHRoZSBDTEkuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cblxuZXhwb3J0cy5jbGkgPSBsb2dmb3JtLmxldmVscyhjb25maWdzLmNsaSk7XG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciBucG0uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmV4cG9ydHMubnBtID0gbG9nZm9ybS5sZXZlbHMoY29uZmlncy5ucG0pO1xuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgdGhlIHN5c2xvZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxuZXhwb3J0cy5zeXNsb2cgPSBsb2dmb3JtLmxldmVscyhjb25maWdzLnN5c2xvZyk7XG4vKipcbiAqIEhvaXN0IGFkZENvbG9ycyBmcm9tIGxvZ2Zvcm0gd2hlcmUgaXQgd2FzIHJlZmFjdG9yZWQgaW50byBpbiB3aW5zdG9uQDMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmV4cG9ydHMuYWRkQ29sb3JzID0gbG9nZm9ybS5sZXZlbHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2VhY2hPZiA9IHJlcXVpcmUoJy4vZWFjaE9mJyk7XG5cbnZhciBfZWFjaE9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VhY2hPZik7XG5cbnZhciBfd2l0aG91dEluZGV4ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC93aXRob3V0SW5kZXgnKTtcblxudmFyIF93aXRob3V0SW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2l0aG91dEluZGV4KTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG52YXIgX2F3YWl0aWZ5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hd2FpdGlmeScpO1xuXG52YXIgX2F3YWl0aWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F3YWl0aWZ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBmdW5jdGlvbiBgaXRlcmF0ZWVgIHRvIGVhY2ggaXRlbSBpbiBgY29sbGAsIGluIHBhcmFsbGVsLlxuICogVGhlIGBpdGVyYXRlZWAgaXMgY2FsbGVkIHdpdGggYW4gaXRlbSBmcm9tIHRoZSBsaXN0LCBhbmQgYSBjYWxsYmFjayBmb3Igd2hlblxuICogaXQgaGFzIGZpbmlzaGVkLiBJZiB0aGUgYGl0ZXJhdGVlYCBwYXNzZXMgYW4gZXJyb3IgdG8gaXRzIGBjYWxsYmFja2AsIHRoZVxuICogbWFpbiBgY2FsbGJhY2tgIChmb3IgdGhlIGBlYWNoYCBmdW5jdGlvbikgaXMgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlXG4gKiBlcnJvci5cbiAqXG4gKiBOb3RlLCB0aGF0IHNpbmNlIHRoaXMgZnVuY3Rpb24gYXBwbGllcyBgaXRlcmF0ZWVgIHRvIGVhY2ggaXRlbSBpbiBwYXJhbGxlbCxcbiAqIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBpdGVyYXRlZSBmdW5jdGlvbnMgd2lsbCBjb21wbGV0ZSBpbiBvcmRlci5cbiAqXG4gKiBAbmFtZSBlYWNoXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgZm9yRWFjaFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8QXN5bmNJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHRvIGFwcGx5IHRvXG4gKiBlYWNoIGl0ZW0gaW4gYGNvbGxgLiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIFRoZSBhcnJheSBpbmRleCBpcyBub3QgcGFzc2VkIHRvIHRoZSBpdGVyYXRlZS5cbiAqIElmIHlvdSBuZWVkIHRoZSBpbmRleCwgdXNlIGBlYWNoT2ZgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYWxsXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLCBvciBhbiBlcnJvciBvY2N1cnMuIEludm9rZWQgd2l0aCAoZXJyKS5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBhIHByb21pc2UsIGlmIGEgY2FsbGJhY2sgaXMgb21pdHRlZFxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBhc3N1bWluZyBvcGVuRmlsZXMgaXMgYW4gYXJyYXkgb2YgZmlsZSBuYW1lcyBhbmQgc2F2ZUZpbGUgaXMgYSBmdW5jdGlvblxuICogLy8gdG8gc2F2ZSB0aGUgbW9kaWZpZWQgY29udGVudHMgb2YgdGhhdCBmaWxlOlxuICpcbiAqIGFzeW5jLmVhY2gob3BlbkZpbGVzLCBzYXZlRmlsZSwgZnVuY3Rpb24oZXJyKXtcbiAqICAgLy8gaWYgYW55IG9mIHRoZSBzYXZlcyBwcm9kdWNlZCBhbiBlcnJvciwgZXJyIHdvdWxkIGVxdWFsIHRoYXQgZXJyb3JcbiAqIH0pO1xuICpcbiAqIC8vIGFzc3VtaW5nIG9wZW5GaWxlcyBpcyBhbiBhcnJheSBvZiBmaWxlIG5hbWVzXG4gKiBhc3luYy5lYWNoKG9wZW5GaWxlcywgZnVuY3Rpb24oZmlsZSwgY2FsbGJhY2spIHtcbiAqXG4gKiAgICAgLy8gUGVyZm9ybSBvcGVyYXRpb24gb24gZmlsZSBoZXJlLlxuICogICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGZpbGUgJyArIGZpbGUpO1xuICpcbiAqICAgICBpZiggZmlsZS5sZW5ndGggPiAzMiApIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdUaGlzIGZpbGUgbmFtZSBpcyB0b28gbG9uZycpO1xuICogICAgICAgY2FsbGJhY2soJ0ZpbGUgbmFtZSB0b28gbG9uZycpO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICAvLyBEbyB3b3JrIHRvIHByb2Nlc3MgZmlsZSBoZXJlXG4gKiAgICAgICBjb25zb2xlLmxvZygnRmlsZSBwcm9jZXNzZWQnKTtcbiAqICAgICAgIGNhbGxiYWNrKCk7XG4gKiAgICAgfVxuICogfSwgZnVuY3Rpb24oZXJyKSB7XG4gKiAgICAgLy8gaWYgYW55IG9mIHRoZSBmaWxlIHByb2Nlc3NpbmcgcHJvZHVjZWQgYW4gZXJyb3IsIGVyciB3b3VsZCBlcXVhbCB0aGF0IGVycm9yXG4gKiAgICAgaWYoIGVyciApIHtcbiAqICAgICAgIC8vIE9uZSBvZiB0aGUgaXRlcmF0aW9ucyBwcm9kdWNlZCBhbiBlcnJvci5cbiAqICAgICAgIC8vIEFsbCBwcm9jZXNzaW5nIHdpbGwgbm93IHN0b3AuXG4gKiAgICAgICBjb25zb2xlLmxvZygnQSBmaWxlIGZhaWxlZCB0byBwcm9jZXNzJyk7XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdBbGwgZmlsZXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHknKTtcbiAqICAgICB9XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZWFjaExpbWl0KGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICByZXR1cm4gKDAsIF9lYWNoT2YyLmRlZmF1bHQpKGNvbGwsICgwLCBfd2l0aG91dEluZGV4Mi5kZWZhdWx0KSgoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkoaXRlcmF0ZWUpKSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KShlYWNoTGltaXQsIDMpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmV0dXJuLWFzc2lnbiAqL1xuaW1wb3J0IGNhblVzZURPTSBmcm9tICcuL2NhblVzZURPTSc7XG5leHBvcnQgdmFyIG9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTtcbmV4cG9ydCB2YXIgb25jZVN1cHBvcnRlZCA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZ2V0IG9uY2UoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbXVsdGktYXNzaWduXG4gICAgICByZXR1cm4gb25jZVN1cHBvcnRlZCA9IG9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH1cblxuICB9O1xuXG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgdHJ1ZSk7XG4gIH1cbn0gY2F0Y2ggKGUpIHtcbiAgLyogKi9cbn1cblxuLyoqXG4gKiBBbiBgYWRkRXZlbnRMaXN0ZW5lcmAgcG9ueWZpbGwsIHN1cHBvcnRzIHRoZSBgb25jZWAgb3B0aW9uXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zICE9PSAnYm9vbGVhbicgJiYgIW9uY2VTdXBwb3J0ZWQpIHtcbiAgICB2YXIgb25jZSA9IG9wdGlvbnMub25jZSxcbiAgICAgICAgY2FwdHVyZSA9IG9wdGlvbnMuY2FwdHVyZTtcbiAgICB2YXIgd3JhcHBlZEhhbmRsZXIgPSBoYW5kbGVyO1xuXG4gICAgaWYgKCFvbmNlU3VwcG9ydGVkICYmIG9uY2UpIHtcbiAgICAgIHdyYXBwZWRIYW5kbGVyID0gaGFuZGxlci5fX29uY2UgfHwgZnVuY3Rpb24gb25jZUhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaGFuZGxlci5fX29uY2UgPSB3cmFwcGVkSGFuZGxlcjtcbiAgICB9XG5cbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB3cmFwcGVkSGFuZGxlciwgb3B0aW9uc1N1cHBvcnRlZCA/IG9wdGlvbnMgOiBjYXB0dXJlKTtcbiAgfVxuXG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRFdmVudExpc3RlbmVyOyIsImZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIHZhciBjYXB0dXJlID0gb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5jYXB0dXJlIDogb3B0aW9ucztcbiAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgaWYgKGhhbmRsZXIuX19vbmNlKSB7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlci5fX29uY2UsIGNhcHR1cmUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbW92ZUV2ZW50TGlzdGVuZXI7IiwiaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAnLi9hZGRFdmVudExpc3RlbmVyJztcbmltcG9ydCByZW1vdmVFdmVudExpc3RlbmVyIGZyb20gJy4vcmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdGVuOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8qXG4gKiBAYXBpIHB1YmxpY1xuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZm9ybWF0XG4gKiBCb3RoIHRoZSBjb25zdHJ1Y3Rpb24gbWV0aG9kIGFuZCBzZXQgb2YgZXhwb3NlZFxuICogZm9ybWF0cy5cbiAqL1xuXG52YXIgZm9ybWF0ID0gZXhwb3J0cy5mb3JtYXQgPSByZXF1aXJlKCcuLy4vZm9ybWF0Jyk7XG4vKlxuICogQGFwaSBwdWJsaWNcbiAqIEBtZXRob2Qge2Z1bmN0aW9ufSBsZXZlbHNcbiAqIFJlZ2lzdGVycyB0aGUgc3BlY2lmaWVkIGxldmVscyB3aXRoIGxvZ2Zvcm0uXG4gKi9cblxuXG5leHBvcnRzLmxldmVscyA9IHJlcXVpcmUoJy4vLi9sZXZlbHMnKTsgLy9cbi8vIFNldHVwIGFsbCB0cmFuc3BvcnRzIGFzIGVhZ2VyLWxvYWRlZCBleHBvcnRzXG4vLyBzbyB0aGF0IHRoZXkgYXJlIHN0YXRpYyBmb3IgdGhlIGJ1bmRsZXJzLlxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2FsaWduJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9hbGlnbicpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdjbGknLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL2NsaScpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdjb21iaW5lJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9jb21iaW5lJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2NvbG9yaXplJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9jb2xvcml6ZScpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdqc29uJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9qc29uJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2xhYmVsJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9sYWJlbCcpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdsb2dzdGFzaCcsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vbG9nc3Rhc2gnKVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZm9ybWF0LCAnbWV0YWRhdGEnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL21ldGFkYXRhJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3BhZExldmVscycsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vcGFkLWxldmVscycpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdwcmV0dHlQcmludCcsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vcHJldHR5LXByaW50Jylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3ByaW50ZicsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vcHJpbnRmJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3NpbXBsZScsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vc2ltcGxlJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3NwbGF0Jywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9zcGxhdCcpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICd0aW1lc3RhbXAnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL3RpbWVzdGFtcCcpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICd1bmNvbG9yaXplJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi91bmNvbG9yaXplJylcbn0pOyIsIi8vXG4vLyBSZW1hcms6IFJlcXVpcmluZyB0aGlzIGZpbGUgd2lsbCB1c2UgdGhlIFwic2FmZVwiIGNvbG9ycyBBUEksXG4vLyB3aGljaCB3aWxsIG5vdCB0b3VjaCBTdHJpbmcucHJvdG90eXBlLlxuLy9cbi8vICAgdmFyIGNvbG9ycyA9IHJlcXVpcmUoJ2NvbG9ycy9zYWZlJyk7XG4vLyAgIGNvbG9ycy5yZWQoXCJmb29cIilcbi8vXG4vL1xudmFyIGNvbG9ycyA9IHJlcXVpcmUoJy4vbGliL2NvbG9ycycpO1xubW9kdWxlWydleHBvcnRzJ10gPSBjb2xvcnM7XG4iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IDAgKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gICAgY29uZmlncyA9IF9yZXF1aXJlLmNvbmZpZ3MsXG4gICAgTEVWRUwgPSBfcmVxdWlyZS5MRVZFTCxcbiAgICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcblxudmFyIFBhZGRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhZGRlcigpIHtcbiAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge1xuICAgICAgbGV2ZWxzOiBjb25maWdzLm5wbS5sZXZlbHNcbiAgICB9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZGRlcik7XG5cbiAgICB0aGlzLnBhZGRpbmdzID0gUGFkZGVyLnBhZGRpbmdGb3JMZXZlbHMob3B0cy5sZXZlbHMsIG9wdHMuZmlsbGVyKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGxlbmd0aCBvZiBrZXlzIGluIHRoZSBzcGVjaWZpZWQgYGxldmVsc2AgT2JqZWN0LlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGxldmVscyBTZXQgb2YgYWxsIGxldmVscyB0byBjYWxjdWxhdGUgbG9uZ2VzdCBsZXZlbCBhZ2FpbnN0LlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBNYXhpbXVtIGxlbmd0aCBvZiB0aGUgbG9uZ2VzdCBsZXZlbCBzdHJpbmcuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFBhZGRlciwgW3tcbiAgICBrZXk6IFwidHJhbnNmb3JtXCIsXG5cbiAgICAvKipcbiAgICAgKiBQcmVwZW5kcyB0aGUgcGFkZGluZyBvbnRvIHRoZSBgbWVzc2FnZWAgYmFzZWQgb24gdGhlIGBMRVZFTGAgb2ZcbiAgICAgKiB0aGUgYGluZm9gLiBUaGlzIGlzIGJhc2VkIG9uIHRoZSBiZWhhdmlvciBvZiBgd2luc3RvbkAyYCB3aGljaCBhbHNvXG4gICAgICogcHJlcGVuZGVkIHRoZSBsZXZlbCBvbnRvIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vYmxvYi8yLngvbGliL3dpbnN0b24vbG9nZ2VyLmpzI0wxOTgtTDIwMVxuICAgICAqXG4gICAgICogQHBhcmFtICB7SW5mb30gaW5mbyBMb2dmb3JtIGluZm8gb2JqZWN0XG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRzIE9wdGlvbnMgcGFzc2VkIGFsb25nIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge0luZm99IE1vZGlmaWVkIGxvZ2Zvcm0gaW5mbyBvYmplY3QuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShpbmZvLCBvcHRzKSB7XG4gICAgICBpbmZvLm1lc3NhZ2UgPSBcIlwiLmNvbmNhdCh0aGlzLnBhZGRpbmdzW2luZm9bTEVWRUxdXSkuY29uY2F0KGluZm8ubWVzc2FnZSk7XG5cbiAgICAgIGlmIChpbmZvW01FU1NBR0VdKSB7XG4gICAgICAgIGluZm9bTUVTU0FHRV0gPSBcIlwiLmNvbmNhdCh0aGlzLnBhZGRpbmdzW2luZm9bTEVWRUxdXSkuY29uY2F0KGluZm9bTUVTU0FHRV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXRMb25nZXN0TGV2ZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9uZ2VzdExldmVsKGxldmVscykge1xuICAgICAgdmFyIGx2bHMgPSBPYmplY3Qua2V5cyhsZXZlbHMpLm1hcChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGxldmVsLmxlbmd0aDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShsdmxzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIHRoZSBzcGVjaWZpZWQgYGxldmVsYCBhc3N1bWluZyB0aGF0IHRoZVxuICAgICAqIG1heGltdW0gbGVuZ3RoIG9mIGFsbCBsZXZlbHMgaXQncyBhc3NvY2lhdGVkIHdpdGggaXMgYG1heExlbmd0aGAuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBsZXZlbCBMZXZlbCB0byBjYWxjdWxhdGUgcGFkZGluZyBmb3IuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBmaWxsZXIgUmVwZWF0YWJsZSB0ZXh0IHRvIHVzZSBmb3IgcGFkZGluZy5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG1heExlbmd0aCBMZW5ndGggb2YgdGhlIGxvbmdlc3QgbGV2ZWxcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBQYWRkaW5nIHN0cmluZyBmb3IgdGhlIGBsZXZlbGBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBhZGRpbmdGb3JMZXZlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYWRkaW5nRm9yTGV2ZWwobGV2ZWwsIGZpbGxlciwgbWF4TGVuZ3RoKSB7XG4gICAgICB2YXIgdGFyZ2V0TGVuID0gbWF4TGVuZ3RoICsgMSAtIGxldmVsLmxlbmd0aDtcbiAgICAgIHZhciByZXAgPSBNYXRoLmZsb29yKHRhcmdldExlbiAvIGZpbGxlci5sZW5ndGgpO1xuICAgICAgdmFyIHBhZGRpbmcgPSBcIlwiLmNvbmNhdChmaWxsZXIpLmNvbmNhdChmaWxsZXIucmVwZWF0KHJlcCkpO1xuICAgICAgcmV0dXJuIHBhZGRpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgc3RyaW5nIHBhZGRpbmdzIGZvciB0aGUgZ2l2ZW4gYGxldmVsc2BcbiAgICAgKiB1c2luZyB0aGUgc3BlY2lmaWVkIGBmaWxsZXJgLlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gbGV2ZWxzIFNldCBvZiBhbGwgbGV2ZWxzIHRvIGNhbGN1bGF0ZSBwYWRkaW5nIGZvci5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZpbGxlciBSZXBlYXRhYmxlIHRleHQgdG8gdXNlIGZvciBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IE1hcHBpbmcgb2YgbGV2ZWwgdG8gZGVzaXJlZCBwYWRkaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGFkZGluZ0ZvckxldmVsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYWRkaW5nRm9yTGV2ZWxzKGxldmVscykge1xuICAgICAgdmFyIGZpbGxlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyAnO1xuICAgICAgdmFyIG1heExlbmd0aCA9IFBhZGRlci5nZXRMb25nZXN0TGV2ZWwobGV2ZWxzKTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhsZXZlbHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBsZXZlbCkge1xuICAgICAgICBhY2NbbGV2ZWxdID0gUGFkZGVyLnBhZGRpbmdGb3JMZXZlbChsZXZlbCwgZmlsbGVyLCBtYXhMZW5ndGgpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWRkZXI7XG59KCk7XG4vKlxuICogZnVuY3Rpb24gcGFkTGV2ZWxzIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgcGFkTGV2ZWxzIEZvcm1hdCB3aGljaCBwYWRzXG4gKiBsZXZlbHMgdG8gYmUgdGhlIHNhbWUgbGVuZ3RoLiBUaGlzIHdhcyBwcmV2aW91c2x5IGV4cG9zZWQgYXNcbiAqIHsgcGFkTGV2ZWxzOiB0cnVlIH0gdG8gdHJhbnNwb3J0cyBpbiBgd2luc3RvbiA8IDMuMC4wYC5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQYWRkZXIob3B0cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5QYWRkZXIgPSBtb2R1bGUuZXhwb3J0cy5Gb3JtYXQgPSBQYWRkZXI7IiwiLyoqXG4gKiBjb21tb24uanM6IEludGVybmFsIGhlbHBlciBhbmQgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHdpbnN0b24uXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBmb3JtYXQgPSBfcmVxdWlyZS5mb3JtYXQ7XG4vKipcbiAqIFNldCBvZiBzaW1wbGUgZGVwcmVjYXRpb24gbm90aWNlcyBhbmQgYSB3YXkgdG8gZXhwb3NlIHRoZW0gZm9yIGEgc2V0IG9mXG4gKiBwcm9wZXJ0aWVzLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5leHBvcnRzLndhcm4gPSB7XG4gIGRlcHJlY2F0ZWQ6IGZ1bmN0aW9uIGRlcHJlY2F0ZWQocHJvcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCd7ICVzIH0gd2FzIHJlbW92ZWQgaW4gd2luc3RvbkAzLjAuMC4nLCBwcm9wKSk7XG4gICAgfTtcbiAgfSxcbiAgdXNlRm9ybWF0OiBmdW5jdGlvbiB1c2VGb3JtYXQocHJvcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoW2Zvcm1hdCgneyAlcyB9IHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCksICdVc2UgYSBjdXN0b20gd2luc3Rvbi5mb3JtYXQgPSB3aW5zdG9uLmZvcm1hdChmdW5jdGlvbikgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfTtcbiAgfSxcbiAgZm9yRnVuY3Rpb25zOiBmdW5jdGlvbiBmb3JGdW5jdGlvbnMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIG9ialtwcm9wXSA9IGV4cG9ydHMud2Fyblt0eXBlXShwcm9wKTtcbiAgICB9KTtcbiAgfSxcbiAgbW92ZWQ6IGZ1bmN0aW9uIG1vdmVkKG9iaiwgbW92ZWRUbywgcHJvcCkge1xuICAgIGZ1bmN0aW9uIG1vdmVkTm90aWNlKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFtmb3JtYXQoJ3dpbnN0b24uJXMgd2FzIG1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCksIGZvcm1hdCgnVXNlIGEgd2luc3Rvbi4lcyBpbnN0ZWFkLicsIG1vdmVkVG8pXS5qb2luKCdcXG4nKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICAgIGdldDogbW92ZWROb3RpY2UsXG4gICAgICBzZXQ6IG1vdmVkTm90aWNlXG4gICAgfSk7XG4gIH0sXG4gIGZvclByb3BlcnRpZXM6IGZ1bmN0aW9uIGZvclByb3BlcnRpZXMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHZhciBub3RpY2UgPSBleHBvcnRzLndhcm5bdHlwZV0ocHJvcCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7XG4gICAgICAgIGdldDogbm90aWNlLFxuICAgICAgICBzZXQ6IG5vdGljZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9lYWNoT2ZMaW1pdDIgPSByZXF1aXJlKCcuL2ludGVybmFsL2VhY2hPZkxpbWl0Jyk7XG5cbnZhciBfZWFjaE9mTGltaXQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mTGltaXQyKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG52YXIgX2F3YWl0aWZ5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hd2FpdGlmeScpO1xuXG52YXIgX2F3YWl0aWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F3YWl0aWZ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGVhY2hPZmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNoT2Z9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYVxuICogdGltZS5cbiAqXG4gKiBAbmFtZSBlYWNoT2ZMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZWFjaE9mXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaE9mfVxuICogQGFsaWFzIGZvckVhY2hPZkxpbWl0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxBc3luY0l0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXN5bmMgb3BlcmF0aW9ucyBhdCBhIHRpbWUuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaFxuICogaXRlbSBpbiBgY29sbGAuIFRoZSBga2V5YCBpcyB0aGUgaXRlbSdzIGtleSwgb3IgaW5kZXggaW4gdGhlIGNhc2Ugb2YgYW5cbiAqIGFycmF5LlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBrZXksIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbFxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBJbnZva2VkIHdpdGggKGVycikuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gYSBwcm9taXNlLCBpZiBhIGNhbGxiYWNrIGlzIG9taXR0ZWRcbiAqL1xuZnVuY3Rpb24gZWFjaE9mTGltaXQoY29sbCwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICByZXR1cm4gKDAsIF9lYWNoT2ZMaW1pdDMuZGVmYXVsdCkobGltaXQpKGNvbGwsICgwLCBfd3JhcEFzeW5jMi5kZWZhdWx0KShpdGVyYXRlZSksIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9hd2FpdGlmeTIuZGVmYXVsdCkoZWFjaE9mTGltaXQsIDQpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9uY2U7XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgZnVuY3Rpb24gd3JhcHBlciguLi5hcmdzKSB7XG4gICAgICAgIGlmIChmbiA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICB2YXIgY2FsbEZuID0gZm47XG4gICAgICAgIGZuID0gbnVsbDtcbiAgICAgICAgY2FsbEZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHdyYXBwZXIsIGZuKTtcbiAgICByZXR1cm4gd3JhcHBlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9ubHlPbmNlO1xuZnVuY3Rpb24gb25seU9uY2UoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGZuID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJDYWxsYmFjayB3YXMgYWxyZWFkeSBjYWxsZWQuXCIpO1xuICAgICAgICB2YXIgY2FsbEZuID0gZm47XG4gICAgICAgIGZuID0gbnVsbDtcbiAgICAgICAgY2FsbEZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgaWYgKGdsb2JhbC5CdWZmZXIgJiYgdHlwZW9mIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcbiAgfVxuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKTtcbn1cblxuLy8gYmFzZWQgb24gbm9kZSBhc3NlcnQsIG9yaWdpbmFsIG5vdGljZTpcbi8vIE5COiBUaGUgVVJMIHRvIHRoZSBDb21tb25KUyBzcGVjIGlzIGtlcHQganVzdCBmb3IgdHJhZGl0aW9uLlxuLy8gICAgIG5vZGUtYXNzZXJ0IGhhcyBldm9sdmVkIGEgbG90IHNpbmNlIHRoZW4sIGJvdGggaW4gQVBJIGFuZCBiZWhhdmlvci5cblxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG59KCkpO1xuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xufVxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xuICBpZiAoaXNCdWZmZXIoYXJyYnVmKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYnVmKTtcbiAgfVxuICBpZiAoIWFycmJ1Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYXJyYnVmIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYXJyYnVmLmJ1ZmZlciAmJiBhcnJidWYuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXlxcKFxcc10qKVxccyovO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9ibG9iL2FkZWVlZWM4YmZjYzYwNjhiMTg3ZDdkOWZiM2Q1YmIxZDNhMzA4OTkvaW1wbGVtZW50YXRpb24uanNcbmZ1bmN0aW9uIGdldE5hbWUoZnVuYykge1xuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmMubmFtZTtcbiAgfVxuICB2YXIgc3RyID0gZnVuYy50b1N0cmluZygpO1xuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcbiAgICAgIHZhciBmbl9uYW1lID0gZ2V0TmFtZShzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXG4nICsgZm5fbmFtZSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG4gICAgfVxuICB9XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzIHx8ICF1dGlsLmlzRnVuY3Rpb24oc29tZXRoaW5nKSkge1xuICAgIHJldHVybiB1dGlsLmluc3BlY3Qoc29tZXRoaW5nKTtcbiAgfVxuICB2YXIgcmF3bmFtZSA9IGdldE5hbWUoc29tZXRoaW5nKTtcbiAgdmFyIG5hbWUgPSByYXduYW1lID8gJzogJyArIHJhd25hbWUgOiAnJztcbiAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcbiAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcbiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgK1xuICAgICAgICAgdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmV4cGVjdGVkKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG4gICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJlxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKChhY3R1YWwgPT09IG51bGwgfHwgdHlwZW9mIGFjdHVhbCAhPT0gJ29iamVjdCcpICYmXG4gICAgICAgICAgICAgKGV4cGVjdGVkID09PSBudWxsIHx8IHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiB0eXBlZCBhcnJheXMsIHdyYXAgdGhlaXIgdW5kZXJseWluZ1xuICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxuICAvLyBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGUgYXJyYXlzIHRvIGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBjaGVja2VkIGJ5XG4gIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKGFrYSBwVG9TdHJpbmcpLiBOZXZlciBwZXJmb3JtIGJpbmFyeVxuICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxuICAvLyBiaXQgcGF0dGVybnMgYXJlIG5vdCBpZGVudGljYWwuXG4gIH0gZWxzZSBpZiAoaXNWaWV3KGFjdHVhbCkgJiYgaXNWaWV3KGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXG4gICAgICAgICAgICAgIShhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcbiAgICAgICAgICAgICAgIGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpIHtcbiAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcbiAgICAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShleHBlY3RlZC5idWZmZXIpKSA9PT0gMDtcblxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xuXG4gICAgdmFyIGFjdHVhbEluZGV4ID0gbWVtb3MuYWN0dWFsLmluZGV4T2YoYWN0dWFsKTtcbiAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoYWN0dWFsSW5kZXggPT09IG1lbW9zLmV4cGVjdGVkLmluZGV4T2YoZXhwZWN0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XG4gICAgbWVtb3MuZXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG5cbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykge1xuICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSk7XG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XG4gIH1cbiAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgdmFyIGtleSwgaTtcbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT09IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwU3RyaWN0RXF1YWwnLCBub3REZWVwU3RyaWN0RXF1YWwpO1xuICB9XG59XG5cblxuLy8gOS4gVGhlIHN0cmljdCBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc3RyaWN0IGVxdWFsaXR5LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIF90cnlCbG9jayhibG9jaykge1xuICB2YXIgZXJyb3I7XG4gIHRyeSB7XG4gICAgYmxvY2soKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xuXG4gIG1lc3NhZ2UgPSAoZXhwZWN0ZWQgJiYgZXhwZWN0ZWQubmFtZSA/ICcgKCcgKyBleHBlY3RlZC5uYW1lICsgJykuJyA6ICcuJykgK1xuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcblxuICBpZiAoc2hvdWxkVGhyb3cgJiYgIWFjdHVhbCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gIHZhciBpc1Vud2FudGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIHV0aWwuaXNFcnJvcihhY3R1YWwpO1xuICB2YXIgaXNVbmV4cGVjdGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIGFjdHVhbCAmJiAhZXhwZWN0ZWQ7XG5cbiAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG4gICAgICB1c2VyUHJvdmlkZWRNZXNzYWdlICYmXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcbiAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MoZmFsc2UsIGJsb2NrLCBlcnJvciwgbWVzc2FnZSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB0aHJvdyBlcnI7IH07XG5cbi8vIEV4cG9zZSBhIHN0cmljdCBvbmx5IHZhcmlhbnQgb2YgYXNzZXJ0XG5mdW5jdGlvbiBzdHJpY3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09Jywgc3RyaWN0KTtcbn1cbmFzc2VydC5zdHJpY3QgPSBvYmplY3RBc3NpZ24oc3RyaWN0LCBhc3NlcnQsIHtcbiAgZXF1YWw6IGFzc2VydC5zdHJpY3RFcXVhbCxcbiAgZGVlcEVxdWFsOiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsLFxuICBub3RFcXVhbDogYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLFxuICBub3REZWVwRXF1YWw6IGFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWxcbn0pO1xuYXNzZXJ0LnN0cmljdC5zdHJpY3QgPSBhc3NlcnQuc3RyaWN0O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogYWRsZXIzMiB0YWtlcyAxMiUgZm9yIGxldmVsIDAgYW5kIDIlIGZvciBsZXZlbCA2LlxuLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gYWRsZXIzMihhZGxlciwgYnVmLCBsZW4sIHBvcykge1xuICB2YXIgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLFxuICAgICAgbiA9IDA7XG5cbiAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXG4gICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cbiAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XG4gICAgbGVuIC09IG47XG5cbiAgICBkbyB7XG4gICAgICBzMSA9IChzMSArIGJ1Zltwb3MrK10pIHwwO1xuICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIHMxICU9IDY1NTIxO1xuICAgIHMyICU9IDY1NTIxO1xuICB9XG5cbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG4vLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5mdW5jdGlvbiBtYWtlVGFibGUoKSB7XG4gIHZhciBjLCB0YWJsZSA9IFtdO1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9ICgoYyAmIDEpID8gKDB4RURCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpKTtcbiAgICB9XG4gICAgdGFibGVbbl0gPSBjO1xuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxudmFyIGNyY1RhYmxlID0gbWFrZVRhYmxlKCk7XG5cblxuZnVuY3Rpb24gY3JjMzIoY3JjLCBidWYsIGxlbiwgcG9zKSB7XG4gIHZhciB0ID0gY3JjVGFibGUsXG4gICAgICBlbmQgPSBwb3MgKyBsZW47XG5cbiAgY3JjIF49IC0xO1xuXG4gIGZvciAodmFyIGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdO1xuICB9XG5cbiAgcmV0dXJuIChjcmMgXiAoLTEpKTsgLy8gPj4+IDA7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIEVFbGlzdGVuZXJDb3VudChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5cbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cblxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG4vKjxyZXBsYWNlbWVudD4qL1xuXG5cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBkZWJ1ZztcblxuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiBkZWJ1ZygpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvYnVmZmVyX2xpc3QnKTtcblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlJyksXG4gICAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsXG4gICAgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRiA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVDsgLy8gTGF6eSBsb2FkZWQgdG8gaW1wcm92ZSB0aGUgc3RhcnR1cCBwZXJmb3JtYW5jZS5cblxuXG52YXIgU3RyaW5nRGVjb2RlcjtcbnZhciBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3I7XG52YXIgZnJvbTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGVycm9yT3JEZXN0cm95ID0gZGVzdHJveUltcGwuZXJyb3JPckRlc3Ryb3k7XG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTsgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChBcnJheS5pc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtLCBpc0R1cGxleCkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuXG4gIGlmICh0eXBlb2YgaXNEdXBsZXggIT09ICdib29sZWFuJykgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7IC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcblxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBnZXRIaWdoV2F0ZXJNYXJrKHRoaXMsIG9wdGlvbnMsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCBpc0R1cGxleCk7IC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlOyAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG5cbiAgdGhpcy5zeW5jID0gdHJ1ZTsgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICB0aGlzLnBhdXNlZCA9IHRydWU7IC8vIFNob3VsZCBjbG9zZSBiZSBlbWl0dGVkIG9uIGRlc3Ryb3kuIERlZmF1bHRzIHRvIHRydWUuXG5cbiAgdGhpcy5lbWl0Q2xvc2UgPSBvcHRpb25zLmVtaXRDbG9zZSAhPT0gZmFsc2U7IC8vIFNob3VsZCAuZGVzdHJveSgpIGJlIGNhbGxlZCBhZnRlciAnZW5kJyAoYW5kIHBvdGVudGlhbGx5ICdmaW5pc2gnKVxuXG4gIHRoaXMuYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMuYXV0b0Rlc3Ryb3k7IC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7IC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG5cbiAgdGhpcy5hd2FpdERyYWluID0gMDsgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG5cbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTsgLy8gQ2hlY2tpbmcgZm9yIGEgU3RyZWFtLkR1cGxleCBpbnN0YW5jZSBpcyBmYXN0ZXIgaGVyZSBpbnN0ZWFkIG9mIGluc2lkZVxuICAvLyB0aGUgUmVhZGFibGVTdGF0ZSBjb25zdHJ1Y3RvciwgYXQgbGVhc3Qgd2l0aCBWOCA2LjVcblxuICB2YXIgaXNEdXBsZXggPSB0aGlzIGluc3RhbmNlb2YgRHVwbGV4O1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcywgaXNEdXBsZXgpOyAvLyBsZWdhY3lcblxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTsgLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cblxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59OyAvLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICBkZWJ1ZygncmVhZGFibGVBZGRDaHVuaycsIGNodW5rKTtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuXG4gICAgaWYgKGVyKSB7XG4gICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCgpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRigpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICB9IC8vIFdlIGNhbiBwdXNoIG1vcmUgZGF0YSBpZiB3ZSBhcmUgYmVsb3cgdGhlIGhpZ2hXYXRlck1hcmsuXG4gIC8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lIG1vcmUgYnl0ZXMuXG4gIC8vIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsIHN1Y2ggYXMgdGhlIHJlcGwuXG5cblxuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cblxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcblxuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdjaHVuaycsIFsnc3RyaW5nJywgJ0J1ZmZlcicsICdVaW50OEFycmF5J10sIGNodW5rKTtcbiAgfVxuXG4gIHJldHVybiBlcjtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07IC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdmFyIGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBkZWNvZGVyOyAvLyBJZiBzZXRFbmNvZGluZyhudWxsKSwgZGVjb2Rlci5lbmNvZGluZyBlcXVhbHMgdXRmOFxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIuZW5jb2Rpbmc7IC8vIEl0ZXJhdGUgb3ZlciBjdXJyZW50IGJ1ZmZlciB0byBjb252ZXJ0IGFscmVhZHkgc3RvcmVkIEJ1ZmZlcnM6XG5cbiAgdmFyIHAgPSB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5oZWFkO1xuICB2YXIgY29udGVudCA9ICcnO1xuXG4gIHdoaWxlIChwICE9PSBudWxsKSB7XG4gICAgY29udGVudCArPSBkZWNvZGVyLndyaXRlKHAuZGF0YSk7XG4gICAgcCA9IHAubmV4dDtcbiAgfVxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmNsZWFyKCk7XG5cbiAgaWYgKGNvbnRlbnQgIT09ICcnKSB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5wdXNoKGNvbnRlbnQpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aCA9IGNvbnRlbnQubGVuZ3RoO1xuICByZXR1cm4gdGhpcztcbn07IC8vIERvbid0IHJhaXNlIHRoZSBod20gPiAxR0JcblxuXG52YXIgTUFYX0hXTSA9IDB4NDAwMDAwMDA7XG5cbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIC8vIFRPRE8ocm9uYWcpOiBUaHJvdyBFUlJfVkFMVUVfT1VUX09GX1JBTkdFLlxuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cblxuICByZXR1cm4gbjtcbn0gLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5cblxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcblxuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfSAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cblxuXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuOyAvLyBEb24ndCBoYXZlIGVub3VnaFxuXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn0gLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoKHN0YXRlLmhpZ2hXYXRlck1hcmsgIT09IDAgPyBzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayA6IHN0YXRlLmxlbmd0aCA+IDApIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTsgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuXG5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpOyAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9IC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cblxuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7IC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOyAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG5cbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuXG4gICAgc3RhdGUuc3luYyA9IGZhbHNlOyAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cblxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gc3RhdGUubGVuZ3RoIDw9IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gICAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cblxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGRlYnVnKCdvbkVvZkNodW5rJyk7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcblxuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLnN5bmMpIHtcbiAgICAvLyBpZiB3ZSBhcmUgc3luYywgd2FpdCB1bnRpbCBuZXh0IHRpY2sgdG8gZW1pdCB0aGUgZGF0YS5cbiAgICAvLyBPdGhlcndpc2Ugd2UgcmlzayBlbWl0dGluZyBkYXRhIGluIHRoZSBmbG93KClcbiAgICAvLyB0aGUgcmVhZGFibGUgY29kZSB0cmlnZ2VycyBkdXJpbmcgYSByZWFkKCkgY2FsbFxuICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gICAgfVxuICB9XG59IC8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5uZWVkUmVhZGFibGUsIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSk7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VtaXRSZWFkYWJsZV8nLCBzdGF0ZS5kZXN0cm95ZWQsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuXG4gIGlmICghc3RhdGUuZGVzdHJveWVkICYmIChzdGF0ZS5sZW5ndGggfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIH0gLy8gVGhlIHN0cmVhbSBuZWVkcyBhbm90aGVyIHJlYWRhYmxlIGV2ZW50IGlmXG4gIC8vIDEuIEl0IGlzIG5vdCBmbG93aW5nLCBhcyB0aGUgZmxvdyBtZWNoYW5pc20gd2lsbCB0YWtlXG4gIC8vICAgIGNhcmUgb2YgaXQuXG4gIC8vIDIuIEl0IGlzIG5vdCBlbmRlZC5cbiAgLy8gMy4gSXQgaXMgYmVsb3cgdGhlIGhpZ2hXYXRlck1hcmssIHNvIHdlIGNhbiBzY2hlZHVsZVxuICAvLyAgICBhbm90aGVyIHJlYWRhYmxlIGxhdGVyLlxuXG5cbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICBmbG93KHN0cmVhbSk7XG59IC8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuXG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgLy8gQXR0ZW1wdCB0byByZWFkIG1vcmUgZGF0YSBpZiB3ZSBzaG91bGQuXG4gIC8vXG4gIC8vIFRoZSBjb25kaXRpb25zIGZvciByZWFkaW5nIG1vcmUgZGF0YSBhcmUgKG9uZSBvZik6XG4gIC8vIC0gTm90IGVub3VnaCBkYXRhIGJ1ZmZlcmVkIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKS4gVGhlIGxvb3BcbiAgLy8gICBpcyByZXNwb25zaWJsZSBmb3IgZmlsbGluZyB0aGUgYnVmZmVyIHdpdGggZW5vdWdoIGRhdGEgaWYgc3VjaCBkYXRhXG4gIC8vICAgaXMgYXZhaWxhYmxlLiBJZiBoaWdoV2F0ZXJNYXJrIGlzIDAgYW5kIHdlIGFyZSBub3QgaW4gdGhlIGZsb3dpbmcgbW9kZVxuICAvLyAgIHdlIHNob3VsZCBfbm90XyBhdHRlbXB0IHRvIGJ1ZmZlciBhbnkgZXh0cmEgZGF0YS4gV2UnbGwgZ2V0IG1vcmUgZGF0YVxuICAvLyAgIHdoZW4gdGhlIHN0cmVhbSBjb25zdW1lciBjYWxscyByZWFkKCkgaW5zdGVhZC5cbiAgLy8gLSBObyBkYXRhIGluIHRoZSBidWZmZXIsIGFuZCB0aGUgc3RyZWFtIGlzIGluIGZsb3dpbmcgbW9kZS4gSW4gdGhpcyBtb2RlXG4gIC8vICAgdGhlIGxvb3AgYmVsb3cgaXMgcmVzcG9uc2libGUgZm9yIGVuc3VyaW5nIHJlYWQoKSBpcyBjYWxsZWQuIEZhaWxpbmcgdG9cbiAgLy8gICBjYWxsIHJlYWQgaGVyZSB3b3VsZCBhYm9ydCB0aGUgZmxvdyBhbmQgdGhlcmUncyBubyBvdGhlciBtZWNoYW5pc20gZm9yXG4gIC8vICAgY29udGludWluZyB0aGUgZmxvdyBpZiB0aGUgc3RyZWFtIGNvbnN1bWVyIGhhcyBqdXN0IHN1YnNjcmliZWQgdG8gdGhlXG4gIC8vICAgJ2RhdGEnIGV2ZW50LlxuICAvL1xuICAvLyBJbiBhZGRpdGlvbiB0byB0aGUgYWJvdmUgY29uZGl0aW9ucyB0byBrZWVwIHJlYWRpbmcgZGF0YSwgdGhlIGZvbGxvd2luZ1xuICAvLyBjb25kaXRpb25zIHByZXZlbnQgdGhlIGRhdGEgZnJvbSBiZWluZyByZWFkOlxuICAvLyAtIFRoZSBzdHJlYW0gaGFzIGVuZGVkIChzdGF0ZS5lbmRlZCkuXG4gIC8vIC0gVGhlcmUgaXMgYWxyZWFkeSBhIHBlbmRpbmcgJ3JlYWQnIG9wZXJhdGlvbiAoc3RhdGUucmVhZGluZykuIFRoaXMgaXMgYVxuICAvLyAgIGNhc2Ugd2hlcmUgdGhlIHRoZSBzdHJlYW0gaGFzIGNhbGxlZCB0aGUgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBfcmVhZCgpXG4gIC8vICAgbWV0aG9kLCBidXQgdGhleSBhcmUgcHJvY2Vzc2luZyB0aGUgY2FsbCBhc3luY2hyb25vdXNseSBhbmQgaGF2ZSBfbm90X1xuICAvLyAgIGNhbGxlZCBwdXNoKCkgd2l0aCBuZXcgZGF0YS4gSW4gdGhpcyBjYXNlIHdlIHNraXAgcGVyZm9ybWluZyBtb3JlXG4gIC8vICAgcmVhZCgpcy4gVGhlIGV4ZWN1dGlvbiBlbmRzIGluIHRoaXMgbWV0aG9kIGFnYWluIGFmdGVyIHRoZSBfcmVhZCgpIGVuZHNcbiAgLy8gICB1cCBjYWxsaW5nIHB1c2goKSB3aXRoIG1vcmUgZGF0YS5cbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkpIHtcbiAgICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aCkgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn0gLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZXJyb3JPckRlc3Ryb3kodGhpcywgbmV3IEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEKCdfcmVhZCgpJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwcm9jZXNzLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcblxuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuXG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH0gLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG5cblxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7IC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgY2xlYW5lZFVwID0gdHJ1ZTsgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cblxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBkZWJ1ZygnZGVzdC53cml0ZScsIHJldCk7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgIH1cblxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9IC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG5cblxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBlcnJvck9yRGVzdHJveShkZXN0LCBlcik7XG4gIH0gLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuXG5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpOyAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG5cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cblxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH0gLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cblxuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7IC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cblxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gcGlwZU9uRHJhaW5GdW5jdGlvblJlc3VsdCgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcblxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0ge1xuICAgIGhhc1VucGlwZWQ6IGZhbHNlXG4gIH07IC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cblxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7IC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cblxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlczsgLy8gZ290IGEgbWF0Y2guXG5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB7XG4gICAgICAgIGhhc1VucGlwZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuXG5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICByZXR1cm4gdGhpcztcbn07IC8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5cblxuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyB1cGRhdGUgcmVhZGFibGVMaXN0ZW5pbmcgc28gdGhhdCByZXN1bWUoKSBtYXkgYmUgYSBuby1vcFxuICAgIC8vIGEgZmV3IGxpbmVzIGRvd24uIFRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgb25jZSgncmVhZGFibGUnKS5cbiAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHRoaXMubGlzdGVuZXJDb3VudCgncmVhZGFibGUnKSA+IDA7IC8vIFRyeSBzdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcblxuICAgIGlmIChzdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgZGVidWcoJ29uIHJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5yZWFkaW5nKTtcblxuICAgICAgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lci5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBzb21lb25lIHN0aWxsIGxpc3RlbmluZyB0b1xuICAgIC8vIHJlYWRhYmxlIGFuZCByZXNldCB0aGUgc3RhdGUuIEhvd2V2ZXIgdGhpcyBuZWVkcyB0byBoYXBwZW5cbiAgICAvLyBhZnRlciByZWFkYWJsZSBoYXMgYmVlbiBlbWl0dGVkIGJ1dCBiZWZvcmUgSS9PIChuZXh0VGljaykgdG9cbiAgICAvLyBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJywgZm4pIGN5Y2xlcy4gVGhpcyBtZWFucyB0aGF0IGNhbGxpbmdcbiAgICAvLyByZXN1bWUgd2l0aGluIHRoZSBzYW1lIHRpY2sgd2lsbCBoYXZlIG5vXG4gICAgLy8gZWZmZWN0LlxuICAgIHByb2Nlc3MubmV4dFRpY2sodXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcsIHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnIHx8IGV2ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIHNvbWVvbmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIHJlYWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0b1xuICAgIC8vIHN1cHBvcnQgb25jZSgncmVhZGFibGUnLCBmbikgY3ljbGVzLiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZ1xuICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm9cbiAgICAvLyBlZmZlY3QuXG4gICAgcHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcoc2VsZikge1xuICB2YXIgc3RhdGUgPSBzZWxmLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHNlbGYubGlzdGVuZXJDb3VudCgncmVhZGFibGUnKSA+IDA7XG5cbiAgaWYgKHN0YXRlLnJlc3VtZVNjaGVkdWxlZCAmJiAhc3RhdGUucGF1c2VkKSB7XG4gICAgLy8gZmxvd2luZyBuZWVkcyB0byBiZSBzZXQgdG8gdHJ1ZSBub3csIG90aGVyd2lzZVxuICAgIC8vIHRoZSB1cGNvbWluZyByZXN1bWUgd2lsbCBub3QgZmxvdy5cbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsgLy8gY3J1ZGUgd2F5IHRvIGNoZWNrIGlmIHdlIHNob3VsZCByZXN1bWVcbiAgfSBlbHNlIGlmIChzZWxmLmxpc3RlbmVyQ291bnQoJ2RhdGEnKSA+IDApIHtcbiAgICBzZWxmLnJlc3VtZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn0gLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpOyAvLyB3ZSBmbG93IG9ubHkgaWYgdGhlcmUgaXMgbm8gb25lIGxpc3RlbmluZ1xuICAgIC8vIGZvciByZWFkYWJsZSwgYnV0IHdlIHN0aWxsIGhhdmUgdG8gY2FsbFxuICAgIC8vIHJlc3VtZSgpXG5cbiAgICBzdGF0ZS5mbG93aW5nID0gIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cblxuICBzdGF0ZS5wYXVzZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgZGVidWcoJ3Jlc3VtZScsIHN0YXRlLnJlYWRpbmcpO1xuXG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZCA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuXG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHtcbiAgICA7XG4gIH1cbn0gLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG5cbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspOyAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcblxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcblxuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTsgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cblxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIG1ldGhvZFdyYXAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBtZXRob2RXcmFwUmV0dXJuRnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9IC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cblxuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH0gLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cblxuXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG5cbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWFkYWJsZS5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih0aGlzKTtcbiAgfTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVCdWZmZXInLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUZsb3dpbmcnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmc7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IHN0YXRlO1xuICAgIH1cbiAgfVxufSk7IC8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVMZW5ndGgnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aDtcbiAgfVxufSk7IC8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cblxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuZmlyc3QoKTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25zdW1lKG4sIHN0YXRlLmRlY29kZXIpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdlbmRSZWFkYWJsZScsIHN0YXRlLmVuZEVtaXR0ZWQpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICBkZWJ1ZygnZW5kUmVhZGFibGVOVCcsIHN0YXRlLmVuZEVtaXR0ZWQsIHN0YXRlLmxlbmd0aCk7IC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG5cbiAgICBpZiAoc3RhdGUuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgIC8vIEluIGNhc2Ugb2YgZHVwbGV4IHN0cmVhbXMgd2UgbmVlZCBhIHdheSB0byBkZXRlY3RcbiAgICAgIC8vIGlmIHRoZSB3cml0YWJsZSBzaWRlIGlzIHJlYWR5IGZvciBhdXRvRGVzdHJveSBhcyB3ZWxsXG4gICAgICB2YXIgd1N0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuXG4gICAgICBpZiAoIXdTdGF0ZSB8fCB3U3RhdGUuYXV0b0Rlc3Ryb3kgJiYgd1N0YXRlLmZpbmlzaGVkKSB7XG4gICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlYWRhYmxlLmZyb20gPSBmdW5jdGlvbiAoaXRlcmFibGUsIG9wdHMpIHtcbiAgICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmcm9tID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Zyb20nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbShSZWFkYWJsZSwgaXRlcmFibGUsIG9wdHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiIsIid1c2Ugc3RyaWN0JzsgLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH0gLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuXG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JBbmRDbG9zZU5UKHNlbGYsIGVycikge1xuICBlbWl0RXJyb3JOVChzZWxmLCBlcnIpO1xuICBlbWl0Q2xvc2VOVChzZWxmKTtcbn1cblxuZnVuY3Rpb24gZW1pdENsb3NlTlQoc2VsZikge1xuICBpZiAoc2VsZi5fd3JpdGFibGVTdGF0ZSAmJiAhc2VsZi5fd3JpdGFibGVTdGF0ZS5lbWl0Q2xvc2UpIHJldHVybjtcbiAgaWYgKHNlbGYuX3JlYWRhYmxlU3RhdGUgJiYgIXNlbGYuX3JlYWRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gIHNlbGYuZW1pdCgnY2xvc2UnKTtcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5mdW5jdGlvbiBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVycikge1xuICAvLyBXZSBoYXZlIHRlc3RzIHRoYXQgcmVseSBvbiBlcnJvcnMgYmVpbmcgZW1pdHRlZFxuICAvLyBpbiB0aGUgc2FtZSB0aWNrLCBzbyBjaGFuZ2luZyB0aGlzIGlzIHNlbXZlciBtYWpvci5cbiAgLy8gRm9yIG5vdyB3aGVuIHlvdSBvcHQtaW4gdG8gYXV0b0Rlc3Ryb3kgd2UgYWxsb3dcbiAgLy8gdGhlIGVycm9yIHRvIGJlIGVtaXR0ZWQgbmV4dFRpY2suIEluIGEgZnV0dXJlXG4gIC8vIHNlbXZlciBtYWpvciB1cGRhdGUgd2Ugc2hvdWxkIGNoYW5nZSB0aGUgZGVmYXVsdCB0byB0aGlzLlxuICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgd1N0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICBpZiAoclN0YXRlICYmIHJTdGF0ZS5hdXRvRGVzdHJveSB8fCB3U3RhdGUgJiYgd1N0YXRlLmF1dG9EZXN0cm95KSBzdHJlYW0uZGVzdHJveShlcnIpO2Vsc2Ugc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95LFxuICBlcnJvck9yRGVzdHJveTogZXJyb3JPckRlc3Ryb3lcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuXG5mdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gIHJldHVybiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMuaGlnaFdhdGVyTWFyayA6IGlzRHVwbGV4ID8gb3B0aW9uc1tkdXBsZXhLZXldIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0SGlnaFdhdGVyTWFyayhzdGF0ZSwgb3B0aW9ucywgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICB2YXIgaHdtID0gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSk7XG5cbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcihod20pO1xuICB9IC8vIERlZmF1bHQgdmFsdWVcblxuXG4gIHJldHVybiBzdGF0ZS5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuLyogPHJlcGxhY2VtZW50PiAqL1xuXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59IC8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5cblxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuXG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG5cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5cbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cblxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZScpLFxuICAgIGdldEhpZ2hXYXRlck1hcmsgPSBfcmVxdWlyZS5nZXRIaWdoV2F0ZXJNYXJrO1xuXG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5jb2RlcyxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFLFxuICAgIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXG4gICAgRVJSX01VTFRJUExFX0NBTExCQUNLID0gX3JlcXVpcmUkY29kZXMuRVJSX01VTFRJUExFX0NBTExCQUNLLFxuICAgIEVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0NBTk5PVF9QSVBFLFxuICAgIEVSUl9TVFJFQU1fREVTVFJPWUVEID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9ERVNUUk9ZRUQsXG4gICAgRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMsXG4gICAgRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCxcbiAgICBFUlJfVU5LTk9XTl9FTkNPRElORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9VTktOT1dOX0VOQ09ESU5HO1xuXG52YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1wbC5lcnJvck9yRGVzdHJveTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbSxcbiAgLy8gZS5nLiBvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZSB2cy4gb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGUsIGV0Yy5cblxuICBpZiAodHlwZW9mIGlzRHVwbGV4ICE9PSAnYm9vbGVhbicpIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4OyAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlOyAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcblxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBnZXRIaWdoV2F0ZXJNYXJrKHRoaXMsIG9wdGlvbnMsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCBpc0R1cGxleCk7IC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcblxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7IC8vIGRyYWluIGV2ZW50IGZsYWcuXG5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTsgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcblxuICB0aGlzLmVuZGluZyA9IGZhbHNlOyAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG5cbiAgdGhpcy5lbmRlZCA9IGZhbHNlOyAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcblxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7IC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cblxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7IC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7IC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG5cbiAgdGhpcy5sZW5ndGggPSAwOyAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlOyAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG5cbiAgdGhpcy5jb3JrZWQgPSAwOyAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cblxuICB0aGlzLnN5bmMgPSB0cnVlOyAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlOyAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG5cbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTsgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG5cblxuICB0aGlzLndyaXRlY2IgPSBudWxsOyAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG5cbiAgdGhpcy5wZW5kaW5nY2IgPSAwOyAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG5cbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlOyAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7IC8vIFNob3VsZCBjbG9zZSBiZSBlbWl0dGVkIG9uIGRlc3Ryb3kuIERlZmF1bHRzIHRvIHRydWUuXG5cbiAgdGhpcy5lbWl0Q2xvc2UgPSBvcHRpb25zLmVtaXRDbG9zZSAhPT0gZmFsc2U7IC8vIFNob3VsZCAuZGVzdHJveSgpIGJlIGNhbGxlZCBhZnRlciAnZmluaXNoJyAoYW5kIHBvdGVudGlhbGx5ICdlbmQnKVxuXG4gIHRoaXMuYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMuYXV0b0Rlc3Ryb3k7IC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7IC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiB3cml0YWJsZVN0YXRlQnVmZmVyR2V0dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTsgLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG5cblxudmFyIHJlYWxIYXNJbnN0YW5jZTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gcmVhbEhhc0luc3RhbmNlKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7IC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgLy8gQ2hlY2tpbmcgZm9yIGEgU3RyZWFtLkR1cGxleCBpbnN0YW5jZSBpcyBmYXN0ZXIgaGVyZSBpbnN0ZWFkIG9mIGluc2lkZVxuICAvLyB0aGUgV3JpdGFibGVTdGF0ZSBjb25zdHJ1Y3RvciwgYXQgbGVhc3Qgd2l0aCBWOCA2LjVcblxuICB2YXIgaXNEdXBsZXggPSB0aGlzIGluc3RhbmNlb2YgRHVwbGV4O1xuICBpZiAoIWlzRHVwbGV4ICYmICFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykpIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzLCBpc0R1cGxleCk7IC8vIGxlZ2FjeS5cblxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59IC8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cblxuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgZXJyb3JPckRlc3Ryb3kodGhpcywgbmV3IEVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUoKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EKCk7IC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG5cbiAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTtcbn0gLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuXG5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciBlcjtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBFUlJfU1RSRUFNX05VTExfVkFMVUVTKCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdjaHVuaycsIFsnc3RyaW5nJywgJ0J1ZmZlciddLCBjaHVuayk7XG4gIH1cblxuICBpZiAoZXIpIHtcbiAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNiLCBlcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcblxuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuICBpZiAoc3RhdGUuZW5kaW5nKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgRVJSX1VOS05PV05fRU5DT0RJTkcoZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cblxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pOyAvLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcblxuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7IC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG5cbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG5cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHN0YXRlLmRlc3Ryb3llZCkgc3RhdGUub253cml0ZShuZXcgRVJSX1NUUkVBTV9ERVNUUk9ZRUQoJ3dyaXRlJykpO2Vsc2UgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNiLCBlcik7IC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcblxuICAgIHByb2Nlc3MubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpOyAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFUlJfTVVMVElQTEVfQ0FMTEJBQ0soKTtcbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpIHx8IHN0cmVhbS5kZXN0cm95ZWQ7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufSAvLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cblxuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59IC8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5cblxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cblxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7IC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG5cbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07IC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEKCdfd3JpdGUoKScpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7IC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfSAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG5cblxuICBpZiAoIXN0YXRlLmVuZGluZykgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVMZW5ndGgnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aDtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cblxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVycik7XG4gICAgfVxuXG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nICYmICFzdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcblxuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcblxuICAgICAgaWYgKHN0YXRlLmF1dG9EZXN0cm95KSB7XG4gICAgICAgIC8vIEluIGNhc2Ugb2YgZHVwbGV4IHN0cmVhbXMgd2UgbmVlZCBhIHdheSB0byBkZXRlY3RcbiAgICAgICAgLy8gaWYgdGhlIHJlYWRhYmxlIHNpZGUgaXMgcmVhZHkgZm9yIGF1dG9EZXN0cm95IGFzIHdlbGxcbiAgICAgICAgdmFyIHJTdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAgICAgICBpZiAoIXJTdGF0ZSB8fCByU3RhdGUuYXV0b0Rlc3Ryb3kgJiYgclN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuXG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcHJvY2Vzcy5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG5cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcblxuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfSAvLyByZXVzZSB0aGUgZnJlZSBjb3JrUmVxLlxuXG5cbiAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcblxuXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblxuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgY2IoZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5jb2RlcyxcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxcbiAgICBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyxcbiAgICBFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzA7XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCkpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG4gIGNiKGVyKTtcbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuXG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9OyAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9IC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cblxuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCkge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTsgLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ190cmFuc2Zvcm0oKScpKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG5cbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59OyAvLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuXG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpOyAvLyBUT0RPKEJyaWRnZUFSKTogV3JpdGUgYSB0ZXN0IGZvciB0aGVzZSB0d28gZXJyb3IgY2FzZXNcbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcblxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCgpO1xuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HKCk7XG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCJ2YXIgQ2xpZW50UmVxdWVzdCA9IHJlcXVpcmUoJy4vbGliL3JlcXVlc3QnKVxudmFyIHJlc3BvbnNlID0gcmVxdWlyZSgnLi9saWIvcmVzcG9uc2UnKVxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBzdGF0dXNDb2RlcyA9IHJlcXVpcmUoJ2J1aWx0aW4tc3RhdHVzLWNvZGVzJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG52YXIgaHR0cCA9IGV4cG9ydHNcblxuaHR0cC5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMsIGNiKSB7XG5cdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpXG5cdFx0b3B0cyA9IHVybC5wYXJzZShvcHRzKVxuXHRlbHNlXG5cdFx0b3B0cyA9IGV4dGVuZChvcHRzKVxuXG5cdC8vIE5vcm1hbGx5LCB0aGUgcGFnZSBpcyBsb2FkZWQgZnJvbSBodHRwIG9yIGh0dHBzLCBzbyBub3Qgc3BlY2lmeWluZyBhIHByb3RvY29sXG5cdC8vIHdpbGwgcmVzdWx0IGluIGEgKHZhbGlkKSBwcm90b2NvbC1yZWxhdGl2ZSB1cmwuIEhvd2V2ZXIsIHRoaXMgd29uJ3Qgd29yayBpZlxuXHQvLyB0aGUgcHJvdG9jb2wgaXMgc29tZXRoaW5nIGVsc2UsIGxpa2UgJ2ZpbGU6J1xuXHR2YXIgZGVmYXVsdFByb3RvY29sID0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNlYXJjaCgvXmh0dHBzPzokLykgPT09IC0xID8gJ2h0dHA6JyA6ICcnXG5cblx0dmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCB8fCBkZWZhdWx0UHJvdG9jb2xcblx0dmFyIGhvc3QgPSBvcHRzLmhvc3RuYW1lIHx8IG9wdHMuaG9zdFxuXHR2YXIgcG9ydCA9IG9wdHMucG9ydFxuXHR2YXIgcGF0aCA9IG9wdHMucGF0aCB8fCAnLydcblxuXHQvLyBOZWNlc3NhcnkgZm9yIElQdjYgYWRkcmVzc2VzXG5cdGlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpICE9PSAtMSlcblx0XHRob3N0ID0gJ1snICsgaG9zdCArICddJ1xuXG5cdC8vIFRoaXMgbWF5IGJlIGEgcmVsYXRpdmUgdXJsLiBUaGUgYnJvd3NlciBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gaW50ZXJwcmV0IGl0IGNvcnJlY3RseS5cblx0b3B0cy51cmwgPSAoaG9zdCA/IChwcm90b2NvbCArICcvLycgKyBob3N0KSA6ICcnKSArIChwb3J0ID8gJzonICsgcG9ydCA6ICcnKSArIHBhdGhcblx0b3B0cy5tZXRob2QgPSAob3B0cy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKClcblx0b3B0cy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzIHx8IHt9XG5cblx0Ly8gQWxzbyB2YWxpZCBvcHRzLmF1dGgsIG9wdHMubW9kZVxuXG5cdHZhciByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdChvcHRzKVxuXHRpZiAoY2IpXG5cdFx0cmVxLm9uKCdyZXNwb25zZScsIGNiKVxuXHRyZXR1cm4gcmVxXG59XG5cbmh0dHAuZ2V0ID0gZnVuY3Rpb24gZ2V0IChvcHRzLCBjYikge1xuXHR2YXIgcmVxID0gaHR0cC5yZXF1ZXN0KG9wdHMsIGNiKVxuXHRyZXEuZW5kKClcblx0cmV0dXJuIHJlcVxufVxuXG5odHRwLkNsaWVudFJlcXVlc3QgPSBDbGllbnRSZXF1ZXN0XG5odHRwLkluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxuXG5odHRwLkFnZW50ID0gZnVuY3Rpb24gKCkge31cbmh0dHAuQWdlbnQuZGVmYXVsdE1heFNvY2tldHMgPSA0XG5cbmh0dHAuZ2xvYmFsQWdlbnQgPSBuZXcgaHR0cC5BZ2VudCgpXG5cbmh0dHAuU1RBVFVTX0NPREVTID0gc3RhdHVzQ29kZXNcblxuaHR0cC5NRVRIT0RTID0gW1xuXHQnQ0hFQ0tPVVQnLFxuXHQnQ09OTkVDVCcsXG5cdCdDT1BZJyxcblx0J0RFTEVURScsXG5cdCdHRVQnLFxuXHQnSEVBRCcsXG5cdCdMT0NLJyxcblx0J00tU0VBUkNIJyxcblx0J01FUkdFJyxcblx0J01LQUNUSVZJVFknLFxuXHQnTUtDT0wnLFxuXHQnTU9WRScsXG5cdCdOT1RJRlknLFxuXHQnT1BUSU9OUycsXG5cdCdQQVRDSCcsXG5cdCdQT1NUJyxcblx0J1BST1BGSU5EJyxcblx0J1BST1BQQVRDSCcsXG5cdCdQVVJHRScsXG5cdCdQVVQnLFxuXHQnUkVQT1JUJyxcblx0J1NFQVJDSCcsXG5cdCdTVUJTQ1JJQkUnLFxuXHQnVFJBQ0UnLFxuXHQnVU5MT0NLJyxcblx0J1VOU1VCU0NSSUJFJ1xuXSIsImV4cG9ydHMuZmV0Y2ggPSBpc0Z1bmN0aW9uKGdsb2JhbC5mZXRjaCkgJiYgaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pXG5cbmV4cG9ydHMud3JpdGFibGVTdHJlYW0gPSBpc0Z1bmN0aW9uKGdsb2JhbC5Xcml0YWJsZVN0cmVhbSlcblxuZXhwb3J0cy5hYm9ydENvbnRyb2xsZXIgPSBpc0Z1bmN0aW9uKGdsb2JhbC5BYm9ydENvbnRyb2xsZXIpXG5cbmV4cG9ydHMuYmxvYkNvbnN0cnVjdG9yID0gZmFsc2VcbnRyeSB7XG5cdG5ldyBCbG9iKFtuZXcgQXJyYXlCdWZmZXIoMSldKVxuXHRleHBvcnRzLmJsb2JDb25zdHJ1Y3RvciA9IHRydWVcbn0gY2F0Y2ggKGUpIHt9XG5cbi8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucyxcbi8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKVxuLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LlxudmFyIHhoclxuZnVuY3Rpb24gZ2V0WEhSICgpIHtcblx0Ly8gQ2FjaGUgdGhlIHhociB2YWx1ZVxuXHRpZiAoeGhyICE9PSB1bmRlZmluZWQpIHJldHVybiB4aHJcblxuXHRpZiAoZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0eGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0Ly8gSWYgWERvbWFpblJlcXVlc3QgaXMgYXZhaWxhYmxlIChpZSBvbmx5LCB3aGVyZSB4aHIgbWlnaHQgbm90IHdvcmtcblx0XHQvLyBjcm9zcyBkb21haW4pLCB1c2UgdGhlIHBhZ2UgbG9jYXRpb24uIE90aGVyd2lzZSB1c2UgZXhhbXBsZS5jb21cblx0XHQvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKCdHRVQnLCBnbG9iYWwuWERvbWFpblJlcXVlc3QgPyAnLycgOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScpXG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR4aHIgPSBudWxsXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUlxuXHRcdHhociA9IG51bGxcblx0fVxuXHRyZXR1cm4geGhyXG59XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQgKHR5cGUpIHtcblx0dmFyIHhociA9IGdldFhIUigpXG5cdGlmICgheGhyKSByZXR1cm4gZmFsc2Vcblx0dHJ5IHtcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gdHlwZVxuXHRcdHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZVxufVxuXG4vLyBGb3Igc29tZSBzdHJhbmdlIHJlYXNvbiwgU2FmYXJpIDcuMCByZXBvcnRzIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdvYmplY3QnLlxuLy8gU2FmYXJpIDcuMSBhcHBlYXJzIHRvIGhhdmUgZml4ZWQgdGhpcyBidWcuXG52YXIgaGF2ZUFycmF5QnVmZmVyID0gdHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCdcbnZhciBoYXZlU2xpY2UgPSBoYXZlQXJyYXlCdWZmZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwuQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gYXJyYXlidWZmZXIgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGNoZWNrVHlwZVN1cHBvcnQoKSwgc2luY2UgdGhhdCBjYWxscyBnZXRYSFIoKS5cbmV4cG9ydHMuYXJyYXlidWZmZXIgPSBleHBvcnRzLmZldGNoIHx8IChoYXZlQXJyYXlCdWZmZXIgJiYgY2hlY2tUeXBlU3VwcG9ydCgnYXJyYXlidWZmZXInKSlcblxuLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4vLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0cy5tc3N0cmVhbSA9ICFleHBvcnRzLmZldGNoICYmIGhhdmVTbGljZSAmJiBjaGVja1R5cGVTdXBwb3J0KCdtcy1zdHJlYW0nKVxuZXhwb3J0cy5tb3pjaHVua2VkYXJyYXlidWZmZXIgPSAhZXhwb3J0cy5mZXRjaCAmJiBoYXZlQXJyYXlCdWZmZXIgJiZcblx0Y2hlY2tUeXBlU3VwcG9ydCgnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gb3ZlcnJpZGVNaW1lVHlwZSB3aWxsIGJlIHN1cHBvcnRlZCB0b28uIFNraXAgY2FsbGluZ1xuLy8gZ2V0WEhSKCkuXG5leHBvcnRzLm92ZXJyaWRlTWltZVR5cGUgPSBleHBvcnRzLmZldGNoIHx8IChnZXRYSFIoKSA/IGlzRnVuY3Rpb24oZ2V0WEhSKCkub3ZlcnJpZGVNaW1lVHlwZSkgOiBmYWxzZSlcblxuZXhwb3J0cy52YkFycmF5ID0gaXNGdW5jdGlvbihnbG9iYWwuVkJBcnJheSlcblxuZnVuY3Rpb24gaXNGdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG54aHIgPSBudWxsIC8vIEhlbHAgZ2NcbiIsInZhciBjYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXR5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxuXG52YXIgclN0YXRlcyA9IGV4cG9ydHMucmVhZHlTdGF0ZXMgPSB7XG5cdFVOU0VOVDogMCxcblx0T1BFTkVEOiAxLFxuXHRIRUFERVJTX1JFQ0VJVkVEOiAyLFxuXHRMT0FESU5HOiAzLFxuXHRET05FOiA0XG59XG5cbnZhciBJbmNvbWluZ01lc3NhZ2UgPSBleHBvcnRzLkluY29taW5nTWVzc2FnZSA9IGZ1bmN0aW9uICh4aHIsIHJlc3BvbnNlLCBtb2RlLCBmZXRjaFRpbWVyKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzdHJlYW0uUmVhZGFibGUuY2FsbChzZWxmKVxuXG5cdHNlbGYuX21vZGUgPSBtb2RlXG5cdHNlbGYuaGVhZGVycyA9IHt9XG5cdHNlbGYucmF3SGVhZGVycyA9IFtdXG5cdHNlbGYudHJhaWxlcnMgPSB7fVxuXHRzZWxmLnJhd1RyYWlsZXJzID0gW11cblxuXHQvLyBGYWtlIHRoZSAnY2xvc2UnIGV2ZW50LCBidXQgb25seSBvbmNlICdlbmQnIGZpcmVzXG5cdHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHQvLyBUaGUgbmV4dFRpY2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgdGhlICdyZXF1ZXN0JyBtb2R1bGUgZnJvbSBjYXVzaW5nIGFuIGluZmluaXRlIGxvb3Bcblx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuZW1pdCgnY2xvc2UnKVxuXHRcdH0pXG5cdH0pXG5cblx0aWYgKG1vZGUgPT09ICdmZXRjaCcpIHtcblx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2VcblxuXHRcdHNlbGYudXJsID0gcmVzcG9uc2UudXJsXG5cdFx0c2VsZi5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzVGV4dFxuXHRcdFxuXHRcdHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyLCBrZXkpe1xuXHRcdFx0c2VsZi5oZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IGhlYWRlclxuXHRcdFx0c2VsZi5yYXdIZWFkZXJzLnB1c2goa2V5LCBoZWFkZXIpXG5cdFx0fSlcblxuXHRcdGlmIChjYXBhYmlsaXR5LndyaXRhYmxlU3RyZWFtKSB7XG5cdFx0XHR2YXIgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuXHRcdFx0XHR3cml0ZTogZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KClcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihzZWxmLnB1c2gobmV3IEJ1ZmZlcihjaHVuaykpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fcmVzdW1lRmV0Y2ggPSByZXNvbHZlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2xvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRnbG9iYWwuY2xlYXJUaW1lb3V0KGZldGNoVGltZXIpXG5cdFx0XHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc3BvbnNlLmJvZHkucGlwZVRvKHdyaXRhYmxlKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9IGNhdGNoIChlKSB7fSAvLyBwaXBlVG8gbWV0aG9kIGlzbid0IGRlZmluZWQuIENhbid0IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIGZlYXR1cmUgdGVzdCB0aGlzXG5cdFx0fVxuXHRcdC8vIGZhbGxiYWNrIGZvciB3aGVuIHdyaXRhYmxlU3RyZWFtIG9yIHBpcGVUbyBhcmVuJ3QgYXZhaWxhYmxlXG5cdFx0dmFyIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKClcblx0XHRmdW5jdGlvbiByZWFkICgpIHtcblx0XHRcdHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGlmIChyZXN1bHQuZG9uZSkge1xuXHRcdFx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoZmV0Y2hUaW1lcilcblx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXN1bHQudmFsdWUpKVxuXHRcdFx0XHRyZWFkKClcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0cmVhZCgpXG5cdH0gZWxzZSB7XG5cdFx0c2VsZi5feGhyID0geGhyXG5cdFx0c2VsZi5fcG9zID0gMFxuXG5cdFx0c2VsZi51cmwgPSB4aHIucmVzcG9uc2VVUkxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0geGhyLnN0YXR1c1RleHRcblx0XHR2YXIgaGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pXG5cdFx0aGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gaGVhZGVyLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pXG5cdFx0XHRpZiAobWF0Y2hlcykge1xuXHRcdFx0XHR2YXIga2V5ID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuXHRcdFx0XHRcdGlmIChzZWxmLmhlYWRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IFtdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldLnB1c2gobWF0Y2hlc1syXSlcblx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IG1hdGNoZXNbMl1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuXHRcdGlmICghY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHR2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG5cdFx0XHRpZiAobWltZVR5cGUpIHtcblx0XHRcdFx0dmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuXHRcdFx0XHRpZiAoY2hhcnNldE1hdGNoKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghc2VsZi5fY2hhcnNldClcblx0XHRcdFx0c2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuXHRcdH1cblx0fVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIHN0cmVhbS5SZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0dmFyIHJlc29sdmUgPSBzZWxmLl9yZXN1bWVGZXRjaFxuXHRpZiAocmVzb2x2ZSkge1xuXHRcdHNlbGYuX3Jlc3VtZUZldGNoID0gbnVsbFxuXHRcdHJlc29sdmUoKVxuXHR9XG59XG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHZhciB4aHIgPSBzZWxmLl94aHJcblxuXHR2YXIgcmVzcG9uc2UgPSBudWxsXG5cdHN3aXRjaCAoc2VsZi5fbW9kZSkge1xuXHRcdGNhc2UgJ3RleHQ6dmJhcnJheSc6IC8vIEZvciBJRTlcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gVGhpcyBmYWlscyBpbiBJRThcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgZ2xvYmFsLlZCQXJyYXkoeGhyLnJlc3BvbnNlQm9keSkudG9BcnJheSgpXG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0aWYgKHJlc3BvbnNlICE9PSBudWxsKSB7XG5cdFx0XHRcdHNlbGYucHVzaChuZXcgQnVmZmVyKHJlc3BvbnNlKSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHRcdC8vIEZhbGxzIHRocm91Z2ggaW4gSUU4XHRcblx0XHRjYXNlICd0ZXh0Jzpcblx0XHRcdHRyeSB7IC8vIFRoaXMgd2lsbCBmYWlsIHdoZW4gcmVhZHlTdGF0ZSA9IDMgaW4gSUU5LiBTd2l0Y2ggbW9kZSBhbmQgd2FpdCBmb3IgcmVhZHlTdGF0ZSA9IDRcblx0XHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHNlbGYuX21vZGUgPSAndGV4dDp2YmFycmF5J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA+IHNlbGYuX3Bvcykge1xuXHRcdFx0XHR2YXIgbmV3RGF0YSA9IHJlc3BvbnNlLnN1YnN0cihzZWxmLl9wb3MpXG5cdFx0XHRcdGlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7XG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobmV3RGF0YS5sZW5ndGgpXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdFx0YnVmZmVyW2ldID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZlxuXG5cdFx0XHRcdFx0c2VsZi5wdXNoKGJ1ZmZlcilcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3RGF0YSwgc2VsZi5fY2hhcnNldClcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9wb3MgPSByZXNwb25zZS5sZW5ndGhcblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUgfHwgIXhoci5yZXNwb25zZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcic6IC8vIHRha2Ugd2hvbGVcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORyB8fCAhcmVzcG9uc2UpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtcy1zdHJlYW0nOlxuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2Vcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5MT0FESU5HKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dmFyIHJlYWRlciA9IG5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXIoKVxuXHRcdFx0cmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChyZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGggPiBzZWxmLl9wb3MpIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0LnNsaWNlKHNlbGYuX3BvcykpKSlcblx0XHRcdFx0XHRzZWxmLl9wb3MgPSByZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGhcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5wdXNoKG51bGwpXG5cdFx0XHR9XG5cdFx0XHQvLyByZWFkZXIub25lcnJvciA9ID8/PyAvLyBUT0RPOiB0aGlzXG5cdFx0XHRyZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIocmVzcG9uc2UpXG5cdFx0XHRicmVha1xuXHR9XG5cblx0Ly8gVGhlIG1zLXN0cmVhbSBjYXNlIGhhbmRsZXMgZW5kIHNlcGFyYXRlbHkgaW4gcmVhZGVyLm9ubG9hZCgpXG5cdGlmIChzZWxmLl94aHIucmVhZHlTdGF0ZSA9PT0gclN0YXRlcy5ET05FICYmIHNlbGYuX21vZGUgIT09ICdtcy1zdHJlYW0nKSB7XG5cdFx0c2VsZi5wdXNoKG51bGwpXG5cdH1cbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qIDxyZXBsYWNlbWVudD4gKi9cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgd3JpdGFibGVId20gPSBvcHRpb25zLndyaXRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmICh3cml0YWJsZUh3bSB8fCB3cml0YWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc1N0cmVhbSA9IHN0cmVhbSA9PlxuXHRzdHJlYW0gIT09IG51bGwgJiZcblx0dHlwZW9mIHN0cmVhbSA9PT0gJ29iamVjdCcgJiZcblx0dHlwZW9mIHN0cmVhbS5waXBlID09PSAnZnVuY3Rpb24nO1xuXG5pc1N0cmVhbS53cml0YWJsZSA9IHN0cmVhbSA9PlxuXHRpc1N0cmVhbShzdHJlYW0pICYmXG5cdHN0cmVhbS53cml0YWJsZSAhPT0gZmFsc2UgJiZcblx0dHlwZW9mIHN0cmVhbS5fd3JpdGUgPT09ICdmdW5jdGlvbicgJiZcblx0dHlwZW9mIHN0cmVhbS5fd3JpdGFibGVTdGF0ZSA9PT0gJ29iamVjdCc7XG5cbmlzU3RyZWFtLnJlYWRhYmxlID0gc3RyZWFtID0+XG5cdGlzU3RyZWFtKHN0cmVhbSkgJiZcblx0c3RyZWFtLnJlYWRhYmxlICE9PSBmYWxzZSAmJlxuXHR0eXBlb2Ygc3RyZWFtLl9yZWFkID09PSAnZnVuY3Rpb24nICYmXG5cdHR5cGVvZiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUgPT09ICdvYmplY3QnO1xuXG5pc1N0cmVhbS5kdXBsZXggPSBzdHJlYW0gPT5cblx0aXNTdHJlYW0ud3JpdGFibGUoc3RyZWFtKSAmJlxuXHRpc1N0cmVhbS5yZWFkYWJsZShzdHJlYW0pO1xuXG5pc1N0cmVhbS50cmFuc2Zvcm0gPSBzdHJlYW0gPT5cblx0aXNTdHJlYW0uZHVwbGV4KHN0cmVhbSkgJiZcblx0dHlwZW9mIHN0cmVhbS5fdHJhbnNmb3JtID09PSAnZnVuY3Rpb24nICYmXG5cdHR5cGVvZiBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlID09PSAnb2JqZWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmVhbTtcbiIsIi8qKlxuICogY3JlYXRlLWxvZ2dlci5qczogTG9nZ2VyIGZhY3RvcnkgZm9yIHdpbnN0b24gbG9nZ2VyIGluc3RhbmNlcy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBMRVZFTCA9IF9yZXF1aXJlLkxFVkVMO1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxudmFyIExvZ2dlciA9IHJlcXVpcmUoJy4vbG9nZ2VyJyk7XG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ0BkYWJoL2RpYWdub3N0aWNzJykoJ3dpbnN0b246Y3JlYXRlLWxvZ2dlcicpO1xuXG5mdW5jdGlvbiBpc0xldmVsRW5hYmxlZEZ1bmN0aW9uTmFtZShsZXZlbCkge1xuICByZXR1cm4gJ2lzJyArIGxldmVsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGV2ZWwuc2xpY2UoMSkgKyAnRW5hYmxlZCc7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBhIHdpbnN0b24gTG9nZ2VyLiBDcmVhdGVzIGEgbmV3XG4gKiBwcm90b3R5cGUgZm9yIGVhY2ggaW5zdGFuY2UuXG4gKiBAcGFyYW0geyFPYmplY3R9IG9wdHMgLSBPcHRpb25zIGZvciB0aGUgY3JlYXRlZCBsb2dnZXIuXG4gKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgbmV3bHkgY3JlYXRlZCBsb2dnZXIgaW5zdGFuY2UuXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAvL1xuICAvLyBEZWZhdWx0IGxldmVsczogbnBtXG4gIC8vXG4gIG9wdHMubGV2ZWxzID0gb3B0cy5sZXZlbHMgfHwgY29uZmlnLm5wbS5sZXZlbHM7XG4gIC8qKlxuICAgKiBEZXJpdmVkTG9nZ2VyIHRvIGF0dGFjaCB0aGUgbG9ncyBsZXZlbCBtZXRob2RzLlxuICAgKiBAdHlwZSB7RGVyaXZlZExvZ2dlcn1cbiAgICogQGV4dGVuZHMge0xvZ2dlcn1cbiAgICovXG5cbiAgdmFyIERlcml2ZWRMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Mb2dnZXIpIHtcbiAgICBfaW5oZXJpdHMoRGVyaXZlZExvZ2dlciwgX0xvZ2dlcik7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERlcml2ZWRMb2dnZXIpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNsYXNzIGRlcml2ZWQgbG9nZ2VyIGZvciB3aGljaCB0aGUgbGV2ZWxzIGNhbiBiZSBhdHRhY2hlZCB0b1xuICAgICAqIHRoZSBwcm90b3R5cGUgb2YuIFRoaXMgaXMgYSBWOCBvcHRpbWl6YXRpb24gdGhhdCBpcyB3ZWxsIGtub3cgdG8gaW5jcmVhc2VcbiAgICAgKiBwZXJmb3JtYW5jZSBvZiBwcm90b3R5cGUgZnVuY3Rpb25zLlxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBjcmVhdGVkIGxvZ2dlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBEZXJpdmVkTG9nZ2VyKG9wdGlvbnMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXJpdmVkTG9nZ2VyKTtcblxuICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBEZXJpdmVkTG9nZ2VyO1xuICB9KExvZ2dlcik7XG5cbiAgdmFyIGxvZ2dlciA9IG5ldyBEZXJpdmVkTG9nZ2VyKG9wdHMpOyAvL1xuICAvLyBDcmVhdGUgdGhlIGxvZyBsZXZlbCBtZXRob2RzIGZvciB0aGUgZGVyaXZlZCBsb2dnZXIuXG4gIC8vXG5cbiAgT2JqZWN0LmtleXMob3B0cy5sZXZlbHMpLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgZGVidWcoJ0RlZmluZSBwcm90b3R5cGUgbWV0aG9kIGZvciBcIiVzXCInLCBsZXZlbCk7XG5cbiAgICBpZiAobGV2ZWwgPT09ICdsb2cnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdMZXZlbCBcImxvZ1wiIG5vdCBkZWZpbmVkOiBjb25mbGljdHMgd2l0aCB0aGUgbWV0aG9kIFwibG9nXCIuIFVzZSBhIGRpZmZlcmVudCBsZXZlbCBuYW1lLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy9cbiAgICAvLyBEZWZpbmUgcHJvdG90eXBlIG1ldGhvZHMgZm9yIGVhY2ggbG9nIGxldmVsIGUuZy46XG4gICAgLy8gbG9nZ2VyLmxvZygnaW5mbycsIG1zZykgaW1wbGllcyB0aGVzZSBtZXRob2RzIGFyZSBkZWZpbmVkOlxuICAgIC8vIC0gbG9nZ2VyLmluZm8obXNnKVxuICAgIC8vIC0gbG9nZ2VyLmlzSW5mb0VuYWJsZWQoKVxuICAgIC8vXG4gICAgLy8gUmVtYXJrOiB0byBzdXBwb3J0IGxvZ2dlci5jaGlsZCB0aGlzICoqTVVTVCoqIGJlIGEgZnVuY3Rpb25cbiAgICAvLyBzbyBpdCdsbCBhbHdheXMgYmUgY2FsbGVkIG9uIHRoZSBpbnN0YW5jZSBpbnN0ZWFkIG9mIGEgZml4ZWRcbiAgICAvLyBwbGFjZSBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuICAgIC8vXG5cblxuICAgIERlcml2ZWRMb2dnZXIucHJvdG90eXBlW2xldmVsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFByZWZlciBhbnkgaW5zdGFuY2Ugc2NvcGUsIGJ1dCBkZWZhdWx0IHRvIFwicm9vdFwiIGxvZ2dlclxuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IGxvZ2dlcjsgLy8gT3B0aW1pemUgdGhlIGhvdC1wYXRoIHdoaWNoIGlzIHRoZSBzaW5nbGUgb2JqZWN0LlxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBtc2cgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgaW5mbyA9IG1zZyAmJiBtc2cubWVzc2FnZSAmJiBtc2cgfHwge1xuICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9O1xuICAgICAgICBpbmZvLmxldmVsID0gaW5mb1tMRVZFTF0gPSBsZXZlbDtcblxuICAgICAgICBzZWxmLl9hZGREZWZhdWx0TWV0YShpbmZvKTtcblxuICAgICAgICBzZWxmLndyaXRlKGluZm8pO1xuICAgICAgICByZXR1cm4gdGhpcyB8fCBsb2dnZXI7XG4gICAgICB9IC8vIFdoZW4gcHJvdmlkZWQgbm90aGluZyBhc3N1bWUgdGhlIGVtcHR5IHN0cmluZ1xuXG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzZWxmLmxvZyhsZXZlbCwgJycpO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH0gLy8gT3RoZXJ3aXNlIGJ1aWxkIGFyZ3VtZW50IGxpc3Qgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY29uZm9ybSB0b1xuICAgICAgLy8gZWl0aGVyOlxuICAgICAgLy8gLiB2MyBBUEk6IGxvZyhvYmopXG4gICAgICAvLyAyLiB2MS92MiBBUEk6IGxvZyhsZXZlbCwgbXNnLCAuLi4gW3N0cmluZyBpbnRlcnBvbGF0ZV0sIFt7bWV0YWRhdGF9XSwgW2NhbGxiYWNrXSlcblxuXG4gICAgICByZXR1cm4gc2VsZi5sb2cuYXBwbHkoc2VsZiwgW2xldmVsXS5jb25jYXQoYXJncykpO1xuICAgIH07XG5cbiAgICBEZXJpdmVkTG9nZ2VyLnByb3RvdHlwZVtpc0xldmVsRW5hYmxlZEZ1bmN0aW9uTmFtZShsZXZlbCldID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzIHx8IGxvZ2dlcikuaXNMZXZlbEVuYWJsZWQobGV2ZWwpO1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gbG9nZ2VyO1xufTsiLCIvKipcbiAqIGV4Y2VwdGlvbi1oYW5kbGVyLmpzOiBPYmplY3QgZm9yIGhhbmRsaW5nIHVuY2F1Z2h0RXhjZXB0aW9uIGV2ZW50cy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgb3MgPSByZXF1aXJlKCdvcycpO1xuXG52YXIgYXN5bmNGb3JFYWNoID0gcmVxdWlyZSgnYXN5bmMvZm9yRWFjaCcpO1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdAZGFiaC9kaWFnbm9zdGljcycpKCd3aW5zdG9uOmV4Y2VwdGlvbicpO1xuXG52YXIgb25jZSA9IHJlcXVpcmUoJ29uZS10aW1lJyk7XG5cbnZhciBzdGFja1RyYWNlID0gcmVxdWlyZSgnc3RhY2stdHJhY2UnKTtcblxudmFyIEV4Y2VwdGlvblN0cmVhbSA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uLXN0cmVhbScpO1xuLyoqXG4gKiBPYmplY3QgZm9yIGhhbmRsaW5nIHVuY2F1Z2h0RXhjZXB0aW9uIGV2ZW50cy5cbiAqIEB0eXBlIHtFeGNlcHRpb25IYW5kbGVyfVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogVE9ETzogYWRkIGNvbnRydWN0b3IgZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHshTG9nZ2VyfSBsb2dnZXIgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb25cbiAgICovXG4gIGZ1bmN0aW9uIEV4Y2VwdGlvbkhhbmRsZXIobG9nZ2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4Y2VwdGlvbkhhbmRsZXIpO1xuXG4gICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTG9nZ2VyIGlzIHJlcXVpcmVkIHRvIGhhbmRsZSBleGNlcHRpb25zJyk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5oYW5kbGVycyA9IG5ldyBNYXAoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBgdW5jYXVnaHRFeGNlcHRpb25gIGV2ZW50cyBmb3IgdGhlIGN1cnJlbnQgcHJvY2VzcyBieSBhZGRpbmcgYW55XG4gICAqIGhhbmRsZXJzIHBhc3NlZCBpbi5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRXhjZXB0aW9uSGFuZGxlciwgW3tcbiAgICBrZXk6IFwiaGFuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2FkZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fYWRkSGFuZGxlcihhcmcpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghdGhpcy5jYXRjaGVyKSB7XG4gICAgICAgIHRoaXMuY2F0Y2hlciA9IHRoaXMuX3VuY2F1Z2h0RXhjZXB0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgdGhpcy5jYXRjaGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbnkgaGFuZGxlcnMgdG8gYHVuY2F1Z2h0RXhjZXB0aW9uYCBldmVudHMgZm9yIHRoZSBjdXJyZW50XG4gICAgICogcHJvY2Vzcy4gVGhpcyBkb2VzIG5vdCBtb2RpZnkgdGhlIHN0YXRlIG9mIHRoZSBgdGhpcy5oYW5kbGVyc2Agc2V0LlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bmhhbmRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmhhbmRsZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5jYXRjaGVyKSB7XG4gICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ3VuY2F1Z2h0RXhjZXB0aW9uJywgdGhpcy5jYXRjaGVyKTtcbiAgICAgICAgdGhpcy5jYXRjaGVyID0gZmFsc2U7XG4gICAgICAgIEFycmF5LmZyb20odGhpcy5oYW5kbGVycy52YWx1ZXMoKSkuZm9yRWFjaChmdW5jdGlvbiAod3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIubG9nZ2VyLnVucGlwZSh3cmFwcGVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBFcnJvciB0byBnZXQgaW5mb3JtYXRpb24gYWJvdXQuXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRBbGxJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbEluZm8oZXJyKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuXG4gICAgICBpZiAoIW1lc3NhZ2UgJiYgdHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWVzc2FnZSA9IGVycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgLy8gVE9ETyAoaW5kZXh6ZXJvKTogaG93IGRvIHdlIGNvbmZpZ3VyZSB0aGlzP1xuICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgbWVzc2FnZTogW1widW5jYXVnaHRFeGNlcHRpb246IFwiLmNvbmNhdChtZXNzYWdlIHx8ICcobm8gZXJyb3IgbWVzc2FnZSknKSwgZXJyLnN0YWNrIHx8ICcgIE5vIHN0YWNrIHRyYWNlJ10uam9pbignXFxuJyksXG4gICAgICAgIHN0YWNrOiBlcnIuc3RhY2ssXG4gICAgICAgIGV4Y2VwdGlvbjogdHJ1ZSxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoKS50b1N0cmluZygpLFxuICAgICAgICBwcm9jZXNzOiB0aGlzLmdldFByb2Nlc3NJbmZvKCksXG4gICAgICAgIG9zOiB0aGlzLmdldE9zSW5mbygpLFxuICAgICAgICB0cmFjZTogdGhpcy5nZXRUcmFjZShlcnIpXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCByZWxldmFudCBwcm9jZXNzIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFByb2Nlc3NJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb2Nlc3NJbmZvKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGlkOiBwcm9jZXNzLnBpZCxcbiAgICAgICAgdWlkOiBwcm9jZXNzLmdldHVpZCA/IHByb2Nlc3MuZ2V0dWlkKCkgOiBudWxsLFxuICAgICAgICBnaWQ6IHByb2Nlc3MuZ2V0Z2lkID8gcHJvY2Vzcy5nZXRnaWQoKSA6IG51bGwsXG4gICAgICAgIGN3ZDogcHJvY2Vzcy5jd2QoKSxcbiAgICAgICAgZXhlY1BhdGg6IHByb2Nlc3MuZXhlY1BhdGgsXG4gICAgICAgIHZlcnNpb246IHByb2Nlc3MudmVyc2lvbixcbiAgICAgICAgYXJndjogcHJvY2Vzcy5hcmd2LFxuICAgICAgICBtZW1vcnlVc2FnZTogcHJvY2Vzcy5tZW1vcnlVc2FnZSgpXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCByZWxldmFudCBPUyBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnRseSBydW5uaW5nIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRPc0luZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3NJbmZvKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9hZGF2Zzogb3MubG9hZGF2ZygpLFxuICAgICAgICB1cHRpbWU6IG9zLnVwdGltZSgpXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc3RhY2sgdHJhY2UgZm9yIHRoZSBzcGVjaWZpZWQgZXJyb3IuXG4gICAgICogQHBhcmFtIHttaXhlZH0gZXJyIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VHJhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhY2UoZXJyKSB7XG4gICAgICB2YXIgdHJhY2UgPSBlcnIgPyBzdGFja1RyYWNlLnBhcnNlKGVycikgOiBzdGFja1RyYWNlLmdldCgpO1xuICAgICAgcmV0dXJuIHRyYWNlLm1hcChmdW5jdGlvbiAoc2l0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbHVtbjogc2l0ZS5nZXRDb2x1bW5OdW1iZXIoKSxcbiAgICAgICAgICBmaWxlOiBzaXRlLmdldEZpbGVOYW1lKCksXG4gICAgICAgICAgXCJmdW5jdGlvblwiOiBzaXRlLmdldEZ1bmN0aW9uTmFtZSgpLFxuICAgICAgICAgIGxpbmU6IHNpdGUuZ2V0TGluZU51bWJlcigpLFxuICAgICAgICAgIG1ldGhvZDogc2l0ZS5nZXRNZXRob2ROYW1lKCksXG4gICAgICAgICAgXCJuYXRpdmVcIjogc2l0ZS5pc05hdGl2ZSgpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZCB0byBhZGQgYSB0cmFuc3BvcnQgYXMgYW4gZXhjZXB0aW9uIGhhbmRsZXIuXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnR9IGhhbmRsZXIgLSBUaGUgdHJhbnNwb3J0IHRvIGFkZCBhcyBhbiBleGNlcHRpb24gaGFuZGxlci5cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9hZGRIYW5kbGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRIYW5kbGVyKGhhbmRsZXIpIHtcbiAgICAgIGlmICghdGhpcy5oYW5kbGVycy5oYXMoaGFuZGxlcikpIHtcbiAgICAgICAgaGFuZGxlci5oYW5kbGVFeGNlcHRpb25zID0gdHJ1ZTtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgRXhjZXB0aW9uU3RyZWFtKGhhbmRsZXIpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnNldChoYW5kbGVyLCB3cmFwcGVyKTtcbiAgICAgICAgdGhpcy5sb2dnZXIucGlwZSh3cmFwcGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9ncyBhbGwgcmVsZXZhbnQgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBgZXJyYCBhbmQgZXhpdHMgdGhlIGN1cnJlbnRcbiAgICAgKiBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVyciAtIEVycm9yIHRvIGhhbmRsZVxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdW5jYXVnaHRFeGNlcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VuY2F1Z2h0RXhjZXB0aW9uKGVycikge1xuICAgICAgdmFyIGluZm8gPSB0aGlzLmdldEFsbEluZm8oZXJyKTtcblxuICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fZ2V0RXhjZXB0aW9uSGFuZGxlcnMoKTsgLy8gQ2FsY3VsYXRlIGlmIHdlIHNob3VsZCBleGl0IG9uIHRoaXMgZXJyb3JcblxuXG4gICAgICB2YXIgZG9FeGl0ID0gdHlwZW9mIHRoaXMubG9nZ2VyLmV4aXRPbkVycm9yID09PSAnZnVuY3Rpb24nID8gdGhpcy5sb2dnZXIuZXhpdE9uRXJyb3IoZXJyKSA6IHRoaXMubG9nZ2VyLmV4aXRPbkVycm9yO1xuICAgICAgdmFyIHRpbWVvdXQ7XG5cbiAgICAgIGlmICghaGFuZGxlcnMubGVuZ3RoICYmIGRvRXhpdCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ3dpbnN0b246IGV4aXRPbkVycm9yIGNhbm5vdCBiZSB0cnVlIHdpdGggbm8gZXhjZXB0aW9uIGhhbmRsZXJzLicpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICAgIGNvbnNvbGUud2Fybignd2luc3Rvbjogbm90IGV4aXRpbmcgcHJvY2Vzcy4nKTtcbiAgICAgICAgZG9FeGl0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdyYWNlZnVsRXhpdCgpIHtcbiAgICAgICAgZGVidWcoJ2RvRXhpdCcsIGRvRXhpdCk7XG4gICAgICAgIGRlYnVnKCdwcm9jZXNzLl9leGl0aW5nJywgcHJvY2Vzcy5fZXhpdGluZyk7XG5cbiAgICAgICAgaWYgKGRvRXhpdCAmJiAhcHJvY2Vzcy5fZXhpdGluZykge1xuICAgICAgICAgIC8vIFJlbWFyazogQ3VycmVudGx5IGlnbm9yaW5nIGFueSBleGNlcHRpb25zIGZyb20gdHJhbnNwb3J0cyB3aGVuXG4gICAgICAgICAgLy8gY2F0Y2hpbmcgdW5jYXVnaHQgZXhjZXB0aW9ucy5cbiAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZXhpdFxuXG5cbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFoYW5kbGVycyB8fCBoYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZ3JhY2VmdWxFeGl0KTtcbiAgICAgIH0gLy8gTG9nIHRvIGFsbCB0cmFuc3BvcnRzIGF0dGVtcHRpbmcgdG8gbGlzdGVuIGZvciB3aGVuIHRoZXkgYXJlIGNvbXBsZXRlZC5cblxuXG4gICAgICBhc3luY0ZvckVhY2goaGFuZGxlcnMsIGZ1bmN0aW9uIChoYW5kbGVyLCBuZXh0KSB7XG4gICAgICAgIHZhciBkb25lID0gb25jZShuZXh0KTtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IGhhbmRsZXIudHJhbnNwb3J0IHx8IGhhbmRsZXI7IC8vIERlYnVnIHdyYXBwaW5nIHNvIHRoYXQgd2UgY2FuIGluc3BlY3Qgd2hhdCdzIGdvaW5nIG9uIHVuZGVyIHRoZSBjb3ZlcnMuXG5cbiAgICAgICAgZnVuY3Rpb24gb25Eb25lKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlYnVnKGV2ZW50KTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNwb3J0Ll9lbmRpbmcgPSB0cnVlO1xuICAgICAgICB0cmFuc3BvcnQub25jZSgnZmluaXNoJywgb25Eb25lKCdmaW5pc2hlZCcpKTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25Eb25lKCdlcnJvcicpKTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRvRXhpdCAmJiBncmFjZWZ1bEV4aXQoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGluZm8pOyAvLyBJZiBleGl0T25FcnJvciBpcyB0cnVlLCB0aGVuIG9ubHkgYWxsb3cgdGhlIGxvZ2dpbmcgb2YgZXhjZXB0aW9ucyB0b1xuICAgICAgLy8gdGFrZSB1cCB0byBgMzAwMG1zYC5cblxuICAgICAgaWYgKGRvRXhpdCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChncmFjZWZ1bEV4aXQsIDMwMDApO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHRyYW5zcG9ydHMgYW5kIGV4Y2VwdGlvbkhhbmRsZXJzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gLSBMaXN0IG9mIHRyYW5zcG9ydHMgYW5kIGV4Y2VwdGlvbkhhbmRsZXJzIGZvciB0aGlzXG4gICAgICogaW5zdGFuY2UuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRFeGNlcHRpb25IYW5kbGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RXhjZXB0aW9uSGFuZGxlcnMoKSB7XG4gICAgICAvLyBSZW1hcmsgKGluZGV4emVybyk6IHNpbmNlIGBsb2dnZXIudHJhbnNwb3J0c2AgcmV0dXJucyBhbGwgb2YgdGhlIHBpcGVzXG4gICAgICAvLyBmcm9tIHRoZSBfcmVhZGFibGVTdGF0ZSBvZiB0aGUgc3RyZWFtIHdlIGFjdHVhbGx5IGdldCB0aGUgam9pbiBvZiB0aGVcbiAgICAgIC8vIGV4cGxpY2l0IGhhbmRsZXJzIGFuZCB0aGUgaW1wbGljaXQgdHJhbnNwb3J0cyB3aXRoXG4gICAgICAvLyBgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZWBcbiAgICAgIHJldHVybiB0aGlzLmxvZ2dlci50cmFuc3BvcnRzLmZpbHRlcihmdW5jdGlvbiAod3JhcCkge1xuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gd3JhcC50cmFuc3BvcnQgfHwgd3JhcDtcbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydC5oYW5kbGVFeGNlcHRpb25zO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV4Y2VwdGlvbkhhbmRsZXI7XG59KCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbmFtZSA9IHJlcXVpcmUoJ2ZuLm5hbWUnKTtcblxuLyoqXG4gKiBXcmFwIGNhbGxiYWNrcyB0byBwcmV2ZW50IGRvdWJsZSBleGVjdXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdGhhdCBzaG91bGQgb25seSBiZSBjYWxsZWQgb25jZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSB3cmFwcGVkIGNhbGxiYWNrIHdoaWNoIHByZXZlbnRzIG11bHRpcGxlIGV4ZWN1dGlvbnMuXG4gKiBAcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb25lKGZuKSB7XG4gIHZhciBjYWxsZWQgPSAwXG4gICAgLCB2YWx1ZTtcblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRoYXQgcHJldmVudHMgZG91YmxlIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIG9uZXRpbWUoKSB7XG4gICAgaWYgKGNhbGxlZCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgY2FsbGVkID0gMTtcbiAgICB2YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZm4gPSBudWxsO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy9cbiAgLy8gVG8gbWFrZSBkZWJ1Z2dpbmcgbW9yZSBlYXN5IHdlIHdhbnQgdG8gdXNlIHRoZSBuYW1lIG9mIHRoZSBzdXBwbGllZFxuICAvLyBmdW5jdGlvbi4gU28gd2hlbiB5b3UgbG9vayBhdCB0aGUgZnVuY3Rpb25zIHRoYXQgYXJlIGFzc2lnbmVkIHRvIGV2ZW50XG4gIC8vIGxpc3RlbmVycyB5b3UgZG9uJ3Qgc2VlIGEgbG9hZCBvZiBgb25ldGltZWAgZnVuY3Rpb25zIGJ1dCBhY3R1YWxseSB0aGVcbiAgLy8gbmFtZXMgb2YgdGhlIGZ1bmN0aW9ucyB0aGF0IHRoaXMgbW9kdWxlIHdpbGwgY2FsbC5cbiAgLy9cbiAgLy8gTk9URTogV2UgY2Fubm90IG92ZXJyaWRlIHRoZSBgbmFtZWAgcHJvcGVydHksIGFzIHRoYXQgaXMgYHJlYWRPbmx5YFxuICAvLyBwcm9wZXJ0eSwgc28gZGlzcGxheU5hbWUgd2lsbCBoYXZlIHRvIGRvLlxuICAvL1xuICBvbmV0aW1lLmRpc3BsYXlOYW1lID0gbmFtZShmbik7XG4gIHJldHVybiBvbmV0aW1lO1xufTtcbiIsImV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24oYmVsb3dGbikge1xuICB2YXIgb2xkTGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IEluZmluaXR5O1xuXG4gIHZhciBkdW1teU9iamVjdCA9IHt9O1xuXG4gIHZhciB2OEhhbmRsZXIgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBmdW5jdGlvbihkdW1teU9iamVjdCwgdjhTdGFja1RyYWNlKSB7XG4gICAgcmV0dXJuIHY4U3RhY2tUcmFjZTtcbiAgfTtcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXlPYmplY3QsIGJlbG93Rm4gfHwgZXhwb3J0cy5nZXQpO1xuXG4gIHZhciB2OFN0YWNrVHJhY2UgPSBkdW1teU9iamVjdC5zdGFjaztcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB2OEhhbmRsZXI7XG4gIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IG9sZExpbWl0O1xuXG4gIHJldHVybiB2OFN0YWNrVHJhY2U7XG59O1xuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICghZXJyLnN0YWNrKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbGluZXMgPSBlcnIuc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKDEpO1xuXG4gIHJldHVybiBsaW5lc1xuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgaWYgKGxpbmUubWF0Y2goL15cXHMqWy1dezQsfSQvKSkge1xuICAgICAgICByZXR1cm4gc2VsZi5fY3JlYXRlUGFyc2VkQ2FsbFNpdGUoe1xuICAgICAgICAgIGZpbGVOYW1lOiBsaW5lLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IG51bGwsXG4gICAgICAgICAgZnVuY3Rpb25OYW1lOiBudWxsLFxuICAgICAgICAgIHR5cGVOYW1lOiBudWxsLFxuICAgICAgICAgIG1ldGhvZE5hbWU6IG51bGwsXG4gICAgICAgICAgY29sdW1uTnVtYmVyOiBudWxsLFxuICAgICAgICAgICduYXRpdmUnOiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmVNYXRjaCA9IGxpbmUubWF0Y2goL2F0ICg/OiguKylcXHMrXFwoKT8oPzooLis/KTooXFxkKykoPzo6KFxcZCspKT98KFteKV0rKSlcXCk/Lyk7XG4gICAgICBpZiAoIWxpbmVNYXRjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvYmplY3QgPSBudWxsO1xuICAgICAgdmFyIG1ldGhvZCA9IG51bGw7XG4gICAgICB2YXIgZnVuY3Rpb25OYW1lID0gbnVsbDtcbiAgICAgIHZhciB0eXBlTmFtZSA9IG51bGw7XG4gICAgICB2YXIgbWV0aG9kTmFtZSA9IG51bGw7XG4gICAgICB2YXIgaXNOYXRpdmUgPSAobGluZU1hdGNoWzVdID09PSAnbmF0aXZlJyk7XG5cbiAgICAgIGlmIChsaW5lTWF0Y2hbMV0pIHtcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gbGluZU1hdGNoWzFdO1xuICAgICAgICB2YXIgbWV0aG9kU3RhcnQgPSBmdW5jdGlvbk5hbWUubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGZ1bmN0aW9uTmFtZVttZXRob2RTdGFydC0xXSA9PSAnLicpXG4gICAgICAgICAgbWV0aG9kU3RhcnQtLTtcbiAgICAgICAgaWYgKG1ldGhvZFN0YXJ0ID4gMCkge1xuICAgICAgICAgIG9iamVjdCA9IGZ1bmN0aW9uTmFtZS5zdWJzdHIoMCwgbWV0aG9kU3RhcnQpO1xuICAgICAgICAgIG1ldGhvZCA9IGZ1bmN0aW9uTmFtZS5zdWJzdHIobWV0aG9kU3RhcnQgKyAxKTtcbiAgICAgICAgICB2YXIgb2JqZWN0RW5kID0gb2JqZWN0LmluZGV4T2YoJy5Nb2R1bGUnKTtcbiAgICAgICAgICBpZiAob2JqZWN0RW5kID4gMCkge1xuICAgICAgICAgICAgZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25OYW1lLnN1YnN0cihvYmplY3RFbmQgKyAxKTtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5zdWJzdHIoMCwgb2JqZWN0RW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHlwZU5hbWUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgIHR5cGVOYW1lID0gb2JqZWN0O1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kID09PSAnPGFub255bW91cz4nKSB7XG4gICAgICAgIG1ldGhvZE5hbWUgPSBudWxsO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcGVydGllcyA9IHtcbiAgICAgICAgZmlsZU5hbWU6IGxpbmVNYXRjaFsyXSB8fCBudWxsLFxuICAgICAgICBsaW5lTnVtYmVyOiBwYXJzZUludChsaW5lTWF0Y2hbM10sIDEwKSB8fCBudWxsLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgdHlwZU5hbWU6IHR5cGVOYW1lLFxuICAgICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgICBjb2x1bW5OdW1iZXI6IHBhcnNlSW50KGxpbmVNYXRjaFs0XSwgMTApIHx8IG51bGwsXG4gICAgICAgICduYXRpdmUnOiBpc05hdGl2ZSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVQYXJzZWRDYWxsU2l0ZShwcm9wZXJ0aWVzKTtcbiAgICB9KVxuICAgIC5maWx0ZXIoZnVuY3Rpb24oY2FsbFNpdGUpIHtcbiAgICAgIHJldHVybiAhIWNhbGxTaXRlO1xuICAgIH0pO1xufTtcblxuZnVuY3Rpb24gQ2FsbFNpdGUocHJvcGVydGllcykge1xuICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgdGhpc1twcm9wZXJ0eV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgfVxufVxuXG52YXIgc3RyUHJvcGVydGllcyA9IFtcbiAgJ3RoaXMnLFxuICAndHlwZU5hbWUnLFxuICAnZnVuY3Rpb25OYW1lJyxcbiAgJ21ldGhvZE5hbWUnLFxuICAnZmlsZU5hbWUnLFxuICAnbGluZU51bWJlcicsXG4gICdjb2x1bW5OdW1iZXInLFxuICAnZnVuY3Rpb24nLFxuICAnZXZhbE9yaWdpbidcbl07XG52YXIgYm9vbFByb3BlcnRpZXMgPSBbXG4gICd0b3BMZXZlbCcsXG4gICdldmFsJyxcbiAgJ25hdGl2ZScsXG4gICdjb25zdHJ1Y3Rvcidcbl07XG5zdHJQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gIENhbGxTaXRlLnByb3RvdHlwZVtwcm9wZXJ0eV0gPSBudWxsO1xuICBDYWxsU2l0ZS5wcm90b3R5cGVbJ2dldCcgKyBwcm9wZXJ0eVswXS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH1cbn0pO1xuYm9vbFByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgQ2FsbFNpdGUucHJvdG90eXBlW3Byb3BlcnR5XSA9IGZhbHNlO1xuICBDYWxsU2l0ZS5wcm90b3R5cGVbJ2lzJyArIHByb3BlcnR5WzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSldID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgfVxufSk7XG5cbmV4cG9ydHMuX2NyZWF0ZVBhcnNlZENhbGxTaXRlID0gZnVuY3Rpb24ocHJvcGVydGllcykge1xuICByZXR1cm4gbmV3IENhbGxTaXRlKHByb3BlcnRpZXMpO1xufTtcbiIsIi8qKlxuICogZXhjZXB0aW9uLXN0cmVhbS5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGhhbmRsZXIuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJyksXG4gICAgV3JpdGFibGUgPSBfcmVxdWlyZS5Xcml0YWJsZTtcbi8qKlxuICogVE9ETzogYWRkIGNsYXNzIGRlc2NyaXB0aW9uLlxuICogQHR5cGUge0V4Y2VwdGlvblN0cmVhbX1cbiAqIEBleHRlbmRzIHtXcml0YWJsZX1cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfV3JpdGFibGUpIHtcbiAgX2luaGVyaXRzKEV4Y2VwdGlvblN0cmVhbSwgX1dyaXRhYmxlKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEV4Y2VwdGlvblN0cmVhbSk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgRXhjZXB0aW9uU3RyZWFtIHJlc3BvbnNpYmxlIGZvciB3cmFwcGluZyBhXG4gICAqIFRyYW5zcG9ydFN0cmVhbTsgb25seSBhbGxvd2luZyB3cml0ZXMgb2YgYGluZm9gIG9iamVjdHMgd2l0aFxuICAgKiBgaW5mby5leGNlcHRpb25gIHNldCB0byB0cnVlLlxuICAgKiBAcGFyYW0geyFUcmFuc3BvcnRTdHJlYW19IHRyYW5zcG9ydCAtIFN0cmVhbSB0byBmaWx0ZXIgdG8gZXhjZXB0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gRXhjZXB0aW9uU3RyZWFtKHRyYW5zcG9ydCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeGNlcHRpb25TdHJlYW0pO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB7XG4gICAgICBvYmplY3RNb2RlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlcHRpb25TdHJlYW0gcmVxdWlyZXMgYSBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UuJyk7XG4gICAgfSAvLyBSZW1hcmsgKGluZGV4emVybyk6IHdlIHNldCBgaGFuZGxlRXhjZXB0aW9uc2AgaGVyZSBiZWNhdXNlIGl0J3MgdGhlXG4gICAgLy8gcHJlZGljYXRlIGNoZWNrZWQgaW4gRXhjZXB0aW9uSGFuZGxlci5wcm90b3R5cGUuX19nZXRFeGNlcHRpb25IYW5kbGVyc1xuXG5cbiAgICBfdGhpcy5oYW5kbGVFeGNlcHRpb25zID0gdHJ1ZTtcbiAgICBfdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZXMgdGhlIGluZm8gb2JqZWN0IHRvIG91ciB0cmFuc3BvcnQgaW5zdGFuY2UgaWYgKGFuZCBvbmx5IGlmKSB0aGVcbiAgICogYGV4Y2VwdGlvbmAgcHJvcGVydHkgaXMgc2V0IG9uIHRoZSBpbmZvLlxuICAgKiBAcGFyYW0ge21peGVkfSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge21peGVkfSBlbmMgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRXhjZXB0aW9uU3RyZWFtLCBbe1xuICAgIGtleTogXCJfd3JpdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3dyaXRlKGluZm8sIGVuYywgY2FsbGJhY2spIHtcbiAgICAgIGlmIChpbmZvLmV4Y2VwdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnQubG9nKGluZm8sIGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFeGNlcHRpb25TdHJlYW07XG59KFdyaXRhYmxlKTsiLCIvKipcbiAqIGV4Y2VwdGlvbi1oYW5kbGVyLmpzOiBPYmplY3QgZm9yIGhhbmRsaW5nIHVuY2F1Z2h0RXhjZXB0aW9uIGV2ZW50cy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgb3MgPSByZXF1aXJlKCdvcycpO1xuXG52YXIgYXN5bmNGb3JFYWNoID0gcmVxdWlyZSgnYXN5bmMvZm9yRWFjaCcpO1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdAZGFiaC9kaWFnbm9zdGljcycpKCd3aW5zdG9uOnJlamVjdGlvbicpO1xuXG52YXIgb25jZSA9IHJlcXVpcmUoJ29uZS10aW1lJyk7XG5cbnZhciBzdGFja1RyYWNlID0gcmVxdWlyZSgnc3RhY2stdHJhY2UnKTtcblxudmFyIEV4Y2VwdGlvblN0cmVhbSA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uLXN0cmVhbScpO1xuLyoqXG4gKiBPYmplY3QgZm9yIGhhbmRsaW5nIHVuaGFuZGxlZFJlamVjdGlvbiBldmVudHMuXG4gKiBAdHlwZSB7UmVqZWN0aW9uSGFuZGxlcn1cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIFRPRE86IGFkZCBjb250cnVjdG9yIGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7IUxvZ2dlcn0gbG9nZ2VyIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uXG4gICAqL1xuICBmdW5jdGlvbiBSZWplY3Rpb25IYW5kbGVyKGxvZ2dlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWplY3Rpb25IYW5kbGVyKTtcblxuICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2dlciBpcyByZXF1aXJlZCB0byBoYW5kbGUgcmVqZWN0aW9ucycpO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMuaGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgYHVuaGFuZGxlZFJlamVjdGlvbmAgZXZlbnRzIGZvciB0aGUgY3VycmVudCBwcm9jZXNzIGJ5IGFkZGluZyBhbnlcbiAgICogaGFuZGxlcnMgcGFzc2VkIGluLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSZWplY3Rpb25IYW5kbGVyLCBbe1xuICAgIGtleTogXCJoYW5kbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICByZXR1cm4gYXJnLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLl9hZGRIYW5kbGVyKGFyZyk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLmNhdGNoZXIpIHtcbiAgICAgICAgdGhpcy5jYXRjaGVyID0gdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIHByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIHRoaXMuY2F0Y2hlcik7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW55IGhhbmRsZXJzIHRvIGB1bmhhbmRsZWRSZWplY3Rpb25gIGV2ZW50cyBmb3IgdGhlIGN1cnJlbnRcbiAgICAgKiBwcm9jZXNzLiBUaGlzIGRvZXMgbm90IG1vZGlmeSB0aGUgc3RhdGUgb2YgdGhlIGB0aGlzLmhhbmRsZXJzYCBzZXQuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuaGFuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaGFuZGxlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmNhdGNoZXIpIHtcbiAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcigndW5oYW5kbGVkUmVqZWN0aW9uJywgdGhpcy5jYXRjaGVyKTtcbiAgICAgICAgdGhpcy5jYXRjaGVyID0gZmFsc2U7XG4gICAgICAgIEFycmF5LmZyb20odGhpcy5oYW5kbGVycy52YWx1ZXMoKSkuZm9yRWFjaChmdW5jdGlvbiAod3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIubG9nZ2VyLnVucGlwZSh3cmFwcGVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBFcnJvciB0byBnZXQgaW5mb3JtYXRpb24gYWJvdXQuXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRBbGxJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbEluZm8oZXJyKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuXG4gICAgICBpZiAoIW1lc3NhZ2UgJiYgdHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWVzc2FnZSA9IGVycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgLy8gVE9ETyAoaW5kZXh6ZXJvKTogaG93IGRvIHdlIGNvbmZpZ3VyZSB0aGlzP1xuICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgbWVzc2FnZTogW1widW5oYW5kbGVkUmVqZWN0aW9uOiBcIi5jb25jYXQobWVzc2FnZSB8fCAnKG5vIGVycm9yIG1lc3NhZ2UpJyksIGVyci5zdGFjayB8fCAnICBObyBzdGFjayB0cmFjZSddLmpvaW4oJ1xcbicpLFxuICAgICAgICBzdGFjazogZXJyLnN0YWNrLFxuICAgICAgICBleGNlcHRpb246IHRydWUsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgcHJvY2VzczogdGhpcy5nZXRQcm9jZXNzSW5mbygpLFxuICAgICAgICBvczogdGhpcy5nZXRPc0luZm8oKSxcbiAgICAgICAgdHJhY2U6IHRoaXMuZ2V0VHJhY2UoZXJyKVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgcmVsZXZhbnQgcHJvY2VzcyBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnRseSBydW5uaW5nIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQcm9jZXNzSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9jZXNzSW5mbygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBpZDogcHJvY2Vzcy5waWQsXG4gICAgICAgIHVpZDogcHJvY2Vzcy5nZXR1aWQgPyBwcm9jZXNzLmdldHVpZCgpIDogbnVsbCxcbiAgICAgICAgZ2lkOiBwcm9jZXNzLmdldGdpZCA/IHByb2Nlc3MuZ2V0Z2lkKCkgOiBudWxsLFxuICAgICAgICBjd2Q6IHByb2Nlc3MuY3dkKCksXG4gICAgICAgIGV4ZWNQYXRoOiBwcm9jZXNzLmV4ZWNQYXRoLFxuICAgICAgICB2ZXJzaW9uOiBwcm9jZXNzLnZlcnNpb24sXG4gICAgICAgIGFyZ3Y6IHByb2Nlc3MuYXJndixcbiAgICAgICAgbWVtb3J5VXNhZ2U6IHByb2Nlc3MubWVtb3J5VXNhZ2UoKVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgcmVsZXZhbnQgT1MgaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T3NJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9zSW5mbygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvYWRhdmc6IG9zLmxvYWRhdmcoKSxcbiAgICAgICAgdXB0aW1lOiBvcy51cHRpbWUoKVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0YWNrIHRyYWNlIGZvciB0aGUgc3BlY2lmaWVkIGVycm9yLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGVyciAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFRyYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYWNlKGVycikge1xuICAgICAgdmFyIHRyYWNlID0gZXJyID8gc3RhY2tUcmFjZS5wYXJzZShlcnIpIDogc3RhY2tUcmFjZS5nZXQoKTtcbiAgICAgIHJldHVybiB0cmFjZS5tYXAoZnVuY3Rpb24gKHNpdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2x1bW46IHNpdGUuZ2V0Q29sdW1uTnVtYmVyKCksXG4gICAgICAgICAgZmlsZTogc2l0ZS5nZXRGaWxlTmFtZSgpLFxuICAgICAgICAgIFwiZnVuY3Rpb25cIjogc2l0ZS5nZXRGdW5jdGlvbk5hbWUoKSxcbiAgICAgICAgICBsaW5lOiBzaXRlLmdldExpbmVOdW1iZXIoKSxcbiAgICAgICAgICBtZXRob2Q6IHNpdGUuZ2V0TWV0aG9kTmFtZSgpLFxuICAgICAgICAgIFwibmF0aXZlXCI6IHNpdGUuaXNOYXRpdmUoKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhlbHBlciBtZXRob2QgdG8gYWRkIGEgdHJhbnNwb3J0IGFzIGFuIGV4Y2VwdGlvbiBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSB7VHJhbnNwb3J0fSBoYW5kbGVyIC0gVGhlIHRyYW5zcG9ydCB0byBhZGQgYXMgYW4gZXhjZXB0aW9uIGhhbmRsZXIuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYWRkSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICBpZiAoIXRoaXMuaGFuZGxlcnMuaGFzKGhhbmRsZXIpKSB7XG4gICAgICAgIGhhbmRsZXIuaGFuZGxlUmVqZWN0aW9ucyA9IHRydWU7XG4gICAgICAgIHZhciB3cmFwcGVyID0gbmV3IEV4Y2VwdGlvblN0cmVhbShoYW5kbGVyKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoaGFuZGxlciwgd3JhcHBlcik7XG4gICAgICAgIHRoaXMubG9nZ2VyLnBpcGUod3JhcHBlcik7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZ3MgYWxsIHJlbGV2YW50IGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgYGVycmAgYW5kIGV4aXRzIHRoZSBjdXJyZW50XG4gICAgICogcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBFcnJvciB0byBoYW5kbGVcbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3VuaGFuZGxlZFJlamVjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdW5oYW5kbGVkUmVqZWN0aW9uKGVycikge1xuICAgICAgdmFyIGluZm8gPSB0aGlzLmdldEFsbEluZm8oZXJyKTtcblxuICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fZ2V0UmVqZWN0aW9uSGFuZGxlcnMoKTsgLy8gQ2FsY3VsYXRlIGlmIHdlIHNob3VsZCBleGl0IG9uIHRoaXMgZXJyb3JcblxuXG4gICAgICB2YXIgZG9FeGl0ID0gdHlwZW9mIHRoaXMubG9nZ2VyLmV4aXRPbkVycm9yID09PSAnZnVuY3Rpb24nID8gdGhpcy5sb2dnZXIuZXhpdE9uRXJyb3IoZXJyKSA6IHRoaXMubG9nZ2VyLmV4aXRPbkVycm9yO1xuICAgICAgdmFyIHRpbWVvdXQ7XG5cbiAgICAgIGlmICghaGFuZGxlcnMubGVuZ3RoICYmIGRvRXhpdCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ3dpbnN0b246IGV4aXRPbkVycm9yIGNhbm5vdCBiZSB0cnVlIHdpdGggbm8gcmVqZWN0aW9uIGhhbmRsZXJzLicpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICAgIGNvbnNvbGUud2Fybignd2luc3Rvbjogbm90IGV4aXRpbmcgcHJvY2Vzcy4nKTtcbiAgICAgICAgZG9FeGl0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdyYWNlZnVsRXhpdCgpIHtcbiAgICAgICAgZGVidWcoJ2RvRXhpdCcsIGRvRXhpdCk7XG4gICAgICAgIGRlYnVnKCdwcm9jZXNzLl9leGl0aW5nJywgcHJvY2Vzcy5fZXhpdGluZyk7XG5cbiAgICAgICAgaWYgKGRvRXhpdCAmJiAhcHJvY2Vzcy5fZXhpdGluZykge1xuICAgICAgICAgIC8vIFJlbWFyazogQ3VycmVudGx5IGlnbm9yaW5nIGFueSByZWplY3Rpb25zIGZyb20gdHJhbnNwb3J0cyB3aGVuXG4gICAgICAgICAgLy8gY2F0Y2hpbmcgdW5oYW5kbGVkIHJlamVjdGlvbnMuXG4gICAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm9jZXNzLWV4aXRcblxuXG4gICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFuZGxlcnMgfHwgaGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGdyYWNlZnVsRXhpdCk7XG4gICAgICB9IC8vIExvZyB0byBhbGwgdHJhbnNwb3J0cyBhdHRlbXB0aW5nIHRvIGxpc3RlbiBmb3Igd2hlbiB0aGV5IGFyZSBjb21wbGV0ZWQuXG5cblxuICAgICAgYXN5bmNGb3JFYWNoKGhhbmRsZXJzLCBmdW5jdGlvbiAoaGFuZGxlciwgbmV4dCkge1xuICAgICAgICB2YXIgZG9uZSA9IG9uY2UobmV4dCk7XG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBoYW5kbGVyLnRyYW5zcG9ydCB8fCBoYW5kbGVyOyAvLyBEZWJ1ZyB3cmFwcGluZyBzbyB0aGF0IHdlIGNhbiBpbnNwZWN0IHdoYXQncyBnb2luZyBvbiB1bmRlciB0aGUgY292ZXJzLlxuXG4gICAgICAgIGZ1bmN0aW9uIG9uRG9uZShldmVudCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhldmVudCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zcG9ydC5fZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoJ2ZpbmlzaCcsIG9uRG9uZSgnZmluaXNoZWQnKSk7XG4gICAgICAgIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uRG9uZSgnZXJyb3InKSk7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb0V4aXQgJiYgZ3JhY2VmdWxFeGl0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhpbmZvKTsgLy8gSWYgZXhpdE9uRXJyb3IgaXMgdHJ1ZSwgdGhlbiBvbmx5IGFsbG93IHRoZSBsb2dnaW5nIG9mIGV4Y2VwdGlvbnMgdG9cbiAgICAgIC8vIHRha2UgdXAgdG8gYDMwMDBtc2AuXG5cbiAgICAgIGlmIChkb0V4aXQpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZ3JhY2VmdWxFeGl0LCAzMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiB0cmFuc3BvcnRzIGFuZCBleGNlcHRpb25IYW5kbGVycyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IC0gTGlzdCBvZiB0cmFuc3BvcnRzIGFuZCBleGNlcHRpb25IYW5kbGVycyBmb3IgdGhpc1xuICAgICAqIGluc3RhbmNlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0UmVqZWN0aW9uSGFuZGxlcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFJlamVjdGlvbkhhbmRsZXJzKCkge1xuICAgICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiBzaW5jZSBgbG9nZ2VyLnRyYW5zcG9ydHNgIHJldHVybnMgYWxsIG9mIHRoZSBwaXBlc1xuICAgICAgLy8gZnJvbSB0aGUgX3JlYWRhYmxlU3RhdGUgb2YgdGhlIHN0cmVhbSB3ZSBhY3R1YWxseSBnZXQgdGhlIGpvaW4gb2YgdGhlXG4gICAgICAvLyBleHBsaWNpdCBoYW5kbGVycyBhbmQgdGhlIGltcGxpY2l0IHRyYW5zcG9ydHMgd2l0aFxuICAgICAgLy8gYGhhbmRsZVJlamVjdGlvbnM6IHRydWVgXG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXIudHJhbnNwb3J0cy5maWx0ZXIoZnVuY3Rpb24gKHdyYXApIHtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IHdyYXAudHJhbnNwb3J0IHx8IHdyYXA7XG4gICAgICAgIHJldHVybiB0cmFuc3BvcnQuaGFuZGxlUmVqZWN0aW9ucztcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWplY3Rpb25IYW5kbGVyO1xufSgpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVhY3RMaWZlY3ljbGVzQ29tcGF0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4vb3duZXJXaW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBwc3VlZG9FbGVtZW50KSB7XG4gIHJldHVybiBvd25lcldpbmRvdyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIHBzdWVkb0VsZW1lbnQpO1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jICYmIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwidmFyIHJVcHBlciA9IC8oW0EtWl0pL2c7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xuaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICcuL2h5cGhlbmF0ZSc7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59IiwidmFyIHN1cHBvcnRlZFRyYW5zZm9ybXMgPSAvXigodHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSkoWHxZfFp8M2QpP3xtYXRyaXgoM2QpP3xwZXJzcGVjdGl2ZXxza2V3KFh8WSk/KSQvaTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiBzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3QodmFsdWUpKTtcbn0iLCJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tICcuL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICcuL2h5cGhlbmF0ZVN0eWxlJztcbmltcG9ydCBpc1RyYW5zZm9ybSBmcm9tICcuL2lzVHJhbnNmb3JtJztcblxuZnVuY3Rpb24gc3R5bGUobm9kZSwgcHJvcGVydHkpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShoeXBoZW5hdGUocHJvcGVydHkpKSB8fCBnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoaHlwaGVuYXRlKHByb3BlcnR5KSk7XG4gIH1cblxuICBPYmplY3Qua2V5cyhwcm9wZXJ0eSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gcHJvcGVydHlba2V5XTtcblxuICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoaHlwaGVuYXRlKGtleSkpO1xuICAgIH0gZWxzZSBpZiAoaXNUcmFuc2Zvcm0oa2V5KSkge1xuICAgICAgdHJhbnNmb3JtcyArPSBrZXkgKyBcIihcIiArIHZhbHVlICsgXCIpIFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3MgKz0gaHlwaGVuYXRlKGtleSkgKyBcIjogXCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHRyYW5zZm9ybXMpIHtcbiAgICBjc3MgKz0gXCJ0cmFuc2Zvcm06IFwiICsgdHJhbnNmb3JtcyArIFwiO1wiO1xuICB9XG5cbiAgbm9kZS5zdHlsZS5jc3NUZXh0ICs9IFwiO1wiICsgY3NzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5mdW5jdGlvbiByZWFkT25seVByb3BUeXBlKGhhbmRsZXIsIG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcHJvcHNbaGFuZGxlcl0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIllvdSBoYXZlIHByb3ZpZGVkIGEgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCB0byBgXCIgKyBuYW1lICsgXCJgIFwiICsgKFwid2l0aG91dCBhbiBgXCIgKyBoYW5kbGVyICsgXCJgIGhhbmRsZXIgcHJvcC4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gXCIpICsgKFwiSWYgdGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgXCIgKyBkZWZhdWx0S2V5KHByb3BOYW1lKSArIFwiYC4gXCIpICsgKFwiT3RoZXJ3aXNlLCBzZXQgYFwiICsgaGFuZGxlciArIFwiYC5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuY29udHJvbGxlZFByb3BUeXBlcyhjb250cm9sbGVkVmFsdWVzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgcHJvcFR5cGVzID0ge307XG4gIE9iamVjdC5rZXlzKGNvbnRyb2xsZWRWYWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBhZGQgZGVmYXVsdCBwcm9wVHlwZXMgZm9yIGZvbGtzIHRoYXQgdXNlIHJ1bnRpbWUgY2hlY2tzXG4gICAgcHJvcFR5cGVzW2RlZmF1bHRLZXkocHJvcCldID0gbm9vcDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IGNvbnRyb2xsZWRWYWx1ZXNbcHJvcF07XG4gICAgICAhKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJyAmJiBoYW5kbGVyLnRyaW0oKS5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnVW5jb250cm9sbGFibGUgLSBbJXNdOiB0aGUgcHJvcCBgJXNgIG5lZWRzIGEgdmFsaWQgaGFuZGxlciBrZXkgbmFtZSBpbiBvcmRlciB0byBtYWtlIGl0IHVuY29udHJvbGxhYmxlJywgZGlzcGxheU5hbWUsIHByb3ApIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHByb3BUeXBlc1twcm9wXSA9IHJlYWRPbmx5UHJvcFR5cGUoaGFuZGxlciwgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm9wVHlwZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9wKHByb3BzLCBwcm9wKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRLZXkoa2V5KSB7XG4gIHJldHVybiAnZGVmYXVsdCcgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpO1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5BY2NlcHRSZWYoY29tcG9uZW50KSB7XG4gIHJldHVybiAhIWNvbXBvbmVudCAmJiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJyB8fCBjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuXG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmICh0eXBlb2YgcmVzICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gdXNlVW5jb250cm9sbGVkUHJvcChwcm9wVmFsdWUsIGRlZmF1bHRWYWx1ZSwgaGFuZGxlcikge1xuICB2YXIgd2FzUHJvcFJlZiA9IHVzZVJlZihwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKGRlZmF1bHRWYWx1ZSksXG4gICAgICBzdGF0ZVZhbHVlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0U3RhdGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIGlzUHJvcCA9IHByb3BWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgd2FzUHJvcCA9IHdhc1Byb3BSZWYuY3VycmVudDtcbiAgd2FzUHJvcFJlZi5jdXJyZW50ID0gaXNQcm9wO1xuICAvKipcbiAgICogSWYgYSBwcm9wIHN3aXRjaGVzIGZyb20gY29udHJvbGxlZCB0byBVbmNvbnRyb2xsZWRcbiAgICogcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0VmFsdWVcbiAgICovXG5cbiAgaWYgKCFpc1Byb3AgJiYgd2FzUHJvcCAmJiBzdGF0ZVZhbHVlICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICBzZXRTdGF0ZShkZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIFtpc1Byb3AgPyBwcm9wVmFsdWUgOiBzdGF0ZVZhbHVlLCB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlcikgaGFuZGxlci5hcHBseSh2b2lkIDAsIFt2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcbiAgICBzZXRTdGF0ZSh2YWx1ZSk7XG4gIH0sIFtoYW5kbGVyXSldO1xufVxuXG5leHBvcnQgeyB1c2VVbmNvbnRyb2xsZWRQcm9wIH07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VVbmNvbnRyb2xsZWQocHJvcHMsIGNvbmZpZykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29uZmlnKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgZmllbGROYW1lKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfcmVmID0gcmVzdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmW1V0aWxzLmRlZmF1bHRLZXkoZmllbGROYW1lKV0sXG4gICAgICAgIHByb3BzVmFsdWUgPSBfcmVmW2ZpZWxkTmFtZV0sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbVXRpbHMuZGVmYXVsdEtleShmaWVsZE5hbWUpLCBmaWVsZE5hbWVdLm1hcChfdG9Qcm9wZXJ0eUtleSkpO1xuXG4gICAgdmFyIGhhbmRsZXJOYW1lID0gY29uZmlnW2ZpZWxkTmFtZV07XG5cbiAgICB2YXIgX3VzZVVuY29udHJvbGxlZFByb3AgPSB1c2VVbmNvbnRyb2xsZWRQcm9wKHByb3BzVmFsdWUsIGRlZmF1bHRWYWx1ZSwgcHJvcHNbaGFuZGxlck5hbWVdKSxcbiAgICAgICAgdmFsdWUgPSBfdXNlVW5jb250cm9sbGVkUHJvcFswXSxcbiAgICAgICAgaGFuZGxlciA9IF91c2VVbmNvbnRyb2xsZWRQcm9wWzFdO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCByZXN0LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltmaWVsZE5hbWVdID0gdmFsdWUsIF9leHRlbmRzMltoYW5kbGVyTmFtZV0gPSBoYW5kbGVyLCBfZXh0ZW5kczIpKTtcbiAgfSwgcHJvcHMpO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDcmVhdGVzIGEgYFJlZmAgd2hvc2UgdmFsdWUgaXMgdXBkYXRlZCBpbiBhbiBlZmZlY3QsIGVuc3VyaW5nIHRoZSBtb3N0IHJlY2VudFxuICogdmFsdWUgaXMgdGhlIG9uZSByZW5kZXJlZCB3aXRoLiBHZW5lcmFsbHkgb25seSByZXF1aXJlZCBmb3IgQ29uY3VycmVudCBtb2RlIHVzYWdlXG4gKiB3aGVyZSBwcmV2aW91cyB3b3JrIGluIGByZW5kZXIoKWAgbWF5IGJlIGRpc2NhcmRlZCBiZWZvciBiZWluZyB1c2VkLlxuICpcbiAqIFRoaXMgaXMgc2FmZSB0byBhY2Nlc3MgaW4gYW4gZXZlbnQgaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGBSZWZgIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29tbWl0dGVkUmVmKHZhbHVlKSB7XG4gIHZhciByZWYgPSB1c2VSZWYodmFsdWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gcmVmO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VDb21taXR0ZWRSZWY7IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlQ29tbWl0dGVkUmVmIGZyb20gJy4vdXNlQ29tbWl0dGVkUmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IHVzZUNvbW1pdHRlZFJlZihmbik7XG4gIHJldHVybiB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50ICYmIHJlZi5jdXJyZW50LmFwcGx5KHJlZiwgYXJndW1lbnRzKTtcbiAgfSwgW3JlZl0pO1xufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYm9vdHN0cmFwLm1pbi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2NvbG9yaXplJyksXG4gICAgQ29sb3JpemVyID0gX3JlcXVpcmUuQ29sb3JpemVyO1xuLypcbiAqIFNpbXBsZSBtZXRob2QgdG8gcmVnaXN0ZXIgY29sb3JzIHdpdGggYSBzaW1wbGVyIHJlcXVpcmVcbiAqIHBhdGggd2l0aGluIHRoZSBtb2R1bGUuXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgQ29sb3JpemVyLmFkZENvbG9ycyhjb25maWcuY29sb3JzIHx8IGNvbmZpZyk7XG4gIHJldHVybiBjb25maWc7XG59OyIsIi8qXG5cblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5PcmlnaW5hbCBMaWJyYXJ5XG4gIC0gQ29weXJpZ2h0IChjKSBNYXJhayBTcXVpcmVzXG5cbkFkZGl0aW9uYWwgZnVuY3Rpb25hbGl0eVxuIC0gQ29weXJpZ2h0IChjKSBTaW5kcmUgU29yaHVzIDxzaW5kcmVzb3JodXNAZ21haWwuY29tPiAoc2luZHJlc29yaHVzLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuXG4qL1xuXG52YXIgY29sb3JzID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGNvbG9ycztcblxuY29sb3JzLnRoZW1lcyA9IHt9O1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBhbnNpU3R5bGVzID0gY29sb3JzLnN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyk7XG52YXIgZGVmaW5lUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBuZXdMaW5lUmVnZXggPSBuZXcgUmVnRXhwKC9bXFxyXFxuXSsvZyk7XG5cbmNvbG9ycy5zdXBwb3J0c0NvbG9yID0gcmVxdWlyZSgnLi9zeXN0ZW0vc3VwcG9ydHMtY29sb3JzJykuc3VwcG9ydHNDb2xvcjtcblxuaWYgKHR5cGVvZiBjb2xvcnMuZW5hYmxlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29sb3JzLmVuYWJsZWQgPSBjb2xvcnMuc3VwcG9ydHNDb2xvcigpICE9PSBmYWxzZTtcbn1cblxuY29sb3JzLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBjb2xvcnMuZW5hYmxlZCA9IHRydWU7XG59O1xuXG5jb2xvcnMuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBjb2xvcnMuZW5hYmxlZCA9IGZhbHNlO1xufTtcblxuY29sb3JzLnN0cmlwQ29sb3JzID0gY29sb3JzLnN0cmlwID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiAoJycgKyBzdHIpLnJlcGxhY2UoL1xceDFCXFxbXFxkK20vZywgJycpO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG52YXIgc3R5bGl6ZSA9IGNvbG9ycy5zdHlsaXplID0gZnVuY3Rpb24gc3R5bGl6ZShzdHIsIHN0eWxlKSB7XG4gIGlmICghY29sb3JzLmVuYWJsZWQpIHtcbiAgICByZXR1cm4gc3RyKycnO1xuICB9XG5cbiAgdmFyIHN0eWxlTWFwID0gYW5zaVN0eWxlc1tzdHlsZV07XG5cbiAgLy8gU3R5bGl6ZSBzaG91bGQgd29yayBmb3Igbm9uLUFOU0kgc3R5bGVzLCB0b29cbiAgaWYoIXN0eWxlTWFwICYmIHN0eWxlIGluIGNvbG9ycyl7XG4gICAgLy8gU3R5bGUgbWFwcyBsaWtlIHRyYXAgb3BlcmF0ZSBhcyBmdW5jdGlvbnMgb24gc3RyaW5ncztcbiAgICAvLyB0aGV5IGRvbid0IGhhdmUgcHJvcGVydGllcyBsaWtlIG9wZW4gb3IgY2xvc2UuXG4gICAgcmV0dXJuIGNvbG9yc1tzdHlsZV0oc3RyKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZU1hcC5vcGVuICsgc3RyICsgc3R5bGVNYXAuY2xvc2U7XG59O1xuXG52YXIgbWF0Y2hPcGVyYXRvcnNSZSA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZztcbnZhciBlc2NhcGVTdHJpbmdSZWdleHAgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuICByZXR1cm4gc3RyLnJlcGxhY2UobWF0Y2hPcGVyYXRvcnNSZSwgJ1xcXFwkJicpO1xufTtcblxuZnVuY3Rpb24gYnVpbGQoX3N0eWxlcykge1xuICB2YXIgYnVpbGRlciA9IGZ1bmN0aW9uIGJ1aWxkZXIoKSB7XG4gICAgcmV0dXJuIGFwcGx5U3R5bGUuYXBwbHkoYnVpbGRlciwgYXJndW1lbnRzKTtcbiAgfTtcbiAgYnVpbGRlci5fc3R5bGVzID0gX3N0eWxlcztcbiAgLy8gX19wcm90b19fIGlzIHVzZWQgYmVjYXVzZSB3ZSBtdXN0IHJldHVybiBhIGZ1bmN0aW9uLCBidXQgdGhlcmUgaXNcbiAgLy8gbm8gd2F5IHRvIGNyZWF0ZSBhIGZ1bmN0aW9uIHdpdGggYSBkaWZmZXJlbnQgcHJvdG90eXBlLlxuICBidWlsZGVyLl9fcHJvdG9fXyA9IHByb3RvO1xuICByZXR1cm4gYnVpbGRlcjtcbn1cblxudmFyIHN0eWxlcyA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHJldCA9IHt9O1xuICBhbnNpU3R5bGVzLmdyZXkgPSBhbnNpU3R5bGVzLmdyYXk7XG4gIE9iamVjdC5rZXlzKGFuc2lTdHlsZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgYW5zaVN0eWxlc1trZXldLmNsb3NlUmUgPVxuICAgICAgbmV3IFJlZ0V4cChlc2NhcGVTdHJpbmdSZWdleHAoYW5zaVN0eWxlc1trZXldLmNsb3NlKSwgJ2cnKTtcbiAgICByZXRba2V5XSA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBidWlsZCh0aGlzLl9zdHlsZXMuY29uY2F0KGtleSkpO1xuICAgICAgfSxcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0pKCk7XG5cbnZhciBwcm90byA9IGRlZmluZVByb3BzKGZ1bmN0aW9uIGNvbG9ycygpIHt9LCBzdHlsZXMpO1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgdmFyIHN0ciA9IGFyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgIC8vIFVzZSB3ZWFrIGVxdWFsaXR5IGNoZWNrIHNvIHdlIGNhbiBjb2xvcml6ZSBudWxsL3VuZGVmaW5lZCBpbiBzYWZlIG1vZGVcbiAgICBpZiAoYXJnICE9IG51bGwgJiYgYXJnLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1dGlsLmluc3BlY3QoYXJnKTtcbiAgICB9XG4gIH0pLmpvaW4oJyAnKTtcblxuICBpZiAoIWNvbG9ycy5lbmFibGVkIHx8ICFzdHIpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIG5ld0xpbmVzUHJlc2VudCA9IHN0ci5pbmRleE9mKCdcXG4nKSAhPSAtMTtcblxuICB2YXIgbmVzdGVkU3R5bGVzID0gdGhpcy5fc3R5bGVzO1xuXG4gIHZhciBpID0gbmVzdGVkU3R5bGVzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBjb2RlID0gYW5zaVN0eWxlc1tuZXN0ZWRTdHlsZXNbaV1dO1xuICAgIHN0ciA9IGNvZGUub3BlbiArIHN0ci5yZXBsYWNlKGNvZGUuY2xvc2VSZSwgY29kZS5vcGVuKSArIGNvZGUuY2xvc2U7XG4gICAgaWYgKG5ld0xpbmVzUHJlc2VudCkge1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobmV3TGluZVJlZ2V4LCBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgICByZXR1cm4gY29kZS5jbG9zZSArIG1hdGNoICsgY29kZS5vcGVuO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuY29sb3JzLnNldFRoZW1lID0gZnVuY3Rpb24odGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zb2xlLmxvZygnY29sb3JzLnNldFRoZW1lIG5vdyBvbmx5IGFjY2VwdHMgYW4gb2JqZWN0LCBub3QgYSBzdHJpbmcuICAnICtcbiAgICAgICdJZiB5b3UgYXJlIHRyeWluZyB0byBzZXQgYSB0aGVtZSBmcm9tIGEgZmlsZSwgaXQgaXMgbm93IHlvdXIgKHRoZSAnICtcbiAgICAgICdjYWxsZXJcXCdzKSByZXNwb25zaWJpbGl0eSB0byByZXF1aXJlIHRoZSBmaWxlLiAgVGhlIG9sZCBzeW50YXggJyArXG4gICAgICAnbG9va2VkIGxpa2UgY29sb3JzLnNldFRoZW1lKF9fZGlybmFtZSArICcgK1xuICAgICAgJ1xcJy8uLi90aGVtZXMvZ2VuZXJpYy1sb2dnaW5nLmpzXFwnKTsgVGhlIG5ldyBzeW50YXggbG9va3MgbGlrZSAnK1xuICAgICAgJ2NvbG9ycy5zZXRUaGVtZShyZXF1aXJlKF9fZGlybmFtZSArICcgK1xuICAgICAgJ1xcJy8uLi90aGVtZXMvZ2VuZXJpYy1sb2dnaW5nLmpzXFwnKSk7Jyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIHN0eWxlIGluIHRoZW1lKSB7XG4gICAgKGZ1bmN0aW9uKHN0eWxlKSB7XG4gICAgICBjb2xvcnNbc3R5bGVdID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhlbWVbc3R5bGVdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHZhciBvdXQgPSBzdHI7XG4gICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGVtZVtzdHlsZV0pIHtcbiAgICAgICAgICAgIG91dCA9IGNvbG9yc1t0aGVtZVtzdHlsZV1baV1dKG91dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yc1t0aGVtZVtzdHlsZV1dKHN0cik7XG4gICAgICB9O1xuICAgIH0pKHN0eWxlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgdmFyIHJldCA9IHt9O1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIHJldFtuYW1lXSA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBidWlsZChbbmFtZV0pO1xuICAgICAgfSxcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxudmFyIHNlcXVlbmNlciA9IGZ1bmN0aW9uIHNlcXVlbmNlcihtYXAsIHN0cikge1xuICB2YXIgZXhwbG9kZWQgPSBzdHIuc3BsaXQoJycpO1xuICBleHBsb2RlZCA9IGV4cGxvZGVkLm1hcChtYXApO1xuICByZXR1cm4gZXhwbG9kZWQuam9pbignJyk7XG59O1xuXG4vLyBjdXN0b20gZm9ybWF0dGVyIG1ldGhvZHNcbmNvbG9ycy50cmFwID0gcmVxdWlyZSgnLi9jdXN0b20vdHJhcCcpO1xuY29sb3JzLnphbGdvID0gcmVxdWlyZSgnLi9jdXN0b20vemFsZ28nKTtcblxuLy8gbWFwc1xuY29sb3JzLm1hcHMgPSB7fTtcbmNvbG9ycy5tYXBzLmFtZXJpY2EgPSByZXF1aXJlKCcuL21hcHMvYW1lcmljYScpKGNvbG9ycyk7XG5jb2xvcnMubWFwcy56ZWJyYSA9IHJlcXVpcmUoJy4vbWFwcy96ZWJyYScpKGNvbG9ycyk7XG5jb2xvcnMubWFwcy5yYWluYm93ID0gcmVxdWlyZSgnLi9tYXBzL3JhaW5ib3cnKShjb2xvcnMpO1xuY29sb3JzLm1hcHMucmFuZG9tID0gcmVxdWlyZSgnLi9tYXBzL3JhbmRvbScpKGNvbG9ycyk7XG5cbmZvciAodmFyIG1hcCBpbiBjb2xvcnMubWFwcykge1xuICAoZnVuY3Rpb24obWFwKSB7XG4gICAgY29sb3JzW21hcF0gPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBzZXF1ZW5jZXIoY29sb3JzLm1hcHNbbWFwXSwgc3RyKTtcbiAgICB9O1xuICB9KShtYXApO1xufVxuXG5kZWZpbmVQcm9wcyhjb2xvcnMsIGluaXQoKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKHNpbmRyZXNvcmh1cy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuKi9cblxudmFyIHN0eWxlcyA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBzdHlsZXM7XG5cbnZhciBjb2RlcyA9IHtcbiAgcmVzZXQ6IFswLCAwXSxcblxuICBib2xkOiBbMSwgMjJdLFxuICBkaW06IFsyLCAyMl0sXG4gIGl0YWxpYzogWzMsIDIzXSxcbiAgdW5kZXJsaW5lOiBbNCwgMjRdLFxuICBpbnZlcnNlOiBbNywgMjddLFxuICBoaWRkZW46IFs4LCAyOF0sXG4gIHN0cmlrZXRocm91Z2g6IFs5LCAyOV0sXG5cbiAgYmxhY2s6IFszMCwgMzldLFxuICByZWQ6IFszMSwgMzldLFxuICBncmVlbjogWzMyLCAzOV0sXG4gIHllbGxvdzogWzMzLCAzOV0sXG4gIGJsdWU6IFszNCwgMzldLFxuICBtYWdlbnRhOiBbMzUsIDM5XSxcbiAgY3lhbjogWzM2LCAzOV0sXG4gIHdoaXRlOiBbMzcsIDM5XSxcbiAgZ3JheTogWzkwLCAzOV0sXG4gIGdyZXk6IFs5MCwgMzldLFxuXG4gIGJyaWdodFJlZDogWzkxLCAzOV0sXG4gIGJyaWdodEdyZWVuOiBbOTIsIDM5XSxcbiAgYnJpZ2h0WWVsbG93OiBbOTMsIDM5XSxcbiAgYnJpZ2h0Qmx1ZTogWzk0LCAzOV0sXG4gIGJyaWdodE1hZ2VudGE6IFs5NSwgMzldLFxuICBicmlnaHRDeWFuOiBbOTYsIDM5XSxcbiAgYnJpZ2h0V2hpdGU6IFs5NywgMzldLFxuXG4gIGJnQmxhY2s6IFs0MCwgNDldLFxuICBiZ1JlZDogWzQxLCA0OV0sXG4gIGJnR3JlZW46IFs0MiwgNDldLFxuICBiZ1llbGxvdzogWzQzLCA0OV0sXG4gIGJnQmx1ZTogWzQ0LCA0OV0sXG4gIGJnTWFnZW50YTogWzQ1LCA0OV0sXG4gIGJnQ3lhbjogWzQ2LCA0OV0sXG4gIGJnV2hpdGU6IFs0NywgNDldLFxuICBiZ0dyYXk6IFsxMDAsIDQ5XSxcbiAgYmdHcmV5OiBbMTAwLCA0OV0sXG5cbiAgYmdCcmlnaHRSZWQ6IFsxMDEsIDQ5XSxcbiAgYmdCcmlnaHRHcmVlbjogWzEwMiwgNDldLFxuICBiZ0JyaWdodFllbGxvdzogWzEwMywgNDldLFxuICBiZ0JyaWdodEJsdWU6IFsxMDQsIDQ5XSxcbiAgYmdCcmlnaHRNYWdlbnRhOiBbMTA1LCA0OV0sXG4gIGJnQnJpZ2h0Q3lhbjogWzEwNiwgNDldLFxuICBiZ0JyaWdodFdoaXRlOiBbMTA3LCA0OV0sXG5cbiAgLy8gbGVnYWN5IHN0eWxlcyBmb3IgY29sb3JzIHByZSB2MS4wLjBcbiAgYmxhY2tCRzogWzQwLCA0OV0sXG4gIHJlZEJHOiBbNDEsIDQ5XSxcbiAgZ3JlZW5CRzogWzQyLCA0OV0sXG4gIHllbGxvd0JHOiBbNDMsIDQ5XSxcbiAgYmx1ZUJHOiBbNDQsIDQ5XSxcbiAgbWFnZW50YUJHOiBbNDUsIDQ5XSxcbiAgY3lhbkJHOiBbNDYsIDQ5XSxcbiAgd2hpdGVCRzogWzQ3LCA0OV0sXG5cbn07XG5cbk9iamVjdC5rZXlzKGNvZGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICB2YXIgdmFsID0gY29kZXNba2V5XTtcbiAgdmFyIHN0eWxlID0gc3R5bGVzW2tleV0gPSBbXTtcbiAgc3R5bGUub3BlbiA9ICdcXHUwMDFiWycgKyB2YWxbMF0gKyAnbSc7XG4gIHN0eWxlLmNsb3NlID0gJ1xcdTAwMWJbJyArIHZhbFsxXSArICdtJztcbn0pO1xuIiwiLypcblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChzaW5kcmVzb3JodXMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG5cbiovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG9zID0gcmVxdWlyZSgnb3MnKTtcbnZhciBoYXNGbGFnID0gcmVxdWlyZSgnLi9oYXMtZmxhZy5qcycpO1xuXG52YXIgZW52ID0gcHJvY2Vzcy5lbnY7XG5cbnZhciBmb3JjZUNvbG9yID0gdm9pZCAwO1xuaWYgKGhhc0ZsYWcoJ25vLWNvbG9yJykgfHwgaGFzRmxhZygnbm8tY29sb3JzJykgfHwgaGFzRmxhZygnY29sb3I9ZmFsc2UnKSkge1xuICBmb3JjZUNvbG9yID0gZmFsc2U7XG59IGVsc2UgaWYgKGhhc0ZsYWcoJ2NvbG9yJykgfHwgaGFzRmxhZygnY29sb3JzJykgfHwgaGFzRmxhZygnY29sb3I9dHJ1ZScpXG4gICAgICAgICAgIHx8IGhhc0ZsYWcoJ2NvbG9yPWFsd2F5cycpKSB7XG4gIGZvcmNlQ29sb3IgPSB0cnVlO1xufVxuaWYgKCdGT1JDRV9DT0xPUicgaW4gZW52KSB7XG4gIGZvcmNlQ29sb3IgPSBlbnYuRk9SQ0VfQ09MT1IubGVuZ3RoID09PSAwXG4gICAgfHwgcGFyc2VJbnQoZW52LkZPUkNFX0NPTE9SLCAxMCkgIT09IDA7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUxldmVsKGxldmVsKSB7XG4gIGlmIChsZXZlbCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGV2ZWw6IGxldmVsLFxuICAgIGhhc0Jhc2ljOiB0cnVlLFxuICAgIGhhczI1NjogbGV2ZWwgPj0gMixcbiAgICBoYXMxNm06IGxldmVsID49IDMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzQ29sb3Ioc3RyZWFtKSB7XG4gIGlmIChmb3JjZUNvbG9yID09PSBmYWxzZSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGhhc0ZsYWcoJ2NvbG9yPTE2bScpIHx8IGhhc0ZsYWcoJ2NvbG9yPWZ1bGwnKVxuICAgICAgfHwgaGFzRmxhZygnY29sb3I9dHJ1ZWNvbG9yJykpIHtcbiAgICByZXR1cm4gMztcbiAgfVxuXG4gIGlmIChoYXNGbGFnKCdjb2xvcj0yNTYnKSkge1xuICAgIHJldHVybiAyO1xuICB9XG5cbiAgaWYgKHN0cmVhbSAmJiAhc3RyZWFtLmlzVFRZICYmIGZvcmNlQ29sb3IgIT09IHRydWUpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBtaW4gPSBmb3JjZUNvbG9yID8gMSA6IDA7XG5cbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAvLyBOb2RlLmpzIDcuNS4wIGlzIHRoZSBmaXJzdCB2ZXJzaW9uIG9mIE5vZGUuanMgdG8gaW5jbHVkZSBhIHBhdGNoIHRvXG4gICAgLy8gbGlidXYgdGhhdCBlbmFibGVzIDI1NiBjb2xvciBvdXRwdXQgb24gV2luZG93cy4gQW55dGhpbmcgZWFybGllciBhbmQgaXRcbiAgICAvLyB3b24ndCB3b3JrLiBIb3dldmVyLCBoZXJlIHdlIHRhcmdldCBOb2RlLmpzIDggYXQgbWluaW11bSBhcyBpdCBpcyBhbiBMVFNcbiAgICAvLyByZWxlYXNlLCBhbmQgTm9kZS5qcyA3IGlzIG5vdC4gV2luZG93cyAxMCBidWlsZCAxMDU4NiBpcyB0aGUgZmlyc3RcbiAgICAvLyBXaW5kb3dzIHJlbGVhc2UgdGhhdCBzdXBwb3J0cyAyNTYgY29sb3JzLiBXaW5kb3dzIDEwIGJ1aWxkIDE0OTMxIGlzIHRoZVxuICAgIC8vIGZpcnN0IHJlbGVhc2UgdGhhdCBzdXBwb3J0cyAxNm0vVHJ1ZUNvbG9yLlxuICAgIHZhciBvc1JlbGVhc2UgPSBvcy5yZWxlYXNlKCkuc3BsaXQoJy4nKTtcbiAgICBpZiAoTnVtYmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpWzBdKSA+PSA4XG4gICAgICAgICYmIE51bWJlcihvc1JlbGVhc2VbMF0pID49IDEwICYmIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDEwNTg2KSB7XG4gICAgICByZXR1cm4gTnVtYmVyKG9zUmVsZWFzZVsyXSkgPj0gMTQ5MzEgPyAzIDogMjtcbiAgICB9XG5cbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICgnQ0knIGluIGVudikge1xuICAgIGlmIChbJ1RSQVZJUycsICdDSVJDTEVDSScsICdBUFBWRVlPUicsICdHSVRMQUJfQ0knXS5zb21lKGZ1bmN0aW9uKHNpZ24pIHtcbiAgICAgIHJldHVybiBzaWduIGluIGVudjtcbiAgICB9KSB8fCBlbnYuQ0lfTkFNRSA9PT0gJ2NvZGVzaGlwJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuXG4gIGlmICgnVEVBTUNJVFlfVkVSU0lPTicgaW4gZW52KSB7XG4gICAgcmV0dXJuICgvXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8udGVzdChlbnYuVEVBTUNJVFlfVkVSU0lPTikgPyAxIDogMFxuICAgICk7XG4gIH1cblxuICBpZiAoJ1RFUk1fUFJPR1JBTScgaW4gZW52KSB7XG4gICAgdmFyIHZlcnNpb24gPSBwYXJzZUludCgoZW52LlRFUk1fUFJPR1JBTV9WRVJTSU9OIHx8ICcnKS5zcGxpdCgnLicpWzBdLCAxMCk7XG5cbiAgICBzd2l0Y2ggKGVudi5URVJNX1BST0dSQU0pIHtcbiAgICAgIGNhc2UgJ2lUZXJtLmFwcCc6XG4gICAgICAgIHJldHVybiB2ZXJzaW9uID49IDMgPyAzIDogMjtcbiAgICAgIGNhc2UgJ0h5cGVyJzpcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgICBjYXNlICdBcHBsZV9UZXJtaW5hbCc6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgLy8gTm8gZGVmYXVsdFxuICAgIH1cbiAgfVxuXG4gIGlmICgvLTI1Nihjb2xvcik/JC9pLnRlc3QoZW52LlRFUk0pKSB7XG4gICAgcmV0dXJuIDI7XG4gIH1cblxuICBpZiAoL15zY3JlZW58Xnh0ZXJtfF52dDEwMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoZW52LlRFUk0pKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoJ0NPTE9SVEVSTScgaW4gZW52KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoZW52LlRFUk0gPT09ICdkdW1iJykge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICByZXR1cm4gbWluO1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0TGV2ZWwoc3RyZWFtKSB7XG4gIHZhciBsZXZlbCA9IHN1cHBvcnRzQ29sb3Ioc3RyZWFtKTtcbiAgcmV0dXJuIHRyYW5zbGF0ZUxldmVsKGxldmVsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN1cHBvcnRzQ29sb3I6IGdldFN1cHBvcnRMZXZlbCxcbiAgc3Rkb3V0OiBnZXRTdXBwb3J0TGV2ZWwocHJvY2Vzcy5zdGRvdXQpLFxuICBzdGRlcnI6IGdldFN1cHBvcnRMZXZlbChwcm9jZXNzLnN0ZGVyciksXG59O1xuIiwiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKHNpbmRyZXNvcmh1cy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcbnRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbnRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cbnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzXG5vZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG9cbnNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbGFnLCBhcmd2KSB7XG4gIGFyZ3YgPSBhcmd2IHx8IHByb2Nlc3MuYXJndjtcblxuICB2YXIgdGVybWluYXRvclBvcyA9IGFyZ3YuaW5kZXhPZignLS0nKTtcbiAgdmFyIHByZWZpeCA9IC9eLXsxLDJ9Ly50ZXN0KGZsYWcpID8gJycgOiAnLS0nO1xuICB2YXIgcG9zID0gYXJndi5pbmRleE9mKHByZWZpeCArIGZsYWcpO1xuXG4gIHJldHVybiBwb3MgIT09IC0xICYmICh0ZXJtaW5hdG9yUG9zID09PSAtMSA/IHRydWUgOiBwb3MgPCB0ZXJtaW5hdG9yUG9zKTtcbn07XG4iLCJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uIHJ1blRoZVRyYXAodGV4dCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHRleHQgPSB0ZXh0IHx8ICdSdW4gdGhlIHRyYXAsIGRyb3AgdGhlIGJhc3MnO1xuICB0ZXh0ID0gdGV4dC5zcGxpdCgnJyk7XG4gIHZhciB0cmFwID0ge1xuICAgIGE6IFsnXFx1MDA0MCcsICdcXHUwMTA0JywgJ1xcdTAyM2EnLCAnXFx1MDI0NScsICdcXHUwMzk0JywgJ1xcdTAzOWInLCAnXFx1MDQxNCddLFxuICAgIGI6IFsnXFx1MDBkZicsICdcXHUwMTgxJywgJ1xcdTAyNDMnLCAnXFx1MDI2ZScsICdcXHUwM2IyJywgJ1xcdTBlM2YnXSxcbiAgICBjOiBbJ1xcdTAwYTknLCAnXFx1MDIzYicsICdcXHUwM2ZlJ10sXG4gICAgZDogWydcXHUwMGQwJywgJ1xcdTAxOGEnLCAnXFx1MDUwMCcsICdcXHUwNTAxJywgJ1xcdTA1MDInLCAnXFx1MDUwMyddLFxuICAgIGU6IFsnXFx1MDBjYicsICdcXHUwMTE1JywgJ1xcdTAxOGUnLCAnXFx1MDI1OCcsICdcXHUwM2EzJywgJ1xcdTAzYmUnLCAnXFx1MDRiYycsXG4gICAgICAnXFx1MGE2YyddLFxuICAgIGY6IFsnXFx1MDRmYSddLFxuICAgIGc6IFsnXFx1MDI2MiddLFxuICAgIGg6IFsnXFx1MDEyNicsICdcXHUwMTk1JywgJ1xcdTA0YTInLCAnXFx1MDRiYScsICdcXHUwNGM3JywgJ1xcdTA1MGEnXSxcbiAgICBpOiBbJ1xcdTBmMGYnXSxcbiAgICBqOiBbJ1xcdTAxMzQnXSxcbiAgICBrOiBbJ1xcdTAxMzgnLCAnXFx1MDRhMCcsICdcXHUwNGMzJywgJ1xcdTA1MWUnXSxcbiAgICBsOiBbJ1xcdTAxMzknXSxcbiAgICBtOiBbJ1xcdTAyOGQnLCAnXFx1MDRjZCcsICdcXHUwNGNlJywgJ1xcdTA1MjAnLCAnXFx1MDUyMScsICdcXHUwZDY5J10sXG4gICAgbjogWydcXHUwMGQxJywgJ1xcdTAxNGInLCAnXFx1MDE5ZCcsICdcXHUwMzc2JywgJ1xcdTAzYTAnLCAnXFx1MDQ4YSddLFxuICAgIG86IFsnXFx1MDBkOCcsICdcXHUwMGY1JywgJ1xcdTAwZjgnLCAnXFx1MDFmZScsICdcXHUwMjk4JywgJ1xcdTA0N2EnLCAnXFx1MDVkZCcsXG4gICAgICAnXFx1MDZkZCcsICdcXHUwZTRmJ10sXG4gICAgcDogWydcXHUwMWY3JywgJ1xcdTA0OGUnXSxcbiAgICBxOiBbJ1xcdTA5Y2QnXSxcbiAgICByOiBbJ1xcdTAwYWUnLCAnXFx1MDFhNicsICdcXHUwMjEwJywgJ1xcdTAyNGMnLCAnXFx1MDI4MCcsICdcXHUwNDJmJ10sXG4gICAgczogWydcXHUwMGE3JywgJ1xcdTAzZGUnLCAnXFx1MDNkZicsICdcXHUwM2U4J10sXG4gICAgdDogWydcXHUwMTQxJywgJ1xcdTAxNjYnLCAnXFx1MDM3MyddLFxuICAgIHU6IFsnXFx1MDFiMScsICdcXHUwNTRkJ10sXG4gICAgdjogWydcXHUwNWQ4J10sXG4gICAgdzogWydcXHUwNDI4JywgJ1xcdTA0NjAnLCAnXFx1MDQ3YycsICdcXHUwZDcwJ10sXG4gICAgeDogWydcXHUwNGIyJywgJ1xcdTA0ZmUnLCAnXFx1MDRmYycsICdcXHUwNGZkJ10sXG4gICAgeTogWydcXHUwMGE1JywgJ1xcdTA0YjAnLCAnXFx1MDRjYiddLFxuICAgIHo6IFsnXFx1MDFiNScsICdcXHUwMjQwJ10sXG4gIH07XG4gIHRleHQuZm9yRWFjaChmdW5jdGlvbihjKSB7XG4gICAgYyA9IGMudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgY2hhcnMgPSB0cmFwW2NdIHx8IFsnICddO1xuICAgIHZhciByYW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKTtcbiAgICBpZiAodHlwZW9mIHRyYXBbY10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXN1bHQgKz0gdHJhcFtjXVtyYW5kXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGM7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBwbGVhc2Ugbm9cbm1vZHVsZVsnZXhwb3J0cyddID0gZnVuY3Rpb24gemFsZ28odGV4dCwgb3B0aW9ucykge1xuICB0ZXh0ID0gdGV4dCB8fCAnICAgaGUgaXMgaGVyZSAgICc7XG4gIHZhciBzb3VsID0ge1xuICAgICd1cCc6IFtcbiAgICAgICfMjScsICfMjicsICfMhCcsICfMhScsXG4gICAgICAnzL8nLCAnzJEnLCAnzIYnLCAnzJAnLFxuICAgICAgJ82SJywgJ82XJywgJ82RJywgJ8yHJyxcbiAgICAgICfMiCcsICfMiicsICfNgicsICfMkycsXG4gICAgICAnzIgnLCAnzYonLCAnzYsnLCAnzYwnLFxuICAgICAgJ8yDJywgJ8yCJywgJ8yMJywgJ82QJyxcbiAgICAgICfMgCcsICfMgScsICfMiycsICfMjycsXG4gICAgICAnzJInLCAnzJMnLCAnzJQnLCAnzL0nLFxuICAgICAgJ8yJJywgJ82jJywgJ82kJywgJ82lJyxcbiAgICAgICfNpicsICfNpycsICfNqCcsICfNqScsXG4gICAgICAnzaonLCAnzasnLCAnzawnLCAnza0nLFxuICAgICAgJ82uJywgJ82vJywgJ8y+JywgJ82bJyxcbiAgICAgICfNhicsICfMmicsXG4gICAgXSxcbiAgICAnZG93bic6IFtcbiAgICAgICfMlicsICfMlycsICfMmCcsICfMmScsXG4gICAgICAnzJwnLCAnzJ0nLCAnzJ4nLCAnzJ8nLFxuICAgICAgJ8ygJywgJ8ykJywgJ8ylJywgJ8ymJyxcbiAgICAgICfMqScsICfMqicsICfMqycsICfMrCcsXG4gICAgICAnzK0nLCAnzK4nLCAnzK8nLCAnzLAnLFxuICAgICAgJ8yxJywgJ8yyJywgJ8yzJywgJ8y5JyxcbiAgICAgICfMuicsICfMuycsICfMvCcsICfNhScsXG4gICAgICAnzYcnLCAnzYgnLCAnzYknLCAnzY0nLFxuICAgICAgJ82OJywgJ82TJywgJ82UJywgJ82VJyxcbiAgICAgICfNlicsICfNmScsICfNmicsICfMoycsXG4gICAgXSxcbiAgICAnbWlkJzogW1xuICAgICAgJ8yVJywgJ8ybJywgJ8yAJywgJ8yBJyxcbiAgICAgICfNmCcsICfMoScsICfMoicsICfMpycsXG4gICAgICAnzKgnLCAnzLQnLCAnzLUnLCAnzLYnLFxuICAgICAgJ82cJywgJ82dJywgJ82eJyxcbiAgICAgICfNnycsICfNoCcsICfNoicsICfMuCcsXG4gICAgICAnzLcnLCAnzaEnLCAnINKJJyxcbiAgICBdLFxuICB9O1xuICB2YXIgYWxsID0gW10uY29uY2F0KHNvdWwudXAsIHNvdWwuZG93biwgc291bC5taWQpO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbU51bWJlcihyYW5nZSkge1xuICAgIHZhciByID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZ2UpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDaGFyKGNoYXJhY3Rlcikge1xuICAgIHZhciBib29sID0gZmFsc2U7XG4gICAgYWxsLmZpbHRlcihmdW5jdGlvbihpKSB7XG4gICAgICBib29sID0gKGkgPT09IGNoYXJhY3Rlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJvb2w7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGhlQ29tZXModGV4dCwgb3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgY291bnRzO1xuICAgIHZhciBsO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnNbJ3VwJ10gPVxuICAgICAgdHlwZW9mIG9wdGlvbnNbJ3VwJ10gIT09ICd1bmRlZmluZWQnID8gb3B0aW9uc1sndXAnXSA6IHRydWU7XG4gICAgb3B0aW9uc1snbWlkJ10gPVxuICAgICAgdHlwZW9mIG9wdGlvbnNbJ21pZCddICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnNbJ21pZCddIDogdHJ1ZTtcbiAgICBvcHRpb25zWydkb3duJ10gPVxuICAgICAgdHlwZW9mIG9wdGlvbnNbJ2Rvd24nXSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zWydkb3duJ10gOiB0cnVlO1xuICAgIG9wdGlvbnNbJ3NpemUnXSA9XG4gICAgICB0eXBlb2Ygb3B0aW9uc1snc2l6ZSddICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnNbJ3NpemUnXSA6ICdtYXhpJztcbiAgICB0ZXh0ID0gdGV4dC5zcGxpdCgnJyk7XG4gICAgZm9yIChsIGluIHRleHQpIHtcbiAgICAgIGlmIChpc0NoYXIobCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSByZXN1bHQgKyB0ZXh0W2xdO1xuICAgICAgY291bnRzID0geyd1cCc6IDAsICdkb3duJzogMCwgJ21pZCc6IDB9O1xuICAgICAgc3dpdGNoIChvcHRpb25zLnNpemUpIHtcbiAgICAgICAgY2FzZSAnbWluaSc6XG4gICAgICAgICAgY291bnRzLnVwID0gcmFuZG9tTnVtYmVyKDgpO1xuICAgICAgICAgIGNvdW50cy5taWQgPSByYW5kb21OdW1iZXIoMik7XG4gICAgICAgICAgY291bnRzLmRvd24gPSByYW5kb21OdW1iZXIoOCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21heGknOlxuICAgICAgICAgIGNvdW50cy51cCA9IHJhbmRvbU51bWJlcigxNikgKyAzO1xuICAgICAgICAgIGNvdW50cy5taWQgPSByYW5kb21OdW1iZXIoNCkgKyAxO1xuICAgICAgICAgIGNvdW50cy5kb3duID0gcmFuZG9tTnVtYmVyKDY0KSArIDM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY291bnRzLnVwID0gcmFuZG9tTnVtYmVyKDgpICsgMTtcbiAgICAgICAgICBjb3VudHMubWlkID0gcmFuZG9tTnVtYmVyKDYpIC8gMjtcbiAgICAgICAgICBjb3VudHMuZG93biA9IHJhbmRvbU51bWJlcig4KSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcnIgPSBbJ3VwJywgJ21pZCcsICdkb3duJ107XG4gICAgICBmb3IgKHZhciBkIGluIGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnJbZF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGNvdW50c1tpbmRleF07IGkrKykge1xuICAgICAgICAgIGlmIChvcHRpb25zW2luZGV4XSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgc291bFtpbmRleF1bcmFuZG9tTnVtYmVyKHNvdWxbaW5kZXhdLmxlbmd0aCldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8vIGRvbid0IHN1bW1vbiBoaW1cbiAgcmV0dXJuIGhlQ29tZXModGV4dCwgb3B0aW9ucyk7XG59O1xuXG4iLCJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuICByZXR1cm4gZnVuY3Rpb24obGV0dGVyLCBpLCBleHBsb2RlZCkge1xuICAgIGlmIChsZXR0ZXIgPT09ICcgJykgcmV0dXJuIGxldHRlcjtcbiAgICBzd2l0Y2ggKGklMykge1xuICAgICAgY2FzZSAwOiByZXR1cm4gY29sb3JzLnJlZChsZXR0ZXIpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gY29sb3JzLndoaXRlKGxldHRlcik7XG4gICAgICBjYXNlIDI6IHJldHVybiBjb2xvcnMuYmx1ZShsZXR0ZXIpO1xuICAgIH1cbiAgfTtcbn07XG4iLCJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuICByZXR1cm4gZnVuY3Rpb24obGV0dGVyLCBpLCBleHBsb2RlZCkge1xuICAgIHJldHVybiBpICUgMiA9PT0gMCA/IGxldHRlciA6IGNvbG9ycy5pbnZlcnNlKGxldHRlcik7XG4gIH07XG59O1xuIiwibW9kdWxlWydleHBvcnRzJ10gPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgLy8gUm9ZIEcgQmlWXG4gIHZhciByYWluYm93Q29sb3JzID0gWydyZWQnLCAneWVsbG93JywgJ2dyZWVuJywgJ2JsdWUnLCAnbWFnZW50YSddO1xuICByZXR1cm4gZnVuY3Rpb24obGV0dGVyLCBpLCBleHBsb2RlZCkge1xuICAgIGlmIChsZXR0ZXIgPT09ICcgJykge1xuICAgICAgcmV0dXJuIGxldHRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbG9yc1tyYWluYm93Q29sb3JzW2krKyAlIHJhaW5ib3dDb2xvcnMubGVuZ3RoXV0obGV0dGVyKTtcbiAgICB9XG4gIH07XG59O1xuXG4iLCJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuICB2YXIgYXZhaWxhYmxlID0gWyd1bmRlcmxpbmUnLCAnaW52ZXJzZScsICdncmV5JywgJ3llbGxvdycsICdyZWQnLCAnZ3JlZW4nLFxuICAgICdibHVlJywgJ3doaXRlJywgJ2N5YW4nLCAnbWFnZW50YScsICdicmlnaHRZZWxsb3cnLCAnYnJpZ2h0UmVkJyxcbiAgICAnYnJpZ2h0R3JlZW4nLCAnYnJpZ2h0Qmx1ZScsICdicmlnaHRXaGl0ZScsICdicmlnaHRDeWFuJywgJ2JyaWdodE1hZ2VudGEnXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxldHRlciwgaSwgZXhwbG9kZWQpIHtcbiAgICByZXR1cm4gbGV0dGVyID09PSAnICcgPyBsZXR0ZXIgOlxuICAgICAgY29sb3JzW1xuICAgICAgICAgIGF2YWlsYWJsZVtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoYXZhaWxhYmxlLmxlbmd0aCAtIDIpKV1cbiAgICAgIF0obGV0dGVyKTtcbiAgfTtcbn07XG4iLCIvKipcbiAqIGluZGV4LmpzOiBEZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgbGV2ZWxzIHRoYXQgd2luc3RvbiBrbm93cyBhYm91dC5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciB0aGUgQ0xJLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjbGknLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL2NsaScpXG59KTtcblxuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgbnBtLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICducG0nLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL25wbScpXG59KTtcblxuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgdGhlIHN5c2xvZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc3lzbG9nJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9zeXNsb2cnKVxufSk7XG4iLCIvKipcbiAqIGNsaS5qczogQ29uZmlnIHRoYXQgY29uZm9ybSB0byBjb21tb25seSB1c2VkIENMSSBsb2dnaW5nIGxldmVscy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlZmF1bHQgbGV2ZWxzIGZvciB0aGUgQ0xJIGNvbmZpZ3VyYXRpb24uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmxldmVscyA9IHtcbiAgZXJyb3I6IDAsXG4gIHdhcm46IDEsXG4gIGhlbHA6IDIsXG4gIGRhdGE6IDMsXG4gIGluZm86IDQsXG4gIGRlYnVnOiA1LFxuICBwcm9tcHQ6IDYsXG4gIHZlcmJvc2U6IDcsXG4gIGlucHV0OiA4LFxuICBzaWxseTogOVxufTtcblxuLyoqXG4gKiBEZWZhdWx0IGNvbG9ycyBmb3IgdGhlIENMSSBjb25maWd1cmF0aW9uLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5jb2xvcnMgPSB7XG4gIGVycm9yOiAncmVkJyxcbiAgd2FybjogJ3llbGxvdycsXG4gIGhlbHA6ICdjeWFuJyxcbiAgZGF0YTogJ2dyZXknLFxuICBpbmZvOiAnZ3JlZW4nLFxuICBkZWJ1ZzogJ2JsdWUnLFxuICBwcm9tcHQ6ICdncmV5JyxcbiAgdmVyYm9zZTogJ2N5YW4nLFxuICBpbnB1dDogJ2dyZXknLFxuICBzaWxseTogJ21hZ2VudGEnXG59O1xuIiwiLyoqXG4gKiBucG0uanM6IENvbmZpZyB0aGF0IGNvbmZvcm0gdG8gbnBtIGxvZ2dpbmcgbGV2ZWxzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVmYXVsdCBsZXZlbHMgZm9yIHRoZSBucG0gY29uZmlndXJhdGlvbi5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMubGV2ZWxzID0ge1xuICBlcnJvcjogMCxcbiAgd2FybjogMSxcbiAgaW5mbzogMixcbiAgaHR0cDogMyxcbiAgdmVyYm9zZTogNCxcbiAgZGVidWc6IDUsXG4gIHNpbGx5OiA2XG59O1xuXG4vKipcbiAqIERlZmF1bHQgbGV2ZWxzIGZvciB0aGUgbnBtIGNvbmZpZ3VyYXRpb24uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmNvbG9ycyA9IHtcbiAgZXJyb3I6ICdyZWQnLFxuICB3YXJuOiAneWVsbG93JyxcbiAgaW5mbzogJ2dyZWVuJyxcbiAgaHR0cDogJ2dyZWVuJyxcbiAgdmVyYm9zZTogJ2N5YW4nLFxuICBkZWJ1ZzogJ2JsdWUnLFxuICBzaWxseTogJ21hZ2VudGEnXG59O1xuIiwiLyoqXG4gKiBzeXNsb2cuanM6IENvbmZpZyB0aGF0IGNvbmZvcm0gdG8gc3lzbG9nIGxvZ2dpbmcgbGV2ZWxzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVmYXVsdCBsZXZlbHMgZm9yIHRoZSBzeXNsb2cgY29uZmlndXJhdGlvbi5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMubGV2ZWxzID0ge1xuICBlbWVyZzogMCxcbiAgYWxlcnQ6IDEsXG4gIGNyaXQ6IDIsXG4gIGVycm9yOiAzLFxuICB3YXJuaW5nOiA0LFxuICBub3RpY2U6IDUsXG4gIGluZm86IDYsXG4gIGRlYnVnOiA3XG59O1xuXG4vKipcbiAqIERlZmF1bHQgbGV2ZWxzIGZvciB0aGUgc3lzbG9nIGNvbmZpZ3VyYXRpb24uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmNvbG9ycyA9IHtcbiAgZW1lcmc6ICdyZWQnLFxuICBhbGVydDogJ3llbGxvdycsXG4gIGNyaXQ6ICdyZWQnLFxuICBlcnJvcjogJ3JlZCcsXG4gIHdhcm5pbmc6ICdyZWQnLFxuICBub3RpY2U6ICd5ZWxsb3cnLFxuICBpbmZvOiAnZ3JlZW4nLFxuICBkZWJ1ZzogJ2JsdWUnXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbi8qXG4gKiBmdW5jdGlvbiBhbGlnbiAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGFsaWduIEZvcm1hdCB3aGljaCBhZGRzIGEgYFxcdGBcbiAqIGRlbGltaXRlciBiZWZvcmUgdGhlIG1lc3NhZ2UgdG8gcHJvcGVybHkgYWxpZ24gaXQgaW4gdGhlIHNhbWUgcGxhY2UuXG4gKiBJdCB3YXMgcHJldmlvdXNseSB7IGFsaWduOiB0cnVlIH0gaW4gd2luc3RvbiA8IDMuMC4wXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdChmdW5jdGlvbiAoaW5mbykge1xuICBpbmZvLm1lc3NhZ2UgPSBcIlxcdFwiLmNvbmNhdChpbmZvLm1lc3NhZ2UpO1xuICByZXR1cm4gaW5mbztcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2NvbG9yaXplJyksXG4gICAgQ29sb3JpemVyID0gX3JlcXVpcmUuQ29sb3JpemVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9wYWQtbGV2ZWxzJyksXG4gICAgUGFkZGVyID0gX3JlcXVpcmUyLlBhZGRlcjtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gICAgY29uZmlncyA9IF9yZXF1aXJlMy5jb25maWdzLFxuICAgIE1FU1NBR0UgPSBfcmVxdWlyZTMuTUVTU0FHRTtcbi8qKlxuICogQ2xpIGZvcm1hdCBjbGFzcyB0aGF0IGhhbmRsZXMgaW5pdGlhbCBzdGF0ZSBmb3IgYSBhIHNlcGFyYXRlXG4gKiBDb2xvcml6ZXIgYW5kIFBhZGRlciBpbnN0YW5jZS5cbiAqL1xuXG5cbnZhciBDbGlGb3JtYXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDbGlGb3JtYXQoKSB7XG4gICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaUZvcm1hdCk7XG5cbiAgICBpZiAoIW9wdHMubGV2ZWxzKSB7XG4gICAgICBvcHRzLmxldmVscyA9IGNvbmZpZ3MubnBtLmxldmVscztcbiAgICB9XG5cbiAgICB0aGlzLmNvbG9yaXplciA9IG5ldyBDb2xvcml6ZXIob3B0cyk7XG4gICAgdGhpcy5wYWRkZXIgPSBuZXcgUGFkZGVyKG9wdHMpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdHM7XG4gIH1cbiAgLypcbiAgICogZnVuY3Rpb24gdHJhbnNmb3JtIChpbmZvLCBvcHRzKVxuICAgKiBBdHRlbXB0cyB0byBib3RoOlxuICAgKiAxLiBQYWQgdGhlIHsgbGV2ZWwgfVxuICAgKiAyLiBDb2xvcml6ZSB0aGUgeyBsZXZlbCwgbWVzc2FnZSB9XG4gICAqIG9mIHRoZSBnaXZlbiBgbG9nZm9ybWAgaW5mbyBvYmplY3QgZGVwZW5kaW5nIG9uIHRoZSBgb3B0c2AuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKENsaUZvcm1hdCwgW3tcbiAgICBrZXk6IFwidHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShpbmZvLCBvcHRzKSB7XG4gICAgICB0aGlzLmNvbG9yaXplci50cmFuc2Zvcm0odGhpcy5wYWRkZXIudHJhbnNmb3JtKGluZm8sIG9wdHMpLCBvcHRzKTtcbiAgICAgIGluZm9bTUVTU0FHRV0gPSBcIlwiLmNvbmNhdChpbmZvLmxldmVsLCBcIjpcIikuY29uY2F0KGluZm8ubWVzc2FnZSk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2xpRm9ybWF0O1xufSgpO1xuLypcbiAqIGZ1bmN0aW9uIGNsaSAob3B0cylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIENMSSBmb3JtYXQgdGhhdCB0dXJucyBhIGxvZ1xuICogYGluZm9gIG9iamVjdCBpbnRvIHRoZSBzYW1lIGZvcm1hdCBwcmV2aW91c2x5IGF2YWlsYWJsZVxuICogaW4gYHdpbnN0b24uY2xpKClgIGluIGB3aW5zdG9uIDwgMy4wLjBgLlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICByZXR1cm4gbmV3IENsaUZvcm1hdChvcHRzKTtcbn07IC8vXG4vLyBBdHRhY2ggdGhlIENsaUZvcm1hdCBmb3IgcmVnaXN0cmF0aW9uIHB1cnBvc2VzXG4vL1xuXG5cbm1vZHVsZS5leHBvcnRzLkZvcm1hdCA9IENsaUZvcm1hdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xuLypcbiAqIGZ1bmN0aW9uIGNhc2NhZGUoZm9ybWF0cylcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGAuX2Zvcm1hdGAgZnVuY3Rpb24gaW4tb3JkZXJcbiAqIGZvciB0aGUgc3BlY2lmaWVkIHNldCBvZiBgZm9ybWF0c2AuIEluIHRoaXMgbWFubmVyIHdlIHNheSB0aGF0IEZvcm1hdHNcbiAqIGFyZSBcInBpcGUtbGlrZVwiLCBidXQgbm90IGEgcHVyZSBwdW1waWZ5IGltcGxlbWVudGF0aW9uLiBTaW5jZSB0aGVyZSBpcyBubyBiYWNrXG4gKiBwcmVzc3VyZSB3ZSBjYW4gcmVtb3ZlIGFsbCBvZiB0aGUgXCJyZWFkYWJsZVwiIHBsdW1iaW5nIGluIE5vZGUgc3RyZWFtcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNhc2NhZGUoZm9ybWF0cykge1xuICBpZiAoIWZvcm1hdHMuZXZlcnkoaXNWYWxpZEZvcm1hdCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZm8pIHtcbiAgICB2YXIgb2JqID0gaW5mbztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqID0gZm9ybWF0c1tpXS50cmFuc2Zvcm0ob2JqLCBmb3JtYXRzW2ldLm9wdGlvbnMpO1xuXG4gICAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbn1cbi8qXG4gKiBmdW5jdGlvbiBpc1ZhbGlkRm9ybWF0KGZvcm1hdClcbiAqIElmIHRoZSBmb3JtYXQgZG9lcyBub3QgZGVmaW5lIGEgYHRyYW5zZm9ybWAgZnVuY3Rpb24gdGhyb3cgYW4gZXJyb3JcbiAqIHdpdGggbW9yZSBkZXRhaWxlZCB1c2FnZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzVmFsaWRGb3JtYXQoZm10KSB7XG4gIGlmICh0eXBlb2YgZm10LnRyYW5zZm9ybSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihbJ05vIHRyYW5zZm9ybSBmdW5jdGlvbiBmb3VuZCBvbiBmb3JtYXQuIERpZCB5b3UgY3JlYXRlIGEgZm9ybWF0IGluc3RhbmNlPycsICdjb25zdCBteUZvcm1hdCA9IGZvcm1hdChmb3JtYXRGbik7JywgJ2NvbnN0IGluc3RhbmNlID0gbXlGb3JtYXQoKTsnXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qXG4gKiBmdW5jdGlvbiBjb21iaW5lIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgY29tYmluZSBGb3JtYXQgd2hpY2ggY29tYmluZXMgdGhlIHNwZWNpZmllZFxuICogZm9ybWF0cyBpbnRvIGEgbmV3IGZvcm1hdC4gVGhpcyBpcyBzaW1pbGFyIHRvIGEgcGlwZS1jaGFpbiBpbiB0cmFuc2Zvcm0gc3RyZWFtcy5cbiAqIFdlIGNob29zZSB0byBjb21iaW5lIHRoZSBwcm90b3R5cGVzIHRoaXMgd2F5IGJlY2F1c2UgdGhlcmUgaXMgbm8gYmFjayBwcmVzc3VyZSBpblxuICogYW4gaW4tbWVtb3J5IHRyYW5zZm9ybSBjaGFpbi5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZm9ybWF0cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmb3JtYXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNvbWJpbmVkRm9ybWF0ID0gZm9ybWF0KGNhc2NhZGUoZm9ybWF0cykpO1xuICB2YXIgaW5zdGFuY2UgPSBjb21iaW5lZEZvcm1hdCgpO1xuICBpbnN0YW5jZS5Gb3JtYXQgPSBjb21iaW5lZEZvcm1hdC5Gb3JtYXQ7XG4gIHJldHVybiBpbnN0YW5jZTtcbn07IC8vXG4vLyBFeHBvcnQgdGhlIGNhc2NhZGUgbWV0aG9kIGZvciB1c2UgaW4gY2xpIGFuZCBvdGhlclxuLy8gY29tYmluZWQgZm9ybWF0cyB0aGF0IHNob3VsZCBub3QgYmUgYXNzdW1lZCB0byBiZVxuLy8gc2luZ2xldG9ucy5cbi8vXG5cblxubW9kdWxlLmV4cG9ydHMuY2FzY2FkZSA9IGNhc2NhZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcblxudmFyIGpzb25TdHJpbmdpZnkgPSByZXF1aXJlKCdmYXN0LXNhZmUtc3RyaW5naWZ5Jyk7XG4vKlxuICogZnVuY3Rpb24gcmVwbGFjZXIgKGtleSwgdmFsdWUpXG4gKiBIYW5kbGVzIHByb3BlciBzdHJpbmdpZmljYXRpb24gb2YgQnVmZmVyIGFuZCBiaWdpbnQgb3V0cHV0LlxuICovXG5cblxuZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCdWZmZXIpIHJldHVybiB2YWx1ZS50b1N0cmluZygnYmFzZTY0Jyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2YWxpZC10eXBlb2ZcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JykgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qXG4gKiBmdW5jdGlvbiBqc29uIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgSlNPTiBmb3JtYXQgdGhhdCB0dXJucyBhIGxvZyBgaW5mb2BcbiAqIG9iamVjdCBpbnRvIHB1cmUgSlNPTi4gVGhpcyB3YXMgcHJldmlvdXNseSBleHBvc2VkIGFzIHsganNvbjogdHJ1ZSB9XG4gKiB0byB0cmFuc3BvcnRzIGluIGB3aW5zdG9uIDwgMy4wLjBgLlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8pIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBpbmZvW01FU1NBR0VdID0gKG9wdHMuc3RhYmxlID8ganNvblN0cmluZ2lmeS5zdGFibGVTdHJpbmdpZnkgOiBqc29uU3RyaW5naWZ5KShpbmZvLCBvcHRzLnJlcGxhY2VyIHx8IHJlcGxhY2VyLCBvcHRzLnNwYWNlKTtcbiAgcmV0dXJuIGluZm87XG59KTsiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbi8qXG4gKiBmdW5jdGlvbiBsYWJlbCAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGxhYmVsIEZvcm1hdCB3aGljaCBhZGRzIHRoZSBzcGVjaWZpZWRcbiAqIGBvcHRzLmxhYmVsYCBiZWZvcmUgdGhlIG1lc3NhZ2UuIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZCBhc1xuICogeyBsYWJlbDogJ215IGxhYmVsJyB9IHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdChmdW5jdGlvbiAoaW5mbywgb3B0cykge1xuICBpZiAob3B0cy5tZXNzYWdlKSB7XG4gICAgaW5mby5tZXNzYWdlID0gXCJbXCIuY29uY2F0KG9wdHMubGFiZWwsIFwiXSBcIikuY29uY2F0KGluZm8ubWVzc2FnZSk7XG4gICAgcmV0dXJuIGluZm87XG4gIH1cblxuICBpbmZvLmxhYmVsID0gb3B0cy5sYWJlbDtcbiAgcmV0dXJuIGluZm87XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpLFxuICAgIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xuXG52YXIganNvblN0cmluZ2lmeSA9IHJlcXVpcmUoJ2Zhc3Qtc2FmZS1zdHJpbmdpZnknKTtcbi8qXG4gKiBmdW5jdGlvbiBsb2dzdGFzaCAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIExvZ1N0YXNoIEZvcm1hdCB0aGF0IHR1cm5zIGFcbiAqIGxvZyBgaW5mb2Agb2JqZWN0IGludG8gcHVyZSBKU09OIHdpdGggdGhlIGFwcHJvcHJpYXRlIGxvZ3N0YXNoXG4gKiBvcHRpb25zLiBUaGlzIHdhcyBwcmV2aW91c2x5IGV4cG9zZWQgYXMgeyBsb2dzdGFzaDogdHJ1ZSB9XG4gKiB0byB0cmFuc3BvcnRzIGluIGB3aW5zdG9uIDwgMy4wLjBgLlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8pIHtcbiAgdmFyIGxvZ3N0YXNoID0ge307XG5cbiAgaWYgKGluZm8ubWVzc2FnZSkge1xuICAgIGxvZ3N0YXNoWydAbWVzc2FnZSddID0gaW5mby5tZXNzYWdlO1xuICAgIGRlbGV0ZSBpbmZvLm1lc3NhZ2U7XG4gIH1cblxuICBpZiAoaW5mby50aW1lc3RhbXApIHtcbiAgICBsb2dzdGFzaFsnQHRpbWVzdGFtcCddID0gaW5mby50aW1lc3RhbXA7XG4gICAgZGVsZXRlIGluZm8udGltZXN0YW1wO1xuICB9XG5cbiAgbG9nc3Rhc2hbJ0BmaWVsZHMnXSA9IGluZm87XG4gIGluZm9bTUVTU0FHRV0gPSBqc29uU3RyaW5naWZ5KGxvZ3N0YXNoKTtcbiAgcmV0dXJuIGluZm87XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xuXG5mdW5jdGlvbiBmaWxsRXhjZXB0KGluZm8sIGZpbGxFeGNlcHRLZXlzLCBtZXRhZGF0YUtleSkge1xuICB2YXIgc2F2ZWRLZXlzID0gZmlsbEV4Y2VwdEtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGFjY1trZXldID0gaW5mb1trZXldO1xuICAgIGRlbGV0ZSBpbmZvW2tleV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgbWV0YWRhdGEgPSBPYmplY3Qua2V5cyhpbmZvKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgYWNjW2tleV0gPSBpbmZvW2tleV07XG4gICAgZGVsZXRlIGluZm9ba2V5XTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIE9iamVjdC5hc3NpZ24oaW5mbywgc2F2ZWRLZXlzLCBfZGVmaW5lUHJvcGVydHkoe30sIG1ldGFkYXRhS2V5LCBtZXRhZGF0YSkpO1xuICByZXR1cm4gaW5mbztcbn1cblxuZnVuY3Rpb24gZmlsbFdpdGgoaW5mbywgZmlsbFdpdGhLZXlzLCBtZXRhZGF0YUtleSkge1xuICBpbmZvW21ldGFkYXRhS2V5XSA9IGZpbGxXaXRoS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgYWNjW2tleV0gPSBpbmZvW2tleV07XG4gICAgZGVsZXRlIGluZm9ba2V5XTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBpbmZvO1xufVxuLyoqXG4gKiBBZGRzIGluIGEgXCJtZXRhZGF0YVwiIG9iamVjdCB0byBjb2xsZWN0IGV4dHJhbmVvdXMgZGF0YSwgc2ltaWxhciB0byB0aGUgbWV0YWRhdGFcbiAqIG9iamVjdCBpbiB3aW5zdG9uIDIueC5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIG1ldGFkYXRhS2V5ID0gJ21ldGFkYXRhJztcblxuICBpZiAob3B0cy5rZXkpIHtcbiAgICBtZXRhZGF0YUtleSA9IG9wdHMua2V5O1xuICB9XG5cbiAgdmFyIGZpbGxFeGNlcHRLZXlzID0gW107XG5cbiAgaWYgKCFvcHRzLmZpbGxFeGNlcHQgJiYgIW9wdHMuZmlsbFdpdGgpIHtcbiAgICBmaWxsRXhjZXB0S2V5cy5wdXNoKCdsZXZlbCcpO1xuICAgIGZpbGxFeGNlcHRLZXlzLnB1c2goJ21lc3NhZ2UnKTtcbiAgfVxuXG4gIGlmIChvcHRzLmZpbGxFeGNlcHQpIHtcbiAgICBmaWxsRXhjZXB0S2V5cyA9IG9wdHMuZmlsbEV4Y2VwdDtcbiAgfVxuXG4gIGlmIChmaWxsRXhjZXB0S2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGZpbGxFeGNlcHQoaW5mbywgZmlsbEV4Y2VwdEtleXMsIG1ldGFkYXRhS2V5KTtcbiAgfVxuXG4gIGlmIChvcHRzLmZpbGxXaXRoKSB7XG4gICAgcmV0dXJuIGZpbGxXaXRoKGluZm8sIG9wdHMuZmlsbFdpdGgsIG1ldGFkYXRhS2V5KTtcbiAgfVxuXG4gIHJldHVybiBpbmZvO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0O1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBMRVZFTCA9IF9yZXF1aXJlLkxFVkVMLFxuICAgIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFLFxuICAgIFNQTEFUID0gX3JlcXVpcmUuU1BMQVQ7XG4vKlxuICogZnVuY3Rpb24gcHJldHR5UHJpbnQgKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcmV0dHlQcmludCBGb3JtYXQgdGhhdCBcInByZXR0eVByaW50XCJcbiAqIHNlcmlhbGl6ZXMgYGluZm9gIG9iamVjdHMuIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZCBhc1xuICogeyBwcmV0dHlQcmludDogdHJ1ZSB9IHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdChmdW5jdGlvbiAoaW5mbykge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIC8vXG4gIC8vIGluZm9be0xFVkVMLCBNRVNTQUdFLCBTUExBVH1dIGFyZSBlbnVtZXJhYmxlIGhlcmUuIFNpbmNlIHRoZXlcbiAgLy8gYXJlIGludGVybmFsLCB3ZSByZW1vdmUgdGhlbSBiZWZvcmUgdXRpbC5pbnNwZWN0IHNvIHRoZXlcbiAgLy8gYXJlIG5vdCBwcmludGVkLlxuICAvL1xuICB2YXIgc3RyaXBwZWQgPSBPYmplY3QuYXNzaWduKHt9LCBpbmZvKTsgLy8gUmVtYXJrIChpbmRleHplcm8pOiB1cGRhdGUgdGhpcyB0ZWNobmlxdWUgaW4gQXByaWwgMjAxOVxuICAvLyB3aGVuIG5vZGVANiBpcyBFT0xcblxuICBkZWxldGUgc3RyaXBwZWRbTEVWRUxdO1xuICBkZWxldGUgc3RyaXBwZWRbTUVTU0FHRV07XG4gIGRlbGV0ZSBzdHJpcHBlZFtTUExBVF07XG4gIGluZm9bTUVTU0FHRV0gPSBpbnNwZWN0KHN0cmlwcGVkLCBmYWxzZSwgb3B0cy5kZXB0aCB8fCBudWxsLCBvcHRzLmNvbG9yaXplKTtcbiAgcmV0dXJuIGluZm87XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcblxudmFyIFByaW50ZiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByaW50Zih0ZW1wbGF0ZUZuKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByaW50Zik7XG5cbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGVGbjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQcmludGYsIFt7XG4gICAga2V5OiBcInRyYW5zZm9ybVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0oaW5mbykge1xuICAgICAgaW5mb1tNRVNTQUdFXSA9IHRoaXMudGVtcGxhdGUoaW5mbyk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJpbnRmO1xufSgpO1xuLypcbiAqIGZ1bmN0aW9uIHByaW50ZiAodGVtcGxhdGVGbilcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHByaW50ZiBGb3JtYXQgdGhhdCBjcmVhdGVzIGFuXG4gKiBpbnRlcm1lZGlhdGUgcHJvdG90eXBlIHRvIHN0b3JlIHRoZSB0ZW1wbGF0ZSBzdHJpbmctYmFzZWQgZm9ybWF0dGVyXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQcmludGYob3B0cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5QcmludGYgPSBtb2R1bGUuZXhwb3J0cy5Gb3JtYXQgPSBQcmludGY7IiwiLyogZXNsaW50IG5vLXVuZGVmaW5lZDogMCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcblxudmFyIGpzb25TdHJpbmdpZnkgPSByZXF1aXJlKCdmYXN0LXNhZmUtc3RyaW5naWZ5Jyk7XG4vKlxuICogZnVuY3Rpb24gc2ltcGxlIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2ltcGxlIGZvcm1hdCBUcmFuc2Zvcm1TdHJlYW1cbiAqIHdoaWNoIHdyaXRlcyBhIHNpbXBsZSByZXByZXNlbnRhdGlvbiBvZiBsb2dzLlxuICpcbiAqICAgIGNvbnN0IHsgbGV2ZWwsIG1lc3NhZ2UsIHNwbGF0LCAuLi5yZXN0IH0gPSBpbmZvO1xuICpcbiAqICAgICR7bGV2ZWx9OiAke21lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3QgaXMgZW1wdHlcbiAqICAgICR7bGV2ZWx9OiAke21lc3NhZ2V9ICR7SlNPTi5zdHJpbmdpZnkocmVzdCl9ICAgIG90aGVyd2lzZVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8pIHtcbiAgdmFyIHN0cmluZ2lmaWVkUmVzdCA9IGpzb25TdHJpbmdpZnkoT2JqZWN0LmFzc2lnbih7fSwgaW5mbywge1xuICAgIGxldmVsOiB1bmRlZmluZWQsXG4gICAgbWVzc2FnZTogdW5kZWZpbmVkLFxuICAgIHNwbGF0OiB1bmRlZmluZWRcbiAgfSkpO1xuICB2YXIgcGFkZGluZyA9IGluZm8ucGFkZGluZyAmJiBpbmZvLnBhZGRpbmdbaW5mby5sZXZlbF0gfHwgJyc7XG5cbiAgaWYgKHN0cmluZ2lmaWVkUmVzdCAhPT0gJ3t9Jykge1xuICAgIGluZm9bTUVTU0FHRV0gPSBcIlwiLmNvbmNhdChpbmZvLmxldmVsLCBcIjpcIikuY29uY2F0KHBhZGRpbmcsIFwiIFwiKS5jb25jYXQoaW5mby5tZXNzYWdlLCBcIiBcIikuY29uY2F0KHN0cmluZ2lmaWVkUmVzdCk7XG4gIH0gZWxzZSB7XG4gICAgaW5mb1tNRVNTQUdFXSA9IFwiXCIuY29uY2F0KGluZm8ubGV2ZWwsIFwiOlwiKS5jb25jYXQocGFkZGluZywgXCIgXCIpLmNvbmNhdChpbmZvLm1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIGluZm87XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBTUExBVCA9IF9yZXF1aXJlLlNQTEFUO1xuLyoqXG4gKiBDYXB0dXJlcyB0aGUgbnVtYmVyIG9mIGZvcm1hdCAoaS5lLiAlcyBzdHJpbmdzKSBpbiBhIGdpdmVuIHN0cmluZy5cbiAqIEJhc2VkIG9uIGB1dGlsLmZvcm1hdGAsIHNlZSBOb2RlLmpzIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2IxYzhmMTVjNWYxNjllMDIxZjdjNDZlYjdiMjE5ZGU5NWZlOTc2MDMvbGliL3V0aWwuanMjTDIwMS1MMjMwXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NjZGppZm9PJV0vZztcbi8qKlxuICogQ2FwdHVyZXMgdGhlIG51bWJlciBvZiBlc2NhcGVkICUgc2lnbnMgaW4gYSBmb3JtYXQgc3RyaW5nIChpLmUuICVzIHN0cmluZ3MpLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuXG52YXIgZXNjYXBlZFBlcmNlbnQgPSAvJSUvZztcblxudmFyIFNwbGF0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BsYXR0ZXIob3B0cykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGxhdHRlcik7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRzO1xuICB9XG4gIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiB0b2tlbnMgPD0gc3BsYXQubGVuZ3RoLCBhc3NpZ24geyBzcGxhdCwgbWV0YSB9IGludG8gdGhlXG4gICAgICogYGluZm9gIGFjY29yZGluZ2x5LCBhbmQgd3JpdGUgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0luZm99IGluZm8gTG9nZm9ybSBpbmZvIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtICB7U3RyaW5nW119IHRva2VucyBTZXQgb2Ygc3RyaW5nIGludGVycG9sYXRpb24gdG9rZW5zLlxuICAgICAqIEByZXR1cm5zIHtJbmZvfSBNb2RpZmllZCBpbmZvIG1lc3NhZ2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFNwbGF0dGVyLCBbe1xuICAgIGtleTogXCJfc3BsYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NwbGF0KGluZm8sIHRva2Vucykge1xuICAgICAgdmFyIG1zZyA9IGluZm8ubWVzc2FnZTtcbiAgICAgIHZhciBzcGxhdCA9IGluZm9bU1BMQVRdIHx8IGluZm8uc3BsYXQgfHwgW107XG4gICAgICB2YXIgcGVyY2VudHMgPSBtc2cubWF0Y2goZXNjYXBlZFBlcmNlbnQpO1xuICAgICAgdmFyIGVzY2FwZXMgPSBwZXJjZW50cyAmJiBwZXJjZW50cy5sZW5ndGggfHwgMDsgLy8gVGhlIGV4cGVjdGVkIHNwbGF0IGlzIHRoZSBudW1iZXIgb2YgdG9rZW5zIG1pbnVzIHRoZSBudW1iZXIgb2YgZXNjYXBlc1xuICAgICAgLy8gZS5nLlxuICAgICAgLy8gLSB7IGV4cGVjdGVkU3BsYXQ6IDMgfSAnJWQgJXMgJWonXG4gICAgICAvLyAtIHsgZXhwZWN0ZWRTcGxhdDogNSB9ICdbJXNdICVkJSUgJWQlJSAlcyAlaidcbiAgICAgIC8vXG4gICAgICAvLyBBbnkgXCJtZXRhXCIgd2lsbCBiZSBhcnVnbWVudHMgaW4gYWRkaXRpb24gdG8gdGhlIGV4cGVjdGVkIHNwbGF0IHNpemVcbiAgICAgIC8vIHJlZ2FyZGxlc3Mgb2YgdHlwZS4gZS5nLlxuICAgICAgLy9cbiAgICAgIC8vIGxvZ2dlci5sb2coJ2luZm8nLCAnJWQlJSAlcyAlaicsIDEwMCwgJ3dvdycsIHsgc3VjaDogJ2pzJyB9LCB7IHRoaXNJc01ldGE6IHRydWUgfSk7XG4gICAgICAvLyB3b3VsZCByZXN1bHQgaW4gc3BsYXQgb2YgZm91ciAoNCksIGJ1dCBvbmx5IHRocmVlICgzKSBhcmUgZXhwZWN0ZWQuIFRoZXJlZm9yZTpcbiAgICAgIC8vXG4gICAgICAvLyBleHRyYVNwbGF0ID0gMyAtIDQgPSAtMVxuICAgICAgLy8gbWV0YXMgPSBbMTAwLCAnd293JywgeyBzdWNoOiAnanMnIH0sIHsgdGhpc0lzTWV0YTogdHJ1ZSB9XS5zcGxpY2UoLTEsIC0xICogLTEpO1xuICAgICAgLy8gc3BsYXQgPSBbMTAwLCAnd293JywgeyBzdWNoOiAnanMnIH1dXG5cbiAgICAgIHZhciBleHBlY3RlZFNwbGF0ID0gdG9rZW5zLmxlbmd0aCAtIGVzY2FwZXM7XG4gICAgICB2YXIgZXh0cmFTcGxhdCA9IGV4cGVjdGVkU3BsYXQgLSBzcGxhdC5sZW5ndGg7XG4gICAgICB2YXIgbWV0YXMgPSBleHRyYVNwbGF0IDwgMCA/IHNwbGF0LnNwbGljZShleHRyYVNwbGF0LCAtMSAqIGV4dHJhU3BsYXQpIDogW107IC8vIE5vdyB0aGF0IHsgc3BsYXQgfSBoYXMgYmVlbiBzZXBhcmF0ZWQgZnJvbSBhbnkgcG90ZW50aWFsIHsgbWV0YSB9LiB3ZVxuICAgICAgLy8gY2FuIGFzc2lnbiB0aGlzIHRvIHRoZSBgaW5mb2Agb2JqZWN0IGFuZCB3cml0ZSBpdCB0byBvdXIgZm9ybWF0IHN0cmVhbS5cbiAgICAgIC8vIElmIHRoZSBhZGRpdGlvbmFsIG1ldGFzIGFyZSAqKk5PVCoqIG9iamVjdHMgb3IgKipMQUNLKiogZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICAvLyB5b3UgYXJlIGdvaW5nIHRvIGhhdmUgYSBiYWQgdGltZS5cblxuICAgICAgdmFyIG1ldGFsZW4gPSBtZXRhcy5sZW5ndGg7XG5cbiAgICAgIGlmIChtZXRhbGVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YWxlbjsgaSsrKSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihpbmZvLCBtZXRhc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5mby5tZXNzYWdlID0gdXRpbC5mb3JtYXQuYXBwbHkodXRpbCwgW21zZ10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzcGxhdCkpKTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgICAvKipcbiAgICAgICogVHJhbnNmb3JtcyB0aGUgYGluZm9gIG1lc3NhZ2UgYnkgdXNpbmcgYHV0aWwuZm9ybWF0YCB0byBjb21wbGV0ZVxuICAgICAgKiBhbnkgYGluZm8ubWVzc2FnZWAgcHJvdmlkZWQgaXQgaGFzIHN0cmluZyBpbnRlcnBvbGF0aW9uIHRva2Vucy5cbiAgICAgICogSWYgbm8gdG9rZW5zIGV4aXN0IHRoZW4gYGluZm9gIGlzIGltbXV0YWJsZS5cbiAgICAgICpcbiAgICAgICogQHBhcmFtICB7SW5mb30gaW5mbyBMb2dmb3JtIGluZm8gbWVzc2FnZS5cbiAgICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRzIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICAqIEByZXR1cm5zIHtJbmZvfSBNb2RpZmllZCBpbmZvIG1lc3NhZ2VcbiAgICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKGluZm8pIHtcbiAgICAgIHZhciBtc2cgPSBpbmZvLm1lc3NhZ2U7XG4gICAgICB2YXIgc3BsYXQgPSBpbmZvW1NQTEFUXSB8fCBpbmZvLnNwbGF0OyAvLyBObyBuZWVkIHRvIHByb2Nlc3MgYW55dGhpbmcgaWYgc3BsYXQgaXMgdW5kZWZpbmVkXG5cbiAgICAgIGlmICghc3BsYXQgfHwgIXNwbGF0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgIH0gLy8gRXh0cmFjdCB0b2tlbnMsIGlmIG5vbmUgYXZhaWxhYmxlIGRlZmF1bHQgdG8gZW1wdHkgYXJyYXkgdG9cbiAgICAgIC8vIGVuc3VyZSBjb25zaXN0YW5jeSBpbiBleHBlY3RlZCByZXN1bHRzXG5cblxuICAgICAgdmFyIHRva2VucyA9IG1zZyAmJiBtc2cubWF0Y2ggJiYgbXNnLm1hdGNoKGZvcm1hdFJlZ0V4cCk7IC8vIFRoaXMgY29uZGl0aW9uIHdpbGwgdGFrZSBjYXJlIG9mIGlucHV0cyB3aXRoIGluZm9bU1BMQVRdXG4gICAgICAvLyBidXQgbm8gdG9rZW5zIHByZXNlbnRcblxuICAgICAgaWYgKCF0b2tlbnMgJiYgKHNwbGF0IHx8IHNwbGF0Lmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIG1ldGFzID0gc3BsYXQubGVuZ3RoID4gMSA/IHNwbGF0LnNwbGljZSgwKSA6IHNwbGF0OyAvLyBOb3cgdGhhdCB7IHNwbGF0IH0gaGFzIGJlZW4gc2VwYXJhdGVkIGZyb20gYW55IHBvdGVudGlhbCB7IG1ldGEgfS4gd2VcbiAgICAgICAgLy8gY2FuIGFzc2lnbiB0aGlzIHRvIHRoZSBgaW5mb2Agb2JqZWN0IGFuZCB3cml0ZSBpdCB0byBvdXIgZm9ybWF0IHN0cmVhbS5cbiAgICAgICAgLy8gSWYgdGhlIGFkZGl0aW9uYWwgbWV0YXMgYXJlICoqTk9UKiogb2JqZWN0cyBvciAqKkxBQ0sqKiBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgICAgLy8geW91IGFyZSBnb2luZyB0byBoYXZlIGEgYmFkIHRpbWUuXG5cbiAgICAgICAgdmFyIG1ldGFsZW4gPSBtZXRhcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG1ldGFsZW4pIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGFsZW47IGkrKykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpbmZvLCBtZXRhc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwbGF0KGluZm8sIHRva2Vucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTcGxhdHRlcjtcbn0oKTtcbi8qXG4gKiBmdW5jdGlvbiBzcGxhdCAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNwbGF0IGZvcm1hdCBUcmFuc2Zvcm1TdHJlYW1cbiAqIHdoaWNoIHBlcmZvcm1zIHN0cmluZyBpbnRlcnBvbGF0aW9uIGZyb20gYGluZm9gIG9iamVjdHMuIFRoaXMgd2FzXG4gKiBwcmV2aW91c2x5IGV4cG9zZWQgaW1wbGljaXRseSBpbiBgd2luc3RvbiA8IDMuMC4wYC5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBTcGxhdHRlcihvcHRzKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmVjaGEgPSByZXF1aXJlKCdmZWNoYScpO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbi8qXG4gKiBmdW5jdGlvbiB0aW1lc3RhbXAgKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB0aW1lc3RhbXAgRm9ybWF0IHdoaWNoIGFkZHMgYSB0aW1lc3RhbXBcbiAqIHRvIHRoZSBpbmZvLiBJdCB3YXMgcHJldmlvdXNseSBhdmFpbGFibGUgaW4gd2luc3RvbiA8IDMuMC4wIGFzOlxuICpcbiAqIC0geyB0aW1lc3RhbXA6IHRydWUgfSAgICAgICAgICAgICAvLyBgbmV3IERhdGUudG9JU09TdHJpbmcoKWBcbiAqIC0geyB0aW1lc3RhbXA6IGZ1bmN0aW9uOlN0cmluZyB9ICAvLyBWYWx1ZSByZXR1cm5lZCBieSBgdGltZXN0YW1wKClgXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdChmdW5jdGlvbiAoaW5mbykge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKG9wdHMuZm9ybWF0KSB7XG4gICAgaW5mby50aW1lc3RhbXAgPSB0eXBlb2Ygb3B0cy5mb3JtYXQgPT09ICdmdW5jdGlvbicgPyBvcHRzLmZvcm1hdCgpIDogZmVjaGEuZm9ybWF0KG5ldyBEYXRlKCksIG9wdHMuZm9ybWF0KTtcbiAgfVxuXG4gIGlmICghaW5mby50aW1lc3RhbXApIHtcbiAgICBpbmZvLnRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgfVxuXG4gIGlmIChvcHRzLmFsaWFzKSB7XG4gICAgaW5mb1tvcHRzLmFsaWFzXSA9IGluZm8udGltZXN0YW1wO1xuICB9XG5cbiAgcmV0dXJuIGluZm87XG59KTsiLCJ2YXIgdG9rZW4gPSAvZHsxLDR9fE17MSw0fXxZWSg/OllZKT98U3sxLDN9fERvfFpafFp8KFtIaE1zRG1dKVxcMT98W2FBXXxcIlteXCJdKlwifCdbXiddKicvZztcbnZhciB0d29EaWdpdHNPcHRpb25hbCA9IFwiWzEtOV1cXFxcZD9cIjtcbnZhciB0d29EaWdpdHMgPSBcIlxcXFxkXFxcXGRcIjtcbnZhciB0aHJlZURpZ2l0cyA9IFwiXFxcXGR7M31cIjtcbnZhciBmb3VyRGlnaXRzID0gXCJcXFxcZHs0fVwiO1xudmFyIHdvcmQgPSBcIlteXFxcXHNdK1wiO1xudmFyIGxpdGVyYWwgPSAvXFxbKFteXSo/KVxcXS9nbTtcbmZ1bmN0aW9uIHNob3J0ZW4oYXJyLCBzTGVuKSB7XG4gICAgdmFyIG5ld0FyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbmV3QXJyLnB1c2goYXJyW2ldLnN1YnN0cigwLCBzTGVuKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnI7XG59XG52YXIgbW9udGhVcGRhdGUgPSBmdW5jdGlvbiAoYXJyTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKHYsIGkxOG4pIHtcbiAgICB2YXIgbG93ZXJDYXNlQXJyID0gaTE4blthcnJOYW1lXS5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYudG9Mb3dlckNhc2UoKTsgfSk7XG4gICAgdmFyIGluZGV4ID0gbG93ZXJDYXNlQXJyLmluZGV4T2Yodi50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTsgfTtcbmZ1bmN0aW9uIGFzc2lnbihvcmlnT2JqKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBmb3IgKHZhciBfYSA9IDAsIGFyZ3NfMSA9IGFyZ3M7IF9hIDwgYXJnc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICB2YXIgb2JqID0gYXJnc18xW19hXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBleFxuICAgICAgICAgICAgb3JpZ09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9yaWdPYmo7XG59XG52YXIgZGF5TmFtZXMgPSBbXG4gICAgXCJTdW5kYXlcIixcbiAgICBcIk1vbmRheVwiLFxuICAgIFwiVHVlc2RheVwiLFxuICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgXCJUaHVyc2RheVwiLFxuICAgIFwiRnJpZGF5XCIsXG4gICAgXCJTYXR1cmRheVwiXG5dO1xudmFyIG1vbnRoTmFtZXMgPSBbXG4gICAgXCJKYW51YXJ5XCIsXG4gICAgXCJGZWJydWFyeVwiLFxuICAgIFwiTWFyY2hcIixcbiAgICBcIkFwcmlsXCIsXG4gICAgXCJNYXlcIixcbiAgICBcIkp1bmVcIixcbiAgICBcIkp1bHlcIixcbiAgICBcIkF1Z3VzdFwiLFxuICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgXCJPY3RvYmVyXCIsXG4gICAgXCJOb3ZlbWJlclwiLFxuICAgIFwiRGVjZW1iZXJcIlxuXTtcbnZhciBtb250aE5hbWVzU2hvcnQgPSBzaG9ydGVuKG1vbnRoTmFtZXMsIDMpO1xudmFyIGRheU5hbWVzU2hvcnQgPSBzaG9ydGVuKGRheU5hbWVzLCAzKTtcbnZhciBkZWZhdWx0STE4biA9IHtcbiAgICBkYXlOYW1lc1Nob3J0OiBkYXlOYW1lc1Nob3J0LFxuICAgIGRheU5hbWVzOiBkYXlOYW1lcyxcbiAgICBtb250aE5hbWVzU2hvcnQ6IG1vbnRoTmFtZXNTaG9ydCxcbiAgICBtb250aE5hbWVzOiBtb250aE5hbWVzLFxuICAgIGFtUG06IFtcImFtXCIsIFwicG1cIl0sXG4gICAgRG9GbjogZnVuY3Rpb24gKGRheU9mTW9udGgpIHtcbiAgICAgICAgcmV0dXJuIChkYXlPZk1vbnRoICtcbiAgICAgICAgICAgIFtcInRoXCIsIFwic3RcIiwgXCJuZFwiLCBcInJkXCJdW2RheU9mTW9udGggJSAxMCA+IDNcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6ICgoZGF5T2ZNb250aCAtIChkYXlPZk1vbnRoICUgMTApICE9PSAxMCA/IDEgOiAwKSAqIGRheU9mTW9udGgpICUgMTBdKTtcbiAgICB9XG59O1xudmFyIGdsb2JhbEkxOG4gPSBhc3NpZ24oe30sIGRlZmF1bHRJMThuKTtcbnZhciBzZXRHbG9iYWxEYXRlSTE4biA9IGZ1bmN0aW9uIChpMThuKSB7XG4gICAgcmV0dXJuIChnbG9iYWxJMThuID0gYXNzaWduKGdsb2JhbEkxOG4sIGkxOG4pKTtcbn07XG52YXIgcmVnZXhFc2NhcGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bfFxcXFx7KClbXiQrKj8uLV0vZywgXCJcXFxcJCZcIik7XG59O1xudmFyIHBhZCA9IGZ1bmN0aW9uICh2YWwsIGxlbikge1xuICAgIGlmIChsZW4gPT09IHZvaWQgMCkgeyBsZW4gPSAyOyB9XG4gICAgdmFsID0gU3RyaW5nKHZhbCk7XG4gICAgd2hpbGUgKHZhbC5sZW5ndGggPCBsZW4pIHtcbiAgICAgICAgdmFsID0gXCIwXCIgKyB2YWw7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59O1xudmFyIGZvcm1hdEZsYWdzID0ge1xuICAgIEQ6IGZ1bmN0aW9uIChkYXRlT2JqKSB7IHJldHVybiBTdHJpbmcoZGF0ZU9iai5nZXREYXRlKCkpOyB9LFxuICAgIEREOiBmdW5jdGlvbiAoZGF0ZU9iaikgeyByZXR1cm4gcGFkKGRhdGVPYmouZ2V0RGF0ZSgpKTsgfSxcbiAgICBEbzogZnVuY3Rpb24gKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgICAgcmV0dXJuIGkxOG4uRG9GbihkYXRlT2JqLmdldERhdGUoKSk7XG4gICAgfSxcbiAgICBkOiBmdW5jdGlvbiAoZGF0ZU9iaikgeyByZXR1cm4gU3RyaW5nKGRhdGVPYmouZ2V0RGF5KCkpOyB9LFxuICAgIGRkOiBmdW5jdGlvbiAoZGF0ZU9iaikgeyByZXR1cm4gcGFkKGRhdGVPYmouZ2V0RGF5KCkpOyB9LFxuICAgIGRkZDogZnVuY3Rpb24gKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgICAgcmV0dXJuIGkxOG4uZGF5TmFtZXNTaG9ydFtkYXRlT2JqLmdldERheSgpXTtcbiAgICB9LFxuICAgIGRkZGQ6IGZ1bmN0aW9uIChkYXRlT2JqLCBpMThuKSB7XG4gICAgICAgIHJldHVybiBpMThuLmRheU5hbWVzW2RhdGVPYmouZ2V0RGF5KCldO1xuICAgIH0sXG4gICAgTTogZnVuY3Rpb24gKGRhdGVPYmopIHsgcmV0dXJuIFN0cmluZyhkYXRlT2JqLmdldE1vbnRoKCkgKyAxKTsgfSxcbiAgICBNTTogZnVuY3Rpb24gKGRhdGVPYmopIHsgcmV0dXJuIHBhZChkYXRlT2JqLmdldE1vbnRoKCkgKyAxKTsgfSxcbiAgICBNTU06IGZ1bmN0aW9uIChkYXRlT2JqLCBpMThuKSB7XG4gICAgICAgIHJldHVybiBpMThuLm1vbnRoTmFtZXNTaG9ydFtkYXRlT2JqLmdldE1vbnRoKCldO1xuICAgIH0sXG4gICAgTU1NTTogZnVuY3Rpb24gKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgICAgcmV0dXJuIGkxOG4ubW9udGhOYW1lc1tkYXRlT2JqLmdldE1vbnRoKCldO1xuICAgIH0sXG4gICAgWVk6IGZ1bmN0aW9uIChkYXRlT2JqKSB7XG4gICAgICAgIHJldHVybiBwYWQoU3RyaW5nKGRhdGVPYmouZ2V0RnVsbFllYXIoKSksIDQpLnN1YnN0cigyKTtcbiAgICB9LFxuICAgIFlZWVk6IGZ1bmN0aW9uIChkYXRlT2JqKSB7IHJldHVybiBwYWQoZGF0ZU9iai5nZXRGdWxsWWVhcigpLCA0KTsgfSxcbiAgICBoOiBmdW5jdGlvbiAoZGF0ZU9iaikgeyByZXR1cm4gU3RyaW5nKGRhdGVPYmouZ2V0SG91cnMoKSAlIDEyIHx8IDEyKTsgfSxcbiAgICBoaDogZnVuY3Rpb24gKGRhdGVPYmopIHsgcmV0dXJuIHBhZChkYXRlT2JqLmdldEhvdXJzKCkgJSAxMiB8fCAxMik7IH0sXG4gICAgSDogZnVuY3Rpb24gKGRhdGVPYmopIHsgcmV0dXJuIFN0cmluZyhkYXRlT2JqLmdldEhvdXJzKCkpOyB9LFxuICAgIEhIOiBmdW5jdGlvbiAoZGF0ZU9iaikgeyByZXR1cm4gcGFkKGRhdGVPYmouZ2V0SG91cnMoKSk7IH0sXG4gICAgbTogZnVuY3Rpb24gKGRhdGVPYmopIHsgcmV0dXJuIFN0cmluZyhkYXRlT2JqLmdldE1pbnV0ZXMoKSk7IH0sXG4gICAgbW06IGZ1bmN0aW9uIChkYXRlT2JqKSB7IHJldHVybiBwYWQoZGF0ZU9iai5nZXRNaW51dGVzKCkpOyB9LFxuICAgIHM6IGZ1bmN0aW9uIChkYXRlT2JqKSB7IHJldHVybiBTdHJpbmcoZGF0ZU9iai5nZXRTZWNvbmRzKCkpOyB9LFxuICAgIHNzOiBmdW5jdGlvbiAoZGF0ZU9iaikgeyByZXR1cm4gcGFkKGRhdGVPYmouZ2V0U2Vjb25kcygpKTsgfSxcbiAgICBTOiBmdW5jdGlvbiAoZGF0ZU9iaikge1xuICAgICAgICByZXR1cm4gU3RyaW5nKE1hdGgucm91bmQoZGF0ZU9iai5nZXRNaWxsaXNlY29uZHMoKSAvIDEwMCkpO1xuICAgIH0sXG4gICAgU1M6IGZ1bmN0aW9uIChkYXRlT2JqKSB7XG4gICAgICAgIHJldHVybiBwYWQoTWF0aC5yb3VuZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpIC8gMTApLCAyKTtcbiAgICB9LFxuICAgIFNTUzogZnVuY3Rpb24gKGRhdGVPYmopIHsgcmV0dXJuIHBhZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpLCAzKTsgfSxcbiAgICBhOiBmdW5jdGlvbiAoZGF0ZU9iaiwgaTE4bikge1xuICAgICAgICByZXR1cm4gZGF0ZU9iai5nZXRIb3VycygpIDwgMTIgPyBpMThuLmFtUG1bMF0gOiBpMThuLmFtUG1bMV07XG4gICAgfSxcbiAgICBBOiBmdW5jdGlvbiAoZGF0ZU9iaiwgaTE4bikge1xuICAgICAgICByZXR1cm4gZGF0ZU9iai5nZXRIb3VycygpIDwgMTJcbiAgICAgICAgICAgID8gaTE4bi5hbVBtWzBdLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgIDogaTE4bi5hbVBtWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBaWjogZnVuY3Rpb24gKGRhdGVPYmopIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IGRhdGVPYmouZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgcmV0dXJuICgob2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCIpICtcbiAgICAgICAgICAgIHBhZChNYXRoLmZsb29yKE1hdGguYWJzKG9mZnNldCkgLyA2MCkgKiAxMDAgKyAoTWF0aC5hYnMob2Zmc2V0KSAlIDYwKSwgNCkpO1xuICAgIH0sXG4gICAgWjogZnVuY3Rpb24gKGRhdGVPYmopIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IGRhdGVPYmouZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgcmV0dXJuICgob2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCIpICtcbiAgICAgICAgICAgIHBhZChNYXRoLmZsb29yKE1hdGguYWJzKG9mZnNldCkgLyA2MCksIDIpICtcbiAgICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICAgIHBhZChNYXRoLmFicyhvZmZzZXQpICUgNjAsIDIpKTtcbiAgICB9XG59O1xudmFyIG1vbnRoUGFyc2UgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gK3YgLSAxOyB9O1xudmFyIGVtcHR5RGlnaXRzID0gW251bGwsIHR3b0RpZ2l0c09wdGlvbmFsXTtcbnZhciBlbXB0eVdvcmQgPSBbbnVsbCwgd29yZF07XG52YXIgYW1QbSA9IFtcbiAgICBcImlzUG1cIixcbiAgICB3b3JkLFxuICAgIGZ1bmN0aW9uICh2LCBpMThuKSB7XG4gICAgICAgIHZhciB2YWwgPSB2LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh2YWwgPT09IGkxOG4uYW1QbVswXSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsID09PSBpMThuLmFtUG1bMV0pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbl07XG52YXIgdGltZXpvbmVPZmZzZXQgPSBbXG4gICAgXCJ0aW1lem9uZU9mZnNldFwiLFxuICAgIFwiW15cXFxcc10qP1tcXFxcK1xcXFwtXVxcXFxkXFxcXGQ6P1xcXFxkXFxcXGR8W15cXFxcc10qP1o/XCIsXG4gICAgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gKHYgKyBcIlwiKS5tYXRjaCgvKFsrLV18XFxkXFxkKS9naSk7XG4gICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgdmFyIG1pbnV0ZXMgPSArcGFydHNbMV0gKiA2MCArIHBhcnNlSW50KHBhcnRzWzJdLCAxMCk7XG4gICAgICAgICAgICByZXR1cm4gcGFydHNbMF0gPT09IFwiK1wiID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbl07XG52YXIgcGFyc2VGbGFncyA9IHtcbiAgICBEOiBbXCJkYXlcIiwgdHdvRGlnaXRzT3B0aW9uYWxdLFxuICAgIEREOiBbXCJkYXlcIiwgdHdvRGlnaXRzXSxcbiAgICBEbzogW1wiZGF5XCIsIHR3b0RpZ2l0c09wdGlvbmFsICsgd29yZCwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHBhcnNlSW50KHYsIDEwKTsgfV0sXG4gICAgTTogW1wibW9udGhcIiwgdHdvRGlnaXRzT3B0aW9uYWwsIG1vbnRoUGFyc2VdLFxuICAgIE1NOiBbXCJtb250aFwiLCB0d29EaWdpdHMsIG1vbnRoUGFyc2VdLFxuICAgIFlZOiBbXG4gICAgICAgIFwieWVhclwiLFxuICAgICAgICB0d29EaWdpdHMsXG4gICAgICAgIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciBjZW50ID0gKyhcIlwiICsgbm93LmdldEZ1bGxZZWFyKCkpLnN1YnN0cigwLCAyKTtcbiAgICAgICAgICAgIHJldHVybiArKFwiXCIgKyAoK3YgPiA2OCA/IGNlbnQgLSAxIDogY2VudCkgKyB2KTtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgaDogW1wiaG91clwiLCB0d29EaWdpdHNPcHRpb25hbCwgdW5kZWZpbmVkLCBcImlzUG1cIl0sXG4gICAgaGg6IFtcImhvdXJcIiwgdHdvRGlnaXRzLCB1bmRlZmluZWQsIFwiaXNQbVwiXSxcbiAgICBIOiBbXCJob3VyXCIsIHR3b0RpZ2l0c09wdGlvbmFsXSxcbiAgICBISDogW1wiaG91clwiLCB0d29EaWdpdHNdLFxuICAgIG06IFtcIm1pbnV0ZVwiLCB0d29EaWdpdHNPcHRpb25hbF0sXG4gICAgbW06IFtcIm1pbnV0ZVwiLCB0d29EaWdpdHNdLFxuICAgIHM6IFtcInNlY29uZFwiLCB0d29EaWdpdHNPcHRpb25hbF0sXG4gICAgc3M6IFtcInNlY29uZFwiLCB0d29EaWdpdHNdLFxuICAgIFlZWVk6IFtcInllYXJcIiwgZm91ckRpZ2l0c10sXG4gICAgUzogW1wibWlsbGlzZWNvbmRcIiwgXCJcXFxcZFwiLCBmdW5jdGlvbiAodikgeyByZXR1cm4gK3YgKiAxMDA7IH1dLFxuICAgIFNTOiBbXCJtaWxsaXNlY29uZFwiLCB0d29EaWdpdHMsIGZ1bmN0aW9uICh2KSB7IHJldHVybiArdiAqIDEwOyB9XSxcbiAgICBTU1M6IFtcIm1pbGxpc2Vjb25kXCIsIHRocmVlRGlnaXRzXSxcbiAgICBkOiBlbXB0eURpZ2l0cyxcbiAgICBkZDogZW1wdHlEaWdpdHMsXG4gICAgZGRkOiBlbXB0eVdvcmQsXG4gICAgZGRkZDogZW1wdHlXb3JkLFxuICAgIE1NTTogW1wibW9udGhcIiwgd29yZCwgbW9udGhVcGRhdGUoXCJtb250aE5hbWVzU2hvcnRcIildLFxuICAgIE1NTU06IFtcIm1vbnRoXCIsIHdvcmQsIG1vbnRoVXBkYXRlKFwibW9udGhOYW1lc1wiKV0sXG4gICAgYTogYW1QbSxcbiAgICBBOiBhbVBtLFxuICAgIFpaOiB0aW1lem9uZU9mZnNldCxcbiAgICBaOiB0aW1lem9uZU9mZnNldFxufTtcbi8vIFNvbWUgY29tbW9uIGZvcm1hdCBzdHJpbmdzXG52YXIgZ2xvYmFsTWFza3MgPSB7XG4gICAgZGVmYXVsdDogXCJkZGQgTU1NIEREIFlZWVkgSEg6bW06c3NcIixcbiAgICBzaG9ydERhdGU6IFwiTS9EL1lZXCIsXG4gICAgbWVkaXVtRGF0ZTogXCJNTU0gRCwgWVlZWVwiLFxuICAgIGxvbmdEYXRlOiBcIk1NTU0gRCwgWVlZWVwiLFxuICAgIGZ1bGxEYXRlOiBcImRkZGQsIE1NTU0gRCwgWVlZWVwiLFxuICAgIGlzb0RhdGU6IFwiWVlZWS1NTS1ERFwiLFxuICAgIGlzb0RhdGVUaW1lOiBcIllZWVktTU0tRERUSEg6bW06c3NaXCIsXG4gICAgc2hvcnRUaW1lOiBcIkhIOm1tXCIsXG4gICAgbWVkaXVtVGltZTogXCJISDptbTpzc1wiLFxuICAgIGxvbmdUaW1lOiBcIkhIOm1tOnNzLlNTU1wiXG59O1xudmFyIHNldEdsb2JhbERhdGVNYXNrcyA9IGZ1bmN0aW9uIChtYXNrcykgeyByZXR1cm4gYXNzaWduKGdsb2JhbE1hc2tzLCBtYXNrcyk7IH07XG4vKioqXG4gKiBGb3JtYXQgYSBkYXRlXG4gKiBAbWV0aG9kIGZvcm1hdFxuICogQHBhcmFtIHtEYXRlfG51bWJlcn0gZGF0ZU9ialxuICogQHBhcmFtIHtzdHJpbmd9IG1hc2sgRm9ybWF0IG9mIHRoZSBkYXRlLCBpLmUuICdtbS1kZC15eScgb3IgJ3Nob3J0RGF0ZSdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICovXG52YXIgZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGVPYmosIG1hc2ssIGkxOG4pIHtcbiAgICBpZiAobWFzayA9PT0gdm9pZCAwKSB7IG1hc2sgPSBnbG9iYWxNYXNrc1tcImRlZmF1bHRcIl07IH1cbiAgICBpZiAoaTE4biA9PT0gdm9pZCAwKSB7IGkxOG4gPSB7fTsgfVxuICAgIGlmICh0eXBlb2YgZGF0ZU9iaiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBkYXRlT2JqID0gbmV3IERhdGUoZGF0ZU9iaik7XG4gICAgfVxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZU9iaikgIT09IFwiW29iamVjdCBEYXRlXVwiIHx8XG4gICAgICAgIGlzTmFOKGRhdGVPYmouZ2V0VGltZSgpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIERhdGUgcGFzcyB0byBmb3JtYXRcIik7XG4gICAgfVxuICAgIG1hc2sgPSBnbG9iYWxNYXNrc1ttYXNrXSB8fCBtYXNrO1xuICAgIHZhciBsaXRlcmFscyA9IFtdO1xuICAgIC8vIE1ha2UgbGl0ZXJhbHMgaW5hY3RpdmUgYnkgcmVwbGFjaW5nIHRoZW0gd2l0aCBAQEBcbiAgICBtYXNrID0gbWFzay5yZXBsYWNlKGxpdGVyYWwsIGZ1bmN0aW9uICgkMCwgJDEpIHtcbiAgICAgICAgbGl0ZXJhbHMucHVzaCgkMSk7XG4gICAgICAgIHJldHVybiBcIkBAQFwiO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZEkxOG5TZXR0aW5ncyA9IGFzc2lnbihhc3NpZ24oe30sIGdsb2JhbEkxOG4pLCBpMThuKTtcbiAgICAvLyBBcHBseSBmb3JtYXR0aW5nIHJ1bGVzXG4gICAgbWFzayA9IG1hc2sucmVwbGFjZSh0b2tlbiwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRGbGFnc1skMF0oZGF0ZU9iaiwgY29tYmluZWRJMThuU2V0dGluZ3MpO1xuICAgIH0pO1xuICAgIC8vIElubGluZSBsaXRlcmFsIHZhbHVlcyBiYWNrIGludG8gdGhlIGZvcm1hdHRlZCB2YWx1ZVxuICAgIHJldHVybiBtYXNrLnJlcGxhY2UoL0BAQC9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXRlcmFscy5zaGlmdCgpOyB9KTtcbn07XG4vKipcbiAqIFBhcnNlIGEgZGF0ZSBzdHJpbmcgaW50byBhIEphdmFzY3JpcHQgRGF0ZSBvYmplY3QgL1xuICogQG1ldGhvZCBwYXJzZVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGVTdHIgRGF0ZSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgRGF0ZSBwYXJzZSBmb3JtYXRcbiAqIEBwYXJhbSB7aTE4bn0gSTE4blNldHRpbmdzT3B0aW9uYWwgRnVsbCBvciBzdWJzZXQgb2YgSTE4TiBzZXR0aW5nc1xuICogQHJldHVybnMge0RhdGV8bnVsbH0gUmV0dXJucyBEYXRlIG9iamVjdC4gUmV0dXJucyBudWxsIHdoYXQgZGF0ZSBzdHJpbmcgaXMgaW52YWxpZCBvciBkb2Vzbid0IG1hdGNoIGZvcm1hdFxuICovXG5mdW5jdGlvbiBwYXJzZShkYXRlU3RyLCBmb3JtYXQsIGkxOG4pIHtcbiAgICBpZiAoaTE4biA9PT0gdm9pZCAwKSB7IGkxOG4gPSB7fTsgfVxuICAgIGlmICh0eXBlb2YgZm9ybWF0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0IGluIGZlY2hhIHBhcnNlXCIpO1xuICAgIH1cbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGZvcm1hdCBpcyBhY3R1YWxseSBhIG1hc2tcbiAgICBmb3JtYXQgPSBnbG9iYWxNYXNrc1tmb3JtYXRdIHx8IGZvcm1hdDtcbiAgICAvLyBBdm9pZCByZWd1bGFyIGV4cHJlc3Npb24gZGVuaWFsIG9mIHNlcnZpY2UsIGZhaWwgZWFybHkgZm9yIHJlYWxseSBsb25nIHN0cmluZ3NcbiAgICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1JlZ3VsYXJfZXhwcmVzc2lvbl9EZW5pYWxfb2ZfU2VydmljZV8tX1JlRG9TXG4gICAgaWYgKGRhdGVTdHIubGVuZ3RoID4gMTAwMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gRGVmYXVsdCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSB5ZWFyLlxuICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgdmFyIGRhdGVJbmZvID0ge1xuICAgICAgICB5ZWFyOiB0b2RheS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBtb250aDogMCxcbiAgICAgICAgZGF5OiAxLFxuICAgICAgICBob3VyOiAwLFxuICAgICAgICBtaW51dGU6IDAsXG4gICAgICAgIHNlY29uZDogMCxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IDAsXG4gICAgICAgIGlzUG06IG51bGwsXG4gICAgICAgIHRpbWV6b25lT2Zmc2V0OiBudWxsXG4gICAgfTtcbiAgICB2YXIgcGFyc2VJbmZvID0gW107XG4gICAgdmFyIGxpdGVyYWxzID0gW107XG4gICAgLy8gUmVwbGFjZSBhbGwgdGhlIGxpdGVyYWxzIHdpdGggQEBALiBIb3BlZnVsbHkgYSBzdHJpbmcgdGhhdCB3b24ndCBleGlzdCBpbiB0aGUgZm9ybWF0XG4gICAgdmFyIG5ld0Zvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxpdGVyYWwsIGZ1bmN0aW9uICgkMCwgJDEpIHtcbiAgICAgICAgbGl0ZXJhbHMucHVzaChyZWdleEVzY2FwZSgkMSkpO1xuICAgICAgICByZXR1cm4gXCJAQEBcIjtcbiAgICB9KTtcbiAgICB2YXIgc3BlY2lmaWVkRmllbGRzID0ge307XG4gICAgdmFyIHJlcXVpcmVkRmllbGRzID0ge307XG4gICAgLy8gQ2hhbmdlIGV2ZXJ5IHRva2VuIHRoYXQgd2UgZmluZCBpbnRvIHRoZSBjb3JyZWN0IHJlZ2V4XG4gICAgbmV3Rm9ybWF0ID0gcmVnZXhFc2NhcGUobmV3Rm9ybWF0KS5yZXBsYWNlKHRva2VuLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgdmFyIGluZm8gPSBwYXJzZUZsYWdzWyQwXTtcbiAgICAgICAgdmFyIGZpZWxkID0gaW5mb1swXSwgcmVnZXggPSBpbmZvWzFdLCByZXF1aXJlZEZpZWxkID0gaW5mb1szXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHBlcnNvbiBoYXMgc3BlY2lmaWVkIHRoZSBzYW1lIGZpZWxkIHR3aWNlLiBUaGlzIHdpbGwgbGVhZCB0byBjb25mdXNpbmcgcmVzdWx0cy5cbiAgICAgICAgaWYgKHNwZWNpZmllZEZpZWxkc1tmaWVsZF0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0LiBcIiArIGZpZWxkICsgXCIgc3BlY2lmaWVkIHR3aWNlIGluIGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBzcGVjaWZpZWRGaWVsZHNbZmllbGRdID0gdHJ1ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGFueSByZXF1aXJlZCBmaWVsZHMuIEZvciBpbnN0YW5jZSwgMTIgaG91ciB0aW1lIHJlcXVpcmVzIEFNL1BNIHNwZWNpZmllZFxuICAgICAgICBpZiAocmVxdWlyZWRGaWVsZCkge1xuICAgICAgICAgICAgcmVxdWlyZWRGaWVsZHNbcmVxdWlyZWRGaWVsZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlSW5mby5wdXNoKGluZm8pO1xuICAgICAgICByZXR1cm4gXCIoXCIgKyByZWdleCArIFwiKVwiO1xuICAgIH0pO1xuICAgIC8vIENoZWNrIGFsbCB0aGUgcmVxdWlyZWQgZmllbGRzIGFyZSBwcmVzZW50XG4gICAgT2JqZWN0LmtleXMocmVxdWlyZWRGaWVsZHMpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIGlmICghc3BlY2lmaWVkRmllbGRzW2ZpZWxkXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBmb3JtYXQuIFwiICsgZmllbGQgKyBcIiBpcyByZXF1aXJlZCBpbiBzcGVjaWZpZWQgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQWRkIGJhY2sgYWxsIHRoZSBsaXRlcmFscyBhZnRlclxuICAgIG5ld0Zvcm1hdCA9IG5ld0Zvcm1hdC5yZXBsYWNlKC9AQEAvZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl0ZXJhbHMuc2hpZnQoKTsgfSk7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGRhdGUgc3RyaW5nIG1hdGNoZXMgdGhlIGZvcm1hdC4gSWYgaXQgZG9lc24ndCByZXR1cm4gbnVsbFxuICAgIHZhciBtYXRjaGVzID0gZGF0ZVN0ci5tYXRjaChuZXcgUmVnRXhwKG5ld0Zvcm1hdCwgXCJpXCIpKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBjb21iaW5lZEkxOG5TZXR0aW5ncyA9IGFzc2lnbihhc3NpZ24oe30sIGdsb2JhbEkxOG4pLCBpMThuKTtcbiAgICAvLyBGb3IgZWFjaCBtYXRjaCwgY2FsbCB0aGUgcGFyc2VyIGZ1bmN0aW9uIGZvciB0aGF0IGRhdGUgcGFydFxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgX2EgPSBwYXJzZUluZm9baSAtIDFdLCBmaWVsZCA9IF9hWzBdLCBwYXJzZXIgPSBfYVsyXTtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VyXG4gICAgICAgICAgICA/IHBhcnNlcihtYXRjaGVzW2ldLCBjb21iaW5lZEkxOG5TZXR0aW5ncylcbiAgICAgICAgICAgIDogK21hdGNoZXNbaV07XG4gICAgICAgIC8vIElmIHRoZSBwYXJzZXIgY2FuJ3QgbWFrZSBzZW5zZSBvZiB0aGUgdmFsdWUsIHJldHVybiBudWxsXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkYXRlSW5mb1tmaWVsZF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGRhdGVJbmZvLmlzUG0gPT09IDEgJiYgZGF0ZUluZm8uaG91ciAhPSBudWxsICYmICtkYXRlSW5mby5ob3VyICE9PSAxMikge1xuICAgICAgICBkYXRlSW5mby5ob3VyID0gK2RhdGVJbmZvLmhvdXIgKyAxMjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0ZUluZm8uaXNQbSA9PT0gMCAmJiArZGF0ZUluZm8uaG91ciA9PT0gMTIpIHtcbiAgICAgICAgZGF0ZUluZm8uaG91ciA9IDA7XG4gICAgfVxuICAgIHZhciBkYXRlV2l0aG91dFRaID0gbmV3IERhdGUoZGF0ZUluZm8ueWVhciwgZGF0ZUluZm8ubW9udGgsIGRhdGVJbmZvLmRheSwgZGF0ZUluZm8uaG91ciwgZGF0ZUluZm8ubWludXRlLCBkYXRlSW5mby5zZWNvbmQsIGRhdGVJbmZvLm1pbGxpc2Vjb25kKTtcbiAgICB2YXIgdmFsaWRhdGVGaWVsZHMgPSBbXG4gICAgICAgIFtcIm1vbnRoXCIsIFwiZ2V0TW9udGhcIl0sXG4gICAgICAgIFtcImRheVwiLCBcImdldERhdGVcIl0sXG4gICAgICAgIFtcImhvdXJcIiwgXCJnZXRIb3Vyc1wiXSxcbiAgICAgICAgW1wibWludXRlXCIsIFwiZ2V0TWludXRlc1wiXSxcbiAgICAgICAgW1wic2Vjb25kXCIsIFwiZ2V0U2Vjb25kc1wiXVxuICAgIF07XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbGlkYXRlRmllbGRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgZGF0ZSBmaWVsZCBpcyB3aXRoaW4gdGhlIGFsbG93ZWQgcmFuZ2UuIEphdmFzY3JpcHQgZGF0ZXMgYWxsb3dzIHZhbHVlc1xuICAgICAgICAvLyBvdXRzaWRlIHRoZSBhbGxvd2VkIHJhbmdlLiBJZiB0aGUgdmFsdWVzIGRvbid0IG1hdGNoIHRoZSB2YWx1ZSB3YXMgaW52YWxpZFxuICAgICAgICBpZiAoc3BlY2lmaWVkRmllbGRzW3ZhbGlkYXRlRmllbGRzW2ldWzBdXSAmJlxuICAgICAgICAgICAgZGF0ZUluZm9bdmFsaWRhdGVGaWVsZHNbaV1bMF1dICE9PSBkYXRlV2l0aG91dFRaW3ZhbGlkYXRlRmllbGRzW2ldWzFdXSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0ZUluZm8udGltZXpvbmVPZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGF0ZVdpdGhvdXRUWjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGRhdGVJbmZvLnllYXIsIGRhdGVJbmZvLm1vbnRoLCBkYXRlSW5mby5kYXksIGRhdGVJbmZvLmhvdXIsIGRhdGVJbmZvLm1pbnV0ZSAtIGRhdGVJbmZvLnRpbWV6b25lT2Zmc2V0LCBkYXRlSW5mby5zZWNvbmQsIGRhdGVJbmZvLm1pbGxpc2Vjb25kKSk7XG59XG52YXIgZmVjaGEgPSB7XG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIGRlZmF1bHRJMThuOiBkZWZhdWx0STE4bixcbiAgICBzZXRHbG9iYWxEYXRlSTE4bjogc2V0R2xvYmFsRGF0ZUkxOG4sXG4gICAgc2V0R2xvYmFsRGF0ZU1hc2tzOiBzZXRHbG9iYWxEYXRlTWFza3Ncbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZlY2hhO1xuZXhwb3J0IHsgYXNzaWduLCBmb3JtYXQsIHBhcnNlLCBkZWZhdWx0STE4biwgc2V0R2xvYmFsRGF0ZUkxOG4sIHNldEdsb2JhbERhdGVNYXNrcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVjaGEuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xvcnMgPSByZXF1aXJlKCdjb2xvcnMvc2FmZScpO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcbi8qXG4gKiBmdW5jdGlvbiB1bmNvbG9yaXplIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgdW5jb2xvcml6ZSBGb3JtYXQgdGhhdCBzdHJpcHMgY29sb3JzXG4gKiBmcm9tIGBpbmZvYCBvYmplY3RzLiBUaGlzIHdhcyBwcmV2aW91c2x5IGV4cG9zZWQgYXMgeyBzdHJpcENvbG9yczogdHJ1ZSB9XG4gKiB0byB0cmFuc3BvcnRzIGluIGB3aW5zdG9uIDwgMy4wLjBgLlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8sIG9wdHMpIHtcbiAgaWYgKG9wdHMubGV2ZWwgIT09IGZhbHNlKSB7XG4gICAgaW5mby5sZXZlbCA9IGNvbG9ycy5zdHJpcChpbmZvLmxldmVsKTtcbiAgfVxuXG4gIGlmIChvcHRzLm1lc3NhZ2UgIT09IGZhbHNlKSB7XG4gICAgaW5mby5tZXNzYWdlID0gY29sb3JzLnN0cmlwKGluZm8ubWVzc2FnZSk7XG4gIH1cblxuICBpZiAob3B0cy5yYXcgIT09IGZhbHNlICYmIGluZm9bTUVTU0FHRV0pIHtcbiAgICBpbmZvW01FU1NBR0VdID0gY29sb3JzLnN0cmlwKGluZm9bTUVTU0FHRV0pO1xuICB9XG5cbiAgcmV0dXJuIGluZm87XG59KTsiLCIvKipcbiAqIHRyYW5zcG9ydHMuanM6IFNldCBvZiBhbGwgdHJhbnNwb3J0cyBXaW5zdG9uIGtub3dzIGFib3V0LlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7Q29uc29sZX1cbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0NvbnNvbGUnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29uc29sZScpO1xuICB9XG59KTtcbi8qKlxuICogVE9ETzogYWRkIHByb3BlcnR5IGRlc2NyaXB0aW9uLlxuICogQHR5cGUge0ZpbGV9XG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdGaWxlJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2ZpbGUnKTtcbiAgfVxufSk7XG4vKipcbiAqIFRPRE86IGFkZCBwcm9wZXJ0eSBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtIdHRwfVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnSHR0cCcsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9odHRwJyk7XG4gIH1cbn0pO1xuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7U3RyZWFtfVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU3RyZWFtJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL3N0cmVhbScpO1xuICB9XG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbi8qXG4gKiBjb25zb2xlLmpzOiBUcmFuc3BvcnQgZm9yIG91dHB1dHRpbmcgdG8gdGhlIGNvbnNvbGUuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIG9zID0gcmVxdWlyZSgnb3MnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBMRVZFTCA9IF9yZXF1aXJlLkxFVkVMLFxuICAgIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xuXG52YXIgVHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnd2luc3Rvbi10cmFuc3BvcnQnKTtcbi8qKlxuICogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIHRoZSBjb25zb2xlLlxuICogQHR5cGUge0NvbnNvbGV9XG4gKiBAZXh0ZW5kcyB7VHJhbnNwb3J0U3RyZWFtfVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFuc3BvcnRTdHJlYW0pIHtcbiAgX2luaGVyaXRzKENvbnNvbGUsIF9UcmFuc3BvcnRTdHJlYW0pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ29uc29sZSk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgQ29uc29sZSB0cmFuc3BvcnQgb2JqZWN0IHJlc3BvbnNpYmxlIGZvclxuICAgKiBwZXJzaXN0aW5nIGxvZyBtZXNzYWdlcyBhbmQgbWV0YWRhdGEgdG8gYSB0ZXJtaW5hbCBvciBUVFkuXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9ucyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICovXG4gIGZ1bmN0aW9uIENvbnNvbGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnNvbGUpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTsgLy8gRXhwb3NlIHRoZSBuYW1lIG9mIHRoaXMgVHJhbnNwb3J0IG9uIHRoZSBwcm90b3R5cGVcblxuICAgIF90aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgJ2NvbnNvbGUnO1xuICAgIF90aGlzLnN0ZGVyckxldmVscyA9IF90aGlzLl9zdHJpbmdBcnJheVRvU2V0KG9wdGlvbnMuc3RkZXJyTGV2ZWxzKTtcbiAgICBfdGhpcy5jb25zb2xlV2FybkxldmVscyA9IF90aGlzLl9zdHJpbmdBcnJheVRvU2V0KG9wdGlvbnMuY29uc29sZVdhcm5MZXZlbHMpO1xuICAgIF90aGlzLmVvbCA9IG9wdGlvbnMuZW9sIHx8IG9zLkVPTDtcblxuICAgIF90aGlzLnNldE1heExpc3RlbmVycygzMCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvcmUgbG9nZ2luZyBtZXRob2QgZXhwb3NlZCB0byBXaW5zdG9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKENvbnNvbGUsIFt7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2coaW5mbywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoJ2xvZ2dlZCcsIGluZm8pO1xuICAgICAgfSk7IC8vIFJlbWFyazogd2hhdCBpZiB0aGVyZSBpcyBubyByYXcuLi4/XG5cbiAgICAgIGlmICh0aGlzLnN0ZGVyckxldmVsc1tpbmZvW0xFVkVMXV0pIHtcbiAgICAgICAgaWYgKGNvbnNvbGUuX3N0ZGVycikge1xuICAgICAgICAgIC8vIE5vZGUuanMgbWFwcyBgcHJvY2Vzcy5zdGRlcnJgIHRvIGBjb25zb2xlLl9zdGRlcnJgLlxuICAgICAgICAgIGNvbnNvbGUuX3N0ZGVyci53cml0ZShcIlwiLmNvbmNhdChpbmZvW01FU1NBR0VdKS5jb25jYXQodGhpcy5lb2wpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmVycm9yIGFkZHMgYSBuZXdsaW5lXG4gICAgICAgICAgY29uc29sZS5lcnJvcihpbmZvW01FU1NBR0VdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FsbGJhY2stcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29uc29sZVdhcm5MZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgICAgIGlmIChjb25zb2xlLl9zdGRlcnIpIHtcbiAgICAgICAgICAvLyBOb2RlLmpzIG1hcHMgYHByb2Nlc3Muc3RkZXJyYCB0byBgY29uc29sZS5fc3RkZXJyYC5cbiAgICAgICAgICAvLyBpbiBOb2RlLmpzIGNvbnNvbGUud2FybiBpcyBhbiBhbGlhcyBmb3IgY29uc29sZS5lcnJvclxuICAgICAgICAgIGNvbnNvbGUuX3N0ZGVyci53cml0ZShcIlwiLmNvbmNhdChpbmZvW01FU1NBR0VdKS5jb25jYXQodGhpcy5lb2wpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25zb2xlLndhcm4gYWRkcyBhIG5ld2xpbmVcbiAgICAgICAgICBjb25zb2xlLndhcm4oaW5mb1tNRVNTQUdFXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uc29sZS5fc3Rkb3V0KSB7XG4gICAgICAgIC8vIE5vZGUuanMgbWFwcyBgcHJvY2Vzcy5zdGRvdXRgIHRvIGBjb25zb2xlLl9zdGRvdXRgLlxuICAgICAgICBjb25zb2xlLl9zdGRvdXQud3JpdGUoXCJcIi5jb25jYXQoaW5mb1tNRVNTQUdFXSkuY29uY2F0KHRoaXMuZW9sKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyBhZGRzIGEgbmV3bGluZS5cbiAgICAgICAgY29uc29sZS5sb2coaW5mb1tNRVNTQUdFXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgU2V0LWxpa2Ugb2JqZWN0IHdpdGggc3RyQXJyYXkncyBlbGVtZW50cyBhcyBrZXlzIChlYWNoIHdpdGggdGhlXG4gICAgICogdmFsdWUgdHJ1ZSkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc3RyQXJyYXkgLSBBcnJheSBvZiBTZXQtZWxlbWVudHMgYXMgc3RyaW5ncy5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IFtlcnJNc2ddIC0gQ3VzdG9tIGVycm9yIG1lc3NhZ2UgdGhyb3duIG9uIGludmFsaWQgaW5wdXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfc3RyaW5nQXJyYXlUb1NldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RyaW5nQXJyYXlUb1NldChzdHJBcnJheSwgZXJyTXNnKSB7XG4gICAgICBpZiAoIXN0ckFycmF5KSByZXR1cm4ge307XG4gICAgICBlcnJNc2cgPSBlcnJNc2cgfHwgJ0Nhbm5vdCBtYWtlIHNldCBmcm9tIHR5cGUgb3RoZXIgdGhhbiBBcnJheSBvZiBzdHJpbmcgZWxlbWVudHMnO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3RyQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyQXJyYXkucmVkdWNlKGZ1bmN0aW9uIChzZXQsIGVsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRbZWxdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29uc29sZTtcbn0oVHJhbnNwb3J0U3RyZWFtKTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwiLyohIHNhZmUtYnVmZmVyLiBNSVQgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXIucHJvdG90eXBlKVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gICAgTEVWRUwgPSBfcmVxdWlyZS5MRVZFTDtcblxudmFyIFRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJy4vJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBMZWdhY3lUcmFuc3BvcnRTdHJlYW0uIFRoaXMgaXMgYW4gaW50ZXJuYWxcbiAqIHdyYXBwZXIgYHdpbnN0b24gPj0gM2AgdXNlcyB0byB3cmFwIG9sZGVyIHRyYW5zcG9ydHMgaW1wbGVtZW50aW5nXG4gKiBsb2cobGV2ZWwsIG1lc3NhZ2UsIG1ldGEpLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIFRyYW5zcG9ydFN0cmVhbSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7VHJhbnNwb3R9IG9wdGlvbnMudHJhbnNwb3J0IC0gd2luc3RvbkAyIG9yIG9sZGVyIFRyYW5zcG9ydCB0byB3cmFwLlxuICovXG5cbnZhciBMZWdhY3lUcmFuc3BvcnRTdHJlYW0gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIExlZ2FjeVRyYW5zcG9ydFN0cmVhbSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIFRyYW5zcG9ydFN0cmVhbS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIW9wdGlvbnMudHJhbnNwb3J0IHx8IHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydC5sb2cgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHJhbnNwb3J0LCBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGEgbG9nIG1ldGhvZC4nKTtcbiAgfVxuXG4gIHRoaXMudHJhbnNwb3J0ID0gb3B0aW9ucy50cmFuc3BvcnQ7XG4gIHRoaXMubGV2ZWwgPSB0aGlzLmxldmVsIHx8IG9wdGlvbnMudHJhbnNwb3J0LmxldmVsO1xuICB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgPSB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgfHwgb3B0aW9ucy50cmFuc3BvcnQuaGFuZGxlRXhjZXB0aW9ucztcblxuICAvLyBEaXNwbGF5IG91ciBkZXByZWNhdGlvbiBub3RpY2UuXG4gIHRoaXMuX2RlcHJlY2F0ZWQoKTtcblxuICAvLyBQcm9wZXJseSBidWJibGUgdXAgZXJyb3JzIGZyb20gdGhlIHRyYW5zcG9ydCB0byB0aGVcbiAgLy8gTGVnYWN5VHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLCBidXQgb25seSBvbmNlIG5vIG1hdHRlciBob3cgbWFueSB0aW1lc1xuICAvLyB0aGlzIHRyYW5zcG9ydCBpcyBzaGFyZWQuXG4gIGZ1bmN0aW9uIHRyYW5zcG9ydEVycm9yKGVycikge1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIsIHRoaXMudHJhbnNwb3J0KTtcbiAgfVxuXG4gIGlmICghdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvciA9IHRyYW5zcG9ydEVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmFuc3BvcnQub24oJ2Vycm9yJywgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpO1xuICB9XG59O1xuXG4vKlxuICogSW5oZXJpdCBmcm9tIFRyYW5zcG9ydFN0cmVhbSB1c2luZyBOb2RlLmpzIGJ1aWx0LWluc1xuICovXG51dGlsLmluaGVyaXRzKExlZ2FjeVRyYW5zcG9ydFN0cmVhbSwgVHJhbnNwb3J0U3RyZWFtKTtcblxuLyoqXG4gKiBXcml0ZXMgdGhlIGluZm8gb2JqZWN0IHRvIG91ciB0cmFuc3BvcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge21peGVkfSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5zaWxlbnQgfHwgaW5mby5leGNlcHRpb24gPT09IHRydWUgJiYgIXRoaXMuaGFuZGxlRXhjZXB0aW9ucykge1xuICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgfVxuXG4gIC8vIFJlbWFyazogVGhpcyBoYXMgdG8gYmUgaGFuZGxlZCBpbiB0aGUgYmFzZSB0cmFuc3BvcnQgbm93IGJlY2F1c2Ugd2VcbiAgLy8gY2Fubm90IGNvbmRpdGlvbmFsbHkgd3JpdGUgdG8gb3VyIHBpcGUgdGFyZ2V0cyBhcyBzdHJlYW0uXG4gIGlmICghdGhpcy5sZXZlbCB8fCB0aGlzLmxldmVsc1t0aGlzLmxldmVsXSA+PSB0aGlzLmxldmVsc1tpbmZvW0xFVkVMXV0pIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5sb2coaW5mb1tMRVZFTF0sIGluZm8ubWVzc2FnZSwgaW5mbywgdGhpcy5fbm9wKTtcbiAgfVxuXG4gIGNhbGxiYWNrKG51bGwpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgdGhlIGJhdGNoIG9mIGluZm8gb2JqZWN0cyAoaS5lLiBcIm9iamVjdCBjaHVua3NcIikgdG8gb3VyIHRyYW5zcG9ydFxuICogaW5zdGFuY2UgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVjZXNzYXJ5IGZpbHRlcmluZy5cbiAqIEBwYXJhbSB7bWl4ZWR9IGNodW5rcyAtIFRPRE86IGFkZCBwYXJhbXMgZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbXMgZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybnMgZGVzY3JpcHRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl93cml0ZXYgPSBmdW5jdGlvbiBfd3JpdGV2KGNodW5rcywgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5fYWNjZXB0KGNodW5rc1tpXSkpIHtcbiAgICAgIHRoaXMudHJhbnNwb3J0LmxvZyhjaHVua3NbaV0uY2h1bmtbTEVWRUxdLCBjaHVua3NbaV0uY2h1bmsubWVzc2FnZSwgY2h1bmtzW2ldLmNodW5rLCB0aGlzLl9ub3ApO1xuICAgICAgY2h1bmtzW2ldLmNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xufTtcblxuLyoqXG4gKiBEaXNwbGF5cyBhIGRlcHJlY2F0aW9uIG5vdGljZS4gRGVmaW5lZCBhcyBhIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZVxuICogb3ZlcnJpZGVuIGluIHRlc3RzLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fZGVwcmVjYXRlZCA9IGZ1bmN0aW9uIF9kZXByZWNhdGVkKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLmVycm9yKFt0aGlzLnRyYW5zcG9ydC5uYW1lICsgJyBpcyBhIGxlZ2FjeSB3aW5zdG9uIHRyYW5zcG9ydC4gQ29uc2lkZXIgdXBncmFkaW5nOiAnLCAnLSBVcGdyYWRlIGRvY3M6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3Rvbi9ibG9iL21hc3Rlci9VUEdSQURFLTMuMC5tZCddLmpvaW4oJ1xcbicpKTtcbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZXJyb3IgaGFuZGxpbmcgc3RhdGUgb24gdGhlIGxlZ2FjeSB0cmFuc3BvcnQgYXNzb2NpYXRlZFxuICogd2l0aCB0aGlzIGluc3RhbmNlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuICBpZiAodGhpcy50cmFuc3BvcnQuY2xvc2UpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yKSB7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpO1xuICAgIHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yID0gbnVsbDtcbiAgfVxufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5LG1heC1zdGF0ZW1lbnRzICovXG5cbi8qKlxuICogZmlsZS5qczogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGEgbG9jYWwgbG9nIGZpbGUuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBhc3luY1NlcmllcyA9IHJlcXVpcmUoJ2FzeW5jL3NlcmllcycpO1xuXG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLFxuICAgIFN0cmVhbSA9IF9yZXF1aXJlMi5TdHJlYW0sXG4gICAgUGFzc1Rocm91Z2ggPSBfcmVxdWlyZTIuUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdAZGFiaC9kaWFnbm9zdGljcycpKCd3aW5zdG9uOmZpbGUnKTtcblxudmFyIG9zID0gcmVxdWlyZSgnb3MnKTtcblxudmFyIHRhaWxGaWxlID0gcmVxdWlyZSgnLi4vdGFpbC1maWxlJyk7XG4vKipcbiAqIFRyYW5zcG9ydCBmb3Igb3V0cHV0dGluZyB0byBhIGxvY2FsIGxvZyBmaWxlLlxuICogQHR5cGUge0ZpbGV9XG4gKiBAZXh0ZW5kcyB7VHJhbnNwb3J0U3RyZWFtfVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFuc3BvcnRTdHJlYW0pIHtcbiAgX2luaGVyaXRzKEZpbGUsIF9UcmFuc3BvcnRTdHJlYW0pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRmlsZSk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgRmlsZSB0cmFuc3BvcnQgb2JqZWN0IHJlc3BvbnNpYmxlIGZvclxuICAgKiBwZXJzaXN0aW5nIGxvZyBtZXNzYWdlcyBhbmQgbWV0YWRhdGEgdG8gb25lIG9yIG1vcmUgZmlsZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICovXG4gIGZ1bmN0aW9uIEZpbGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGUpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTsgLy8gRXhwb3NlIHRoZSBuYW1lIG9mIHRoaXMgVHJhbnNwb3J0IG9uIHRoZSBwcm90b3R5cGUuXG5cbiAgICBfdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8ICdmaWxlJzsgLy8gSGVscGVyIGZ1bmN0aW9uIHdoaWNoIHRocm93cyBhbiBgRXJyb3JgIGluIHRoZSBldmVudCB0aGF0IGFueSBvZiB0aGVcbiAgICAvLyByZXN0IG9mIHRoZSBhcmd1bWVudHMgaXMgcHJlc2VudCBpbiBgb3B0aW9uc2AuXG5cbiAgICBmdW5jdGlvbiB0aHJvd0lmKHRhcmdldCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgYXJncy5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmIChvcHRpb25zW25hbWVdKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBcIi5jb25jYXQobmFtZSwgXCIgYW5kIFwiKS5jb25jYXQodGFyZ2V0LCBcIiB0b2dldGhlclwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gLy8gU2V0dXAgdGhlIGJhc2Ugc3RyZWFtIHRoYXQgYWx3YXlzIGdldHMgcGlwZWQgdG8gdG8gaGFuZGxlIGJ1ZmZlcmluZy5cblxuXG4gICAgX3RoaXMuX3N0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuXG4gICAgX3RoaXMuX3N0cmVhbS5zZXRNYXhMaXN0ZW5lcnMoMzApOyAvLyBCaW5kIHRoaXMgY29udGV4dCBmb3IgbGlzdGVuZXIgbWV0aG9kcy5cblxuXG4gICAgX3RoaXMuX29uRXJyb3IgPSBfdGhpcy5fb25FcnJvci5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcblxuICAgIGlmIChvcHRpb25zLmZpbGVuYW1lIHx8IG9wdGlvbnMuZGlybmFtZSkge1xuICAgICAgdGhyb3dJZignZmlsZW5hbWUgb3IgZGlybmFtZScsICdzdHJlYW0nKTtcbiAgICAgIF90aGlzLl9iYXNlbmFtZSA9IF90aGlzLmZpbGVuYW1lID0gb3B0aW9ucy5maWxlbmFtZSA/IHBhdGguYmFzZW5hbWUob3B0aW9ucy5maWxlbmFtZSkgOiAnd2luc3Rvbi5sb2cnO1xuICAgICAgX3RoaXMuZGlybmFtZSA9IG9wdGlvbnMuZGlybmFtZSB8fCBwYXRoLmRpcm5hbWUob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucy5vcHRpb25zIHx8IHtcbiAgICAgICAgZmxhZ3M6ICdhJ1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc3RyZWFtKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdvcHRpb25zLnN0cmVhbSB3aWxsIGJlIHJlbW92ZWQgaW4gd2luc3RvbkA0LiBVc2Ugd2luc3Rvbi50cmFuc3BvcnRzLlN0cmVhbScpO1xuICAgICAgdGhyb3dJZignc3RyZWFtJywgJ2ZpbGVuYW1lJywgJ21heHNpemUnKTtcbiAgICAgIF90aGlzLl9kZXN0ID0gX3RoaXMuX3N0cmVhbS5waXBlKF90aGlzLl9zZXR1cFN0cmVhbShvcHRpb25zLnN0cmVhbSkpO1xuICAgICAgX3RoaXMuZGlybmFtZSA9IHBhdGguZGlybmFtZShfdGhpcy5fZGVzdC5wYXRoKTsgLy8gV2UgbmVlZCB0byBsaXN0ZW4gZm9yIGRyYWluIGV2ZW50cyB3aGVuIHdyaXRlKCkgcmV0dXJucyBmYWxzZS4gVGhpc1xuICAgICAgLy8gY2FuIG1ha2Ugbm9kZSBtYWQgYXQgdGltZXMuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxvZyB0byBmaWxlIHdpdGhvdXQgZmlsZW5hbWUgb3Igc3RyZWFtLicpO1xuICAgIH1cblxuICAgIF90aGlzLm1heHNpemUgPSBvcHRpb25zLm1heHNpemUgfHwgbnVsbDtcbiAgICBfdGhpcy5yb3RhdGlvbkZvcm1hdCA9IG9wdGlvbnMucm90YXRpb25Gb3JtYXQgfHwgZmFsc2U7XG4gICAgX3RoaXMuemlwcGVkQXJjaGl2ZSA9IG9wdGlvbnMuemlwcGVkQXJjaGl2ZSB8fCBmYWxzZTtcbiAgICBfdGhpcy5tYXhGaWxlcyA9IG9wdGlvbnMubWF4RmlsZXMgfHwgbnVsbDtcbiAgICBfdGhpcy5lb2wgPSBvcHRpb25zLmVvbCB8fCBvcy5FT0w7XG4gICAgX3RoaXMudGFpbGFibGUgPSBvcHRpb25zLnRhaWxhYmxlIHx8IGZhbHNlOyAvLyBJbnRlcm5hbCBzdGF0ZSB2YXJpYWJsZXMgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgZmlsZXMgdGhpcyBpbnN0YW5jZVxuICAgIC8vIGhhcyBjcmVhdGVkIGFuZCB0aGUgY3VycmVudCBzaXplIChpbiBieXRlcykgb2YgdGhlIGN1cnJlbnQgbG9nZmlsZS5cblxuICAgIF90aGlzLl9zaXplID0gMDtcbiAgICBfdGhpcy5fcGVuZGluZ1NpemUgPSAwO1xuICAgIF90aGlzLl9jcmVhdGVkID0gMDtcbiAgICBfdGhpcy5fZHJhaW4gPSBmYWxzZTtcbiAgICBfdGhpcy5fb3BlbmluZyA9IGZhbHNlO1xuICAgIF90aGlzLl9lbmRpbmcgPSBmYWxzZTtcbiAgICBpZiAoX3RoaXMuZGlybmFtZSkgX3RoaXMuX2NyZWF0ZUxvZ0RpcklmTm90RXhpc3QoX3RoaXMuZGlybmFtZSk7XG5cbiAgICBfdGhpcy5vcGVuKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmlsZSwgW3tcbiAgICBrZXk6IFwiZmluaXNoSWZFbmRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoSWZFbmRpbmcoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2VuZGluZykge1xuICAgICAgICBpZiAodGhpcy5fb3BlbmluZykge1xuICAgICAgICAgIHRoaXMub25jZSgnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5fc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5lbWl0KCdmaW5pc2gnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zdHJlYW0uZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zdHJlYW0ub25jZSgnZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5lbWl0KCdmaW5pc2gnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zdHJlYW0uZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29yZSBsb2dnaW5nIG1ldGhvZCBleHBvc2VkIHRvIFdpbnN0b24uIE1ldGFkYXRhIGlzIG9wdGlvbmFsLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKGluZm8pIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAvLyBSZW1hcms6IChqY3J1Z3p6KSBXaGF0IGlzIG5lY2Vzc2FyeSBhYm91dCB0aGlzIGNhbGxiYWNrKG51bGwsIHRydWUpIG5vd1xuICAgICAgLy8gd2hlbiB0aGlua2luZyBhYm91dCAzLng/IFNob3VsZCBzaWxlbnQgYmUgaGFuZGxlZCBpbiB0aGUgYmFzZVxuICAgICAgLy8gVHJhbnNwb3J0U3RyZWFtIF93cml0ZSBtZXRob2Q/XG4gICAgICBpZiAodGhpcy5zaWxlbnQpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIE91dHB1dCBzdHJlYW0gYnVmZmVyIGlzIGZ1bGwgYW5kIGhhcyBhc2tlZCB1cyB0byB3YWl0IGZvciB0aGUgZHJhaW4gZXZlbnRcblxuXG4gICAgICBpZiAodGhpcy5fZHJhaW4pIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5fZHJhaW4gPSBmYWxzZTtcblxuICAgICAgICAgIF90aGlzMy5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yb3RhdGUpIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtLm9uY2UoJ3JvdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMuX3JvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgX3RoaXMzLmxvZyhpbmZvLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gR3JhYiB0aGUgcmF3IHN0cmluZyBhbmQgYXBwZW5kIHRoZSBleHBlY3RlZCBFT0wuXG5cblxuICAgICAgdmFyIG91dHB1dCA9IFwiXCIuY29uY2F0KGluZm9bTUVTU0FHRV0pLmNvbmNhdCh0aGlzLmVvbCk7XG4gICAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuYnl0ZUxlbmd0aChvdXRwdXQpOyAvLyBBZnRlciB3ZSBoYXZlIHdyaXR0ZW4gdG8gdGhlIFBhc3NUaHJvdWdoIGNoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkXG4gICAgICAvLyB0byByb3RhdGUgdG8gdGhlIG5leHQgZmlsZS5cbiAgICAgIC8vXG4gICAgICAvLyBSZW1hcms6IFRoaXMgZ2V0cyBjYWxsZWQgdG9vIGVhcmx5IGFuZCBkb2VzIG5vdCBkZXBpY3Qgd2hlbiBkYXRhXG4gICAgICAvLyBoYXMgYmVlbiBhY3R1YWxseSBmbHVzaGVkIHRvIGRpc2suXG5cbiAgICAgIGZ1bmN0aW9uIGxvZ2dlZCgpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fc2l6ZSArPSBieXRlcztcbiAgICAgICAgdGhpcy5fcGVuZGluZ1NpemUgLT0gYnl0ZXM7XG4gICAgICAgIGRlYnVnKCdsb2dnZWQgJXMgJXMnLCB0aGlzLl9zaXplLCBvdXRwdXQpO1xuICAgICAgICB0aGlzLmVtaXQoJ2xvZ2dlZCcsIGluZm8pOyAvLyBEbyBub3QgYXR0ZW1wdCB0byByb3RhdGUgZmlsZXMgd2hpbGUgb3BlbmluZ1xuXG4gICAgICAgIGlmICh0aGlzLl9vcGVuaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkIHRvIGVuZCB0aGUgc3RyZWFtIGFuZCBjcmVhdGUgYSBuZXcgb25lLlxuXG5cbiAgICAgICAgaWYgKCF0aGlzLl9uZWVkc05ld0ZpbGUoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBFbmQgdGhlIGN1cnJlbnQgc3RyZWFtLCBlbnN1cmUgaXQgZmx1c2hlcyBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgICAgLy8gVGhpcyBjb3VsZCBwb3RlbnRpYWxseSBiZSBvcHRpbWl6ZWQgdG8gbm90IHJ1biBhIHN0YXQgY2FsbCBidXQgaXRzXG4gICAgICAgIC8vIHRoZSBzYWZlc3Qgd2F5IHNpbmNlIHdlIGFyZSBzdXBwb3J0aW5nIGBtYXhGaWxlc2AuXG5cblxuICAgICAgICB0aGlzLl9yb3RhdGUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2VuZFN0cmVhbShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5fcm90YXRlRmlsZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gS2VlcCB0cmFjayBvZiB0aGUgcGVuZGluZyBieXRlcyBiZWluZyB3cml0dGVuIHdoaWxlIGZpbGVzIGFyZSBvcGVuaW5nXG4gICAgICAvLyBpbiBvcmRlciB0byBwcm9wZXJseSByb3RhdGUgdGhlIFBhc3NUaHJvdWdoIHRoaXMuX3N0cmVhbSB3aGVuIHRoZSBmaWxlXG4gICAgICAvLyBldmVudHVhbGx5IGRvZXMgb3Blbi5cblxuXG4gICAgICB0aGlzLl9wZW5kaW5nU2l6ZSArPSBieXRlcztcblxuICAgICAgaWYgKHRoaXMuX29wZW5pbmcgJiYgIXRoaXMucm90YXRlZFdoaWxlT3BlbmluZyAmJiB0aGlzLl9uZWVkc05ld0ZpbGUodGhpcy5fc2l6ZSArIHRoaXMuX3BlbmRpbmdTaXplKSkge1xuICAgICAgICB0aGlzLnJvdGF0ZWRXaGlsZU9wZW5pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgd3JpdHRlbiA9IHRoaXMuX3N0cmVhbS53cml0ZShvdXRwdXQsIGxvZ2dlZC5iaW5kKHRoaXMpKTtcblxuICAgICAgaWYgKCF3cml0dGVuKSB7XG4gICAgICAgIHRoaXMuX2RyYWluID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9zdHJlYW0ub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLl9kcmFpbiA9IGZhbHNlO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIH1cblxuICAgICAgZGVidWcoJ3dyaXR0ZW4nLCB3cml0dGVuLCB0aGlzLl9kcmFpbik7XG4gICAgICB0aGlzLmZpbmlzaElmRW5kaW5nKCk7XG4gICAgICByZXR1cm4gd3JpdHRlbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVlcnkgdGhlIHRyYW5zcG9ydC4gT3B0aW9ucyBvYmplY3QgaXMgb3B0aW9uYWwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBMb2dnbHktbGlrZSBxdWVyeSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ29udGludWF0aW9uIHRvIHJlc3BvbmQgdG8gd2hlbiBjb21wbGV0ZS5cbiAgICAgKiBUT0RPOiBSZWZhY3RvciBtZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInF1ZXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXJ5KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgPSBub3JtYWxpemVRdWVyeShvcHRpb25zKTtcbiAgICAgIHZhciBmaWxlID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgdGhpcy5maWxlbmFtZSk7XG4gICAgICB2YXIgYnVmZiA9ICcnO1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciByb3cgPSAwO1xuICAgICAgdmFyIHN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZSwge1xuICAgICAgICBlbmNvZGluZzogJ3V0ZjgnXG4gICAgICB9KTtcbiAgICAgIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChzdHJlYW0ucmVhZGFibGUpIHtcbiAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnIuY29kZSAhPT0gJ0VOT0VOVCcgPyBjYWxsYmFjayhlcnIpIDogY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICB9KTtcbiAgICAgIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGRhdGEgPSAoYnVmZiArIGRhdGEpLnNwbGl0KC9cXG4rLyk7XG4gICAgICAgIHZhciBsID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMuc3RhcnQgfHwgcm93ID49IG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgICAgIGFkZChkYXRhW2ldKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByb3crKztcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmYgPSBkYXRhW2xdO1xuICAgICAgfSk7XG4gICAgICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoYnVmZikge1xuICAgICAgICAgIGFkZChidWZmLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm9yZGVyID09PSAnZGVzYycpIHtcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5yZXZlcnNlKCk7XG4gICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbGxiYWNrLXJldHVyblxuXG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBhZGQoYnVmZiwgYXR0ZW1wdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBsb2cgPSBKU09OLnBhcnNlKGJ1ZmYpO1xuXG4gICAgICAgICAgaWYgKGNoZWNrKGxvZykpIHtcbiAgICAgICAgICAgIHB1c2gobG9nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoIWF0dGVtcHQpIHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwdXNoKGxvZykge1xuICAgICAgICBpZiAob3B0aW9ucy5yb3dzICYmIHJlc3VsdHMubGVuZ3RoID49IG9wdGlvbnMucm93cyAmJiBvcHRpb25zLm9yZGVyICE9PSAnZGVzYycpIHtcbiAgICAgICAgICBpZiAoc3RyZWFtLnJlYWRhYmxlKSB7XG4gICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmZpZWxkcykge1xuICAgICAgICAgIGxvZyA9IG9wdGlvbnMuZmllbGRzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gbG9nW2tleV07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm9yZGVyID09PSAnZGVzYycpIHtcbiAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPj0gb3B0aW9ucy5yb3dzKSB7XG4gICAgICAgICAgICByZXN1bHRzLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKGxvZyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrKGxvZykge1xuICAgICAgICBpZiAoIWxvZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdHlwZW9mKGxvZykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRpbWUgPSBuZXcgRGF0ZShsb2cudGltZXN0YW1wKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5mcm9tICYmIHRpbWUgPCBvcHRpb25zLmZyb20gfHwgb3B0aW9ucy51bnRpbCAmJiB0aW1lID4gb3B0aW9ucy51bnRpbCB8fCBvcHRpb25zLmxldmVsICYmIG9wdGlvbnMubGV2ZWwgIT09IGxvZy5sZXZlbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub3JtYWxpemVRdWVyeShvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBsaW1pdFxuXG4gICAgICAgIG9wdGlvbnMucm93cyA9IG9wdGlvbnMucm93cyB8fCBvcHRpb25zLmxpbWl0IHx8IDEwOyAvLyBzdGFydGluZyByb3cgb2Zmc2V0XG5cbiAgICAgICAgb3B0aW9ucy5zdGFydCA9IG9wdGlvbnMuc3RhcnQgfHwgMDsgLy8gbm93XG5cbiAgICAgICAgb3B0aW9ucy51bnRpbCA9IG9wdGlvbnMudW50aWwgfHwgbmV3IERhdGUoKTtcblxuICAgICAgICBpZiAoX3R5cGVvZihvcHRpb25zLnVudGlsKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBvcHRpb25zLnVudGlsID0gbmV3IERhdGUob3B0aW9ucy51bnRpbCk7XG4gICAgICAgIH0gLy8gbm93IC0gMjRcblxuXG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSB8fCBvcHRpb25zLnVudGlsIC0gMjQgKiA2MCAqIDYwICogMTAwMDtcblxuICAgICAgICBpZiAoX3R5cGVvZihvcHRpb25zLmZyb20pICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIG9wdGlvbnMuZnJvbSA9IG5ldyBEYXRlKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIH0gLy8gJ2FzYycgb3IgJ2Rlc2MnXG5cblxuICAgICAgICBvcHRpb25zLm9yZGVyID0gb3B0aW9ucy5vcmRlciB8fCAnZGVzYyc7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbG9nIHN0cmVhbSBmb3IgdGhpcyB0cmFuc3BvcnQuIE9wdGlvbnMgb2JqZWN0IGlzIG9wdGlvbmFsLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU3RyZWFtIG9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge1N0cmVhbX0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIFRPRE86IFJlZmFjdG9yIG1lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RyZWFtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0cmVhbSgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBmaWxlID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgdGhpcy5maWxlbmFtZSk7XG4gICAgICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbSgpO1xuICAgICAgdmFyIHRhaWwgPSB7XG4gICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgIHN0YXJ0OiBvcHRpb25zLnN0YXJ0XG4gICAgICB9O1xuICAgICAgc3RyZWFtLmRlc3Ryb3kgPSB0YWlsRmlsZSh0YWlsLCBmdW5jdGlvbiAoZXJyLCBsaW5lKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBsaW5lKTtcbiAgICAgICAgICBsaW5lID0gSlNPTi5wYXJzZShsaW5lKTtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnbG9nJywgbGluZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdG8gc2VlIHRoZSBmaWxlc2l6ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHdlIGRvIG5vdCBoYXZlIGEgZmlsZW5hbWUgdGhlbiB3ZSB3ZXJlIHBhc3NlZCBhIHN0cmVhbSBhbmRcbiAgICAgIC8vIGRvbid0IG5lZWQgdG8ga2VlcCB0cmFjayBvZiBzaXplLlxuICAgICAgaWYgKCF0aGlzLmZpbGVuYW1lKSByZXR1cm47XG4gICAgICBpZiAodGhpcy5fb3BlbmluZykgcmV0dXJuO1xuICAgICAgdGhpcy5fb3BlbmluZyA9IHRydWU7IC8vIFN0YXQgdGhlIHRhcmdldCBmaWxlIHRvIGdldCB0aGUgc2l6ZSBhbmQgY3JlYXRlIHRoZSBzdHJlYW0uXG5cbiAgICAgIHRoaXMuc3RhdChmdW5jdGlvbiAoZXJyLCBzaXplKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1LmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlYnVnKCdzdGF0IGRvbmU6ICVzIHsgc2l6ZTogJXMgfScsIF90aGlzNS5maWxlbmFtZSwgc2l6ZSk7XG4gICAgICAgIF90aGlzNS5fc2l6ZSA9IHNpemU7XG4gICAgICAgIF90aGlzNS5fZGVzdCA9IF90aGlzNS5fY3JlYXRlU3RyZWFtKF90aGlzNS5fc3RyZWFtKTtcbiAgICAgICAgX3RoaXM1Ll9vcGVuaW5nID0gZmFsc2U7XG5cbiAgICAgICAgX3RoaXM1Lm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzNS5fc3RyZWFtLmV2ZW50TmFtZXMoKS5pbmNsdWRlcygncm90YXRlJykpIHtcbiAgICAgICAgICAgIF90aGlzNS5fc3RyZWFtLmVtaXQoJ3JvdGF0ZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczUuX3JvdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdCB0aGUgZmlsZSBhbmQgYXNzZXNzIGluZm9ybWF0aW9uIGluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgcHJvcGVyIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0KGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX2dldEZpbGUoKTtcblxuICAgICAgdmFyIGZ1bGxwYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgdGFyZ2V0KTtcbiAgICAgIGZzLnN0YXQoZnVsbHBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXQpIHtcbiAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICBkZWJ1ZygnRU5PRU5UwqBvaycsIGZ1bGxwYXRoKTsgLy8gVXBkYXRlIGludGVybmFsbHkgdHJhY2tlZCBmaWxlbmFtZSB3aXRoIHRoZSBuZXcgdGFyZ2V0IG5hbWUuXG5cbiAgICAgICAgICBfdGhpczYuZmlsZW5hbWUgPSB0YXJnZXQ7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGRlYnVnKFwiZXJyIFwiLmNvbmNhdChlcnIuY29kZSwgXCIgXCIpLmNvbmNhdChmdWxscGF0aCkpO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0IHx8IF90aGlzNi5fbmVlZHNOZXdGaWxlKHN0YXQuc2l6ZSkpIHtcbiAgICAgICAgICAvLyBJZiBgc3RhdHMuc2l6ZWAgaXMgZ3JlYXRlciB0aGFuIHRoZSBgbWF4c2l6ZWAgZm9yIHRoaXNcbiAgICAgICAgICAvLyBpbnN0YW5jZSB0aGVuIHRyeSBhZ2Fpbi5cbiAgICAgICAgICByZXR1cm4gX3RoaXM2Ll9pbmNGaWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuc3RhdChjYWxsYmFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gT25jZSB3ZSBoYXZlIGZpZ3VyZWQgb3V0IHdoYXQgdGhlIGZpbGVuYW1lIGlzLCBzZXQgaXRcbiAgICAgICAgLy8gYW5kIHJldHVybiB0aGUgc2l6ZS5cblxuXG4gICAgICAgIF90aGlzNi5maWxlbmFtZSA9IHRhcmdldDtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgc3RhdC5zaXplKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHN0cmVhbSBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoY2IpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX3N0cmVhbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0cmVhbS5lbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICBjYigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM3LmVtaXQoJ2ZsdXNoJyk7XG5cbiAgICAgICAgX3RoaXM3LmVtaXQoJ2Nsb3NlZCcpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9uZWVkc05ld0ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX25lZWRzTmV3RmlsZShzaXplKSB7XG4gICAgICBzaXplID0gc2l6ZSB8fCB0aGlzLl9zaXplO1xuICAgICAgcmV0dXJuIHRoaXMubWF4c2l6ZSAmJiBzaXplID49IHRoaXMubWF4c2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVE9ETzogYWRkIG1ldGhvZCBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9vbkVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkVycm9yKGVycikge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zZXR1cFN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXBTdHJlYW0oc3RyZWFtKSB7XG4gICAgICBzdHJlYW0ub24oJ2Vycm9yJywgdGhpcy5fb25FcnJvcik7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUT0RPOiBhZGQgbWV0aG9kIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfY2xlYW51cFN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xlYW51cFN0cmVhbShzdHJlYW0pIHtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9vbkVycm9yKTtcbiAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcm90YXRlRmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcm90YXRlRmlsZSgpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICB0aGlzLl9pbmNGaWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzOC5vcGVuKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5waXBlIGZyb20gdGhlIHN0cmVhbSB0aGF0IGhhcyBiZWVuIG1hcmtlZCBhcyBmdWxsIGFuZCBlbmQgaXQgc28gaXRcbiAgICAgKiBmbHVzaGVzIHRvIGRpc2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIENhbGxiYWNrIGZvciB3aGVuIHRoZSBjdXJyZW50IGZpbGUgaGFzIGNsb3NlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2VuZFN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZW5kU3RyZWFtKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZnVuY3Rpb24gKCkge307XG5cbiAgICAgIGlmICh0aGlzLl9kZXN0KSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbS51bnBpcGUodGhpcy5fZGVzdCk7XG5cbiAgICAgICAgdGhpcy5fZGVzdC5lbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzOS5fY2xlYW51cFN0cmVhbShfdGhpczkuX2Rlc3QpO1xuXG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBXcml0YWJsZVN0cmVhbSBmb3IgdGhlIGFjdGl2ZSBmaWxlIG9uIHRoaXMgaW5zdGFuY2UuIElmIHdlXG4gICAgICogc2hvdWxkIGd6aXAgdGhlIGZpbGUgdGhlbiBhIHpsaWIgc3RyZWFtIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFkYWJsZVN0cmVhbX0gc291cmNlIOKAk8KgUGFzc1Rocm91Z2ggdG8gcGlwZSB0byB0aGUgZmlsZSB3aGVuIG9wZW4uXG4gICAgICogQHJldHVybnMge1dyaXRhYmxlU3RyZWFtfSBTdHJlYW0gdGhhdCB3cml0ZXMgdG8gZGlzayBmb3IgdGhlIGFjdGl2ZSBmaWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2NyZWF0ZVN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlU3RyZWFtKHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgZnVsbHBhdGggPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgIGRlYnVnKCdjcmVhdGUgc3RyZWFtIHN0YXJ0JywgZnVsbHBhdGgsIHRoaXMub3B0aW9ucyk7XG4gICAgICB2YXIgZGVzdCA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGZ1bGxwYXRoLCB0aGlzLm9wdGlvbnMpIC8vIFRPRE86IFdoYXQgc2hvdWxkIHdlIGRvIHdpdGggZXJyb3JzIGhlcmU/XG4gICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gZGVidWcoZXJyKTtcbiAgICAgIH0pLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRlYnVnKCdjbG9zZScsIGRlc3QucGF0aCwgZGVzdC5ieXRlc1dyaXR0ZW4pO1xuICAgICAgfSkub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdmaWxlIG9wZW4gb2snLCBmdWxscGF0aCk7XG5cbiAgICAgICAgX3RoaXMxMC5lbWl0KCdvcGVuJywgZnVsbHBhdGgpO1xuXG4gICAgICAgIHNvdXJjZS5waXBlKGRlc3QpOyAvLyBJZiByb3RhdGlvbiBvY2N1cmVkIGR1cmluZyB0aGUgb3BlbiBvcGVyYXRpb24gdGhlbiB3ZSBpbW1lZGlhdGVseVxuICAgICAgICAvLyBzdGFydCB3cml0aW5nIHRvIGEgbmV3IFBhc3NUaHJvdWdoLCBiZWdpbiBvcGVuaW5nIHRoZSBuZXh0IGZpbGVcbiAgICAgICAgLy8gYW5kIGNsZWFudXAgdGhlIHByZXZpb3VzIHNvdXJjZSBhbmQgZGVzdCBvbmNlIHRoZSBzb3VyY2UgaGFzIGRyYWluZWQuXG5cbiAgICAgICAgaWYgKF90aGlzMTAucm90YXRlZFdoaWxlT3BlbmluZykge1xuICAgICAgICAgIF90aGlzMTAuX3N0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuXG4gICAgICAgICAgX3RoaXMxMC5fc3RyZWFtLnNldE1heExpc3RlbmVycygzMCk7XG5cbiAgICAgICAgICBfdGhpczEwLl9yb3RhdGVGaWxlKCk7XG5cbiAgICAgICAgICBfdGhpczEwLnJvdGF0ZWRXaGlsZU9wZW5pbmcgPSBmYWxzZTtcblxuICAgICAgICAgIF90aGlzMTAuX2NsZWFudXBTdHJlYW0oZGVzdCk7XG5cbiAgICAgICAgICBzb3VyY2UuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZGVidWcoJ2NyZWF0ZSBzdHJlYW0gb2snLCBmdWxscGF0aCk7XG5cbiAgICAgIGlmICh0aGlzLnppcHBlZEFyY2hpdmUpIHtcbiAgICAgICAgdmFyIGd6aXAgPSB6bGliLmNyZWF0ZUd6aXAoKTtcbiAgICAgICAgZ3ppcC5waXBlKGRlc3QpO1xuICAgICAgICByZXR1cm4gZ3ppcDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9pbmNGaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbmNGaWxlKGNhbGxiYWNrKSB7XG4gICAgICBkZWJ1ZygnX2luY0ZpbGUnLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgIHZhciBleHQgPSBwYXRoLmV4dG5hbWUodGhpcy5fYmFzZW5hbWUpO1xuICAgICAgdmFyIGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZSh0aGlzLl9iYXNlbmFtZSwgZXh0KTtcblxuICAgICAgaWYgKCF0aGlzLnRhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZWQgKz0gMTtcblxuICAgICAgICB0aGlzLl9jaGVja01heEZpbGVzSW5jcmVtZW50aW5nKGV4dCwgYmFzZW5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTWF4RmlsZXNUYWlsYWJsZShleHQsIGJhc2VuYW1lLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgZmlsZW5hbWUgdG8gdXNlIGZvciB0aGlzIGluc3RhbmNlIGluIHRoZSBjYXNlIHRoYXQgbG9nXG4gICAgICogZmlsZXNpemVzIGFyZSBiZWluZyBjYXBwZWQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0RmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmlsZSgpIHtcbiAgICAgIHZhciBleHQgPSBwYXRoLmV4dG5hbWUodGhpcy5fYmFzZW5hbWUpO1xuICAgICAgdmFyIGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZSh0aGlzLl9iYXNlbmFtZSwgZXh0KTtcbiAgICAgIHZhciBpc1JvdGF0aW9uID0gdGhpcy5yb3RhdGlvbkZvcm1hdCA/IHRoaXMucm90YXRpb25Gb3JtYXQoKSA6IHRoaXMuX2NyZWF0ZWQ7IC8vIENhdmVhdCBlbXB0b3IgKGluZGV4emVybyk6IHJvdGF0aW9uRm9ybWF0KCkgd2FzIGJyb2tlbiBieSBkZXNpZ24gV2hlblxuICAgICAgLy8gY29tYmluZWQgd2l0aCBtYXggZmlsZXMgYmVjYXVzZSB0aGUgc2V0IG9mIGZpbGVzIHRvIHVubGluayBpcyBuZXZlclxuICAgICAgLy8gc3RvcmVkLlxuXG4gICAgICB2YXIgdGFyZ2V0ID0gIXRoaXMudGFpbGFibGUgJiYgdGhpcy5fY3JlYXRlZCA/IFwiXCIuY29uY2F0KGJhc2VuYW1lKS5jb25jYXQoaXNSb3RhdGlvbikuY29uY2F0KGV4dCkgOiBcIlwiLmNvbmNhdChiYXNlbmFtZSkuY29uY2F0KGV4dCk7XG4gICAgICByZXR1cm4gdGhpcy56aXBwZWRBcmNoaXZlICYmICF0aGlzLnRhaWxhYmxlID8gXCJcIi5jb25jYXQodGFyZ2V0LCBcIi5nelwiKSA6IHRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50IHRoZSBudW1iZXIgb2YgZmlsZXMgY3JlYXRlZCBvciBjaGVja2VkIGJ5IHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHttaXhlZH0gZXh0IC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGJhc2VuYW1lIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9jaGVja01heEZpbGVzSW5jcmVtZW50aW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja01heEZpbGVzSW5jcmVtZW50aW5nKGV4dCwgYmFzZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBDaGVjayBmb3IgbWF4RmlsZXMgb3B0aW9uIGFuZCBkZWxldGUgZmlsZS5cbiAgICAgIGlmICghdGhpcy5tYXhGaWxlcyB8fCB0aGlzLl9jcmVhdGVkIDwgdGhpcy5tYXhGaWxlcykge1xuICAgICAgICByZXR1cm4gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9sZGVzdCA9IHRoaXMuX2NyZWF0ZWQgLSB0aGlzLm1heEZpbGVzO1xuICAgICAgdmFyIGlzT2xkZXN0ID0gb2xkZXN0ICE9PSAwID8gb2xkZXN0IDogJyc7XG4gICAgICB2YXIgaXNaaXBwZWQgPSB0aGlzLnppcHBlZEFyY2hpdmUgPyAnLmd6JyA6ICcnO1xuICAgICAgdmFyIGZpbGVQYXRoID0gXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChpc09sZGVzdCkuY29uY2F0KGV4dCkuY29uY2F0KGlzWmlwcGVkKTtcbiAgICAgIHZhciB0YXJnZXQgPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lLCBmaWxlUGF0aCk7XG4gICAgICBmcy51bmxpbmsodGFyZ2V0LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvbGwgZmlsZXMgZm9yd2FyZCBiYXNlZCBvbiBpbnRlZ2VyLCB1cCB0byBtYXhGaWxlcy4gZS5nLiBpZiBiYXNlIGlmXG4gICAgICogZmlsZS5sb2cgYW5kIGl0IGJlY29tZXMgb3ZlcnNpemVkLCByb2xsIHRvIGZpbGUxLmxvZywgYW5kIGFsbG93IGZpbGUubG9nXG4gICAgICogdG8gYmUgcmUtdXNlZC4gSWYgZmlsZSBpcyBvdmVyc2l6ZWQgYWdhaW4sIHJvbGwgZmlsZTEubG9nIHRvIGZpbGUyLmxvZyxcbiAgICAgKiByb2xsIGZpbGUubG9nIHRvIGZpbGUxLmxvZywgYW5kIHNvIG9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGV4dCAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBiYXNlbmFtZSAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfY2hlY2tNYXhGaWxlc1RhaWxhYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja01heEZpbGVzVGFpbGFibGUoZXh0LCBiYXNlbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgICAgdmFyIHRhc2tzID0gW107XG5cbiAgICAgIGlmICghdGhpcy5tYXhGaWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGNvbnN0IGlzWmlwcGVkID0gdGhpcy56aXBwZWRBcmNoaXZlID8gJy5neicgOiAnJztcblxuXG4gICAgICB2YXIgaXNaaXBwZWQgPSB0aGlzLnppcHBlZEFyY2hpdmUgPyAnLmd6JyA6ICcnO1xuXG4gICAgICBmb3IgKHZhciB4ID0gdGhpcy5tYXhGaWxlcyAtIDE7IHggPiAxOyB4LS0pIHtcbiAgICAgICAgdGFza3MucHVzaChmdW5jdGlvbiAoaSwgY2IpIHtcbiAgICAgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBcIlwiLmNvbmNhdChiYXNlbmFtZSkuY29uY2F0KGkgLSAxKS5jb25jYXQoZXh0KS5jb25jYXQoaXNaaXBwZWQpO1xuICAgICAgICAgIHZhciB0bXBwYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgZmlsZU5hbWUpO1xuICAgICAgICAgIGZzLmV4aXN0cyh0bXBwYXRoLCBmdW5jdGlvbiAoZXhpc3RzKSB7XG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICByZXR1cm4gY2IobnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpbGVOYW1lID0gXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChpKS5jb25jYXQoZXh0KS5jb25jYXQoaXNaaXBwZWQpO1xuICAgICAgICAgICAgZnMucmVuYW1lKHRtcHBhdGgsIHBhdGguam9pbihfdGhpczExLmRpcm5hbWUsIGZpbGVOYW1lKSwgY2IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LmJpbmQodGhpcywgeCkpO1xuICAgICAgfVxuXG4gICAgICBhc3luY1Nlcmllcyh0YXNrcywgZnVuY3Rpb24gKCkge1xuICAgICAgICBmcy5yZW5hbWUocGF0aC5qb2luKF90aGlzMTIuZGlybmFtZSwgXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChleHQpKSwgcGF0aC5qb2luKF90aGlzMTIuZGlybmFtZSwgXCJcIi5jb25jYXQoYmFzZW5hbWUsIFwiMVwiKS5jb25jYXQoZXh0KS5jb25jYXQoaXNaaXBwZWQpKSwgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9jcmVhdGVMb2dEaXJJZk5vdEV4aXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVMb2dEaXJJZk5vdEV4aXN0KGRpclBhdGgpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXN5bmMgKi9cbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkaXJQYXRoKSkge1xuICAgICAgICBmcy5ta2RpclN5bmMoZGlyUGF0aCwge1xuICAgICAgICAgIHJlY3Vyc2l2ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc3luYyAqL1xuXG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpbGU7XG59KFRyYW5zcG9ydFN0cmVhbSk7IiwiLy8gLmRpcm5hbWUsIC5iYXNlbmFtZSwgYW5kIC5leHRuYW1lIG1ldGhvZHMgYXJlIGV4dHJhY3RlZCBmcm9tIE5vZGUuanMgdjguMTEuMSxcbi8vIGJhY2twb3J0ZWQgYW5kIHRyYW5zcGxpdGVkIHdpdGggQmFiZWwsIHdpdGggYmFja3dhcmRzLWNvbXBhdCBmaXhlc1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICB2YXIgaGFzUm9vdCA9IGNvZGUgPT09IDQ3IC8qLyovO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkge1xuICAgIC8vIHJldHVybiAnLy8nO1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgZml4OlxuICAgIHJldHVybiAnLyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcblxuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuICcnO1xuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbn1cblxuLy8gVXNlcyBhIG1peGVkIGFwcHJvYWNoIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSwgYXMgZXh0IGJlaGF2aW9yIGNoYW5nZWRcbi8vIGluIG5ldyBOb2RlLmpzIHZlcnNpb25zLCBzbyBvbmx5IGJhc2VuYW1lKCkgYWJvdmUgaXMgYmFja3BvcnRlZCBoZXJlXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24gKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IGJhc2VuYW1lKHBhdGgpO1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgdmFyIHN0YXJ0RG90ID0gLTE7XG4gIHZhciBzdGFydFBhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gIHZhciBwcmVEb3RTdGF0ZSA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBleHRlbnNpb25cbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0NiAvKi4qLykge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKVxuICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydERvdCA9PT0gLTEgfHwgZW5kID09PSAtMSB8fFxuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNlcmllcztcblxudmFyIF9wYXJhbGxlbDIgPSByZXF1aXJlKCcuL2ludGVybmFsL3BhcmFsbGVsJyk7XG5cbnZhciBfcGFyYWxsZWwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyYWxsZWwyKTtcblxudmFyIF9lYWNoT2ZTZXJpZXMgPSByZXF1aXJlKCcuL2VhY2hPZlNlcmllcycpO1xuXG52YXIgX2VhY2hPZlNlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYWNoT2ZTZXJpZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFJ1biB0aGUgZnVuY3Rpb25zIGluIHRoZSBgdGFza3NgIGNvbGxlY3Rpb24gaW4gc2VyaWVzLCBlYWNoIG9uZSBydW5uaW5nIG9uY2VcbiAqIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBoYXMgY29tcGxldGVkLiBJZiBhbnkgZnVuY3Rpb25zIGluIHRoZSBzZXJpZXMgcGFzcyBhblxuICogZXJyb3IgdG8gaXRzIGNhbGxiYWNrLCBubyBtb3JlIGZ1bmN0aW9ucyBhcmUgcnVuLCBhbmQgYGNhbGxiYWNrYCBpc1xuICogaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIHZhbHVlIG9mIHRoZSBlcnJvci4gT3RoZXJ3aXNlLCBgY2FsbGJhY2tgXG4gKiByZWNlaXZlcyBhbiBhcnJheSBvZiByZXN1bHRzIHdoZW4gYHRhc2tzYCBoYXZlIGNvbXBsZXRlZC5cbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHVzZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheS4gRWFjaCBwcm9wZXJ0eSB3aWxsXG4gKiBiZSBydW4gYXMgYSBmdW5jdGlvbiwgYW5kIHRoZSByZXN1bHRzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBmaW5hbCBgY2FsbGJhY2tgXG4gKiBhcyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheS4gVGhpcyBjYW4gYmUgYSBtb3JlIHJlYWRhYmxlIHdheSBvZiBoYW5kbGluZ1xuICogIHJlc3VsdHMgZnJvbSB7QGxpbmsgYXN5bmMuc2VyaWVzfS5cbiAqXG4gKiAqKk5vdGUqKiB0aGF0IHdoaWxlIG1hbnkgaW1wbGVtZW50YXRpb25zIHByZXNlcnZlIHRoZSBvcmRlciBvZiBvYmplY3RcbiAqIHByb3BlcnRpZXMsIHRoZSBbRUNNQVNjcmlwdCBMYW5ndWFnZSBTcGVjaWZpY2F0aW9uXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC42KVxuICogZXhwbGljaXRseSBzdGF0ZXMgdGhhdFxuICpcbiAqID4gVGhlIG1lY2hhbmljcyBhbmQgb3JkZXIgb2YgZW51bWVyYXRpbmcgdGhlIHByb3BlcnRpZXMgaXMgbm90IHNwZWNpZmllZC5cbiAqXG4gKiBTbyBpZiB5b3UgcmVseSBvbiB0aGUgb3JkZXIgaW4gd2hpY2ggeW91ciBzZXJpZXMgb2YgZnVuY3Rpb25zIGFyZSBleGVjdXRlZCxcbiAqIGFuZCB3YW50IHRoaXMgdG8gd29yayBvbiBhbGwgcGxhdGZvcm1zLCBjb25zaWRlciB1c2luZyBhbiBhcnJheS5cbiAqXG4gKiBAbmFtZSBzZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8QXN5bmNJdGVyYWJsZXxPYmplY3R9IHRhc2tzIC0gQSBjb2xsZWN0aW9uIGNvbnRhaW5pbmdcbiAqIFthc3luYyBmdW5jdGlvbnNde0BsaW5rIEFzeW5jRnVuY3Rpb259IHRvIHJ1biBpbiBzZXJpZXMuXG4gKiBFYWNoIGZ1bmN0aW9uIGNhbiBjb21wbGV0ZSB3aXRoIGFueSBudW1iZXIgb2Ygb3B0aW9uYWwgYHJlc3VsdGAgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIHJ1biBvbmNlIGFsbCB0aGVcbiAqIGZ1bmN0aW9ucyBoYXZlIGNvbXBsZXRlZC4gVGhpcyBmdW5jdGlvbiBnZXRzIGEgcmVzdWx0cyBhcnJheSAob3Igb2JqZWN0KVxuICogY29udGFpbmluZyBhbGwgdGhlIHJlc3VsdCBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBgdGFza2AgY2FsbGJhY2tzLiBJbnZva2VkXG4gKiB3aXRoIChlcnIsIHJlc3VsdCkuXG4gKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UsIGlmIG5vIGNhbGxiYWNrIGlzIHBhc3NlZFxuICogQGV4YW1wbGVcbiAqIGFzeW5jLnNlcmllcyhbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gZG8gc29tZSBzdHVmZiAuLi5cbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScpO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gZG8gc29tZSBtb3JlIHN0dWZmIC4uLlxuICogICAgICAgICBjYWxsYmFjayhudWxsLCAndHdvJyk7XG4gKiAgICAgfVxuICogXSxcbiAqIC8vIG9wdGlvbmFsIGNhbGxiYWNrXG4gKiBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICAvLyByZXN1bHRzIGlzIG5vdyBlcXVhbCB0byBbJ29uZScsICd0d28nXVxuICogfSk7XG4gKlxuICogYXN5bmMuc2VyaWVzKHtcbiAqICAgICBvbmU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAxKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIHR3bzogZnVuY3Rpb24oY2FsbGJhY2spe1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgMik7XG4gKiAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgfVxuICogfSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgLy8gcmVzdWx0cyBpcyBub3cgZXF1YWwgdG86IHtvbmU6IDEsIHR3bzogMn1cbiAqIH0pO1xuICovXG5mdW5jdGlvbiBzZXJpZXModGFza3MsIGNhbGxiYWNrKSB7XG4gIHJldHVybiAoMCwgX3BhcmFsbGVsMy5kZWZhdWx0KShfZWFjaE9mU2VyaWVzMi5kZWZhdWx0LCB0YXNrcywgY2FsbGJhY2spO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbnZhciBfaXNBcnJheUxpa2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBcnJheUxpa2UpO1xuXG52YXIgX3dyYXBBc3luYyA9IHJlcXVpcmUoJy4vd3JhcEFzeW5jJyk7XG5cbnZhciBfd3JhcEFzeW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBBc3luYyk7XG5cbnZhciBfYXdhaXRpZnkgPSByZXF1aXJlKCcuL2F3YWl0aWZ5Jyk7XG5cbnZhciBfYXdhaXRpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXdhaXRpZnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KSgoZWFjaGZuLCB0YXNrcywgY2FsbGJhY2spID0+IHtcbiAgICB2YXIgcmVzdWx0cyA9ICgwLCBfaXNBcnJheUxpa2UyLmRlZmF1bHQpKHRhc2tzKSA/IFtdIDoge307XG5cbiAgICBlYWNoZm4odGFza3MsICh0YXNrLCBrZXksIHRhc2tDYikgPT4ge1xuICAgICAgICAoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkodGFzaykoKGVyciwgLi4ucmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICBbcmVzdWx0XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdHNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHRhc2tDYihlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBlcnIgPT4gY2FsbGJhY2soZXJyLCByZXN1bHRzKSk7XG59LCAzKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmNpZnk7XG5cbnZhciBfaW5pdGlhbFBhcmFtcyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvaW5pdGlhbFBhcmFtcycpO1xuXG52YXIgX2luaXRpYWxQYXJhbXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5pdGlhbFBhcmFtcyk7XG5cbnZhciBfc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zZXRJbW1lZGlhdGUnKTtcblxudmFyIF9zZXRJbW1lZGlhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0SW1tZWRpYXRlKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRha2UgYSBzeW5jIGZ1bmN0aW9uIGFuZCBtYWtlIGl0IGFzeW5jLCBwYXNzaW5nIGl0cyByZXR1cm4gdmFsdWUgdG8gYVxuICogY2FsbGJhY2suIFRoaXMgaXMgdXNlZnVsIGZvciBwbHVnZ2luZyBzeW5jIGZ1bmN0aW9ucyBpbnRvIGEgd2F0ZXJmYWxsLFxuICogc2VyaWVzLCBvciBvdGhlciBhc3luYyBmdW5jdGlvbnMuIEFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIChleGNlcHQgZm9yIHRoZSBmaW5hbFxuICogY2FsbGJhY2sgYXJndW1lbnQpLiBFcnJvcnMgdGhyb3duIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBJZiB0aGUgZnVuY3Rpb24gcGFzc2VkIHRvIGBhc3luY2lmeWAgcmV0dXJucyBhIFByb21pc2UsIHRoYXQgcHJvbWlzZXMnc1xuICogcmVzb2x2ZWQvcmVqZWN0ZWQgc3RhdGUgd2lsbCBiZSB1c2VkIHRvIGNhbGwgdGhlIGNhbGxiYWNrLCByYXRoZXIgdGhhbiBzaW1wbHlcbiAqIHRoZSBzeW5jaHJvbm91cyByZXR1cm4gdmFsdWUuXG4gKlxuICogVGhpcyBhbHNvIG1lYW5zIHlvdSBjYW4gYXN5bmNpZnkgRVMyMDE3IGBhc3luY2AgZnVuY3Rpb25zLlxuICpcbiAqIEBuYW1lIGFzeW5jaWZ5XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgd3JhcFN5bmNcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gVGhlIHN5bmNocm9ub3VzIGZ1bmN0aW9uLCBvciBQcm9taXNlLXJldHVybmluZ1xuICogZnVuY3Rpb24gdG8gY29udmVydCB0byBhbiB7QGxpbmsgQXN5bmNGdW5jdGlvbn0uXG4gKiBAcmV0dXJucyB7QXN5bmNGdW5jdGlvbn0gQW4gYXN5bmNocm9ub3VzIHdyYXBwZXIgb2YgdGhlIGBmdW5jYC4gVG8gYmVcbiAqIGludm9rZWQgd2l0aCBgKGFyZ3MuLi4sIGNhbGxiYWNrKWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIHBhc3NpbmcgYSByZWd1bGFyIHN5bmNocm9ub3VzIGZ1bmN0aW9uXG4gKiBhc3luYy53YXRlcmZhbGwoW1xuICogICAgIGFzeW5jLmFwcGx5KGZzLnJlYWRGaWxlLCBmaWxlbmFtZSwgXCJ1dGY4XCIpLFxuICogICAgIGFzeW5jLmFzeW5jaWZ5KEpTT04ucGFyc2UpLFxuICogICAgIGZ1bmN0aW9uIChkYXRhLCBuZXh0KSB7XG4gKiAgICAgICAgIC8vIGRhdGEgaXMgdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSB0ZXh0LlxuICogICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBwYXJzaW5nIGVycm9yLCBpdCB3b3VsZCBoYXZlIGJlZW4gY2F1Z2h0LlxuICogICAgIH1cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiAvLyBwYXNzaW5nIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcHJvbWlzZVxuICogYXN5bmMud2F0ZXJmYWxsKFtcbiAqICAgICBhc3luYy5hcHBseShmcy5yZWFkRmlsZSwgZmlsZW5hbWUsIFwidXRmOFwiKSxcbiAqICAgICBhc3luYy5hc3luY2lmeShmdW5jdGlvbiAoY29udGVudHMpIHtcbiAqICAgICAgICAgcmV0dXJuIGRiLm1vZGVsLmNyZWF0ZShjb250ZW50cyk7XG4gKiAgICAgfSksXG4gKiAgICAgZnVuY3Rpb24gKG1vZGVsLCBuZXh0KSB7XG4gKiAgICAgICAgIC8vIGBtb2RlbGAgaXMgdGhlIGluc3RhbnRpYXRlZCBtb2RlbCBvYmplY3QuXG4gKiAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBhbiBlcnJvciwgdGhpcyBmdW5jdGlvbiB3b3VsZCBiZSBza2lwcGVkLlxuICogICAgIH1cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiAvLyBlczIwMTcgZXhhbXBsZSwgdGhvdWdoIGBhc3luY2lmeWAgaXMgbm90IG5lZWRlZCBpZiB5b3VyIEpTIGVudmlyb25tZW50XG4gKiAvLyBzdXBwb3J0cyBhc3luYyBmdW5jdGlvbnMgb3V0IG9mIHRoZSBib3hcbiAqIHZhciBxID0gYXN5bmMucXVldWUoYXN5bmMuYXN5bmNpZnkoYXN5bmMgZnVuY3Rpb24oZmlsZSkge1xuICogICAgIHZhciBpbnRlcm1lZGlhdGVTdGVwID0gYXdhaXQgcHJvY2Vzc0ZpbGUoZmlsZSk7XG4gKiAgICAgcmV0dXJuIGF3YWl0IHNvbWVQcm9taXNlKGludGVybWVkaWF0ZVN0ZXApXG4gKiB9KSk7XG4gKlxuICogcS5wdXNoKGZpbGVzKTtcbiAqL1xuZnVuY3Rpb24gYXN5bmNpZnkoZnVuYykge1xuICAgIGlmICgoMCwgX3dyYXBBc3luYy5pc0FzeW5jKShmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MgLyosIGNhbGxiYWNrKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2UocHJvbWlzZSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX2luaXRpYWxQYXJhbXMyLmRlZmF1bHQpKGZ1bmN0aW9uIChhcmdzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHJlc3VsdCBpcyBQcm9taXNlIG9iamVjdFxuICAgICAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2UocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByb21pc2UocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgaW52b2tlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHZhbHVlKTtcbiAgICB9LCBlcnIgPT4ge1xuICAgICAgICBpbnZva2VDYWxsYmFjayhjYWxsYmFjaywgZXJyICYmIGVyci5tZXNzYWdlID8gZXJyIDogbmV3IEVycm9yKGVycikpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhjYWxsYmFjaywgZXJyb3IsIHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgKDAsIF9zZXRJbW1lZGlhdGUyLmRlZmF1bHQpKGUgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSwgZXJyKTtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MgLyosIGNhbGxiYWNrKi8pIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgYXJncywgY2FsbGJhY2spO1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0Jztcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmFsbGJhY2sgPSBmYWxsYmFjaztcbmV4cG9ydHMud3JhcCA9IHdyYXA7XG52YXIgaGFzU2V0SW1tZWRpYXRlID0gZXhwb3J0cy5oYXNTZXRJbW1lZGlhdGUgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nICYmIHNldEltbWVkaWF0ZTtcbnZhciBoYXNOZXh0VGljayA9IGV4cG9ydHMuaGFzTmV4dFRpY2sgPSB0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIGZhbGxiYWNrKGZuKSB7XG4gICAgc2V0VGltZW91dChmbiwgMCk7XG59XG5cbmZ1bmN0aW9uIHdyYXAoZGVmZXIpIHtcbiAgICByZXR1cm4gKGZuLCAuLi5hcmdzKSA9PiBkZWZlcigoKSA9PiBmbiguLi5hcmdzKSk7XG59XG5cbnZhciBfZGVmZXI7XG5cbmlmIChoYXNTZXRJbW1lZGlhdGUpIHtcbiAgICBfZGVmZXIgPSBzZXRJbW1lZGlhdGU7XG59IGVsc2UgaWYgKGhhc05leHRUaWNrKSB7XG4gICAgX2RlZmVyID0gcHJvY2Vzcy5uZXh0VGljaztcbn0gZWxzZSB7XG4gICAgX2RlZmVyID0gZmFsbGJhY2s7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHdyYXAoX2RlZmVyKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZWFjaE9mTGltaXQgPSByZXF1aXJlKCcuL2VhY2hPZkxpbWl0Jyk7XG5cbnZhciBfZWFjaE9mTGltaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mTGltaXQpO1xuXG52YXIgX2F3YWl0aWZ5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hd2FpdGlmeScpO1xuXG52YXIgX2F3YWl0aWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F3YWl0aWZ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGVhY2hPZmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNoT2Z9IGJ1dCBydW5zIG9ubHkgYSBzaW5nbGUgYXN5bmMgb3BlcmF0aW9uIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBlYWNoT2ZTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmVhY2hPZl17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2hPZn1cbiAqIEBhbGlhcyBmb3JFYWNoT2ZTZXJpZXNcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfEFzeW5jSXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGwgYGl0ZXJhdGVlYFxuICogZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICogQHJldHVybnMge1Byb21pc2V9IGEgcHJvbWlzZSwgaWYgYSBjYWxsYmFjayBpcyBvbWl0dGVkXG4gKi9cbmZ1bmN0aW9uIGVhY2hPZlNlcmllcyhjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuICgwLCBfZWFjaE9mTGltaXQyLmRlZmF1bHQpKGNvbGwsIDEsIGl0ZXJhdGVlLCBjYWxsYmFjayk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KShlYWNoT2ZTZXJpZXMsIDMpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb25jZSA9IHJlcXVpcmUoJy4vb25jZScpO1xuXG52YXIgX29uY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25jZSk7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKCcuL2l0ZXJhdG9yJyk7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX29ubHlPbmNlID0gcmVxdWlyZSgnLi9vbmx5T25jZScpO1xuXG52YXIgX29ubHlPbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlPbmNlKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL3dyYXBBc3luYycpO1xuXG52YXIgX2FzeW5jRWFjaE9mTGltaXQgPSByZXF1aXJlKCcuL2FzeW5jRWFjaE9mTGltaXQnKTtcblxudmFyIF9hc3luY0VhY2hPZkxpbWl0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jRWFjaE9mTGltaXQpO1xuXG52YXIgX2JyZWFrTG9vcCA9IHJlcXVpcmUoJy4vYnJlYWtMb29wJyk7XG5cbnZhciBfYnJlYWtMb29wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JyZWFrTG9vcCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGxpbWl0ID0+IHtcbiAgICByZXR1cm4gKG9iaiwgaXRlcmF0ZWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrID0gKDAsIF9vbmNlMi5kZWZhdWx0KShjYWxsYmFjayk7XG4gICAgICAgIGlmIChsaW1pdCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignY29uY3VycmVuY3kgbGltaXQgY2Fubm90IGJlIGxlc3MgdGhhbiAxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIF93cmFwQXN5bmMuaXNBc3luY0dlbmVyYXRvcikob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBfYXN5bmNFYWNoT2ZMaW1pdDIuZGVmYXVsdCkob2JqLCBsaW1pdCwgaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIF93cmFwQXN5bmMuaXNBc3luY0l0ZXJhYmxlKShvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9hc3luY0VhY2hPZkxpbWl0Mi5kZWZhdWx0KShvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIGxpbWl0LCBpdGVyYXRlZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXh0RWxlbSA9ICgwLCBfaXRlcmF0b3IyLmRlZmF1bHQpKG9iaik7XG4gICAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICAgIHZhciBjYW5jZWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgcnVubmluZyA9IDA7XG4gICAgICAgIHZhciBsb29waW5nID0gZmFsc2U7XG5cbiAgICAgICAgZnVuY3Rpb24gaXRlcmF0ZWVDYWxsYmFjayhlcnIsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoY2FuY2VsZWQpIHJldHVybjtcbiAgICAgICAgICAgIHJ1bm5pbmcgLT0gMTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gX2JyZWFrTG9vcDIuZGVmYXVsdCB8fCBkb25lICYmIHJ1bm5pbmcgPD0gMCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxvb3BpbmcpIHtcbiAgICAgICAgICAgICAgICByZXBsZW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxlbmlzaCgpIHtcbiAgICAgICAgICAgIGxvb3BpbmcgPSB0cnVlO1xuICAgICAgICAgICAgd2hpbGUgKHJ1bm5pbmcgPCBsaW1pdCAmJiAhZG9uZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtID0gbmV4dEVsZW0oKTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmcgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBydW5uaW5nICs9IDE7XG4gICAgICAgICAgICAgICAgaXRlcmF0ZWUoZWxlbS52YWx1ZSwgZWxlbS5rZXksICgwLCBfb25seU9uY2UyLmRlZmF1bHQpKGl0ZXJhdGVlQ2FsbGJhY2spKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvb3BpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcGxlbmlzaCgpO1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUl0ZXJhdG9yO1xuXG52YXIgX2lzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG52YXIgX2lzQXJyYXlMaWtlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQXJyYXlMaWtlKTtcblxudmFyIF9nZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3InKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SXRlcmF0b3IoY29sbCkge1xuICAgIHZhciBpID0gLTE7XG4gICAgdmFyIGxlbiA9IGNvbGwubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICByZXR1cm4gKytpIDwgbGVuID8geyB2YWx1ZTogY29sbFtpXSwga2V5OiBpIH0gOiBudWxsO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVTMjAxNUl0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChpdGVtLmRvbmUpIHJldHVybiBudWxsO1xuICAgICAgICBpKys7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBpdGVtLnZhbHVlLCBrZXk6IGkgfTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RJdGVyYXRvcihvYmopIHtcbiAgICB2YXIgb2tleXMgPSBvYmogPyBPYmplY3Qua2V5cyhvYmopIDogW107XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgbGVuID0gb2tleXMubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIga2V5ID0gb2tleXNbKytpXTtcbiAgICAgICAgcmV0dXJuIGkgPCBsZW4gPyB7IHZhbHVlOiBvYmpba2V5XSwga2V5IH0gOiBudWxsO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKGNvbGwpIHtcbiAgICBpZiAoKDAsIF9pc0FycmF5TGlrZTIuZGVmYXVsdCkoY29sbCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFycmF5SXRlcmF0b3IoY29sbCk7XG4gICAgfVxuXG4gICAgdmFyIGl0ZXJhdG9yID0gKDAsIF9nZXRJdGVyYXRvcjIuZGVmYXVsdCkoY29sbCk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yID8gY3JlYXRlRVMyMDE1SXRlcmF0b3IoaXRlcmF0b3IpIDogY3JlYXRlT2JqZWN0SXRlcmF0b3IoY29sbCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoY29sbCkge1xuICAgIHJldHVybiBjb2xsW1N5bWJvbC5pdGVyYXRvcl0gJiYgY29sbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmNFYWNoT2ZMaW1pdDtcblxudmFyIF9icmVha0xvb3AgPSByZXF1aXJlKCcuL2JyZWFrTG9vcCcpO1xuXG52YXIgX2JyZWFrTG9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVha0xvb3ApO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBmb3IgYXN5bmMgZ2VuZXJhdG9yc1xuZnVuY3Rpb24gYXN5bmNFYWNoT2ZMaW1pdChnZW5lcmF0b3IsIGxpbWl0LCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgIGxldCBjYW5jZWxlZCA9IGZhbHNlO1xuICAgIGxldCBhd2FpdGluZyA9IGZhbHNlO1xuICAgIGxldCBydW5uaW5nID0gMDtcbiAgICBsZXQgaWR4ID0gMDtcblxuICAgIGZ1bmN0aW9uIHJlcGxlbmlzaCgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVwbGVuaXNoJylcbiAgICAgICAgaWYgKHJ1bm5pbmcgPj0gbGltaXQgfHwgYXdhaXRpbmcgfHwgZG9uZSkgcmV0dXJuO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXBsZW5pc2ggYXdhaXRpbmcnKVxuICAgICAgICBhd2FpdGluZyA9IHRydWU7XG4gICAgICAgIGdlbmVyYXRvci5uZXh0KCkudGhlbigoeyB2YWx1ZSwgZG9uZTogaXRlckRvbmUgfSkgPT4ge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZ290IHZhbHVlJywgdmFsdWUpXG4gICAgICAgICAgICBpZiAoY2FuY2VsZWQgfHwgZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgYXdhaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpdGVyRG9uZSkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZG9uZSBuZXh0Q2InKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZysrO1xuICAgICAgICAgICAgaXRlcmF0ZWUodmFsdWUsIGlkeCwgaXRlcmF0ZWVDYWxsYmFjayk7XG4gICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgIHJlcGxlbmlzaCgpO1xuICAgICAgICB9KS5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWVDYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdpdGVyYXRlZUNhbGxiYWNrJylcbiAgICAgICAgcnVubmluZyAtPSAxO1xuICAgICAgICBpZiAoY2FuY2VsZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGhhbmRsZUVycm9yKGVycik7XG5cbiAgICAgICAgaWYgKGVyciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gX2JyZWFrTG9vcDIuZGVmYXVsdCB8fCBkb25lICYmIHJ1bm5pbmcgPD0gMCkge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdkb25lIGl0ZXJDYicpXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwbGVuaXNoKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmIChjYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgICBhd2FpdGluZyA9IGZhbHNlO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG5cbiAgICByZXBsZW5pc2goKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm07XG52YXIgYmluZGluZyA9IHJlcXVpcmUoJy4vYmluZGluZycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jykub2s7XG52YXIga01heExlbmd0aCA9IHJlcXVpcmUoJ2J1ZmZlcicpLmtNYXhMZW5ndGg7XG52YXIga1JhbmdlRXJyb3JNZXNzYWdlID0gJ0Nhbm5vdCBjcmVhdGUgZmluYWwgQnVmZmVyLiBJdCB3b3VsZCBiZSBsYXJnZXIgJyArICd0aGFuIDB4JyArIGtNYXhMZW5ndGgudG9TdHJpbmcoMTYpICsgJyBieXRlcyc7XG5cbi8vIHpsaWIgZG9lc24ndCBwcm92aWRlIHRoZXNlLCBzbyBrbHVkZ2UgdGhlbSBpbiBmb2xsb3dpbmcgdGhlIHNhbWVcbi8vIGNvbnN0IG5hbWluZyBzY2hlbWUgemxpYiB1c2VzLlxuYmluZGluZy5aX01JTl9XSU5ET1dCSVRTID0gODtcbmJpbmRpbmcuWl9NQVhfV0lORE9XQklUUyA9IDE1O1xuYmluZGluZy5aX0RFRkFVTFRfV0lORE9XQklUUyA9IDE1O1xuXG4vLyBmZXdlciB0aGFuIDY0IGJ5dGVzIHBlciBjaHVuayBpcyBzdHVwaWQuXG4vLyB0ZWNobmljYWxseSBpdCBjb3VsZCB3b3JrIHdpdGggYXMgZmV3IGFzIDgsIGJ1dCBldmVuIDY0IGJ5dGVzXG4vLyBpcyBhYnN1cmRseSBsb3cuICBVc3VhbGx5IGEgTUIgb3IgbW9yZSBpcyBiZXN0LlxuYmluZGluZy5aX01JTl9DSFVOSyA9IDY0O1xuYmluZGluZy5aX01BWF9DSFVOSyA9IEluZmluaXR5O1xuYmluZGluZy5aX0RFRkFVTFRfQ0hVTksgPSAxNiAqIDEwMjQ7XG5cbmJpbmRpbmcuWl9NSU5fTUVNTEVWRUwgPSAxO1xuYmluZGluZy5aX01BWF9NRU1MRVZFTCA9IDk7XG5iaW5kaW5nLlpfREVGQVVMVF9NRU1MRVZFTCA9IDg7XG5cbmJpbmRpbmcuWl9NSU5fTEVWRUwgPSAtMTtcbmJpbmRpbmcuWl9NQVhfTEVWRUwgPSA5O1xuYmluZGluZy5aX0RFRkFVTFRfTEVWRUwgPSBiaW5kaW5nLlpfREVGQVVMVF9DT01QUkVTU0lPTjtcblxuLy8gZXhwb3NlIGFsbCB0aGUgemxpYiBjb25zdGFudHNcbnZhciBia2V5cyA9IE9iamVjdC5rZXlzKGJpbmRpbmcpO1xuZm9yICh2YXIgYmsgPSAwOyBiayA8IGJrZXlzLmxlbmd0aDsgYmsrKykge1xuICB2YXIgYmtleSA9IGJrZXlzW2JrXTtcbiAgaWYgKGJrZXkubWF0Y2goL15aLykpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgYmtleSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IGJpbmRpbmdbYmtleV0sIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9XG59XG5cbi8vIHRyYW5zbGF0aW9uIHRhYmxlIGZvciByZXR1cm4gY29kZXMuXG52YXIgY29kZXMgPSB7XG4gIFpfT0s6IGJpbmRpbmcuWl9PSyxcbiAgWl9TVFJFQU1fRU5EOiBiaW5kaW5nLlpfU1RSRUFNX0VORCxcbiAgWl9ORUVEX0RJQ1Q6IGJpbmRpbmcuWl9ORUVEX0RJQ1QsXG4gIFpfRVJSTk86IGJpbmRpbmcuWl9FUlJOTyxcbiAgWl9TVFJFQU1fRVJST1I6IGJpbmRpbmcuWl9TVFJFQU1fRVJST1IsXG4gIFpfREFUQV9FUlJPUjogYmluZGluZy5aX0RBVEFfRVJST1IsXG4gIFpfTUVNX0VSUk9SOiBiaW5kaW5nLlpfTUVNX0VSUk9SLFxuICBaX0JVRl9FUlJPUjogYmluZGluZy5aX0JVRl9FUlJPUixcbiAgWl9WRVJTSU9OX0VSUk9SOiBiaW5kaW5nLlpfVkVSU0lPTl9FUlJPUlxufTtcblxudmFyIGNrZXlzID0gT2JqZWN0LmtleXMoY29kZXMpO1xuZm9yICh2YXIgY2sgPSAwOyBjayA8IGNrZXlzLmxlbmd0aDsgY2srKykge1xuICB2YXIgY2tleSA9IGNrZXlzW2NrXTtcbiAgY29kZXNbY29kZXNbY2tleV1dID0gY2tleTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjb2RlcycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IE9iamVjdC5mcmVlemUoY29kZXMpLCB3cml0YWJsZTogZmFsc2Vcbn0pO1xuXG5leHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlO1xuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcbmV4cG9ydHMuR3ppcCA9IEd6aXA7XG5leHBvcnRzLkd1bnppcCA9IEd1bnppcDtcbmV4cG9ydHMuRGVmbGF0ZVJhdyA9IERlZmxhdGVSYXc7XG5leHBvcnRzLkluZmxhdGVSYXcgPSBJbmZsYXRlUmF3O1xuZXhwb3J0cy5VbnppcCA9IFVuemlwO1xuXG5leHBvcnRzLmNyZWF0ZURlZmxhdGUgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IERlZmxhdGUobyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUluZmxhdGUgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IEluZmxhdGUobyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZURlZmxhdGVSYXcgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IERlZmxhdGVSYXcobyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUluZmxhdGVSYXcgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IEluZmxhdGVSYXcobyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUd6aXAgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IEd6aXAobyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUd1bnppcCA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgR3VuemlwKG8pO1xufTtcblxuZXhwb3J0cy5jcmVhdGVVbnppcCA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgVW56aXAobyk7XG59O1xuXG4vLyBDb252ZW5pZW5jZSBtZXRob2RzLlxuLy8gY29tcHJlc3MvZGVjb21wcmVzcyBhIHN0cmluZyBvciBidWZmZXIgaW4gb25lIHN0ZXAuXG5leHBvcnRzLmRlZmxhdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBEZWZsYXRlKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuZGVmbGF0ZVN5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgRGVmbGF0ZShvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmV4cG9ydHMuZ3ppcCA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEd6aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5nemlwU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBHemlwKG9wdHMpLCBidWZmZXIpO1xufTtcblxuZXhwb3J0cy5kZWZsYXRlUmF3ID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgRGVmbGF0ZVJhdyhvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLmRlZmxhdGVSYXdTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IERlZmxhdGVSYXcob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5leHBvcnRzLnVuemlwID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgVW56aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy51bnppcFN5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgVW56aXAob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5leHBvcnRzLmluZmxhdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBJbmZsYXRlKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgSW5mbGF0ZShvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmV4cG9ydHMuZ3VuemlwID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgR3VuemlwKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuZ3VuemlwU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBHdW56aXAob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5leHBvcnRzLmluZmxhdGVSYXcgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBJbmZsYXRlUmF3KG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuaW5mbGF0ZVJhd1N5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgSW5mbGF0ZVJhdyhvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmZ1bmN0aW9uIHpsaWJCdWZmZXIoZW5naW5lLCBidWZmZXIsIGNhbGxiYWNrKSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBucmVhZCA9IDA7XG5cbiAgZW5naW5lLm9uKCdlcnJvcicsIG9uRXJyb3IpO1xuICBlbmdpbmUub24oJ2VuZCcsIG9uRW5kKTtcblxuICBlbmdpbmUuZW5kKGJ1ZmZlcik7XG4gIGZsb3coKTtcblxuICBmdW5jdGlvbiBmbG93KCkge1xuICAgIHZhciBjaHVuaztcbiAgICB3aGlsZSAobnVsbCAhPT0gKGNodW5rID0gZW5naW5lLnJlYWQoKSkpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChjaHVuayk7XG4gICAgICBucmVhZCArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuICAgIGVuZ2luZS5vbmNlKCdyZWFkYWJsZScsIGZsb3cpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICBlbmdpbmUucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uRW5kKTtcbiAgICBlbmdpbmUucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgZmxvdyk7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgIHZhciBidWY7XG4gICAgdmFyIGVyciA9IG51bGw7XG5cbiAgICBpZiAobnJlYWQgPj0ga01heExlbmd0aCkge1xuICAgICAgZXJyID0gbmV3IFJhbmdlRXJyb3Ioa1JhbmdlRXJyb3JNZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBucmVhZCk7XG4gICAgfVxuXG4gICAgYnVmZmVycyA9IFtdO1xuICAgIGVuZ2luZS5jbG9zZSgpO1xuICAgIGNhbGxiYWNrKGVyciwgYnVmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB6bGliQnVmZmVyU3luYyhlbmdpbmUsIGJ1ZmZlcikge1xuICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJ1ZmZlcik7XG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgc3RyaW5nIG9yIGJ1ZmZlcicpO1xuXG4gIHZhciBmbHVzaEZsYWcgPSBlbmdpbmUuX2ZpbmlzaEZsdXNoRmxhZztcblxuICByZXR1cm4gZW5naW5lLl9wcm9jZXNzQ2h1bmsoYnVmZmVyLCBmbHVzaEZsYWcpO1xufVxuXG4vLyBnZW5lcmljIHpsaWJcbi8vIG1pbmltYWwgMi1ieXRlIGhlYWRlclxuZnVuY3Rpb24gRGVmbGF0ZShvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlKSkgcmV0dXJuIG5ldyBEZWZsYXRlKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFKTtcbn1cblxuZnVuY3Rpb24gSW5mbGF0ZShvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbmZsYXRlKSkgcmV0dXJuIG5ldyBJbmZsYXRlKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5JTkZMQVRFKTtcbn1cblxuLy8gZ3ppcCAtIGJpZ2dlciBoZWFkZXIsIHNhbWUgZGVmbGF0ZSBjb21wcmVzc2lvblxuZnVuY3Rpb24gR3ppcChvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBHemlwKSkgcmV0dXJuIG5ldyBHemlwKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5HWklQKTtcbn1cblxuZnVuY3Rpb24gR3VuemlwKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd1bnppcCkpIHJldHVybiBuZXcgR3VuemlwKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5HVU5aSVApO1xufVxuXG4vLyByYXcgLSBubyBoZWFkZXJcbmZ1bmN0aW9uIERlZmxhdGVSYXcob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVmbGF0ZVJhdykpIHJldHVybiBuZXcgRGVmbGF0ZVJhdyhvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuREVGTEFURVJBVyk7XG59XG5cbmZ1bmN0aW9uIEluZmxhdGVSYXcob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW5mbGF0ZVJhdykpIHJldHVybiBuZXcgSW5mbGF0ZVJhdyhvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuSU5GTEFURVJBVyk7XG59XG5cbi8vIGF1dG8tZGV0ZWN0IGhlYWRlci5cbmZ1bmN0aW9uIFVuemlwKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVuemlwKSkgcmV0dXJuIG5ldyBVbnppcChvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuVU5aSVApO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRmx1c2hGbGFnKGZsYWcpIHtcbiAgcmV0dXJuIGZsYWcgPT09IGJpbmRpbmcuWl9OT19GTFVTSCB8fCBmbGFnID09PSBiaW5kaW5nLlpfUEFSVElBTF9GTFVTSCB8fCBmbGFnID09PSBiaW5kaW5nLlpfU1lOQ19GTFVTSCB8fCBmbGFnID09PSBiaW5kaW5nLlpfRlVMTF9GTFVTSCB8fCBmbGFnID09PSBiaW5kaW5nLlpfRklOSVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9CTE9DSztcbn1cblxuLy8gdGhlIFpsaWIgY2xhc3MgdGhleSBhbGwgaW5oZXJpdCBmcm9tXG4vLyBUaGlzIHRoaW5nIG1hbmFnZXMgdGhlIHF1ZXVlIG9mIHJlcXVlc3RzLCBhbmQgcmV0dXJuc1xuLy8gdHJ1ZSBvciBmYWxzZSBpZiB0aGVyZSBpcyBhbnl0aGluZyBpbiB0aGUgcXVldWUgd2hlblxuLy8geW91IGNhbGwgdGhlIC53cml0ZSgpIG1ldGhvZC5cblxuZnVuY3Rpb24gWmxpYihvcHRzLCBtb2RlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5fb3B0cyA9IG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLl9jaHVua1NpemUgPSBvcHRzLmNodW5rU2l6ZSB8fCBleHBvcnRzLlpfREVGQVVMVF9DSFVOSztcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRzKTtcblxuICBpZiAob3B0cy5mbHVzaCAmJiAhaXNWYWxpZEZsdXNoRmxhZyhvcHRzLmZsdXNoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCBmbGFnOiAnICsgb3B0cy5mbHVzaCk7XG4gIH1cbiAgaWYgKG9wdHMuZmluaXNoRmx1c2ggJiYgIWlzVmFsaWRGbHVzaEZsYWcob3B0cy5maW5pc2hGbHVzaCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmx1c2ggZmxhZzogJyArIG9wdHMuZmluaXNoRmx1c2gpO1xuICB9XG5cbiAgdGhpcy5fZmx1c2hGbGFnID0gb3B0cy5mbHVzaCB8fCBiaW5kaW5nLlpfTk9fRkxVU0g7XG4gIHRoaXMuX2ZpbmlzaEZsdXNoRmxhZyA9IHR5cGVvZiBvcHRzLmZpbmlzaEZsdXNoICE9PSAndW5kZWZpbmVkJyA/IG9wdHMuZmluaXNoRmx1c2ggOiBiaW5kaW5nLlpfRklOSVNIO1xuXG4gIGlmIChvcHRzLmNodW5rU2l6ZSkge1xuICAgIGlmIChvcHRzLmNodW5rU2l6ZSA8IGV4cG9ydHMuWl9NSU5fQ0hVTksgfHwgb3B0cy5jaHVua1NpemUgPiBleHBvcnRzLlpfTUFYX0NIVU5LKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2h1bmsgc2l6ZTogJyArIG9wdHMuY2h1bmtTaXplKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy53aW5kb3dCaXRzKSB7XG4gICAgaWYgKG9wdHMud2luZG93Qml0cyA8IGV4cG9ydHMuWl9NSU5fV0lORE9XQklUUyB8fCBvcHRzLndpbmRvd0JpdHMgPiBleHBvcnRzLlpfTUFYX1dJTkRPV0JJVFMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB3aW5kb3dCaXRzOiAnICsgb3B0cy53aW5kb3dCaXRzKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5sZXZlbCkge1xuICAgIGlmIChvcHRzLmxldmVsIDwgZXhwb3J0cy5aX01JTl9MRVZFTCB8fCBvcHRzLmxldmVsID4gZXhwb3J0cy5aX01BWF9MRVZFTCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvbXByZXNzaW9uIGxldmVsOiAnICsgb3B0cy5sZXZlbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMubWVtTGV2ZWwpIHtcbiAgICBpZiAob3B0cy5tZW1MZXZlbCA8IGV4cG9ydHMuWl9NSU5fTUVNTEVWRUwgfHwgb3B0cy5tZW1MZXZlbCA+IGV4cG9ydHMuWl9NQVhfTUVNTEVWRUwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZW1MZXZlbDogJyArIG9wdHMubWVtTGV2ZWwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLnN0cmF0ZWd5KSB7XG4gICAgaWYgKG9wdHMuc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0ZJTFRFUkVEICYmIG9wdHMuc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0hVRkZNQU5fT05MWSAmJiBvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9STEUgJiYgb3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfRklYRUQgJiYgb3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfREVGQVVMVF9TVFJBVEVHWSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmF0ZWd5OiAnICsgb3B0cy5zdHJhdGVneSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMuZGljdGlvbmFyeSkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKG9wdHMuZGljdGlvbmFyeSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkaWN0aW9uYXJ5OiBpdCBzaG91bGQgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9oYW5kbGUgPSBuZXcgYmluZGluZy5abGliKG1vZGUpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5faGFkRXJyb3IgPSBmYWxzZTtcbiAgdGhpcy5faGFuZGxlLm9uZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSwgZXJybm8pIHtcbiAgICAvLyB0aGVyZSBpcyBubyB3YXkgdG8gY2xlYW5seSByZWNvdmVyLlxuICAgIC8vIGNvbnRpbnVpbmcgb25seSBvYnNjdXJlcyBwcm9ibGVtcy5cbiAgICBfY2xvc2Uoc2VsZik7XG4gICAgc2VsZi5faGFkRXJyb3IgPSB0cnVlO1xuXG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLmVycm5vID0gZXJybm87XG4gICAgZXJyb3IuY29kZSA9IGV4cG9ydHMuY29kZXNbZXJybm9dO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gIH07XG5cbiAgdmFyIGxldmVsID0gZXhwb3J0cy5aX0RFRkFVTFRfQ09NUFJFU1NJT047XG4gIGlmICh0eXBlb2Ygb3B0cy5sZXZlbCA9PT0gJ251bWJlcicpIGxldmVsID0gb3B0cy5sZXZlbDtcblxuICB2YXIgc3RyYXRlZ3kgPSBleHBvcnRzLlpfREVGQVVMVF9TVFJBVEVHWTtcbiAgaWYgKHR5cGVvZiBvcHRzLnN0cmF0ZWd5ID09PSAnbnVtYmVyJykgc3RyYXRlZ3kgPSBvcHRzLnN0cmF0ZWd5O1xuXG4gIHRoaXMuX2hhbmRsZS5pbml0KG9wdHMud2luZG93Qml0cyB8fCBleHBvcnRzLlpfREVGQVVMVF9XSU5ET1dCSVRTLCBsZXZlbCwgb3B0cy5tZW1MZXZlbCB8fCBleHBvcnRzLlpfREVGQVVMVF9NRU1MRVZFTCwgc3RyYXRlZ3ksIG9wdHMuZGljdGlvbmFyeSk7XG5cbiAgdGhpcy5fYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRoaXMuX2NodW5rU2l6ZSk7XG4gIHRoaXMuX29mZnNldCA9IDA7XG4gIHRoaXMuX2xldmVsID0gbGV2ZWw7XG4gIHRoaXMuX3N0cmF0ZWd5ID0gc3RyYXRlZ3k7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCB0aGlzLmNsb3NlKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19jbG9zZWQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLl9oYW5kbGU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxudXRpbC5pbmhlcml0cyhabGliLCBUcmFuc2Zvcm0pO1xuXG5abGliLnByb3RvdHlwZS5wYXJhbXMgPSBmdW5jdGlvbiAobGV2ZWwsIHN0cmF0ZWd5LCBjYWxsYmFjaykge1xuICBpZiAobGV2ZWwgPCBleHBvcnRzLlpfTUlOX0xFVkVMIHx8IGxldmVsID4gZXhwb3J0cy5aX01BWF9MRVZFTCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIGNvbXByZXNzaW9uIGxldmVsOiAnICsgbGV2ZWwpO1xuICB9XG4gIGlmIChzdHJhdGVneSAhPSBleHBvcnRzLlpfRklMVEVSRUQgJiYgc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0hVRkZNQU5fT05MWSAmJiBzdHJhdGVneSAhPSBleHBvcnRzLlpfUkxFICYmIHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9GSVhFRCAmJiBzdHJhdGVneSAhPSBleHBvcnRzLlpfREVGQVVMVF9TVFJBVEVHWSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgc3RyYXRlZ3k6ICcgKyBzdHJhdGVneSk7XG4gIH1cblxuICBpZiAodGhpcy5fbGV2ZWwgIT09IGxldmVsIHx8IHRoaXMuX3N0cmF0ZWd5ICE9PSBzdHJhdGVneSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmZsdXNoKGJpbmRpbmcuWl9TWU5DX0ZMVVNILCBmdW5jdGlvbiAoKSB7XG4gICAgICBhc3NlcnQoc2VsZi5faGFuZGxlLCAnemxpYiBiaW5kaW5nIGNsb3NlZCcpO1xuICAgICAgc2VsZi5faGFuZGxlLnBhcmFtcyhsZXZlbCwgc3RyYXRlZ3kpO1xuICAgICAgaWYgKCFzZWxmLl9oYWRFcnJvcikge1xuICAgICAgICBzZWxmLl9sZXZlbCA9IGxldmVsO1xuICAgICAgICBzZWxmLl9zdHJhdGVneSA9IHN0cmF0ZWd5O1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XG4gIH1cbn07XG5cblpsaWIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICBhc3NlcnQodGhpcy5faGFuZGxlLCAnemxpYiBiaW5kaW5nIGNsb3NlZCcpO1xuICByZXR1cm4gdGhpcy5faGFuZGxlLnJlc2V0KCk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBfZmx1c2ggZnVuY3Rpb24gY2FsbGVkIGJ5IHRoZSB0cmFuc2Zvcm0gY2xhc3MsXG4vLyBpbnRlcm5hbGx5LCB3aGVuIHRoZSBsYXN0IGNodW5rIGhhcyBiZWVuIHdyaXR0ZW4uXG5abGliLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy5fdHJhbnNmb3JtKEJ1ZmZlci5hbGxvYygwKSwgJycsIGNhbGxiYWNrKTtcbn07XG5cblpsaWIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGtpbmQsIGNhbGxiYWNrKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIHZhciB3cyA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBraW5kID09PSAnZnVuY3Rpb24nIHx8IGtpbmQgPT09IHVuZGVmaW5lZCAmJiAhY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGtpbmQ7XG4gICAga2luZCA9IGJpbmRpbmcuWl9GVUxMX0ZMVVNIO1xuICB9XG5cbiAgaWYgKHdzLmVuZGVkKSB7XG4gICAgaWYgKGNhbGxiYWNrKSBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmICh3cy5lbmRpbmcpIHtcbiAgICBpZiAoY2FsbGJhY2spIHRoaXMub25jZSgnZW5kJywgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHdzLm5lZWREcmFpbikge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5mbHVzaChraW5kLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZmx1c2hGbGFnID0ga2luZDtcbiAgICB0aGlzLndyaXRlKEJ1ZmZlci5hbGxvYygwKSwgJycsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgX2Nsb3NlKHRoaXMsIGNhbGxiYWNrKTtcbiAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgdGhpcyk7XG59O1xuXG5mdW5jdGlvbiBfY2xvc2UoZW5naW5lLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2spIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xuXG4gIC8vIENhbGxlciBtYXkgaW52b2tlIC5jbG9zZSBhZnRlciBhIHpsaWIgZXJyb3IgKHdoaWNoIHdpbGwgbnVsbCBfaGFuZGxlKS5cbiAgaWYgKCFlbmdpbmUuX2hhbmRsZSkgcmV0dXJuO1xuXG4gIGVuZ2luZS5faGFuZGxlLmNsb3NlKCk7XG4gIGVuZ2luZS5faGFuZGxlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZW1pdENsb3NlTlQoc2VsZikge1xuICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG59XG5cblpsaWIucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgZmx1c2hGbGFnO1xuICB2YXIgd3MgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgZW5kaW5nID0gd3MuZW5kaW5nIHx8IHdzLmVuZGVkO1xuICB2YXIgbGFzdCA9IGVuZGluZyAmJiAoIWNodW5rIHx8IHdzLmxlbmd0aCA9PT0gY2h1bmsubGVuZ3RoKTtcblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHJldHVybiBjYihuZXcgRXJyb3IoJ2ludmFsaWQgaW5wdXQnKSk7XG5cbiAgaWYgKCF0aGlzLl9oYW5kbGUpIHJldHVybiBjYihuZXcgRXJyb3IoJ3psaWIgYmluZGluZyBjbG9zZWQnKSk7XG5cbiAgLy8gSWYgaXQncyB0aGUgbGFzdCBjaHVuaywgb3IgYSBmaW5hbCBmbHVzaCwgd2UgdXNlIHRoZSBaX0ZJTklTSCBmbHVzaCBmbGFnXG4gIC8vIChvciB3aGF0ZXZlciBmbGFnIHdhcyBwcm92aWRlZCB1c2luZyBvcHRzLmZpbmlzaEZsdXNoKS5cbiAgLy8gSWYgaXQncyBleHBsaWNpdGx5IGZsdXNoaW5nIGF0IHNvbWUgb3RoZXIgdGltZSwgdGhlbiB3ZSB1c2VcbiAgLy8gWl9GVUxMX0ZMVVNILiBPdGhlcndpc2UsIHVzZSBaX05PX0ZMVVNIIGZvciBtYXhpbXVtIGNvbXByZXNzaW9uXG4gIC8vIGdvb2RuZXNzLlxuICBpZiAobGFzdCkgZmx1c2hGbGFnID0gdGhpcy5fZmluaXNoRmx1c2hGbGFnO2Vsc2Uge1xuICAgIGZsdXNoRmxhZyA9IHRoaXMuX2ZsdXNoRmxhZztcbiAgICAvLyBvbmNlIHdlJ3ZlIGZsdXNoZWQgdGhlIGxhc3Qgb2YgdGhlIHF1ZXVlLCBzdG9wIGZsdXNoaW5nIGFuZFxuICAgIC8vIGdvIGJhY2sgdG8gdGhlIG5vcm1hbCBiZWhhdmlvci5cbiAgICBpZiAoY2h1bmsubGVuZ3RoID49IHdzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fZmx1c2hGbGFnID0gdGhpcy5fb3B0cy5mbHVzaCB8fCBiaW5kaW5nLlpfTk9fRkxVU0g7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5fcHJvY2Vzc0NodW5rKGNodW5rLCBmbHVzaEZsYWcsIGNiKTtcbn07XG5cblpsaWIucHJvdG90eXBlLl9wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmssIGZsdXNoRmxhZywgY2IpIHtcbiAgdmFyIGF2YWlsSW5CZWZvcmUgPSBjaHVuayAmJiBjaHVuay5sZW5ndGg7XG4gIHZhciBhdmFpbE91dEJlZm9yZSA9IHRoaXMuX2NodW5rU2l6ZSAtIHRoaXMuX29mZnNldDtcbiAgdmFyIGluT2ZmID0gMDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGFzeW5jID0gdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmICghYXN5bmMpIHtcbiAgICB2YXIgYnVmZmVycyA9IFtdO1xuICAgIHZhciBucmVhZCA9IDA7XG5cbiAgICB2YXIgZXJyb3I7XG4gICAgdGhpcy5vbignZXJyb3InLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgIGVycm9yID0gZXI7XG4gICAgfSk7XG5cbiAgICBhc3NlcnQodGhpcy5faGFuZGxlLCAnemxpYiBiaW5kaW5nIGNsb3NlZCcpO1xuICAgIGRvIHtcbiAgICAgIHZhciByZXMgPSB0aGlzLl9oYW5kbGUud3JpdGVTeW5jKGZsdXNoRmxhZywgY2h1bmssIC8vIGluXG4gICAgICBpbk9mZiwgLy8gaW5fb2ZmXG4gICAgICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW5cbiAgICAgIHRoaXMuX2J1ZmZlciwgLy8gb3V0XG4gICAgICB0aGlzLl9vZmZzZXQsIC8vb3V0X29mZlxuICAgICAgYXZhaWxPdXRCZWZvcmUpOyAvLyBvdXRfbGVuXG4gICAgfSB3aGlsZSAoIXRoaXMuX2hhZEVycm9yICYmIGNhbGxiYWNrKHJlc1swXSwgcmVzWzFdKSk7XG5cbiAgICBpZiAodGhpcy5faGFkRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIGlmIChucmVhZCA+PSBrTWF4TGVuZ3RoKSB7XG4gICAgICBfY2xvc2UodGhpcyk7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihrUmFuZ2VFcnJvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKTtcbiAgICBfY2xvc2UodGhpcyk7XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgYXNzZXJ0KHRoaXMuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcbiAgdmFyIHJlcSA9IHRoaXMuX2hhbmRsZS53cml0ZShmbHVzaEZsYWcsIGNodW5rLCAvLyBpblxuICBpbk9mZiwgLy8gaW5fb2ZmXG4gIGF2YWlsSW5CZWZvcmUsIC8vIGluX2xlblxuICB0aGlzLl9idWZmZXIsIC8vIG91dFxuICB0aGlzLl9vZmZzZXQsIC8vb3V0X29mZlxuICBhdmFpbE91dEJlZm9yZSk7IC8vIG91dF9sZW5cblxuICByZXEuYnVmZmVyID0gY2h1bms7XG4gIHJlcS5jYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gIGZ1bmN0aW9uIGNhbGxiYWNrKGF2YWlsSW5BZnRlciwgYXZhaWxPdXRBZnRlcikge1xuICAgIC8vIFdoZW4gdGhlIGNhbGxiYWNrIGlzIHVzZWQgaW4gYW4gYXN5bmMgd3JpdGUsIHRoZSBjYWxsYmFjaydzXG4gICAgLy8gY29udGV4dCBpcyB0aGUgYHJlcWAgb2JqZWN0IHRoYXQgd2FzIGNyZWF0ZWQuIFRoZSByZXEgb2JqZWN0XG4gICAgLy8gaXMgPT09IHRoaXMuX2hhbmRsZSwgYW5kIHRoYXQncyB3aHkgaXQncyBpbXBvcnRhbnQgdG8gbnVsbFxuICAgIC8vIG91dCB0aGUgdmFsdWVzIGFmdGVyIHRoZXkgYXJlIGRvbmUgYmVpbmcgdXNlZC4gYHRoaXMuX2hhbmRsZWBcbiAgICAvLyBjYW4gc3RheSBpbiBtZW1vcnkgbG9uZ2VyIHRoYW4gdGhlIGNhbGxiYWNrIGFuZCBidWZmZXIgYXJlIG5lZWRlZC5cbiAgICBpZiAodGhpcykge1xuICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgdGhpcy5jYWxsYmFjayA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2hhZEVycm9yKSByZXR1cm47XG5cbiAgICB2YXIgaGF2ZSA9IGF2YWlsT3V0QmVmb3JlIC0gYXZhaWxPdXRBZnRlcjtcbiAgICBhc3NlcnQoaGF2ZSA+PSAwLCAnaGF2ZSBzaG91bGQgbm90IGdvIGRvd24nKTtcblxuICAgIGlmIChoYXZlID4gMCkge1xuICAgICAgdmFyIG91dCA9IHNlbGYuX2J1ZmZlci5zbGljZShzZWxmLl9vZmZzZXQsIHNlbGYuX29mZnNldCArIGhhdmUpO1xuICAgICAgc2VsZi5fb2Zmc2V0ICs9IGhhdmU7XG4gICAgICAvLyBzZXJ2ZSBzb21lIG91dHB1dCB0byB0aGUgY29uc3VtZXIuXG4gICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgc2VsZi5wdXNoKG91dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXJzLnB1c2gob3V0KTtcbiAgICAgICAgbnJlYWQgKz0gb3V0Lmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBleGhhdXN0ZWQgdGhlIG91dHB1dCBidWZmZXIsIG9yIHVzZWQgYWxsIHRoZSBpbnB1dCBjcmVhdGUgYSBuZXcgb25lLlxuICAgIGlmIChhdmFpbE91dEFmdGVyID09PSAwIHx8IHNlbGYuX29mZnNldCA+PSBzZWxmLl9jaHVua1NpemUpIHtcbiAgICAgIGF2YWlsT3V0QmVmb3JlID0gc2VsZi5fY2h1bmtTaXplO1xuICAgICAgc2VsZi5fb2Zmc2V0ID0gMDtcbiAgICAgIHNlbGYuX2J1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzZWxmLl9jaHVua1NpemUpO1xuICAgIH1cblxuICAgIGlmIChhdmFpbE91dEFmdGVyID09PSAwKSB7XG4gICAgICAvLyBOb3QgYWN0dWFsbHkgZG9uZS4gIE5lZWQgdG8gcmVwcm9jZXNzLlxuICAgICAgLy8gQWxzbywgdXBkYXRlIHRoZSBhdmFpbEluQmVmb3JlIHRvIHRoZSBhdmFpbEluQWZ0ZXIgdmFsdWUsXG4gICAgICAvLyBzbyB0aGF0IGlmIHdlIGhhdmUgdG8gaGl0IGl0IGEgdGhpcmQgKGZvdXJ0aCwgZXRjLikgdGltZSxcbiAgICAgIC8vIGl0J2xsIGhhdmUgdGhlIGNvcnJlY3QgYnl0ZSBjb3VudHMuXG4gICAgICBpbk9mZiArPSBhdmFpbEluQmVmb3JlIC0gYXZhaWxJbkFmdGVyO1xuICAgICAgYXZhaWxJbkJlZm9yZSA9IGF2YWlsSW5BZnRlcjtcblxuICAgICAgaWYgKCFhc3luYykgcmV0dXJuIHRydWU7XG5cbiAgICAgIHZhciBuZXdSZXEgPSBzZWxmLl9oYW5kbGUud3JpdGUoZmx1c2hGbGFnLCBjaHVuaywgaW5PZmYsIGF2YWlsSW5CZWZvcmUsIHNlbGYuX2J1ZmZlciwgc2VsZi5fb2Zmc2V0LCBzZWxmLl9jaHVua1NpemUpO1xuICAgICAgbmV3UmVxLmNhbGxiYWNrID0gY2FsbGJhY2s7IC8vIHRoaXMgc2FtZSBmdW5jdGlvblxuICAgICAgbmV3UmVxLmJ1ZmZlciA9IGNodW5rO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghYXN5bmMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGZpbmlzaGVkIHdpdGggdGhlIGNodW5rLlxuICAgIGNiKCk7XG4gIH1cbn07XG5cbnV0aWwuaW5oZXJpdHMoRGVmbGF0ZSwgWmxpYik7XG51dGlsLmluaGVyaXRzKEluZmxhdGUsIFpsaWIpO1xudXRpbC5pbmhlcml0cyhHemlwLCBabGliKTtcbnV0aWwuaW5oZXJpdHMoR3VuemlwLCBabGliKTtcbnV0aWwuaW5oZXJpdHMoRGVmbGF0ZVJhdywgWmxpYik7XG51dGlsLmluaGVyaXRzKEluZmxhdGVSYXcsIFpsaWIpO1xudXRpbC5pbmhlcml0cyhVbnppcCwgWmxpYik7IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludCBjYW1lbGNhc2U6IFwib2ZmXCIgKi9cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgWnN0cmVhbSA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvenN0cmVhbScpO1xudmFyIHpsaWJfZGVmbGF0ZSA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvZGVmbGF0ZS5qcycpO1xudmFyIHpsaWJfaW5mbGF0ZSA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvaW5mbGF0ZS5qcycpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvY29uc3RhbnRzJyk7XG5cbmZvciAodmFyIGtleSBpbiBjb25zdGFudHMpIHtcbiAgZXhwb3J0c1trZXldID0gY29uc3RhbnRzW2tleV07XG59XG5cbi8vIHpsaWIgbW9kZXNcbmV4cG9ydHMuTk9ORSA9IDA7XG5leHBvcnRzLkRFRkxBVEUgPSAxO1xuZXhwb3J0cy5JTkZMQVRFID0gMjtcbmV4cG9ydHMuR1pJUCA9IDM7XG5leHBvcnRzLkdVTlpJUCA9IDQ7XG5leHBvcnRzLkRFRkxBVEVSQVcgPSA1O1xuZXhwb3J0cy5JTkZMQVRFUkFXID0gNjtcbmV4cG9ydHMuVU5aSVAgPSA3O1xuXG52YXIgR1pJUF9IRUFERVJfSUQxID0gMHgxZjtcbnZhciBHWklQX0hFQURFUl9JRDIgPSAweDhiO1xuXG4vKipcbiAqIEVtdWxhdGUgTm9kZSdzIHpsaWIgQysrIGxheWVyIGZvciB1c2UgYnkgdGhlIEpTIGxheWVyIGluIGluZGV4LmpzXG4gKi9cbmZ1bmN0aW9uIFpsaWIobW9kZSkge1xuICBpZiAodHlwZW9mIG1vZGUgIT09ICdudW1iZXInIHx8IG1vZGUgPCBleHBvcnRzLkRFRkxBVEUgfHwgbW9kZSA+IGV4cG9ydHMuVU5aSVApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHRoaXMuZGljdGlvbmFyeSA9IG51bGw7XG4gIHRoaXMuZXJyID0gMDtcbiAgdGhpcy5mbHVzaCA9IDA7XG4gIHRoaXMuaW5pdF9kb25lID0gZmFsc2U7XG4gIHRoaXMubGV2ZWwgPSAwO1xuICB0aGlzLm1lbUxldmVsID0gMDtcbiAgdGhpcy5tb2RlID0gbW9kZTtcbiAgdGhpcy5zdHJhdGVneSA9IDA7XG4gIHRoaXMud2luZG93Qml0cyA9IDA7XG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcbiAgdGhpcy5wZW5kaW5nX2Nsb3NlID0gZmFsc2U7XG4gIHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkID0gMDtcbn1cblxuWmxpYi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLndyaXRlX2luX3Byb2dyZXNzKSB7XG4gICAgdGhpcy5wZW5kaW5nX2Nsb3NlID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnBlbmRpbmdfY2xvc2UgPSBmYWxzZTtcblxuICBhc3NlcnQodGhpcy5pbml0X2RvbmUsICdjbG9zZSBiZWZvcmUgaW5pdCcpO1xuICBhc3NlcnQodGhpcy5tb2RlIDw9IGV4cG9ydHMuVU5aSVApO1xuXG4gIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuREVGTEFURSB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1pJUCB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuREVGTEFURVJBVykge1xuICAgIHpsaWJfZGVmbGF0ZS5kZWZsYXRlRW5kKHRoaXMuc3RybSk7XG4gIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLklORkxBVEUgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLkdVTlpJUCB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuSU5GTEFURVJBVyB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuVU5aSVApIHtcbiAgICB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICB9XG5cbiAgdGhpcy5tb2RlID0gZXhwb3J0cy5OT05FO1xuXG4gIHRoaXMuZGljdGlvbmFyeSA9IG51bGw7XG59O1xuXG5abGliLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3dyaXRlKHRydWUsIGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbik7XG59O1xuXG5abGliLnByb3RvdHlwZS53cml0ZVN5bmMgPSBmdW5jdGlvbiAoZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7XG4gIHJldHVybiB0aGlzLl93cml0ZShmYWxzZSwgZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKTtcbn07XG5cblpsaWIucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChhc3luYywgZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7XG4gIGFzc2VydC5lcXVhbChhcmd1bWVudHMubGVuZ3RoLCA4KTtcblxuICBhc3NlcnQodGhpcy5pbml0X2RvbmUsICd3cml0ZSBiZWZvcmUgaW5pdCcpO1xuICBhc3NlcnQodGhpcy5tb2RlICE9PSBleHBvcnRzLk5PTkUsICdhbHJlYWR5IGZpbmFsaXplZCcpO1xuICBhc3NlcnQuZXF1YWwoZmFsc2UsIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MsICd3cml0ZSBhbHJlYWR5IGluIHByb2dyZXNzJyk7XG4gIGFzc2VydC5lcXVhbChmYWxzZSwgdGhpcy5wZW5kaW5nX2Nsb3NlLCAnY2xvc2UgaXMgcGVuZGluZycpO1xuXG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSB0cnVlO1xuXG4gIGFzc2VydC5lcXVhbChmYWxzZSwgZmx1c2ggPT09IHVuZGVmaW5lZCwgJ211c3QgcHJvdmlkZSBmbHVzaCB2YWx1ZScpO1xuXG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSB0cnVlO1xuXG4gIGlmIChmbHVzaCAhPT0gZXhwb3J0cy5aX05PX0ZMVVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfUEFSVElBTF9GTFVTSCAmJiBmbHVzaCAhPT0gZXhwb3J0cy5aX1NZTkNfRkxVU0ggJiYgZmx1c2ggIT09IGV4cG9ydHMuWl9GVUxMX0ZMVVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfRklOSVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfQkxPQ0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmx1c2ggdmFsdWUnKTtcbiAgfVxuXG4gIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgaW5wdXQgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaW5fbGVuID0gMDtcbiAgICBpbl9vZmYgPSAwO1xuICB9XG5cbiAgdGhpcy5zdHJtLmF2YWlsX2luID0gaW5fbGVuO1xuICB0aGlzLnN0cm0uaW5wdXQgPSBpbnB1dDtcbiAgdGhpcy5zdHJtLm5leHRfaW4gPSBpbl9vZmY7XG4gIHRoaXMuc3RybS5hdmFpbF9vdXQgPSBvdXRfbGVuO1xuICB0aGlzLnN0cm0ub3V0cHV0ID0gb3V0O1xuICB0aGlzLnN0cm0ubmV4dF9vdXQgPSBvdXRfb2ZmO1xuICB0aGlzLmZsdXNoID0gZmx1c2g7XG5cbiAgaWYgKCFhc3luYykge1xuICAgIC8vIHN5bmMgdmVyc2lvblxuICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuICAgIGlmICh0aGlzLl9jaGVja0Vycm9yKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hZnRlclN5bmMoKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gYXN5bmMgdmVyc2lvblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuX3Byb2Nlc3MoKTtcbiAgICBzZWxmLl9hZnRlcigpO1xuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cblpsaWIucHJvdG90eXBlLl9hZnRlclN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdmFpbF9vdXQgPSB0aGlzLnN0cm0uYXZhaWxfb3V0O1xuICB2YXIgYXZhaWxfaW4gPSB0aGlzLnN0cm0uYXZhaWxfaW47XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuXG4gIHJldHVybiBbYXZhaWxfaW4sIGF2YWlsX291dF07XG59O1xuXG5abGliLnByb3RvdHlwZS5fcHJvY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPSBudWxsO1xuXG4gIC8vIElmIHRoZSBhdmFpbF9vdXQgaXMgbGVmdCBhdCAwLCB0aGVuIGl0IG1lYW5zIHRoYXQgaXQgcmFuIG91dFxuICAvLyBvZiByb29tLiAgSWYgdGhlcmUgd2FzIGF2YWlsX291dCBsZWZ0IG92ZXIsIHRoZW4gaXQgbWVhbnNcbiAgLy8gdGhhdCBhbGwgb2YgdGhlIGlucHV0IHdhcyBjb25zdW1lZC5cbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuR1pJUDpcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURVJBVzpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9kZWZsYXRlLmRlZmxhdGUodGhpcy5zdHJtLCB0aGlzLmZsdXNoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXhwb3J0cy5VTlpJUDpcbiAgICAgIGlmICh0aGlzLnN0cm0uYXZhaWxfaW4gPiAwKSB7XG4gICAgICAgIG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPSB0aGlzLnN0cm0ubmV4dF9pbjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLmd6aXBfaWRfYnl0ZXNfcmVhZCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgaWYgKG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnN0cm0uaW5wdXRbbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZV0gPT09IEdaSVBfSEVBREVSX0lEMSkge1xuICAgICAgICAgICAgdGhpcy5nemlwX2lkX2J5dGVzX3JlYWQgPSAxO1xuICAgICAgICAgICAgbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSsrO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdHJtLmF2YWlsX2luID09PSAxKSB7XG4gICAgICAgICAgICAgIC8vIFRoZSBvbmx5IGF2YWlsYWJsZSBieXRlIHdhcyBhbHJlYWR5IHJlYWQuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBleHBvcnRzLklORkxBVEU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5zdHJtLmlucHV0W25leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGVdID09PSBHWklQX0hFQURFUl9JRDIpIHtcbiAgICAgICAgICAgIHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkID0gMjtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IGV4cG9ydHMuR1VOWklQO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBhY3R1YWwgZGlmZmVyZW5jZSBiZXR3ZWVuIElORkxBVEUgYW5kIElORkxBVEVSQVdcbiAgICAgICAgICAgIC8vIChhZnRlciBpbml0aWFsaXphdGlvbikuXG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBleHBvcnRzLklORkxBVEU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG51bWJlciBvZiBnemlwIG1hZ2ljIG51bWJlciBieXRlcyByZWFkJyk7XG4gICAgICB9XG5cbiAgICAvLyBmYWxsdGhyb3VnaFxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5HVU5aSVA6XG4gICAgY2FzZSBleHBvcnRzLklORkxBVEVSQVc6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHRoaXMuc3RybSwgdGhpcy5mbHVzaFxuXG4gICAgICAvLyBJZiBkYXRhIHdhcyBlbmNvZGVkIHdpdGggZGljdGlvbmFyeVxuICAgICAgKTtpZiAodGhpcy5lcnIgPT09IGV4cG9ydHMuWl9ORUVEX0RJQ1QgJiYgdGhpcy5kaWN0aW9uYXJ5KSB7XG4gICAgICAgIC8vIExvYWQgaXRcbiAgICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCB0aGlzLmRpY3Rpb25hcnkpO1xuICAgICAgICBpZiAodGhpcy5lcnIgPT09IGV4cG9ydHMuWl9PSykge1xuICAgICAgICAgIC8vIEFuZCB0cnkgdG8gZGVjb2RlIGFnYWluXG4gICAgICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZSh0aGlzLnN0cm0sIHRoaXMuZmx1c2gpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZXJyID09PSBleHBvcnRzLlpfREFUQV9FUlJPUikge1xuICAgICAgICAgIC8vIEJvdGggaW5mbGF0ZVNldERpY3Rpb25hcnkoKSBhbmQgaW5mbGF0ZSgpIHJldHVybiBaX0RBVEFfRVJST1IuXG4gICAgICAgICAgLy8gTWFrZSBpdCBwb3NzaWJsZSBmb3IgQWZ0ZXIoKSB0byB0ZWxsIGEgYmFkIGRpY3Rpb25hcnkgZnJvbSBiYWRcbiAgICAgICAgICAvLyBpbnB1dC5cbiAgICAgICAgICB0aGlzLmVyciA9IGV4cG9ydHMuWl9ORUVEX0RJQ1Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICh0aGlzLnN0cm0uYXZhaWxfaW4gPiAwICYmIHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HVU5aSVAgJiYgdGhpcy5lcnIgPT09IGV4cG9ydHMuWl9TVFJFQU1fRU5EICYmIHRoaXMuc3RybS5uZXh0X2luWzBdICE9PSAweDAwKSB7XG4gICAgICAgIC8vIEJ5dGVzIHJlbWFpbiBpbiBpbnB1dCBidWZmZXIuIFBlcmhhcHMgdGhpcyBpcyBhbm90aGVyIGNvbXByZXNzZWRcbiAgICAgICAgLy8gbWVtYmVyIGluIHRoZSBzYW1lIGFyY2hpdmUsIG9yIGp1c3QgdHJhaWxpbmcgZ2FyYmFnZS5cbiAgICAgICAgLy8gVHJhaWxpbmcgemVybyBieXRlcyBhcmUgb2theSwgdGhvdWdoLCBzaW5jZSB0aGV5IGFyZSBmcmVxdWVudGx5XG4gICAgICAgIC8vIHVzZWQgZm9yIHBhZGRpbmcuXG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHRoaXMuc3RybSwgdGhpcy5mbHVzaCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1vZGUgJyArIHRoaXMubW9kZSk7XG4gIH1cbn07XG5cblpsaWIucHJvdG90eXBlLl9jaGVja0Vycm9yID0gZnVuY3Rpb24gKCkge1xuICAvLyBBY2NlcHRhYmxlIGVycm9yIHN0YXRlcyBkZXBlbmQgb24gdGhlIHR5cGUgb2YgemxpYiBzdHJlYW0uXG4gIHN3aXRjaCAodGhpcy5lcnIpIHtcbiAgICBjYXNlIGV4cG9ydHMuWl9PSzpcbiAgICBjYXNlIGV4cG9ydHMuWl9CVUZfRVJST1I6XG4gICAgICBpZiAodGhpcy5zdHJtLmF2YWlsX291dCAhPT0gMCAmJiB0aGlzLmZsdXNoID09PSBleHBvcnRzLlpfRklOSVNIKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKCd1bmV4cGVjdGVkIGVuZCBvZiBmaWxlJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXhwb3J0cy5aX1NUUkVBTV9FTkQ6XG4gICAgICAvLyBub3JtYWwgc3RhdHVzZXMsIG5vdCBmYXRhbFxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBleHBvcnRzLlpfTkVFRF9ESUNUOlxuICAgICAgaWYgKHRoaXMuZGljdGlvbmFyeSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKCdNaXNzaW5nIGRpY3Rpb25hcnknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKCdCYWQgZGljdGlvbmFyeScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBzb21ldGhpbmcgZWxzZS5cbiAgICAgIHRoaXMuX2Vycm9yKCdabGliIGVycm9yJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblpsaWIucHJvdG90eXBlLl9hZnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9jaGVja0Vycm9yKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYXZhaWxfb3V0ID0gdGhpcy5zdHJtLmF2YWlsX291dDtcbiAgdmFyIGF2YWlsX2luID0gdGhpcy5zdHJtLmF2YWlsX2luO1xuXG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAvLyBjYWxsIHRoZSB3cml0ZSgpIGNiXG4gIHRoaXMuY2FsbGJhY2soYXZhaWxfaW4sIGF2YWlsX291dCk7XG5cbiAgaWYgKHRoaXMucGVuZGluZ19jbG9zZSkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuc3RybS5tc2cpIHtcbiAgICBtZXNzYWdlID0gdGhpcy5zdHJtLm1zZztcbiAgfVxuICB0aGlzLm9uZXJyb3IobWVzc2FnZSwgdGhpcy5lcnJcblxuICAvLyBubyBob3BlIG9mIHJlc2N1ZS5cbiAgKTt0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gIGlmICh0aGlzLnBlbmRpbmdfY2xvc2UpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cbn07XG5cblpsaWIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAod2luZG93Qml0cywgbGV2ZWwsIG1lbUxldmVsLCBzdHJhdGVneSwgZGljdGlvbmFyeSkge1xuICBhc3NlcnQoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCB8fCBhcmd1bWVudHMubGVuZ3RoID09PSA1LCAnaW5pdCh3aW5kb3dCaXRzLCBsZXZlbCwgbWVtTGV2ZWwsIHN0cmF0ZWd5LCBbZGljdGlvbmFyeV0pJyk7XG5cbiAgYXNzZXJ0KHdpbmRvd0JpdHMgPj0gOCAmJiB3aW5kb3dCaXRzIDw9IDE1LCAnaW52YWxpZCB3aW5kb3dCaXRzJyk7XG4gIGFzc2VydChsZXZlbCA+PSAtMSAmJiBsZXZlbCA8PSA5LCAnaW52YWxpZCBjb21wcmVzc2lvbiBsZXZlbCcpO1xuXG4gIGFzc2VydChtZW1MZXZlbCA+PSAxICYmIG1lbUxldmVsIDw9IDksICdpbnZhbGlkIG1lbWxldmVsJyk7XG5cbiAgYXNzZXJ0KHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfRklMVEVSRUQgfHwgc3RyYXRlZ3kgPT09IGV4cG9ydHMuWl9IVUZGTUFOX09OTFkgfHwgc3RyYXRlZ3kgPT09IGV4cG9ydHMuWl9STEUgfHwgc3RyYXRlZ3kgPT09IGV4cG9ydHMuWl9GSVhFRCB8fCBzdHJhdGVneSA9PT0gZXhwb3J0cy5aX0RFRkFVTFRfU1RSQVRFR1ksICdpbnZhbGlkIHN0cmF0ZWd5Jyk7XG5cbiAgdGhpcy5faW5pdChsZXZlbCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5LCBkaWN0aW9uYXJ5KTtcbiAgdGhpcy5fc2V0RGljdGlvbmFyeSgpO1xufTtcblxuWmxpYi5wcm90b3R5cGUucGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2RlZmxhdGVQYXJhbXMgTm90IHN1cHBvcnRlZCcpO1xufTtcblxuWmxpYi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuX3NldERpY3Rpb25hcnkoKTtcbn07XG5cblpsaWIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKGxldmVsLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3ksIGRpY3Rpb25hcnkpIHtcbiAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB0aGlzLndpbmRvd0JpdHMgPSB3aW5kb3dCaXRzO1xuICB0aGlzLm1lbUxldmVsID0gbWVtTGV2ZWw7XG4gIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcblxuICB0aGlzLmZsdXNoID0gZXhwb3J0cy5aX05PX0ZMVVNIO1xuXG4gIHRoaXMuZXJyID0gZXhwb3J0cy5aX09LO1xuXG4gIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1pJUCB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1VOWklQKSB7XG4gICAgdGhpcy53aW5kb3dCaXRzICs9IDE2O1xuICB9XG5cbiAgaWYgKHRoaXMubW9kZSA9PT0gZXhwb3J0cy5VTlpJUCkge1xuICAgIHRoaXMud2luZG93Qml0cyArPSAzMjtcbiAgfVxuXG4gIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuREVGTEFURVJBVyB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuSU5GTEFURVJBVykge1xuICAgIHRoaXMud2luZG93Qml0cyA9IC0xICogdGhpcy53aW5kb3dCaXRzO1xuICB9XG5cbiAgdGhpcy5zdHJtID0gbmV3IFpzdHJlYW0oKTtcblxuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5HWklQOlxuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFUkFXOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUluaXQyKHRoaXMuc3RybSwgdGhpcy5sZXZlbCwgZXhwb3J0cy5aX0RFRkxBVEVELCB0aGlzLndpbmRvd0JpdHMsIHRoaXMubWVtTGV2ZWwsIHRoaXMuc3RyYXRlZ3kpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBleHBvcnRzLklORkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLkdVTlpJUDpcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURVJBVzpcbiAgICBjYXNlIGV4cG9ydHMuVU5aSVA6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLCB0aGlzLndpbmRvd0JpdHMpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpO1xuICB9XG5cbiAgaWYgKHRoaXMuZXJyICE9PSBleHBvcnRzLlpfT0spIHtcbiAgICB0aGlzLl9lcnJvcignSW5pdCBlcnJvcicpO1xuICB9XG5cbiAgdGhpcy5kaWN0aW9uYXJ5ID0gZGljdGlvbmFyeTtcblxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gIHRoaXMuaW5pdF9kb25lID0gdHJ1ZTtcbn07XG5cblpsaWIucHJvdG90eXBlLl9zZXREaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5kaWN0aW9uYXJ5ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVyciA9IGV4cG9ydHMuWl9PSztcblxuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFUkFXOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCB0aGlzLmRpY3Rpb25hcnkpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaWYgKHRoaXMuZXJyICE9PSBleHBvcnRzLlpfT0spIHtcbiAgICB0aGlzLl9lcnJvcignRmFpbGVkIHRvIHNldCBkaWN0aW9uYXJ5Jyk7XG4gIH1cbn07XG5cblpsaWIucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lcnIgPSBleHBvcnRzLlpfT0s7XG5cbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURVJBVzpcbiAgICBjYXNlIGV4cG9ydHMuR1pJUDpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9kZWZsYXRlLmRlZmxhdGVSZXNldCh0aGlzLnN0cm0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBleHBvcnRzLklORkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLklORkxBVEVSQVc6XG4gICAgY2FzZSBleHBvcnRzLkdVTlpJUDpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGVSZXNldCh0aGlzLnN0cm0pO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaWYgKHRoaXMuZXJyICE9PSBleHBvcnRzLlpfT0spIHtcbiAgICB0aGlzLl9lcnJvcignRmFpbGVkIHRvIHJlc2V0IHN0cmVhbScpO1xuICB9XG59O1xuXG5leHBvcnRzLlpsaWIgPSBabGliOyIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0QXNzaWduOyIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xuICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cbiAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X2luID0gMDtcbiAgLyogbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqL1xuICB0aGlzLmF2YWlsX2luID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gIHRoaXMudG90YWxfaW4gPSAwO1xuICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9vdXQgPSAwO1xuICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb3V0cHV0IHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX291dCA9IDA7XG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICB0aGlzLm1zZyA9ICcnLypaX05VTEwqLztcbiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xuICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXG4gIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gIHRoaXMuYWRsZXIgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFpTdHJlYW07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzICAgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcbnZhciB0cmVlcyAgID0gcmVxdWlyZSgnLi90cmVlcycpO1xudmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcbnZhciBjcmMzMiAgID0gcmVxdWlyZSgnLi9jcmMzMicpO1xudmFyIG1zZyAgICAgPSByZXF1aXJlKCcuL21lc3NhZ2VzJyk7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbnZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xudmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7XG4vL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xudmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7XG52YXIgWl9GSU5JU0ggICAgICAgID0gNDtcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xuLy92YXIgWl9UUkVFUyAgICAgICAgID0gNjtcblxuXG4vKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gKi9cbnZhciBaX09LICAgICAgICAgICAgPSAwO1xudmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG4vL3ZhciBaX05FRURfRElDVCAgICAgPSAyO1xuLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG52YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XG52YXIgWl9EQVRBX0VSUk9SICAgID0gLTM7XG4vL3ZhciBaX01FTV9FUlJPUiAgICAgPSAtNDtcbnZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xuXG5cbi8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuLy92YXIgWl9OT19DT01QUkVTU0lPTiAgICAgID0gMDtcbi8vdmFyIFpfQkVTVF9TUEVFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5O1xudmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG5cbnZhciBaX0ZJTFRFUkVEICAgICAgICAgICAgPSAxO1xudmFyIFpfSFVGRk1BTl9PTkxZICAgICAgICA9IDI7XG52YXIgWl9STEUgICAgICAgICAgICAgICAgID0gMztcbnZhciBaX0ZJWEVEICAgICAgICAgICAgICAgPSA0O1xudmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbi8vdmFyIFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG4vL3ZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbnZhciBaX1VOS05PV04gICAgICAgICAgICAgPSAyO1xuXG5cbi8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xudmFyIFpfREVGTEFURUQgID0gODtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG52YXIgTUFYX01FTV9MRVZFTCA9IDk7XG4vKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cbnZhciBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xudmFyIERFRl9NRU1fTEVWRUwgPSA4O1xuXG5cbnZhciBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cbnZhciBMSVRFUkFMUyAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xudmFyIERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xudmFyIEJMX0NPREVTICAgICAgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xudmFyIE1BWF9CSVRTICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBNSU5fTUFUQ0ggPSAzO1xudmFyIE1BWF9NQVRDSCA9IDI1ODtcbnZhciBNSU5fTE9PS0FIRUFEID0gKE1BWF9NQVRDSCArIE1JTl9NQVRDSCArIDEpO1xuXG52YXIgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG52YXIgSU5JVF9TVEFURSA9IDQyO1xudmFyIEVYVFJBX1NUQVRFID0gNjk7XG52YXIgTkFNRV9TVEFURSA9IDczO1xudmFyIENPTU1FTlRfU1RBVEUgPSA5MTtcbnZhciBIQ1JDX1NUQVRFID0gMTAzO1xudmFyIEJVU1lfU1RBVEUgPSAxMTM7XG52YXIgRklOSVNIX1NUQVRFID0gNjY2O1xuXG52YXIgQlNfTkVFRF9NT1JFICAgICAgPSAxOyAvKiBibG9jayBub3QgY29tcGxldGVkLCBuZWVkIG1vcmUgaW5wdXQgb3IgbW9yZSBvdXRwdXQgKi9cbnZhciBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xudmFyIEJTX0ZJTklTSF9TVEFSVEVEID0gMzsgLyogZmluaXNoIHN0YXJ0ZWQsIG5lZWQgb25seSBtb3JlIG91dHB1dCBhdCBuZXh0IGRlZmxhdGUgKi9cbnZhciBCU19GSU5JU0hfRE9ORSAgICA9IDQ7IC8qIGZpbmlzaCBkb25lLCBhY2NlcHQgbm8gbW9yZSBpbnB1dCBvciBvdXRwdXQgKi9cblxudmFyIE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LlxuXG5mdW5jdGlvbiBlcnIoc3RybSwgZXJyb3JDb2RlKSB7XG4gIHN0cm0ubXNnID0gbXNnW2Vycm9yQ29kZV07XG4gIHJldHVybiBlcnJvckNvZGU7XG59XG5cbmZ1bmN0aW9uIHJhbmsoZikge1xuICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApO1xufVxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG4gKiB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0XG4gKiB0byBhdm9pZCBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+b3V0cHV0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxuICogKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICovXG5mdW5jdGlvbiBmbHVzaF9wZW5kaW5nKHN0cm0pIHtcbiAgdmFyIHMgPSBzdHJtLnN0YXRlO1xuXG4gIC8vX3RyX2ZsdXNoX2JpdHMocyk7XG4gIHZhciBsZW4gPSBzLnBlbmRpbmc7XG4gIGlmIChsZW4gPiBzdHJtLmF2YWlsX291dCkge1xuICAgIGxlbiA9IHN0cm0uYXZhaWxfb3V0O1xuICB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgdXRpbHMuYXJyYXlTZXQoc3RybS5vdXRwdXQsIHMucGVuZGluZ19idWYsIHMucGVuZGluZ19vdXQsIGxlbiwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgKz0gbGVuO1xuICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gbGVuO1xuICBzdHJtLmF2YWlsX291dCAtPSBsZW47XG4gIHMucGVuZGluZyAtPSBsZW47XG4gIGlmIChzLnBlbmRpbmcgPT09IDApIHtcbiAgICBzLnBlbmRpbmdfb3V0ID0gMDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGZsdXNoX2Jsb2NrX29ubHkocywgbGFzdCkge1xuICB0cmVlcy5fdHJfZmx1c2hfYmxvY2socywgKHMuYmxvY2tfc3RhcnQgPj0gMCA/IHMuYmxvY2tfc3RhcnQgOiAtMSksIHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0LCBsYXN0KTtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIGZsdXNoX3BlbmRpbmcocy5zdHJtKTtcbn1cblxuXG5mdW5jdGlvbiBwdXRfYnl0ZShzLCBiKSB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQdXQgYSBzaG9ydCBpbiB0aGUgcGVuZGluZyBidWZmZXIuIFRoZSAxNi1iaXQgdmFsdWUgaXMgcHV0IGluIE1TQiBvcmRlci5cbiAqIElOIGFzc2VydGlvbjogdGhlIHN0cmVhbSBzdGF0ZSBpcyBjb3JyZWN0IGFuZCB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpblxuICogcGVuZGluZ19idWYuXG4gKi9cbmZ1bmN0aW9uIHB1dFNob3J0TVNCKHMsIGIpIHtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiA+PiA4KSk7XG4vLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgJiAweGZmKSk7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKGIgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAqIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICogKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG4gKi9cbmZ1bmN0aW9uIHJlYWRfYnVmKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpIHtcbiAgdmFyIGxlbiA9IHN0cm0uYXZhaWxfaW47XG5cbiAgaWYgKGxlbiA+IHNpemUpIHsgbGVuID0gc2l6ZTsgfVxuICBpZiAobGVuID09PSAwKSB7IHJldHVybiAwOyB9XG5cbiAgc3RybS5hdmFpbF9pbiAtPSBsZW47XG5cbiAgLy8gem1lbWNweShidWYsIHN0cm0tPm5leHRfaW4sIGxlbik7XG4gIHV0aWxzLmFycmF5U2V0KGJ1Ziwgc3RybS5pbnB1dCwgc3RybS5uZXh0X2luLCBsZW4sIHN0YXJ0KTtcbiAgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMSkge1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG4gIH1cblxuICBlbHNlIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDIpIHtcbiAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XG4gIHN0cm0udG90YWxfaW4gKz0gbGVuO1xuXG4gIHJldHVybiBsZW47XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmRcbiAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCxcbiAqIGluIHdoaWNoIGNhc2UgdGhlIHJlc3VsdCBpcyBlcXVhbCB0byBwcmV2X2xlbmd0aCBhbmQgbWF0Y2hfc3RhcnQgaXNcbiAqIGdhcmJhZ2UuXG4gKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50XG4gKiAgIHN0cmluZyAoc3Ryc3RhcnQpIGFuZCBpdHMgZGlzdGFuY2UgaXMgPD0gTUFYX0RJU1QsIGFuZCBwcmV2X2xlbmd0aCA+PSAxXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLlxuICovXG5mdW5jdGlvbiBsb25nZXN0X21hdGNoKHMsIGN1cl9tYXRjaCkge1xuICB2YXIgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAgICAgIC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqL1xuICB2YXIgc2NhbiA9IHMuc3Ryc3RhcnQ7IC8qIGN1cnJlbnQgc3RyaW5nICovXG4gIHZhciBtYXRjaDsgICAgICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi9cbiAgdmFyIGJlc3RfbGVuID0gcy5wcmV2X2xlbmd0aDsgICAgICAgICAgICAgIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xuICB2YXIgbmljZV9tYXRjaCA9IHMubmljZV9tYXRjaDsgICAgICAgICAgICAgLyogc3RvcCBpZiBtYXRjaCBsb25nIGVub3VnaCAqL1xuICB2YXIgbGltaXQgPSAocy5zdHJzdGFydCA+IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSA/XG4gICAgICBzLnN0cnN0YXJ0IC0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgOiAwLypOSUwqLztcblxuICB2YXIgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dFxuXG4gIHZhciB3bWFzayA9IHMud19tYXNrO1xuICB2YXIgcHJldiAgPSBzLnByZXY7XG5cbiAgLyogU3RvcCB3aGVuIGN1cl9tYXRjaCBiZWNvbWVzIDw9IGxpbWl0LiBUbyBzaW1wbGlmeSB0aGUgY29kZSxcbiAgICogd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZyBvZiB3aW5kb3cgaW5kZXggMC5cbiAgICovXG5cbiAgdmFyIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG4gIHZhciBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgdmFyIHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG5cbiAgLyogVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2YgMTYuXG4gICAqIEl0IGlzIGVhc3kgdG8gZ2V0IHJpZCBvZiB0aGlzIG9wdGltaXphdGlvbiBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICAvLyBBc3NlcnQocy0+aGFzaF9iaXRzID49IDggJiYgTUFYX01BVENIID09IDI1OCwgXCJDb2RlIHRvbyBjbGV2ZXJcIik7XG5cbiAgLyogRG8gbm90IHdhc3RlIHRvbyBtdWNoIHRpbWUgaWYgd2UgYWxyZWFkeSBoYXZlIGEgZ29vZCBtYXRjaDogKi9cbiAgaWYgKHMucHJldl9sZW5ndGggPj0gcy5nb29kX21hdGNoKSB7XG4gICAgY2hhaW5fbGVuZ3RoID4+PSAyO1xuICB9XG4gIC8qIERvIG5vdCBsb29rIGZvciBtYXRjaGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4gVGhpcyBpcyBuZWNlc3NhcnlcbiAgICogdG8gbWFrZSBkZWZsYXRlIGRldGVybWluaXN0aWMuXG4gICAqL1xuICBpZiAobmljZV9tYXRjaCA+IHMubG9va2FoZWFkKSB7IG5pY2VfbWF0Y2ggPSBzLmxvb2thaGVhZDsgfVxuXG4gIC8vIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplLU1JTl9MT09LQUhFQUQsIFwibmVlZCBsb29rYWhlYWRcIik7XG5cbiAgZG8ge1xuICAgIC8vIEFzc2VydChjdXJfbWF0Y2ggPCBzLT5zdHJzdGFydCwgXCJubyBmdXR1cmVcIik7XG4gICAgbWF0Y2ggPSBjdXJfbWF0Y2g7XG5cbiAgICAvKiBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2VcbiAgICAgKiBvciBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIGxlc3MgdGhhbiAyLiAgTm90ZSB0aGF0IHRoZSBjaGVja3MgYmVsb3dcbiAgICAgKiBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IG9jY3VyIG9jY2FzaW9uYWxseSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgKiByZWFzb25zLiAgVGhlcmVmb3JlIHVuaW5pdGlhbGl6ZWQgbWVtb3J5IHdpbGwgYmUgYWNjZXNzZWQsIGFuZFxuICAgICAqIGNvbmRpdGlvbmFsIGp1bXBzIHdpbGwgYmUgbWFkZSB0aGF0IGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMuXG4gICAgICogSG93ZXZlciB0aGUgbGVuZ3RoIG9mIHRoZSBtYXRjaCBpcyBsaW1pdGVkIHRvIHRoZSBsb29rYWhlYWQsIHNvXG4gICAgICogdGhlIG91dHB1dCBvZiBkZWZsYXRlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgdW5pbml0aWFsaXplZCB2YWx1ZXMuXG4gICAgICovXG5cbiAgICBpZiAoX3dpblttYXRjaCArIGJlc3RfbGVuXSAgICAgIT09IHNjYW5fZW5kICB8fFxuICAgICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XG4gICAgICAgIF93aW5bbWF0Y2hdICAgICAgICAgICAgICAgICE9PSBfd2luW3NjYW5dIHx8XG4gICAgICAgIF93aW5bKyttYXRjaF0gICAgICAgICAgICAgICE9PSBfd2luW3NjYW4gKyAxXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogVGhlIGNoZWNrIGF0IGJlc3RfbGVuLTEgY2FuIGJlIHJlbW92ZWQgYmVjYXVzZSBpdCB3aWxsIGJlIG1hZGVcbiAgICAgKiBhZ2FpbiBsYXRlci4gKFRoaXMgaGV1cmlzdGljIGlzIG5vdCBhbHdheXMgYSB3aW4uKVxuICAgICAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcGFyZSBzY2FuWzJdIGFuZCBtYXRjaFsyXSBzaW5jZSB0aGV5XG4gICAgICogYXJlIGFsd2F5cyBlcXVhbCB3aGVuIHRoZSBvdGhlciBieXRlcyBtYXRjaCwgZ2l2ZW4gdGhhdFxuICAgICAqIHRoZSBoYXNoIGtleXMgYXJlIGVxdWFsIGFuZCB0aGF0IEhBU0hfQklUUyA+PSA4LlxuICAgICAqL1xuICAgIHNjYW4gKz0gMjtcbiAgICBtYXRjaCsrO1xuICAgIC8vIEFzc2VydCgqc2NhbiA9PSAqbWF0Y2gsIFwibWF0Y2hbMl0/XCIpO1xuXG4gICAgLyogV2UgY2hlY2sgZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBldmVyeSA4dGggY29tcGFyaXNvbjtcbiAgICAgKiB0aGUgMjU2dGggY2hlY2sgd2lsbCBiZSBtYWRlIGF0IHN0cnN0YXJ0KzI1OC5cbiAgICAgKi9cbiAgICBkbyB7XG4gICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cbiAgICB9IHdoaWxlIChfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG5cbiAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG5cbiAgICBsZW4gPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcblxuICAgIGlmIChsZW4gPiBiZXN0X2xlbikge1xuICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDtcbiAgICAgIGJlc3RfbGVuID0gbGVuO1xuICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gICAgICBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuICAgIH1cbiAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTtcblxuICBpZiAoYmVzdF9sZW4gPD0gcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gYmVzdF9sZW47XG4gIH1cbiAgcmV0dXJuIHMubG9va2FoZWFkO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmlsbCB0aGUgd2luZG93IHdoZW4gdGhlIGxvb2thaGVhZCBiZWNvbWVzIGluc3VmZmljaWVudC5cbiAqIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC5cbiAqXG4gKiBJTiBhc3NlcnRpb246IGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQURcbiAqIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFEXG4gKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmVcbiAqICAgIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXG4gKiAgICBvcHRpb24gLS0gbm90IHN1cHBvcnRlZCBoZXJlKS5cbiAqL1xuZnVuY3Rpb24gZmlsbF93aW5kb3cocykge1xuICB2YXIgX3dfc2l6ZSA9IHMud19zaXplO1xuICB2YXIgcCwgbiwgbSwgbW9yZSwgc3RyO1xuXG4gIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsIFwiYWxyZWFkeSBlbm91Z2ggbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcbiAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqL1xuICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcbiAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplO1xuICAgIC8vXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xuICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWZcbiAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcbiAgICAvLyAgICAgICAgICovXG4gICAgLy8gICAgICAgIG1vcmUtLTtcbiAgICAvLyAgICB9XG4gICAgLy99XG5cblxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXG4gICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXG4gICAgICB1dGlscy5hcnJheVNldChzLndpbmRvdywgcy53aW5kb3csIF93X3NpemUsIF93X3NpemUsIDApO1xuICAgICAgcy5tYXRjaF9zdGFydCAtPSBfd19zaXplO1xuICAgICAgcy5zdHJzdGFydCAtPSBfd19zaXplO1xuICAgICAgLyogd2Ugbm93IGhhdmUgc3Ryc3RhcnQgPj0gTUFYX0RJU1QgKi9cbiAgICAgIHMuYmxvY2tfc3RhcnQgLT0gX3dfc2l6ZTtcblxuICAgICAgLyogU2xpZGUgdGhlIGhhc2ggdGFibGUgKGNvdWxkIGJlIGF2b2lkZWQgd2l0aCAzMiBiaXQgdmFsdWVzXG4gICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDBcbiAgICAgICB0byBrZWVwIHRoZSBoYXNoIHRhYmxlIGNvbnNpc3RlbnQgaWYgd2Ugc3dpdGNoIGJhY2sgdG8gbGV2ZWwgPiAwXG4gICAgICAgbGF0ZXIuIChVc2luZyBsZXZlbCAwIHBlcm1hbmVudGx5IGlzIG5vdCBhbiBvcHRpbWFsIHVzYWdlIG9mXG4gICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcbiAgICAgICAqL1xuXG4gICAgICBuID0gcy5oYXNoX3NpemU7XG4gICAgICBwID0gbjtcbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMuaGVhZFstLXBdO1xuICAgICAgICBzLmhlYWRbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG4gPSBfd19zaXplO1xuICAgICAgcCA9IG47XG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLnByZXZbLS1wXTtcbiAgICAgICAgcy5wcmV2W3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XG4gICAgICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgbW9yZSArPSBfd19zaXplO1xuICAgIH1cbiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzpcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKVxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cbiAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cbiAgICAgKi9cbiAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG4gICAgbiA9IHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCwgbW9yZSk7XG4gICAgcy5sb29rYWhlYWQgKz0gbjtcblxuICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkge1xuICAgICAgc3RyID0gcy5zdHJzdGFydCAtIHMuaW5zZXJ0O1xuICAgICAgcy5pbnNfaCA9IHMud2luZG93W3N0cl07XG5cbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgMV0pICYgcy5oYXNoX21hc2s7XG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgICBzdHIrKztcbiAgICAgICAgcy5pbnNlcnQtLTtcbiAgICAgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPCBNSU5fTUFUQ0gpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGUgd2hvbGUgaW5wdXQgaGFzIGxlc3MgdGhhbiBNSU5fTUFUQ0ggYnl0ZXMsIGluc19oIGlzIGdhcmJhZ2UsXG4gICAgICogYnV0IHRoaXMgaXMgbm90IGltcG9ydGFudCBzaW5jZSBvbmx5IGxpdGVyYWwgYnl0ZXMgd2lsbCBiZSBlbWl0dGVkLlxuICAgICAqL1xuXG4gIH0gd2hpbGUgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBzLnN0cm0uYXZhaWxfaW4gIT09IDApO1xuXG4gIC8qIElmIHRoZSBXSU5fSU5JVCBieXRlcyBhZnRlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGRhdGEgaGF2ZSBuZXZlciBiZWVuXG4gICAqIHdyaXR0ZW4sIHRoZW4gemVybyB0aG9zZSBieXRlcyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgcmVwb3J0cyBvZlxuICAgKiB0aGUgdXNlIG9mIHVuaW5pdGlhbGl6ZWQgKG9yIHVuaW5pdGlhbGlzZWQgYXMgSnVsaWFuIHdyaXRlcykgYnl0ZXMgYnlcbiAgICogdGhlIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMuICBVcGRhdGUgdGhlIGhpZ2ggd2F0ZXIgbWFyayBmb3IgdGhlIG5leHRcbiAgICogdGltZSB0aHJvdWdoIGhlcmUuICBXSU5fSU5JVCBpcyBzZXQgdG8gTUFYX01BVENIIHNpbmNlIHRoZSBsb25nZXN0IG1hdGNoXG4gICAqIHJvdXRpbmVzIGFsbG93IHNjYW5uaW5nIHRvIHN0cnN0YXJ0ICsgTUFYX01BVENILCBpZ25vcmluZyBsb29rYWhlYWQuXG4gICAqL1xuLy8gIGlmIChzLmhpZ2hfd2F0ZXIgPCBzLndpbmRvd19zaXplKSB7XG4vLyAgICB2YXIgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDtcbi8vICAgIHZhciBpbml0ID0gMDtcbi8vXG4vLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3Vycikge1xuLy8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcbi8vICAgICAgICogYnl0ZXMgb3IgdXAgdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXG4vLyAgICAgICAqL1xuLy8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG4vLyAgICAgIGlmIChpbml0ID4gV0lOX0lOSVQpXG4vLyAgICAgICAgaW5pdCA9IFdJTl9JTklUO1xuLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgPSBjdXJyICsgaW5pdDtcbi8vICAgIH1cbi8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuLy8gICAgICAvKiBIaWdoIHdhdGVyIG1hcmsgYXQgb3IgYWJvdmUgY3VycmVudCBkYXRhLCBidXQgYmVsb3cgY3VycmVudCBkYXRhXG4vLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwXG4vLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9ICh1bGcpY3VyciArIFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG4vLyAgICAgICAgaW5pdCA9IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG4vLyAgICB9XG4vLyAgfVxuLy9cbi8vICBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQsXG4vLyAgICBcIm5vdCBlbm91Z2ggcm9vbSBmb3Igc2VhcmNoXCIpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgd2l0aG91dCBjb21wcmVzc2lvbiBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuXG4gKiB0aGUgY3VycmVudCBibG9jayBzdGF0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IHNpbmNlXG4gKiB1bmNvbXByZXNzaWJsZSBkYXRhIGlzIHByb2JhYmx5IG5vdCB1c2VmdWwuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZFxuICogb25seSBmb3IgdGhlIGxldmVsPTAgY29tcHJlc3Npb24gb3B0aW9uLlxuICogTk9URTogdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgb3B0aW1pemVkIHRvIGF2b2lkIGV4dHJhIGNvcHlpbmcgZnJvbVxuICogd2luZG93IHRvIHBlbmRpbmdfYnVmLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3N0b3JlZChzLCBmbHVzaCkge1xuICAvKiBTdG9yZWQgYmxvY2tzIGFyZSBsaW1pdGVkIHRvIDB4ZmZmZiBieXRlcywgcGVuZGluZ19idWYgaXMgbGltaXRlZFxuICAgKiB0byBwZW5kaW5nX2J1Zl9zaXplLCBhbmQgZWFjaCBzdG9yZWQgYmxvY2sgaGFzIGEgNSBieXRlIGhlYWRlcjpcbiAgICovXG4gIHZhciBtYXhfYmxvY2tfc2l6ZSA9IDB4ZmZmZjtcblxuICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XG4gICAgbWF4X2Jsb2NrX3NpemUgPSBzLnBlbmRpbmdfYnVmX3NpemUgLSA1O1xuICB9XG5cbiAgLyogQ29weSBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gaW5wdXQgdG8gb3V0cHV0OiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogRmlsbCB0aGUgd2luZG93IGFzIG11Y2ggYXMgcG9zc2libGU6ICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IDEpIHtcblxuICAgICAgLy9Bc3NlcnQocy0+c3Ryc3RhcnQgPCBzLT53X3NpemUrTUFYX0RJU1QocykgfHxcbiAgICAgIC8vICBzLT5ibG9ja19zdGFydCA+PSAobG9uZylzLT53X3NpemUsIFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIGlmICghKHMuc3Ryc3RhcnQgPCBzLndfc2l6ZSArIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHx8XG4vLyAgICAgICAgcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSkpIHtcbi8vICAgICAgICB0aHJvdyAgbmV3IEVycm9yKFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIH1cblxuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG4gICAgLy9Bc3NlcnQocy0+YmxvY2tfc3RhcnQgPj0gMEwsIFwiYmxvY2sgZ29uZVwiKTtcbi8vICAgIGlmIChzLmJsb2NrX3N0YXJ0IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiYmxvY2sgZ29uZVwiKTtcblxuICAgIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gICAgcy5sb29rYWhlYWQgPSAwO1xuXG4gICAgLyogRW1pdCBhIHN0b3JlZCBibG9jayBpZiBwZW5kaW5nX2J1ZiB3aWxsIGJlIGZ1bGw6ICovXG4gICAgdmFyIG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcblxuICAgIGlmIChzLnN0cnN0YXJ0ID09PSAwIHx8IHMuc3Ryc3RhcnQgPj0gbWF4X3N0YXJ0KSB7XG4gICAgICAvKiBzdHJzdGFydCA9PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZSAqL1xuICAgICAgcy5sb29rYWhlYWQgPSBzLnN0cnN0YXJ0IC0gbWF4X3N0YXJ0O1xuICAgICAgcy5zdHJzdGFydCA9IG1heF9zdGFydDtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG5cblxuICAgIH1cbiAgICAvKiBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcbiAgICAgKiBuZWdhdGl2ZSBhbmQgdGhlIGRhdGEgd2lsbCBiZSBnb25lOlxuICAgICAqL1xuICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cblxuICBzLmluc2VydCA9IDA7XG5cbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG5cbiAgaWYgKHMuc3Ryc3RhcnQgPiBzLmJsb2NrX3N0YXJ0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX05FRURfTU9SRTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wcmVzcyBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuIHRoZSBjdXJyZW50XG4gKiBibG9jayBzdGF0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgcGVyZm9ybSBsYXp5IGV2YWx1YXRpb24gb2YgbWF0Y2hlcyBhbmQgaW5zZXJ0c1xuICogbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgb25seSBmb3IgdW5tYXRjaGVkIHN0cmluZ3Mgb3IgZm9yIHNob3J0XG4gKiBtYXRjaGVzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBmYXN0IGNvbXByZXNzaW9uIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfZmFzdChzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuICAgICAqL1xuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cbiAgICB9XG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seVxuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuICAgICAgICogaXMgbm90IHRvbyBsYXJnZS4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gvKm1heF9pbnNlcnRfbGVuZ3RoKi8gJiYgcy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoLS07IC8qIHN0cmluZyBhdCBzdHJzdGFydCBhbHJlYWR5IGluIHRhYmxlICovXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICAgIC8qIHN0cnN0YXJ0IG5ldmVyIGV4Y2VlZHMgV1NJWkUtTUFYX01BVENILCBzbyB0aGVyZSBhcmVcbiAgICAgICAgICAgKiBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLlxuICAgICAgICAgICAqL1xuICAgICAgICB9IHdoaWxlICgtLXMubWF0Y2hfbGVuZ3RoICE9PSAwKTtcbiAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgfSBlbHNlXG4gICAgICB7XG4gICAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdO1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0KzFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgICAgICAgICAgQ2FsbCBVUERBVEVfSEFTSCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXNcbi8vI2VuZGlmXG4gICAgICAgIC8qIElmIGxvb2thaGVhZCA8IE1JTl9NQVRDSCwgaW5zX2ggaXMgZ2FyYmFnZSwgYnV0IGl0IGRvZXMgbm90XG4gICAgICAgICAqIG1hdHRlciBzaW5jZSBpdCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgbmV4dCBkZWZsYXRlIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMud2luZG93W3Muc3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gKChzLnN0cnN0YXJ0IDwgKE1JTl9NQVRDSCAtIDEpKSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxKTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBhY2hpZXZlcyBiZXR0ZXIgY29tcHJlc3Npb24uIFdlIHVzZSBhIGxhenlcbiAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcbiAqIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW5kb3cgcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgICAvKiBoZWFkIG9mIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIHZhciBtYXhfaW5zZXJ0O1xuXG4gIC8qIFByb2Nlc3MgdGhlIGlucHV0IGJsb2NrLiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGVcbiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAvKioqL1xuICAgIH1cblxuICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG4gICAgICovXG4gICAgcy5wcmV2X2xlbmd0aCA9IHMubWF0Y2hfbGVuZ3RoO1xuICAgIHMucHJldl9tYXRjaCA9IHMubWF0Y2hfc3RhcnQ7XG4gICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgcy5wcmV2X2xlbmd0aCA8IHMubWF4X2xhenlfbWF0Y2ggJiZcbiAgICAgICAgcy5zdHJzdGFydCAtIGhhc2hfaGVhZCA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKS8qTUFYX0RJU1QocykqLykge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSA1ICYmXG4gICAgICAgICAocy5zdHJhdGVneSA9PT0gWl9GSUxURVJFRCB8fCAocy5tYXRjaF9sZW5ndGggPT09IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCA+IDQwOTYvKlRPT19GQVIqLykpKSB7XG5cbiAgICAgICAgLyogSWYgcHJldl9tYXRjaCBpcyBhbHNvIE1JTl9NQVRDSCwgbWF0Y2hfc3RhcnQgaXMgZ2FyYmFnZVxuICAgICAgICAgKiBidXQgd2Ugd2lsbCBpZ25vcmUgdGhlIGN1cnJlbnQgbWF0Y2ggYW55d2F5LlxuICAgICAgICAgKi9cbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBhdCB0aGUgcHJldmlvdXMgc3RlcCBhbmQgdGhlIGN1cnJlbnRcbiAgICAgKiBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOlxuICAgICAqL1xuICAgIGlmIChzLnByZXZfbGVuZ3RoID49IE1JTl9NQVRDSCAmJiBzLm1hdGNoX2xlbmd0aCA8PSBzLnByZXZfbGVuZ3RoKSB7XG4gICAgICBtYXhfaW5zZXJ0ID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkIC0gTUlOX01BVENIO1xuICAgICAgLyogRG8gbm90IGluc2VydCBzdHJpbmdzIGluIGhhc2ggdGFibGUgYmV5b25kIHRoaXMuICovXG5cbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydC0xLCBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGgpO1xuXG4gICAgICAvKioqX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgICBzLnByZXZfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCk7XG4gICAgICAvKiBJbnNlcnQgaW4gaGFzaCB0YWJsZSBhbGwgc3RyaW5ncyB1cCB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaC5cbiAgICAgICAqIHN0cnN0YXJ0LTEgYW5kIHN0cnN0YXJ0IGFyZSBhbHJlYWR5IGluc2VydGVkLiBJZiB0aGVyZSBpcyBub3RcbiAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW5cbiAgICAgICAqIHRoZSBoYXNoIHRhYmxlLlxuICAgICAgICovXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoIC0gMTtcbiAgICAgIHMucHJldl9sZW5ndGggLT0gMjtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApO1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgICAgfVxuICAgICAgICAvKioqL1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgICAgLyogSWYgdGhlcmUgd2FzIG5vIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiwgb3V0cHV0IGFcbiAgICAgICAqIHNpbmdsZSBsaXRlcmFsLiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBidXQgdGhlIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1hdGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuXG4gICAgICAgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DS19PTkxZKHMsIDApICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIC8qKiovXG4gICAgICB9XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogVGhlcmUgaXMgbm8gcHJldmlvdXMgbWF0Y2ggdG8gY29tcGFyZSB3aXRoLCB3YWl0IGZvclxuICAgICAgICogdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChmbHVzaCAhPSBaX05PX0ZMVVNILCBcIm5vIGZsdXNoP1wiKTtcbiAgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICB9XG4gIHMuaW5zZXJ0ID0gcy5zdHJzdGFydCA8IE1JTl9NQVRDSCAtIDEgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGb3IgWl9STEUsIHNpbXBseSBsb29rIGZvciBydW5zIG9mIGJ5dGVzLCBnZW5lcmF0ZSBtYXRjaGVzIG9ubHkgb2YgZGlzdGFuY2VcbiAqIG9uZS4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuICAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZlxuICogZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gWl9STEUuKVxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3JsZShzLCBmbHVzaCkge1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuICB2YXIgcHJldjsgICAgICAgICAgICAgIC8qIGJ5dGUgYXQgZGlzdGFuY2Ugb25lIHRvIG1hdGNoICovXG4gIHZhciBzY2FuLCBzdHJlbmQ7ICAgICAgLyogc2NhbiBnb2VzIHVwIHRvIHN0cmVuZCBmb3IgbGVuZ3RoIG9mIHJ1biAqL1xuXG4gIHZhciBfd2luID0gcy53aW5kb3c7XG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBsb25nZXN0IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0gpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogU2VlIGhvdyBtYW55IHRpbWVzIHRoZSBwcmV2aW91cyBieXRlIHJlcGVhdHMgKi9cbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0ID4gMCkge1xuICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxO1xuICAgICAgcHJldiA9IF93aW5bc2Nhbl07XG4gICAgICBpZiAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0pIHtcbiAgICAgICAgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqL1xuICAgICAgICB9IHdoaWxlIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1BWF9NQVRDSCAtIChzdHJlbmQgLSBzY2FuKTtcbiAgICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoID4gcy5sb29rYWhlYWQpIHtcbiAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IHMubG9va2FoZWFkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChzY2FuIDw9IHMtPndpbmRvdysodUludCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuICAgIH1cblxuICAgIC8qIEVtaXQgbWF0Y2ggaWYgaGF2ZSBydW4gb2YgTUlOX01BVENIIG9yIGxvbmdlciwgZWxzZSBlbWl0IGxpdGVyYWwgKi9cbiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMuc3Ryc3RhcnQgLSAxLCBzLm1hdGNoX2xlbmd0aCk7XG5cbiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3QocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gMDtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLlxuICogKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2YgZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gSHVmZm1hbi4pXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfaHVmZihzLCBmbHVzaCkge1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBhIGxpdGVyYWwgdG8gd3JpdGUuICovXG4gICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG4gICAgcy5sb29rYWhlYWQtLTtcbiAgICBzLnN0cnN0YXJ0Kys7XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuICB0aGlzLmdvb2RfbGVuZ3RoID0gZ29vZF9sZW5ndGg7XG4gIHRoaXMubWF4X2xhenkgPSBtYXhfbGF6eTtcbiAgdGhpcy5uaWNlX2xlbmd0aCA9IG5pY2VfbGVuZ3RoO1xuICB0aGlzLm1heF9jaGFpbiA9IG1heF9jaGFpbjtcbiAgdGhpcy5mdW5jID0gZnVuYztcbn1cblxudmFyIGNvbmZpZ3VyYXRpb25fdGFibGU7XG5cbmNvbmZpZ3VyYXRpb25fdGFibGUgPSBbXG4gIC8qICAgICAgZ29vZCBsYXp5IG5pY2UgY2hhaW4gKi9cbiAgbmV3IENvbmZpZygwLCAwLCAwLCAwLCBkZWZsYXRlX3N0b3JlZCksICAgICAgICAgIC8qIDAgc3RvcmUgb25seSAqL1xuICBuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIGRlZmxhdGVfZmFzdCksICAgICAgICAgICAgLyogMSBtYXggc3BlZWQsIG5vIGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDQsIDUsIDE2LCA4LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgLyogMiAqL1xuICBuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgLyogMyAqL1xuXG4gIG5ldyBDb25maWcoNCwgNCwgMTYsIDE2LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgICAvKiA0IGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAzMiwgMzIsIGRlZmxhdGVfc2xvdyksICAgICAgICAgLyogNSAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAxMjgsIDEyOCwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNiAqL1xuICBuZXcgQ29uZmlnKDgsIDMyLCAxMjgsIDI1NiwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNyAqL1xuICBuZXcgQ29uZmlnKDMyLCAxMjgsIDI1OCwgMTAyNCwgZGVmbGF0ZV9zbG93KSwgICAgLyogOCAqL1xuICBuZXcgQ29uZmlnKDMyLCAyNTgsIDI1OCwgNDA5NiwgZGVmbGF0ZV9zbG93KSAgICAgLyogOSBtYXggY29tcHJlc3Npb24gKi9cbl07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSBcImxvbmdlc3QgbWF0Y2hcIiByb3V0aW5lcyBmb3IgYSBuZXcgemxpYiBzdHJlYW1cbiAqL1xuZnVuY3Rpb24gbG1faW5pdChzKSB7XG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59XG5cblxuZnVuY3Rpb24gRGVmbGF0ZVN0YXRlKCkge1xuICB0aGlzLnN0cm0gPSBudWxsOyAgICAgICAgICAgIC8qIHBvaW50ZXIgYmFjayB0byB0aGlzIHpsaWIgc3RyZWFtICovXG4gIHRoaXMuc3RhdHVzID0gMDsgICAgICAgICAgICAvKiBhcyB0aGUgbmFtZSBpbXBsaWVzICovXG4gIHRoaXMucGVuZGluZ19idWYgPSBudWxsOyAgICAgIC8qIG91dHB1dCBzdGlsbCBwZW5kaW5nICovXG4gIHRoaXMucGVuZGluZ19idWZfc2l6ZSA9IDA7ICAvKiBzaXplIG9mIHBlbmRpbmdfYnVmICovXG4gIHRoaXMucGVuZGluZ19vdXQgPSAwOyAgICAgICAvKiBuZXh0IHBlbmRpbmcgYnl0ZSB0byBvdXRwdXQgdG8gdGhlIHN0cmVhbSAqL1xuICB0aGlzLnBlbmRpbmcgPSAwOyAgICAgICAgICAgLyogbmIgb2YgYnl0ZXMgaW4gdGhlIHBlbmRpbmcgYnVmZmVyICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG4gIHRoaXMuZ3poZWFkID0gbnVsbDsgICAgICAgICAvKiBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiB0byB3cml0ZSAqL1xuICB0aGlzLmd6aW5kZXggPSAwOyAgICAgICAgICAgLyogd2hlcmUgaW4gZXh0cmEsIG5hbWUsIG9yIGNvbW1lbnQgKi9cbiAgdGhpcy5tZXRob2QgPSBaX0RFRkxBVEVEOyAvKiBjYW4gb25seSBiZSBERUZMQVRFRCAqL1xuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXG5cbiAgdGhpcy53X3NpemUgPSAwOyAgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICovXG4gIHRoaXMud19iaXRzID0gMDsgIC8qIGxvZzIod19zaXplKSAgKDguLjE2KSAqL1xuICB0aGlzLndfbWFzayA9IDA7ICAvKiB3X3NpemUgLSAxICovXG5cbiAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAvKiBTbGlkaW5nIHdpbmRvdy4gSW5wdXQgYnl0ZXMgYXJlIHJlYWQgaW50byB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIHdpbmRvdyxcbiAgICogYW5kIG1vdmUgdG8gdGhlIGZpcnN0IGhhbGYgbGF0ZXIgdG8ga2VlcCBhIGRpY3Rpb25hcnkgb2YgYXQgbGVhc3Qgd1NpemVcbiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRpb24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZlxuICAgKiB3U2l6ZS1NQVhfTUFUQ0ggYnl0ZXMsIGJ1dCB0aGlzIGVuc3VyZXMgdGhhdCBJTyBpcyBhbHdheXNcbiAgICogcGVyZm9ybWVkIHdpdGggYSBsZW5ndGggbXVsdGlwbGUgb2YgdGhlIGJsb2NrIHNpemUuXG4gICAqL1xuXG4gIHRoaXMud2luZG93X3NpemUgPSAwO1xuICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuICAgKiBpcyBkaXJlY3RseSB1c2VkIGFzIHNsaWRpbmcgd2luZG93LlxuICAgKi9cblxuICB0aGlzLnByZXYgPSBudWxsO1xuICAvKiBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpc1xuICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxuICAgKiBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW5kb3cgaW5kZXggbW9kdWxvIDMySy5cbiAgICovXG5cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAvKiBIZWFkcyBvZiB0aGUgaGFzaCBjaGFpbnMgb3IgTklMLiAqL1xuXG4gIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xuICB0aGlzLmhhc2hfc2l6ZSA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi9cbiAgdGhpcy5oYXNoX2JpdHMgPSAwOyAgIC8qIGxvZzIoaGFzaF9zaXplKSAqL1xuICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cblxuICB0aGlzLmhhc2hfc2hpZnQgPSAwO1xuICAvKiBOdW1iZXIgb2YgYml0cyBieSB3aGljaCBpbnNfaCBtdXN0IGJlIHNoaWZ0ZWQgYXQgZWFjaCBpbnB1dFxuICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3RcbiAgICogYnl0ZSBubyBsb25nZXIgdGFrZXMgcGFydCBpbiB0aGUgaGFzaCBrZXksIHRoYXQgaXM6XG4gICAqICAgaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcbiAgICovXG5cbiAgdGhpcy5ibG9ja19zdGFydCA9IDA7XG4gIC8qIFdpbmRvdyBwb3NpdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjdXJyZW50IG91dHB1dCBibG9jay4gR2V0c1xuICAgKiBuZWdhdGl2ZSB3aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLlxuICAgKi9cblxuICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7ICAgICAgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi9cbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXG4gIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMDsgICAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovXG4gIHRoaXMuc3Ryc3RhcnQgPSAwOyAgICAgICAgICAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cbiAgdGhpcy5sb29rYWhlYWQgPSAwOyAgICAgICAgIC8qIG51bWJlciBvZiB2YWxpZCBieXRlcyBhaGVhZCBpbiB3aW5kb3cgKi9cblxuICB0aGlzLnByZXZfbGVuZ3RoID0gMDtcbiAgLyogTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAqIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLlxuICAgKi9cblxuICB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwO1xuICAvKiBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xuICAgKiBsZW5ndGguICBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlXG4gICAqIHNwZWVkLlxuICAgKi9cblxuICB0aGlzLm1heF9sYXp5X21hdGNoID0gMDtcbiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxuICAgKiBzbWFsbGVyIHRoYW4gdGhpcyB2YWx1ZS4gVGhpcyBtZWNoYW5pc20gaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvblxuICAgKiBsZXZlbHMgPj0gNC5cbiAgICovXG4gIC8vIFRoYXQncyBhbGlhcyB0byBtYXhfbGF6eV9tYXRjaCwgZG9uJ3QgdXNlIGRpcmVjdGx5XG4gIC8vdGhpcy5tYXhfaW5zZXJ0X2xlbmd0aCA9IDA7XG4gIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XG4gICAqIGdyZWF0ZXIgdGhhbiB0aGlzIGxlbmd0aC4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICogbWF4X2luc2VydF9sZW5ndGggaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvbiBsZXZlbHMgPD0gMy5cbiAgICovXG5cbiAgdGhpcy5sZXZlbCA9IDA7ICAgICAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi9cbiAgdGhpcy5zdHJhdGVneSA9IDA7ICAvKiBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZyovXG5cbiAgdGhpcy5nb29kX21hdGNoID0gMDtcbiAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovXG5cbiAgdGhpcy5uaWNlX21hdGNoID0gMDsgLyogU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpcyAqL1xuXG4gICAgICAgICAgICAgIC8qIHVzZWQgYnkgdHJlZXMuYzogKi9cblxuICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovXG5cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBibF90cmVlWzIqQkxfQ09ERVMrMV07ICAvKiBIdWZmbWFuIHRyZWUgZm9yIGJpdCBsZW5ndGhzICovXG5cbiAgLy8gVXNlIGZsYXQgYXJyYXkgb2YgRE9VQkxFIHNpemUsIHdpdGggaW50ZXJsZWF2ZWQgZmF0YSxcbiAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZVxuICB0aGlzLmR5bl9sdHJlZSAgPSBuZXcgdXRpbHMuQnVmMTYoSEVBUF9TSVpFICogMik7XG4gIHRoaXMuZHluX2R0cmVlICA9IG5ldyB1dGlscy5CdWYxNigoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgICAgPSBuZXcgdXRpbHMuQnVmMTYoKDIgKiBCTF9DT0RFUyArIDEpICogMik7XG4gIHplcm8odGhpcy5keW5fbHRyZWUpO1xuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyh0aGlzLmJsX3RyZWUpO1xuXG4gIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cbiAgdGhpcy5kX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGRpc3RhbmNlIHRyZWUgKi9cbiAgdGhpcy5ibF9kZXNjICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGJpdCBsZW5ndGggdHJlZSAqL1xuXG4gIC8vdXNoIGJsX2NvdW50W01BWF9CSVRTKzFdO1xuICB0aGlzLmJsX2NvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vaW50IGhlYXBbMipMX0NPREVTKzFdOyAgICAgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB0aGlzLmhlYXAgPSBuZXcgdXRpbHMuQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvKHRoaXMuaGVhcCk7XG5cbiAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXG4gIHRoaXMuaGVhcF9tYXggPSAwOyAgICAgICAgICAgICAgIC8qIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3kgKi9cbiAgLyogVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cbiAgICovXG5cbiAgdGhpcy5kZXB0aCA9IG5ldyB1dGlscy5CdWYxNigyICogTF9DT0RFUyArIDEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XG4gIHplcm8odGhpcy5kZXB0aCk7XG4gIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3lcbiAgICovXG5cbiAgdGhpcy5sX2J1ZiA9IDA7ICAgICAgICAgIC8qIGJ1ZmZlciBpbmRleCBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3RocyAqL1xuXG4gIHRoaXMubGl0X2J1ZnNpemUgPSAwO1xuICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcbiAgICogICAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuICAgKiAgICAgd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBmb3JcbiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cbiAgICogICAgIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cbiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG4gICAqICAgICBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG4gICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG4gICAqICAgICBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcbiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuICAgKi9cblxuICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cbiAgdGhpcy5kX2J1ZiA9IDA7XG4gIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmVcbiAgICogdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLiBUbyB1c2UgZGlmZmVyZW50IGxlbmd0aHMsIGFuIGV4dHJhIGZsYWdcbiAgICogYXJyYXkgd291bGQgYmUgbmVjZXNzYXJ5LlxuICAgKi9cblxuICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xuICB0aGlzLm1hdGNoZXMgPSAwOyAgICAgICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVudCBibG9jayAqL1xuICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuICB0aGlzLmJpX2J1ZiA9IDA7XG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG4gICAqIHNpZ25pZmljYW50IGJpdHMpLlxuICAgKi9cbiAgdGhpcy5iaV92YWxpZCA9IDA7XG4gIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuICAgKiBhcmUgYWx3YXlzIHplcm8uXG4gICAqL1xuXG4gIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cbiAgLy90aGlzLmhpZ2hfd2F0ZXIgPSAwO1xuICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cbiAgICogbG9uZ2VzdCBtYXRjaCByb3V0aW5lcyBhY2Nlc3MgYnl0ZXMgcGFzdCB0aGUgaW5wdXQuICBUaGlzIGlzIHRoZW5cbiAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cbiAgICovXG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKSB7XG4gIHZhciBzO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gMDtcbiAgc3RybS5kYXRhX3R5cGUgPSBaX1VOS05PV047XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG4gIHMucGVuZGluZyA9IDA7XG4gIHMucGVuZGluZ19vdXQgPSAwO1xuXG4gIGlmIChzLndyYXAgPCAwKSB7XG4gICAgcy53cmFwID0gLXMud3JhcDtcbiAgICAvKiB3YXMgbWFkZSBuZWdhdGl2ZSBieSBkZWZsYXRlKC4uLiwgWl9GSU5JU0gpOyAqL1xuICB9XG4gIHMuc3RhdHVzID0gKHMud3JhcCA/IElOSVRfU1RBVEUgOiBCVVNZX1NUQVRFKTtcbiAgc3RybS5hZGxlciA9IChzLndyYXAgPT09IDIpID9cbiAgICAwICAvLyBjcmMzMigwLCBaX05VTEwsIDApXG4gIDpcbiAgICAxOyAvLyBhZGxlcjMyKDAsIFpfTlVMTCwgMClcbiAgcy5sYXN0X2ZsdXNoID0gWl9OT19GTFVTSDtcbiAgdHJlZXMuX3RyX2luaXQocyk7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVSZXNldChzdHJtKSB7XG4gIHZhciByZXQgPSBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuICBpZiAocmV0ID09PSBaX09LKSB7XG4gICAgbG1faW5pdChzdHJtLnN0YXRlKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVTZXRIZWFkZXIoc3RybSwgaGVhZCkge1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIGlmIChzdHJtLnN0YXRlLndyYXAgIT09IDIpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBtZXRob2QsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSkge1xuICBpZiAoIXN0cm0pIHsgLy8gPT09IFpfTlVMTFxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICB2YXIgd3JhcCA9IDE7XG5cbiAgaWYgKGxldmVsID09PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04pIHtcbiAgICBsZXZlbCA9IDY7XG4gIH1cblxuICBpZiAod2luZG93Qml0cyA8IDApIHsgLyogc3VwcHJlc3MgemxpYiB3cmFwcGVyICovXG4gICAgd3JhcCA9IDA7XG4gICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzO1xuICB9XG5cbiAgZWxzZSBpZiAod2luZG93Qml0cyA+IDE1KSB7XG4gICAgd3JhcCA9IDI7ICAgICAgICAgICAvKiB3cml0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCAqL1xuICAgIHdpbmRvd0JpdHMgLT0gMTY7XG4gIH1cblxuXG4gIGlmIChtZW1MZXZlbCA8IDEgfHwgbWVtTGV2ZWwgPiBNQVhfTUVNX0xFVkVMIHx8IG1ldGhvZCAhPT0gWl9ERUZMQVRFRCB8fFxuICAgIHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSB8fCBsZXZlbCA8IDAgfHwgbGV2ZWwgPiA5IHx8XG4gICAgc3RyYXRlZ3kgPCAwIHx8IHN0cmF0ZWd5ID4gWl9GSVhFRCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cblxuICBpZiAod2luZG93Qml0cyA9PT0gOCkge1xuICAgIHdpbmRvd0JpdHMgPSA5O1xuICB9XG4gIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi9cblxuICB2YXIgcyA9IG5ldyBEZWZsYXRlU3RhdGUoKTtcblxuICBzdHJtLnN0YXRlID0gcztcbiAgcy5zdHJtID0gc3RybTtcblxuICBzLndyYXAgPSB3cmFwO1xuICBzLmd6aGVhZCA9IG51bGw7XG4gIHMud19iaXRzID0gd2luZG93Qml0cztcbiAgcy53X3NpemUgPSAxIDw8IHMud19iaXRzO1xuICBzLndfbWFzayA9IHMud19zaXplIC0gMTtcblxuICBzLmhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcbiAgcy5oYXNoX3NpemUgPSAxIDw8IHMuaGFzaF9iaXRzO1xuICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTtcbiAgcy5oYXNoX3NoaWZ0ID0gfn4oKHMuaGFzaF9iaXRzICsgTUlOX01BVENIIC0gMSkgLyBNSU5fTUFUQ0gpO1xuXG4gIHMud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUgKiAyKTtcbiAgcy5oZWFkID0gbmV3IHV0aWxzLkJ1ZjE2KHMuaGFzaF9zaXplKTtcbiAgcy5wcmV2ID0gbmV3IHV0aWxzLkJ1ZjE2KHMud19zaXplKTtcblxuICAvLyBEb24ndCBuZWVkIG1lbSBpbml0IG1hZ2ljIGZvciBKUy5cbiAgLy9zLmhpZ2hfd2F0ZXIgPSAwOyAgLyogbm90aGluZyB3cml0dGVuIHRvIHMtPndpbmRvdyB5ZXQgKi9cblxuICBzLmxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLyogMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHQgKi9cblxuICBzLnBlbmRpbmdfYnVmX3NpemUgPSBzLmxpdF9idWZzaXplICogNDtcblxuICAvL292ZXJsYXkgPSAodXNoZiAqKSBaQUxMT0Moc3RybSwgcy0+bGl0X2J1ZnNpemUsIHNpemVvZih1c2gpKzIpO1xuICAvL3MtPnBlbmRpbmdfYnVmID0gKHVjaGYgKikgb3ZlcmxheTtcbiAgcy5wZW5kaW5nX2J1ZiA9IG5ldyB1dGlscy5CdWY4KHMucGVuZGluZ19idWZfc2l6ZSk7XG5cbiAgLy8gSXQgaXMgb2Zmc2V0IGZyb20gYHMucGVuZGluZ19idWZgIChzaXplIGlzIGBzLmxpdF9idWZzaXplICogMmApXG4gIC8vcy0+ZF9idWYgPSBvdmVybGF5ICsgcy0+bGl0X2J1ZnNpemUvc2l6ZW9mKHVzaCk7XG4gIHMuZF9idWYgPSAxICogcy5saXRfYnVmc2l6ZTtcblxuICAvL3MtPmxfYnVmID0gcy0+cGVuZGluZ19idWYgKyAoMStzaXplb2YodXNoKSkqcy0+bGl0X2J1ZnNpemU7XG4gIHMubF9idWYgPSAoMSArIDIpICogcy5saXRfYnVmc2l6ZTtcblxuICBzLmxldmVsID0gbGV2ZWw7XG4gIHMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgcy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgcmV0dXJuIGRlZmxhdGVSZXNldChzdHJtKTtcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZUluaXQoc3RybSwgbGV2ZWwpIHtcbiAgcmV0dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCwgTUFYX1dCSVRTLCBERUZfTUVNX0xFVkVMLCBaX0RFRkFVTFRfU1RSQVRFR1kpO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGUoc3RybSwgZmx1c2gpIHtcbiAgdmFyIG9sZF9mbHVzaCwgcztcbiAgdmFyIGJlZywgdmFsOyAvLyBmb3IgZ3ppcCBoZWFkZXIgd3JpdGUgb25seVxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fFxuICAgIGZsdXNoID4gWl9CTE9DSyB8fCBmbHVzaCA8IDApIHtcbiAgICByZXR1cm4gc3RybSA/IGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUikgOiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHMgPSBzdHJtLnN0YXRlO1xuXG4gIGlmICghc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB8fFxuICAgICAgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgZmx1c2ggIT09IFpfRklOSVNIKSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSA/IFpfQlVGX0VSUk9SIDogWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgcy5zdHJtID0gc3RybTsgLyoganVzdCBpbiBjYXNlICovXG4gIG9sZF9mbHVzaCA9IHMubGFzdF9mbHVzaDtcbiAgcy5sYXN0X2ZsdXNoID0gZmx1c2g7XG5cbiAgLyogV3JpdGUgdGhlIGhlYWRlciAqL1xuICBpZiAocy5zdGF0dXMgPT09IElOSVRfU1RBVEUpIHtcblxuICAgIGlmIChzLndyYXAgPT09IDIpIHsgLy8gR1pJUCBoZWFkZXJcbiAgICAgIHN0cm0uYWRsZXIgPSAwOyAgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDMxKTtcbiAgICAgIHB1dF9ieXRlKHMsIDEzOSk7XG4gICAgICBwdXRfYnl0ZShzLCA4KTtcbiAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgT1NfQ09ERSk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGV4dCA/IDEgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzLmd6aGVhZC5oY3JjID8gMiA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQubmFtZSA/IDAgOiA4KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuY29tbWVudCA/IDAgOiAxNilcbiAgICAgICAgKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMjQpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQub3MgJiAweGZmKTtcbiAgICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmYpO1xuICAgICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC5leHRyYS5sZW5ndGggPj4gOCkgJiAweGZmKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5nemhlYWQuaGNyYykge1xuICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcsIDApO1xuICAgICAgICB9XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gRVhUUkFfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgLy8gREVGTEFURSBoZWFkZXJcbiAgICB7XG4gICAgICB2YXIgaGVhZGVyID0gKFpfREVGTEFURUQgKyAoKHMud19iaXRzIC0gOCkgPDwgNCkpIDw8IDg7XG4gICAgICB2YXIgbGV2ZWxfZmxhZ3MgPSAtMTtcblxuICAgICAgaWYgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsIDwgNikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPT09IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAzO1xuICAgICAgfVxuICAgICAgaGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTtcbiAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7IGhlYWRlciB8PSBQUkVTRVRfRElDVDsgfVxuICAgICAgaGVhZGVyICs9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTtcblxuICAgICAgLyogU2F2ZSB0aGUgYWRsZXIzMiBvZiB0aGUgcHJlc2V0IGRpY3Rpb25hcnk6ICovXG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkge1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpO1xuICAgICAgfVxuICAgICAgc3RybS5hZGxlciA9IDE7IC8vIGFkbGVyMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgfVxuICB9XG5cbi8vI2lmZGVmIEdaSVBcbiAgaWYgKHMuc3RhdHVzID09PSBFWFRSQV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5leHRyYS8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG5cbiAgICAgIHdoaWxlIChzLmd6aW5kZXggPCAocy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZmZmKSkge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhW3MuZ3ppbmRleF0gJiAweGZmKTtcbiAgICAgICAgcy5nemluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmd6aW5kZXggPT09IHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IE5BTUVfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQubmFtZS8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICAvL2ludCB2YWw7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLm5hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gQ09NTUVOVF9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5jb21tZW50LyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIC8vaW50IHZhbDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgdmFsID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQuY29tbWVudC5sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5jb21tZW50LmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG4gICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyID4gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICB9XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA8PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICB9XG4gIH1cbi8vI2VuZGlmXG5cbiAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqL1xuICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIC8qIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcbiAgICAgICAqIG1vcmUgb3V0cHV0IHNwYWNlLCBidXQgcG9zc2libHkgd2l0aCBib3RoIHBlbmRpbmcgYW5kXG4gICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcbiAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG4gICAgICAgKiByZXR1cm4gT0sgaW5zdGVhZCBvZiBCVUZfRVJST1IgYXQgbmV4dCBjYWxsIG9mIGRlZmxhdGU6XG4gICAgICAgKi9cbiAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFVzZXIgbXVzdCBub3QgcHJvdmlkZSBtb3JlIGlucHV0IGFmdGVyIHRoZSBmaXJzdCBGSU5JU0g6ICovXG4gIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cbiAgICovXG4gIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8XG4gICAgKGZsdXNoICE9PSBaX05PX0ZMVVNIICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG4gICAgdmFyIGJzdGF0ZSA9IChzLnN0cmF0ZWd5ID09PSBaX0hVRkZNQU5fT05MWSkgPyBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIDpcbiAgICAgIChzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6XG4gICAgICAgIGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCkpO1xuXG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkge1xuICAgICAgcy5zdGF0dXMgPSBGSU5JU0hfU1RBVEU7XG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX05FRURfTU9SRSB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEKSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgIC8qIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgfVxuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICAvKiBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PSAwLCB0aGUgbmV4dCBjYWxsXG4gICAgICAgKiBvZiBkZWZsYXRlIHNob3VsZCB1c2UgdGhlIHNhbWUgZmx1c2ggcGFyYW1ldGVyIHRvIG1ha2Ugc3VyZVxuICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuXG4gICAgICAgKiBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xuICAgICAgICogZW5zdXJlcyB0aGF0IGZvciBhIHZlcnkgc21hbGwgb3V0cHV0IGJ1ZmZlciwgd2UgZW1pdCBhdCBtb3N0XG4gICAgICAgKiBvbmUgZW1wdHkgYmxvY2suXG4gICAgICAgKi9cbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkge1xuICAgICAgaWYgKGZsdXNoID09PSBaX1BBUlRJQUxfRkxVU0gpIHtcbiAgICAgICAgdHJlZXMuX3RyX2FsaWduKHMpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZmx1c2ggIT09IFpfQkxPQ0spIHsgLyogRlVMTF9GTFVTSCBvciBTWU5DX0ZMVVNIICovXG5cbiAgICAgICAgdHJlZXMuX3RyX3N0b3JlZF9ibG9jayhzLCAwLCAwLCBmYWxzZSk7XG4gICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG4gICAgICAgICAqIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkge1xuICAgICAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqLyAgICAgICAgICAgICAvKiBmb3JnZXQgaGlzdG9yeSAqL1xuICAgICAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICAgICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7IC8qIGF2b2lkIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgICByZXR1cm4gWl9PSztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQoc3RybS0+YXZhaWxfb3V0ID4gMCwgXCJidWcyXCIpO1xuICAvL2lmIChzdHJtLmF2YWlsX291dCA8PSAwKSB7IHRocm93IG5ldyBFcnJvcihcImJ1ZzJcIik7fVxuXG4gIGlmIChmbHVzaCAhPT0gWl9GSU5JU0gpIHsgcmV0dXJuIFpfT0s7IH1cbiAgaWYgKHMud3JhcCA8PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FTkQ7IH1cblxuICAvKiBXcml0ZSB0aGUgdHJhaWxlciAqL1xuICBpZiAocy53cmFwID09PSAyKSB7XG4gICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gMTYpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gMjQpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDgpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMTYpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMjQpICYgMHhmZik7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpO1xuICB9XG5cbiAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgLyogSWYgYXZhaWxfb3V0IGlzIHplcm8sIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGNhbGwgZGVmbGF0ZSBhZ2FpblxuICAgKiB0byBmbHVzaCB0aGUgcmVzdC5cbiAgICovXG4gIGlmIChzLndyYXAgPiAwKSB7IHMud3JhcCA9IC1zLndyYXA7IH1cbiAgLyogd3JpdGUgdGhlIHRyYWlsZXIgb25seSBvbmNlISAqL1xuICByZXR1cm4gcy5wZW5kaW5nICE9PSAwID8gWl9PSyA6IFpfU1RSRUFNX0VORDtcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZUVuZChzdHJtKSB7XG4gIHZhciBzdGF0dXM7XG5cbiAgaWYgKCFzdHJtLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZS8qPT0gWl9OVUxMKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1cztcbiAgaWYgKHN0YXR1cyAhPT0gSU5JVF9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gRVhUUkFfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IE5BTUVfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IENPTU1FTlRfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEhDUkNfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEJVU1lfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEZJTklTSF9TVEFURVxuICApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuXG4gIHJldHVybiBzdGF0dXMgPT09IEJVU1lfU1RBVEUgPyBlcnIoc3RybSwgWl9EQVRBX0VSUk9SKSA6IFpfT0s7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZXMgdGhlIGNvbXByZXNzaW9uIGRpY3Rpb25hcnkgZnJvbSB0aGUgZ2l2ZW4gYnl0ZVxuICogc2VxdWVuY2Ugd2l0aG91dCBwcm9kdWNpbmcgYW55IGNvbXByZXNzZWQgb3V0cHV0LlxuICovXG5mdW5jdGlvbiBkZWZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KSB7XG4gIHZhciBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgdmFyIHM7XG4gIHZhciBzdHIsIG47XG4gIHZhciB3cmFwO1xuICB2YXIgYXZhaWw7XG4gIHZhciBuZXh0O1xuICB2YXIgaW5wdXQ7XG4gIHZhciB0bXBEaWN0O1xuXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG4gIHdyYXAgPSBzLndyYXA7XG5cbiAgaWYgKHdyYXAgPT09IDIgfHwgKHdyYXAgPT09IDEgJiYgcy5zdGF0dXMgIT09IElOSVRfU1RBVEUpIHx8IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogd2hlbiB1c2luZyB6bGliIHdyYXBwZXJzLCBjb21wdXRlIEFkbGVyLTMyIGZvciBwcm92aWRlZCBkaWN0aW9uYXJ5ICovXG4gIGlmICh3cmFwID09PSAxKSB7XG4gICAgLyogYWRsZXIzMihzdHJtLT5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gIH1cblxuICBzLndyYXAgPSAwOyAgIC8qIGF2b2lkIGNvbXB1dGluZyBBZGxlci0zMiBpbiByZWFkX2J1ZiAqL1xuXG4gIC8qIGlmIGRpY3Rpb25hcnkgd291bGQgZmlsbCB3aW5kb3csIGp1c3QgcmVwbGFjZSB0aGUgaGlzdG9yeSAqL1xuICBpZiAoZGljdExlbmd0aCA+PSBzLndfc2l6ZSkge1xuICAgIGlmICh3cmFwID09PSAwKSB7ICAgICAgICAgICAgLyogYWxyZWFkeSBlbXB0eSBvdGhlcndpc2UgKi9cbiAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xuICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICB9XG4gICAgLyogdXNlIHRoZSB0YWlsICovXG4gICAgLy8gZGljdGlvbmFyeSA9IGRpY3Rpb25hcnkuc2xpY2UoZGljdExlbmd0aCAtIHMud19zaXplKTtcbiAgICB0bXBEaWN0ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUpO1xuICAgIHV0aWxzLmFycmF5U2V0KHRtcERpY3QsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGggLSBzLndfc2l6ZSwgcy53X3NpemUsIDApO1xuICAgIGRpY3Rpb25hcnkgPSB0bXBEaWN0O1xuICAgIGRpY3RMZW5ndGggPSBzLndfc2l6ZTtcbiAgfVxuICAvKiBpbnNlcnQgZGljdGlvbmFyeSBpbnRvIHdpbmRvdyBhbmQgaGFzaCAqL1xuICBhdmFpbCA9IHN0cm0uYXZhaWxfaW47XG4gIG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7XG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uaW5wdXQgPSBkaWN0aW9uYXJ5O1xuICBmaWxsX3dpbmRvdyhzKTtcbiAgd2hpbGUgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgIHN0ciA9IHMuc3Ryc3RhcnQ7XG4gICAgbiA9IHMubG9va2FoZWFkIC0gKE1JTl9NQVRDSCAtIDEpO1xuICAgIGRvIHtcbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4gICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICBzdHIrKztcbiAgICB9IHdoaWxlICgtLW4pO1xuICAgIHMuc3Ryc3RhcnQgPSBzdHI7XG4gICAgcy5sb29rYWhlYWQgPSBNSU5fTUFUQ0ggLSAxO1xuICAgIGZpbGxfd2luZG93KHMpO1xuICB9XG4gIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICBzLmluc2VydCA9IHMubG9va2FoZWFkO1xuICBzLmxvb2thaGVhZCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5pbnB1dCA9IGlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gYXZhaWw7XG4gIHMud3JhcCA9IHdyYXA7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmV4cG9ydHMuZGVmbGF0ZUluaXQgPSBkZWZsYXRlSW5pdDtcbmV4cG9ydHMuZGVmbGF0ZUluaXQyID0gZGVmbGF0ZUluaXQyO1xuZXhwb3J0cy5kZWZsYXRlUmVzZXQgPSBkZWZsYXRlUmVzZXQ7XG5leHBvcnRzLmRlZmxhdGVSZXNldEtlZXAgPSBkZWZsYXRlUmVzZXRLZWVwO1xuZXhwb3J0cy5kZWZsYXRlU2V0SGVhZGVyID0gZGVmbGF0ZVNldEhlYWRlcjtcbmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XG5leHBvcnRzLmRlZmxhdGVFbmQgPSBkZWZsYXRlRW5kO1xuZXhwb3J0cy5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGRlZmxhdGVTZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5kZWZsYXRlSW5mbyA9ICdwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5leHBvcnRzLmRlZmxhdGVCb3VuZCA9IGRlZmxhdGVCb3VuZDtcbmV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29weTtcbmV4cG9ydHMuZGVmbGF0ZVBhcmFtcyA9IGRlZmxhdGVQYXJhbXM7XG5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5leHBvcnRzLmRlZmxhdGVQcmltZSA9IGRlZmxhdGVQcmltZTtcbmV4cG9ydHMuZGVmbGF0ZVR1bmUgPSBkZWZsYXRlVHVuZTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtdW5hcnktb3BzICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vdmFyIFpfSFVGRk1BTl9PTkxZICAgICAgPSAyO1xuLy92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vdmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG52YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbnZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuLy8gRnJvbSB6dXRpbC5oXG5cbnZhciBTVE9SRURfQkxPQ0sgPSAwO1xudmFyIFNUQVRJQ19UUkVFUyA9IDE7XG52YXIgRFlOX1RSRUVTICAgID0gMjtcbi8qIFRoZSB0aHJlZSBraW5kcyBvZiBibG9jayB0eXBlICovXG5cbnZhciBNSU5fTUFUQ0ggICAgPSAzO1xudmFyIE1BWF9NQVRDSCAgICA9IDI1ODtcbi8qIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG1hdGNoIGxlbmd0aHMgKi9cblxuLy8gRnJvbSBkZWZsYXRlLmhcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXG4gKi9cblxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG5cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xuXG52YXIgTUFYX0JJVFMgICAgICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG52YXIgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG52YXIgRU5EX0JMT0NLICAgPSAyNTY7XG4vKiBlbmQgb2YgYmxvY2sgbGl0ZXJhbCBjb2RlICovXG5cbnZhciBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8zXzEwICAgPSAxNztcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8xMV8xMzggPSAxODtcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAgKDcgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG52YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF07XG5cbnZhciBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtcblxudmFyIGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN107XG5cbnZhciBibF9vcmRlciA9XG4gIFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtcbi8qIGVzbGludC1lbmFibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cblxuLyogVGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMgYXJlIHNlbnQgaW4gb3JkZXIgb2YgZGVjcmVhc2luZ1xuICogcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdCBsZW5ndGggY29kZXMuXG4gKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBMb2NhbCBkYXRhLiBUaGVzZSBhcmUgaW5pdGlhbGl6ZWQgb25seSBvbmNlLlxuICovXG5cbi8vIFdlIHByZS1maWxsIGFycmF5cyB3aXRoIDAgdG8gYXZvaWQgdW5pbml0aWFsaXplZCBnYXBzXG5cbnZhciBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbnZhciBzdGF0aWNfbHRyZWUgID0gbmV3IEFycmF5KChMX0NPREVTICsgMikgKiAyKTtcbnplcm8oc3RhdGljX2x0cmVlKTtcbi8qIFRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlLiBTaW5jZSB0aGUgYml0IGxlbmd0aHMgYXJlIGltcG9zZWQsIHRoZXJlIGlzIG5vXG4gKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XG4gKiBiZWxvdykuXG4gKi9cblxudmFyIHN0YXRpY19kdHJlZSAgPSBuZXcgQXJyYXkoRF9DT0RFUyAqIDIpO1xuemVybyhzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG52YXIgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG52YXIgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTtcbnplcm8oX2xlbmd0aF9jb2RlKTtcbi8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcbnplcm8oYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG52YXIgc3RhdGljX2xfZGVzYztcbnZhciBzdGF0aWNfZF9kZXNjO1xudmFyIHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmZ1bmN0aW9uIGRfY29kZShkaXN0KSB7XG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5mdW5jdGlvbiBwdXRfc2hvcnQocywgdykge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLlxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyXG4gKiBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG4gKiBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1XG4gKi9cbmZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgbGVuKSB7XG4gIHZhciByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LlxuICovXG5mdW5jdGlvbiBiaV9mbHVzaChzKSB7XG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxuICogZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LCBoZWFwW2hlYXBfbWF4XSBhbmRcbiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlXG4gKiAgICAgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGZyZXF1ZW5jaWVzIGZvciBlYWNoIGJpdCBsZW5ndGguXG4gKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG4gKiAgICAgbm90IG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBtYXhfY29kZSAgICAgICAgPSBkZXNjLm1heF9jb2RlO1xuICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBleHRyYSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcbiAgdmFyIG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIHZhciBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgdmFyIHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIHZhciBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0vKi5MZW4qLyA9IDA7IC8qIHJvb3Qgb2YgdGhlIGhlYXAgKi9cblxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAgICAgIC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqL1xuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cbiAgICBzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG4gICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cbiAgICAgKi9cbiAgICBvdmVyZmxvdyAtPSAyO1xuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG4gIC8qIE5vdyByZWNvbXB1dGUgYWxsIGJpdCBsZW5ndGhzLCBzY2FubmluZyBpbiBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlblxuICAgKiBmcm9tICdhcicgd3JpdHRlbiBieSBIYXJ1aGlrbyBPa3VtdXJhLilcbiAgICovXG4gIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkge1xuICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuICAgIHdoaWxlIChuICE9PSAwKSB7XG4gICAgICBtID0gcy5oZWFwWy0taF07XG4gICAgICBpZiAobSA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuICogb3B0aW1hbCkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG4gKiAgICAgemVybyBjb2RlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudClcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbi8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cbntcbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICB2YXIgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgdmFyIGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XG4gIHZhciBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgdmFyIGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgdmFyIGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIHZhciBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbi8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG4gIHN0YXRpY19sX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfbHRyZWU7XG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuICBzdGF0aWNfZF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9kYml0cztcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiNlbmRpZiovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xuICBsZW5ndGggPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTIC0gMTsgY29kZSsrKSB7XG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTZcIik7XG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXG4gICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG4gICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVzdCBlbmNvZGluZzpcbiAgICovXG4gIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG4gIGRpc3QgPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2RiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cbiAgZm9yICg7IGNvZGUgPCBEX0NPREVTOyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IChleHRyYV9kYml0c1tjb2RlXSAtIDcpKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlWzI1NiArIGRpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IDI1NitkaXN0ICE9IDUxMlwiKTtcblxuICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIGJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIG4gPSAwO1xuICB3aGlsZSAobiA8PSAxNDMpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOV0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNzkpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNztcbiAgICBuKys7XG4gICAgYmxfY291bnRbN10rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyODcpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xuICAgIHN0YXRpY19kdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA1O1xuICAgIHN0YXRpY19kdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG4sIDUpO1xuICB9XG5cbiAgLy8gTm93IGRhdGEgcmVhZHkgYW5kIHdlIGNhbiBpbml0IHN0YXRpYyB0cmVlc1xuICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfZF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19kdHJlZSwgZXh0cmFfZGJpdHMsIDAsICAgICAgICAgIERfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsICAgICAgICAgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTtcblxuICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgIG4rKykgeyBzLmR5bl9kdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUzsgbisrKSB7IHMuYmxfdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG5cbiAgcy5keW5fbHRyZWVbRU5EX0JMT0NLICogMl0vKi5GcmVxKi8gPSAxO1xuICBzLm9wdF9sZW4gPSBzLnN0YXRpY19sZW4gPSAwO1xuICBzLmxhc3RfbGl0ID0gcy5tYXRjaGVzID0gMDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5mdW5jdGlvbiBiaV93aW5kdXAocylcbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiBjb3B5X2Jsb2NrKHMsIGJ1ZiwgbGVuLCBoZWFkZXIpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cbntcbiAgYmlfd2luZHVwKHMpOyAgICAgICAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqL1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBwdXRfc2hvcnQocywgbGVuKTtcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XG4gIH1cbi8vICB3aGlsZSAobGVuLS0pIHtcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XG4vLyAgfVxuICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7XG4gIHMucGVuZGluZyArPSBsZW47XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcGFyZXMgdG8gc3VidHJlZXMsIHVzaW5nIHRoZSB0cmVlIGRlcHRoIGFzIHRpZSBicmVha2VyIHdoZW5cbiAqIHRoZSBzdWJ0cmVlcyBoYXZlIGVxdWFsIGZyZXF1ZW5jeS4gVGhpcyBtaW5pbWl6ZXMgdGhlIHdvcnN0IGNhc2UgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbWFsbGVyKHRyZWUsIG4sIG0sIGRlcHRoKSB7XG4gIHZhciBfbjIgPSBuICogMjtcbiAgdmFyIF9tMiA9IG0gKiAyO1xuICByZXR1cm4gKHRyZWVbX24yXS8qLkZyZXEqLyA8IHRyZWVbX20yXS8qLkZyZXEqLyB8fFxuICAgICAgICAgKHRyZWVbX24yXS8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5mdW5jdGlvbiBwcWRvd25oZWFwKHMsIHRyZWUsIGspXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIHZhciB2ID0gcy5oZWFwW2tdO1xuICB2YXIgaiA9IGsgPDwgMTsgIC8qIGxlZnQgc29uIG9mIGsgKi9cbiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xuICAgIC8qIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6ICovXG4gICAgaWYgKGogPCBzLmhlYXBfbGVuICYmXG4gICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcbiAgICAgIGorKztcbiAgICB9XG4gICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi9cbiAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7IGJyZWFrOyB9XG5cbiAgICAvKiBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvbiAqL1xuICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTtcbiAgICBrID0gajtcblxuICAgIC8qIEFuZCBjb250aW51ZSBkb3duIHRoZSB0cmVlLCBzZXR0aW5nIGogdG8gdGhlIGxlZnQgc29uIG9mIGsgKi9cbiAgICBqIDw8PSAxO1xuICB9XG4gIHMuaGVhcFtrXSA9IHY7XG59XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gdmFyIFNNQUxMRVNUID0gMTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NfYmxvY2socywgbHRyZWUsIGR0cmVlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGNvbnN0IGN0X2RhdGEgKmx0cmVlOyAvKiBsaXRlcmFsIHRyZWUgKi9cbi8vICAgIGNvbnN0IGN0X2RhdGEgKmR0cmVlOyAvKiBkaXN0YW5jZSB0cmVlICovXG57XG4gIHZhciBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgdmFyIGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG4gIHZhciBjb2RlOyAgICAgICAgICAgLyogdGhlIGNvZGUgdG8gc2VuZCAqL1xuICB2YXIgZXh0cmE7ICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzIHRvIHNlbmQgKi9cblxuICBpZiAocy5sYXN0X2xpdCAhPT0gMCkge1xuICAgIGRvIHtcbiAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5sX2J1ZiArIGx4XTtcbiAgICAgIGx4Kys7XG5cbiAgICAgIGlmIChkaXN0ID09PSAwKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOyAvKiBzZW5kIGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAgIC8vVHJhY2Vjdihpc2dyYXBoKGxjKSwgKHN0ZGVycixcIiAnJWMnIFwiLCBsYykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgICAgICBjb2RlID0gX2xlbmd0aF9jb2RlW2xjXTtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy5cbiAqIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoXG4gKiAgICAgYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkX3RyZWUocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgdmFyIHN0cmVlICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuICB2YXIgbiwgbTsgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHMgKi9cbiAgdmFyIG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG4gICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqL1xuICBzLmhlYXBfbGVuID0gMDtcbiAgcy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xuICAgIGlmICh0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG4gICAgICBzLmRlcHRoW25dID0gMDtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcbiAgICBzLm9wdF9sZW4tLTtcblxuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiAtPSBzdHJlZVtub2RlICogMiArIDFdLyouTGVuKi87XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMS8qaW50IC8yKi8pOyBuID49IDE7IG4tLSkgeyBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOyB9XG5cbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuICAgKiBmcmVxdWVudCBub2Rlcy5cbiAgICovXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cblxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcblxuICAgIC8qIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtICovXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0vKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovXG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gbm9kZSsrO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG4gICAqIGdlbmVyYXRlIHRoZSBiaXQgbGVuZ3Rocy5cbiAgICovXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cbiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqL1xuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2Nhbl90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuICogYmxfdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2VuZF90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7IC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIC8qIHRyZWVbbWF4X2NvZGUrMV0uTGVuID0gLTE7ICovICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgZG8geyBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOyB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cbiAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICovXG5mdW5jdGlvbiBidWlsZF9ibF90cmVlKHMpIHtcbiAgdmFyIG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgYml0IGxlbmd0aCBmcmVxdWVuY2llcyBmb3IgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7XG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG4gIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6ICovXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcbiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuICAgKiB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGUgY291bnRzLlxuICAgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcbiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuICAgKi9cbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuICovXG5mdW5jdGlvbiBzZW5kX2FsbF90cmVlcyhzLCBsY29kZXMsIGRjb2RlcywgYmxjb2Rlcylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG57XG4gIHZhciByYW5rOyAgICAgICAgICAgICAgICAgICAgLyogaW5kZXggaW4gYmxfb3JkZXIgKi9cblxuICAvL0Fzc2VydCAobGNvZGVzID49IDI1NyAmJiBkY29kZXMgPj0gMSAmJiBibGNvZGVzID49IDQsIFwibm90IGVub3VnaCBjb2Rlc1wiKTtcbiAgLy9Bc3NlcnQgKGxjb2RlcyA8PSBMX0NPREVTICYmIGRjb2RlcyA8PSBEX0NPREVTICYmIGJsY29kZXMgPD0gQkxfQ09ERVMsXG4gIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvdW50czogXCIpKTtcbiAgc2VuZF9iaXRzKHMsIGxjb2RlcyAtIDI1NywgNSk7IC8qIG5vdCArMjU1IGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgICA1KTtcbiAgc2VuZF9iaXRzKHMsIGJsY29kZXMgLSA0LCAgNCk7IC8qIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgZm9yIChyYW5rID0gMDsgcmFuayA8IGJsY29kZXM7IHJhbmsrKykge1xuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XG4gICAgc2VuZF9iaXRzKHMsIHMuYmxfdHJlZVtibF9vcmRlcltyYW5rXSAqIDIgKyAxXS8qLkxlbiovLCAzKTtcbiAgfVxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7IC8qIGxpdGVyYWwgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibGFjayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0X2RhdGFfdHlwZShzKSB7XG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgdmFyIGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuICB2YXIgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxhY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJ3aGl0ZS1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibGFjay1saXN0ZWRcIiBvciBcIndoaXRlLWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufVxuXG5cbnZhciBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuICovXG5mdW5jdGlvbiBfdHJfaW5pdChzKVxue1xuXG4gIGlmICghc3RhdGljX2luaXRfZG9uZSkge1xuICAgIHRyX3N0YXRpY19pbml0KCk7XG4gICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG4gIH1cblxuICBzLmxfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xuICBzLmRfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fZHRyZWUsIHN0YXRpY19kX2Rlc2MpO1xuICBzLmJsX2Rlc2MgPSBuZXcgVHJlZURlc2Mocy5ibF90cmVlLCBzdGF0aWNfYmxfZGVzYyk7XG5cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcblxuICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi9cbiAgaW5pdF9ibG9jayhzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBzdG9yZWQgYmxvY2tcbiAqL1xuZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XG4gIHNlbmRfYml0cyhzLCBTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIHN0YXRpY19sdHJlZSk7XG4gIGJpX2ZsdXNoKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXG4gKi9cbmZ1bmN0aW9uIF90cl9mbHVzaF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICB2YXIgb3B0X2xlbmIsIHN0YXRpY19sZW5iOyAgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqL1xuICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7IG9wdF9sZW5iID0gc3RhdGljX2xlbmI7IH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG4gICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpO1xuXG4gIH0gZWxzZSB7XG4gICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG4gICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTtcbiAgfVxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuICAvKiBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuICAgKiBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cbiAgICovXG4gIGluaXRfYmxvY2socyk7XG5cbiAgaWYgKGxhc3QpIHtcbiAgICBiaV93aW5kdXAocyk7XG4gIH1cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXG4gIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdW5zaWduZWQgZGlzdDsgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4vLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi9cbntcbiAgLy92YXIgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTtcblxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmO1xuXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xuICBzLmxhc3RfbGl0Kys7XG5cbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4vLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovXG4vLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4vLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4O1xuLy8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4vL1xuLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykge1xuLy8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuLy8gICAgfVxuLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7XG4vLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbi8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7XG4vLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG4vLyAgICAgIHJldHVybiB0cnVlO1xuLy8gICAgfVxuLy8gIH1cbi8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59XG5cbmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XG5leHBvcnRzLl90cl9zdG9yZWRfYmxvY2sgPSBfdHJfc3RvcmVkX2Jsb2NrO1xuZXhwb3J0cy5fdHJfZmx1c2hfYmxvY2sgID0gX3RyX2ZsdXNoX2Jsb2NrO1xuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XG5leHBvcnRzLl90cl9hbGlnbiA9IF90cl9hbGlnbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzICAgICAgICAgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcbnZhciBhZGxlcjMyICAgICAgID0gcmVxdWlyZSgnLi9hZGxlcjMyJyk7XG52YXIgY3JjMzIgICAgICAgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcbnZhciBpbmZsYXRlX2Zhc3QgID0gcmVxdWlyZSgnLi9pbmZmYXN0Jyk7XG52YXIgaW5mbGF0ZV90YWJsZSA9IHJlcXVpcmUoJy4vaW5mdHJlZXMnKTtcblxudmFyIENPREVTID0gMDtcbnZhciBMRU5TID0gMTtcbnZhciBESVNUUyA9IDI7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbi8vdmFyIFpfTk9fRkxVU0ggICAgICA9IDA7XG4vL3ZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcbi8vdmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7XG52YXIgWl9GSU5JU0ggICAgICAgID0gNDtcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xudmFyIFpfVFJFRVMgICAgICAgICA9IDY7XG5cblxuLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICovXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xudmFyIFpfTkVFRF9ESUNUICAgICA9IDI7XG4vL3ZhciBaX0VSUk5PICAgICAgICAgPSAtMTtcbnZhciBaX1NUUkVBTV9FUlJPUiAgPSAtMjtcbnZhciBaX0RBVEFfRVJST1IgICAgPSAtMztcbnZhciBaX01FTV9FUlJPUiAgICAgPSAtNDtcbnZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xuXG4vKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cblxuLyogU1RBVEVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxudmFyICAgIEhFQUQgPSAxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi9cbnZhciAgICBGTEFHUyA9IDI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgbWV0aG9kIGFuZCBmbGFncyAoZ3ppcCkgKi9cbnZhciAgICBUSU1FID0gMzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbW9kaWZpY2F0aW9uIHRpbWUgKGd6aXApICovXG52YXIgICAgT1MgPSA0OyAgICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGZsYWdzIGFuZCBvcGVyYXRpbmcgc3lzdGVtIChnemlwKSAqL1xudmFyICAgIEVYTEVOID0gNTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovXG52YXIgICAgRVhUUkEgPSA2OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGJ5dGVzIChnemlwKSAqL1xudmFyICAgIE5BTUUgPSA3OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgZmlsZSBuYW1lIChnemlwKSAqL1xudmFyICAgIENPTU1FTlQgPSA4OyAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgY29tbWVudCAoZ3ppcCkgKi9cbnZhciAgICBIQ1JDID0gOTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgaGVhZGVyIGNyYyAoZ3ppcCkgKi9cbnZhciAgICBESUNUSUQgPSAxMDsgICAgLyogaTogd2FpdGluZyBmb3IgZGljdGlvbmFyeSBjaGVjayB2YWx1ZSAqL1xudmFyICAgIERJQ1QgPSAxMTsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbnZhciAgICAgICAgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cbnZhciAgICAgICAgVFlQRURPID0gMTM7ICAgIC8qIGk6IHNhbWUsIGJ1dCBza2lwIGNoZWNrIHRvIGV4aXQgaW5mbGF0ZSBvbiBuZXcgYmxvY2sgKi9cbnZhciAgICAgICAgU1RPUkVEID0gMTQ7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG52YXIgICAgICAgIENPUFlfID0gMTU7ICAgICAvKiBpL286IHNhbWUgYXMgQ09QWSBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xudmFyICAgICAgICBDT1BZID0gMTY7ICAgICAgLyogaS9vOiB3YWl0aW5nIGZvciBpbnB1dCBvciBvdXRwdXQgdG8gY29weSBzdG9yZWQgYmxvY2sgKi9cbnZhciAgICAgICAgVEFCTEUgPSAxNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGR5bmFtaWMgYmxvY2sgdGFibGUgbGVuZ3RocyAqL1xudmFyICAgICAgICBMRU5MRU5TID0gMTg7ICAgLyogaTogd2FpdGluZyBmb3IgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG52YXIgICAgICAgIENPREVMRU5TID0gMTk7ICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0IGFuZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbnZhciAgICAgICAgICAgIExFTl8gPSAyMDsgICAgICAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xudmFyICAgICAgICAgICAgTEVOID0gMjE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQvZW9iIGNvZGUgKi9cbnZhciAgICAgICAgICAgIExFTkVYVCA9IDIyOyAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGggZXh0cmEgYml0cyAqL1xudmFyICAgICAgICAgICAgRElTVCA9IDIzOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbnZhciAgICAgICAgICAgIERJU1RFWFQgPSAyNDsgICAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBleHRyYSBiaXRzICovXG52YXIgICAgICAgICAgICBNQVRDSCA9IDI1OyAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIGNvcHkgc3RyaW5nICovXG52YXIgICAgICAgICAgICBMSVQgPSAyNjsgICAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbnZhciAgICBDSEVDSyA9IDI3OyAgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGNoZWNrIHZhbHVlICovXG52YXIgICAgTEVOR1RIID0gMjg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBsZW5ndGggKGd6aXApICovXG52YXIgICAgRE9ORSA9IDI5OyAgICAgIC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgICAgQkFEID0gMzA7ICAgICAgIC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciAgICBNRU0gPSAzMTsgICAgICAgLyogZ290IGFuIGluZmxhdGUoKSBtZW1vcnkgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciAgICBTWU5DID0gMzI7ICAgICAgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuXG52YXIgRU5PVUdIX0xFTlMgPSA4NTI7XG52YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xuLy92YXIgRU5PVUdIID0gIChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG52YXIgTUFYX1dCSVRTID0gMTU7XG4vKiAzMksgTFo3NyB3aW5kb3cgKi9cbnZhciBERUZfV0JJVFMgPSBNQVhfV0JJVFM7XG5cblxuZnVuY3Rpb24genN3YXAzMihxKSB7XG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufVxuXG5cbmZ1bmN0aW9uIEluZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5tb2RlID0gMDsgICAgICAgICAgICAgLyogY3VycmVudCBpbmZsYXRlIG1vZGUgKi9cbiAgdGhpcy5sYXN0ID0gZmFsc2U7ICAgICAgICAgIC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG4gIHRoaXMuaGF2ZWRpY3QgPSBmYWxzZTsgICAgICAvKiB0cnVlIGlmIGRpY3Rpb25hcnkgcHJvdmlkZWQgKi9cbiAgdGhpcy5mbGFncyA9IDA7ICAgICAgICAgICAgIC8qIGd6aXAgaGVhZGVyIG1ldGhvZCBhbmQgZmxhZ3MgKDAgaWYgemxpYikgKi9cbiAgdGhpcy5kbWF4ID0gMDsgICAgICAgICAgICAgIC8qIHpsaWIgaGVhZGVyIG1heCBkaXN0YW5jZSAoSU5GTEFURV9TVFJJQ1QpICovXG4gIHRoaXMuY2hlY2sgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBjaGVjayB2YWx1ZSAqL1xuICB0aGlzLnRvdGFsID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovXG4gIC8vIFRPRE86IG1heSBiZSB7fVxuICB0aGlzLmhlYWQgPSBudWxsOyAgICAgICAgICAgLyogd2hlcmUgdG8gc2F2ZSBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiAqL1xuXG4gIC8qIHNsaWRpbmcgd2luZG93ICovXG4gIHRoaXMud2JpdHMgPSAwOyAgICAgICAgICAgICAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqL1xuICB0aGlzLndzaXplID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIHRoaXMud2hhdmUgPSAwOyAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIHRoaXMud25leHQgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgdGhpcy53aW5kb3cgPSBudWxsOyAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgbmVlZGVkICovXG5cbiAgLyogYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuaG9sZCA9IDA7ICAgICAgICAgICAgICAvKiBpbnB1dCBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5iaXRzID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBiaXRzIGluIFwiaW5cIiAqL1xuXG4gIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXG4gIHRoaXMubGVuZ3RoID0gMDsgICAgICAgICAgICAvKiBsaXRlcmFsIG9yIGxlbmd0aCBvZiBkYXRhIHRvIGNvcHkgKi9cbiAgdGhpcy5vZmZzZXQgPSAwOyAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgdG8gY29weSBzdHJpbmcgZnJvbSAqL1xuXG4gIC8qIGZvciB0YWJsZSBhbmQgY29kZSBkZWNvZGluZyAqL1xuICB0aGlzLmV4dHJhID0gMDsgICAgICAgICAgICAgLyogZXh0cmEgYml0cyBuZWVkZWQgKi9cblxuICAvKiBmaXhlZCBhbmQgZHluYW1pYyBjb2RlIHRhYmxlcyAqL1xuICB0aGlzLmxlbmNvZGUgPSBudWxsOyAgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKi9cbiAgdGhpcy5kaXN0Y29kZSA9IG51bGw7ICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXG4gIHRoaXMubGVuYml0cyA9IDA7ICAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBsZW5jb2RlICovXG4gIHRoaXMuZGlzdGJpdHMgPSAwOyAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqL1xuXG4gIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi9cbiAgdGhpcy5uY29kZSA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5ubGVuID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmRpc3QgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG4gIHRoaXMuaGF2ZSA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqL1xuICB0aGlzLm5leHQgPSBudWxsOyAgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gY29kZXNbXSAqL1xuXG4gIHRoaXMubGVucyA9IG5ldyB1dGlscy5CdWYxNigzMjApOyAvKiB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3IgY29kZSBsZW5ndGhzICovXG4gIHRoaXMud29yayA9IG5ldyB1dGlscy5CdWYxNigyODgpOyAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi9cblxuICAvKlxuICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHlcbiAgIGFzIGJ1ZmZlcnMgc28gd2UgZG9uJ3QgbmVlZCBjb2Rlc1xuICAqL1xuICAvL3RoaXMuY29kZXMgPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIKTsgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuZHluID0gbnVsbDsgICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5kaXN0ZHluID0gbnVsbDsgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLnNhbmUgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovXG4gIHRoaXMuYmFjayA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgYmFjayBvZiBsYXN0IHVucHJvY2Vzc2VkIGxlbmd0aC9saXQgKi9cbiAgdGhpcy53YXMgPSAwOyAgICAgICAgICAgICAgICAgICAgLyogaW5pdGlhbCBsZW5ndGggb2YgbWF0Y2ggKi9cbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKSB7XG4gIHZhciBzdGF0ZTtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gc3RhdGUudG90YWwgPSAwO1xuICBzdHJtLm1zZyA9ICcnOyAvKlpfTlVMTCovXG4gIGlmIChzdGF0ZS53cmFwKSB7ICAgICAgIC8qIHRvIHN1cHBvcnQgaWxsLWNvbmNlaXZlZCBKYXZhIHRlc3Qgc3VpdGUgKi9cbiAgICBzdHJtLmFkbGVyID0gc3RhdGUud3JhcCAmIDE7XG4gIH1cbiAgc3RhdGUubW9kZSA9IEhFQUQ7XG4gIHN0YXRlLmxhc3QgPSAwO1xuICBzdGF0ZS5oYXZlZGljdCA9IDA7XG4gIHN0YXRlLmRtYXggPSAzMjc2ODtcbiAgc3RhdGUuaGVhZCA9IG51bGwvKlpfTlVMTCovO1xuICBzdGF0ZS5ob2xkID0gMDtcbiAgc3RhdGUuYml0cyA9IDA7XG4gIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dCA9IHN0YXRlLmNvZGVzO1xuICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9MRU5TKTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9ESVNUUyk7XG5cbiAgc3RhdGUuc2FuZSA9IDE7XG4gIHN0YXRlLmJhY2sgPSAtMTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiByZXNldFxcblwiKSk7XG4gIHJldHVybiBaX09LO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXQoc3RybSkge1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIHN0YXRlLndzaXplID0gMDtcbiAgc3RhdGUud2hhdmUgPSAwO1xuICBzdGF0ZS53bmV4dCA9IDA7XG4gIHJldHVybiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuXG59XG5cbmZ1bmN0aW9uIGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cykge1xuICB2YXIgd3JhcDtcbiAgdmFyIHN0YXRlO1xuXG4gIC8qIGdldCB0aGUgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogZXh0cmFjdCB3cmFwIHJlcXVlc3QgZnJvbSB3aW5kb3dCaXRzIHBhcmFtZXRlciAqL1xuICBpZiAod2luZG93Qml0cyA8IDApIHtcbiAgICB3cmFwID0gMDtcbiAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG4gIH1cbiAgZWxzZSB7XG4gICAgd3JhcCA9ICh3aW5kb3dCaXRzID4+IDQpICsgMTtcbiAgICBpZiAod2luZG93Qml0cyA8IDQ4KSB7XG4gICAgICB3aW5kb3dCaXRzICY9IDE1O1xuICAgIH1cbiAgfVxuXG4gIC8qIHNldCBudW1iZXIgb2Ygd2luZG93IGJpdHMsIGZyZWUgd2luZG93IGlmIGRpZmZlcmVudCAqL1xuICBpZiAod2luZG93Qml0cyAmJiAod2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1KSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICBpZiAoc3RhdGUud2luZG93ICE9PSBudWxsICYmIHN0YXRlLndiaXRzICE9PSB3aW5kb3dCaXRzKSB7XG4gICAgc3RhdGUud2luZG93ID0gbnVsbDtcbiAgfVxuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmVzZXQgdGhlIHJlc3Qgb2YgaXQgKi9cbiAgc3RhdGUud3JhcCA9IHdyYXA7XG4gIHN0YXRlLndiaXRzID0gd2luZG93Qml0cztcbiAgcmV0dXJuIGluZmxhdGVSZXNldChzdHJtKTtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUluaXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcbiAgdmFyIHJldDtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgLy9zdHJtLm1zZyA9IFpfTlVMTDsgICAgICAgICAgICAgICAgIC8qIGluIGNhc2Ugd2UgcmV0dXJuIGFuIGVycm9yICovXG5cbiAgc3RhdGUgPSBuZXcgSW5mbGF0ZVN0YXRlKCk7XG5cbiAgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IGFsbG9jYXRlZFxcblwiKSk7XG4gIHN0cm0uc3RhdGUgPSBzdGF0ZTtcbiAgc3RhdGUud2luZG93ID0gbnVsbC8qWl9OVUxMKi87XG4gIHJldCA9IGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cyk7XG4gIGlmIChyZXQgIT09IFpfT0spIHtcbiAgICBzdHJtLnN0YXRlID0gbnVsbC8qWl9OVUxMKi87XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUluaXQoc3RybSkge1xuICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7XG59XG5cblxuLypcbiBSZXR1cm4gc3RhdGUgd2l0aCBsZW5ndGggYW5kIGRpc3RhbmNlIGRlY29kaW5nIHRhYmxlcyBhbmQgaW5kZXggc2l6ZXMgc2V0IHRvXG4gZml4ZWQgY29kZSBkZWNvZGluZy4gIE5vcm1hbGx5IHRoaXMgcmV0dXJucyBmaXhlZCB0YWJsZXMgZnJvbSBpbmZmaXhlZC5oLlxuIElmIEJVSUxERklYRUQgaXMgZGVmaW5lZCwgdGhlbiBpbnN0ZWFkIHRoaXMgcm91dGluZSBidWlsZHMgdGhlIHRhYmxlcyB0aGVcbiBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgcmV0dXJucyB0aG9zZSB0YWJsZXMgdGhlIGZpcnN0IHRpbWUgYW5kXG4gdGhlcmVhZnRlci4gIFRoaXMgcmVkdWNlcyB0aGUgc2l6ZSBvZiB0aGUgY29kZSBieSBhYm91dCAySyBieXRlcywgaW5cbiBleGNoYW5nZSBmb3IgYSBsaXR0bGUgZXhlY3V0aW9uIHRpbWUuICBIb3dldmVyLCBCVUlMREZJWEVEIHNob3VsZCBub3QgYmVcbiB1c2VkIGZvciB0aHJlYWRlZCBhcHBsaWNhdGlvbnMsIHNpbmNlIHRoZSByZXdyaXRpbmcgb2YgdGhlIHRhYmxlcyBhbmQgdmlyZ2luXG4gbWF5IG5vdCBiZSB0aHJlYWQtc2FmZS5cbiAqL1xudmFyIHZpcmdpbiA9IHRydWU7XG5cbnZhciBsZW5maXgsIGRpc3RmaXg7IC8vIFdlIGhhdmUgbm8gcG9pbnRlcnMgaW4gSlMsIHNvIGtlZXAgdGFibGVzIHNlcGFyYXRlXG5cbmZ1bmN0aW9uIGZpeGVkdGFibGVzKHN0YXRlKSB7XG4gIC8qIGJ1aWxkIGZpeGVkIGh1ZmZtYW4gdGFibGVzIGlmIGZpcnN0IGNhbGwgKG1heSBub3QgYmUgdGhyZWFkIHNhZmUpICovXG4gIGlmICh2aXJnaW4pIHtcbiAgICB2YXIgc3ltO1xuXG4gICAgbGVuZml4ID0gbmV3IHV0aWxzLkJ1ZjMyKDUxMik7XG4gICAgZGlzdGZpeCA9IG5ldyB1dGlscy5CdWYzMigzMik7XG5cbiAgICAvKiBsaXRlcmFsL2xlbmd0aCB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDE0NCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjU2KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gOTsgfVxuICAgIHdoaWxlIChzeW0gPCAyODApIHsgc3RhdGUubGVuc1tzeW0rK10gPSA3OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4OCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblxuICAgIGluZmxhdGVfdGFibGUoTEVOUywgIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAgIDAsIHN0YXRlLndvcmssIHsgYml0czogOSB9KTtcblxuICAgIC8qIGRpc3RhbmNlIHRhYmxlICovXG4gICAgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMzIpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA1OyB9XG5cbiAgICBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCAwLCAzMiwgICBkaXN0Zml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDUgfSk7XG5cbiAgICAvKiBkbyB0aGlzIGp1c3Qgb25jZSAqL1xuICAgIHZpcmdpbiA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDtcbiAgc3RhdGUubGVuYml0cyA9IDk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gZGlzdGZpeDtcbiAgc3RhdGUuZGlzdGJpdHMgPSA1O1xufVxuXG5cbi8qXG4gVXBkYXRlIHRoZSB3aW5kb3cgd2l0aCB0aGUgbGFzdCB3c2l6ZSAobm9ybWFsbHkgMzJLKSBieXRlcyB3cml0dGVuIGJlZm9yZVxuIHJldHVybmluZy4gIElmIHdpbmRvdyBkb2VzIG5vdCBleGlzdCB5ZXQsIGNyZWF0ZSBpdC4gIFRoaXMgaXMgb25seSBjYWxsZWRcbiB3aGVuIGEgd2luZG93IGlzIGFscmVhZHkgaW4gdXNlLCBvciB3aGVuIG91dHB1dCBoYXMgYmVlbiB3cml0dGVuIGR1cmluZyB0aGlzXG4gaW5mbGF0ZSBjYWxsLCBidXQgdGhlIGVuZCBvZiB0aGUgZGVmbGF0ZSBzdHJlYW0gaGFzIG5vdCBiZWVuIHJlYWNoZWQgeWV0LlxuIEl0IGlzIGFsc28gY2FsbGVkIHRvIGNyZWF0ZSBhIHdpbmRvdyBmb3IgZGljdGlvbmFyeSBkYXRhIHdoZW4gYSBkaWN0aW9uYXJ5XG4gaXMgbG9hZGVkLlxuXG4gUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZFxuIGFkdmFudGFnZSwgc2luY2Ugb25seSB0aGUgbGFzdCAzMksgb2Ygb3V0cHV0IGlzIGNvcGllZCB0byB0aGUgc2xpZGluZyB3aW5kb3dcbiB1cG9uIHJldHVybiBmcm9tIGluZmxhdGUoKSwgYW5kIHNpbmNlIGFsbCBkaXN0YW5jZXMgYWZ0ZXIgdGhlIGZpcnN0IDMySyBvZlxuIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci5cbiBUaGUgYWR2YW50YWdlIG1heSBiZSBkZXBlbmRlbnQgb24gdGhlIHNpemUgb2YgdGhlIHByb2Nlc3NvcidzIGRhdGEgY2FjaGVzLlxuICovXG5mdW5jdGlvbiB1cGRhdGV3aW5kb3coc3RybSwgc3JjLCBlbmQsIGNvcHkpIHtcbiAgdmFyIGRpc3Q7XG4gIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogaWYgaXQgaGFzbid0IGJlZW4gZG9uZSBhbHJlYWR5LCBhbGxvY2F0ZSBzcGFjZSBmb3IgdGhlIHdpbmRvdyAqL1xuICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7XG4gICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IDA7XG5cbiAgICBzdGF0ZS53aW5kb3cgPSBuZXcgdXRpbHMuQnVmOChzdGF0ZS53c2l6ZSk7XG4gIH1cblxuICAvKiBjb3B5IHN0YXRlLT53c2l6ZSBvciBsZXNzIG91dHB1dCBieXRlcyBpbnRvIHRoZSBjaXJjdWxhciB3aW5kb3cgKi9cbiAgaWYgKGNvcHkgPj0gc3RhdGUud3NpemUpIHtcbiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gc3RhdGUud3NpemUsIHN0YXRlLndzaXplLCAwKTtcbiAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgfVxuICBlbHNlIHtcbiAgICBkaXN0ID0gc3RhdGUud3NpemUgLSBzdGF0ZS53bmV4dDtcbiAgICBpZiAoZGlzdCA+IGNvcHkpIHtcbiAgICAgIGRpc3QgPSBjb3B5O1xuICAgIH1cbiAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdyArIHN0YXRlLT53bmV4dCwgZW5kIC0gY29weSwgZGlzdCk7XG4gICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGRpc3QsIHN0YXRlLnduZXh0KTtcbiAgICBjb3B5IC09IGRpc3Q7XG4gICAgaWYgKGNvcHkpIHtcbiAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93LCBlbmQgLSBjb3B5LCBjb3B5KTtcbiAgICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBjb3B5LCBjb3B5LCAwKTtcbiAgICAgIHN0YXRlLnduZXh0ID0gY29weTtcbiAgICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RhdGUud25leHQgKz0gZGlzdDtcbiAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHsgc3RhdGUud25leHQgPSAwOyB9XG4gICAgICBpZiAoc3RhdGUud2hhdmUgPCBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53aGF2ZSArPSBkaXN0OyB9XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlKHN0cm0sIGZsdXNoKSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIGlucHV0LCBvdXRwdXQ7ICAgICAgICAgIC8vIGlucHV0L291dHB1dCBidWZmZXJzXG4gIHZhciBuZXh0OyAgICAgICAgICAgICAgICAgICAvKiBuZXh0IGlucHV0IElOREVYICovXG4gIHZhciBwdXQ7ICAgICAgICAgICAgICAgICAgICAvKiBuZXh0IG91dHB1dCBJTkRFWCAqL1xuICB2YXIgaGF2ZSwgbGVmdDsgICAgICAgICAgICAgLyogYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGJpdCBidWZmZXIgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgaW4gYml0IGJ1ZmZlciAqL1xuICB2YXIgX2luLCBfb3V0OyAgICAgICAgICAgICAgLyogc2F2ZSBzdGFydGluZyBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICB2YXIgY29weTsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGJ5dGVzIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuICB2YXIgaGVyZSA9IDA7ICAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xuICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsgLy8gcGFrZWQgXCJoZXJlXCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgLy92YXIgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogcGFyZW50IHRhYmxlIGVudHJ5ICovXG4gIHZhciBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCBcImxhc3RcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqL1xuICB2YXIgcmV0OyAgICAgICAgICAgICAgICAgICAgLyogcmV0dXJuIGNvZGUgKi9cbiAgdmFyIGhidWYgPSBuZXcgdXRpbHMuQnVmOCg0KTsgICAgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi9cbiAgdmFyIG9wdHM7XG5cbiAgdmFyIG47IC8vIHRlbXBvcmFyeSB2YXIgZm9yIE5FRURfQklUU1xuXG4gIHZhciBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqL1xuICAgIFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdO1xuXG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fFxuICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgeyBzdGF0ZS5tb2RlID0gVFlQRURPOyB9ICAgIC8qIHNraXAgY2hlY2sgKi9cblxuXG4gIC8vLS0tIExPQUQoKSAtLS1cbiAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAvLy0tLVxuXG4gIF9pbiA9IGhhdmU7XG4gIF9vdXQgPSBsZWZ0O1xuICByZXQgPSBaX09LO1xuXG4gIGluZl9sZWF2ZTogLy8gZ290byBlbXVsYXRpb25cbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoc3RhdGUubW9kZSkge1xuICAgICAgY2FzZSBIRUFEOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpO1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpICYmIGhvbGQgPT09IDB4OGIxZikgeyAgLyogZ3ppcCBoZWFkZXIgKi9cbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IDAvKmNyYzMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cblxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5mbGFncyA9IDA7ICAgICAgICAgICAvKiBleHBlY3QgemxpYiBoZWFkZXIgKi9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShzdGF0ZS53cmFwICYgMSkgfHwgICAvKiBjaGVjayBpZiB6bGliIGhlYWRlciBhbGxvd2VkICovXG4gICAgICAgICAgKCgoaG9sZCAmIDB4ZmYpLypCSVRTKDgpKi8gPDwgOCkgKyAoaG9sZCA+PiA4KSkgJSAzMSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBoZWFkZXIgY2hlY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChob2xkICYgMHgwZikvKkJJVFMoNCkqLyAhPT0gWl9ERUZMQVRFRCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgbGVuID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgODtcbiAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7XG4gICAgICAgICAgc3RhdGUud2JpdHMgPSBsZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuID4gc3RhdGUud2JpdHMpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IGxlbjtcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIHpsaWIgaGVhZGVyIG9rXFxuXCIpKTtcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGTEFHUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDtcbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4ZmYpICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKChob2xkID4+IDgpICYgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IFRJTUU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVElNRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkM0KHN0YXRlLmNoZWNrLCBob2xkKVxuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzJdID0gKGhvbGQgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlszXSA9IChob2xkID4+PiAyNCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApO1xuICAgICAgICAgIC8vPT09XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBPUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhMRU46XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZDtcbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBob2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsLypaX05VTEwqLztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRVhUUkE7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhUUkE6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG4gICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmhlYWQuZXh0cmFfbGVuIC0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoIXN0YXRlLmhlYWQuZXh0cmEpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdW50eXBlZCBhcnJheSBmb3IgbW9yZSBjb252ZW5pZW50IHByb2Nlc3NpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbmV3IEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1dGlscy5hcnJheVNldChcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgaXMgbGltaXRlZCB0byA2NTUzNiBieXRlc1xuICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrXG4gICAgICAgICAgICAgICAgY29weSxcbiAgICAgICAgICAgICAgICAvKmxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA/IHN0YXRlLmhlYWQuZXh0cmFfbWF4IDogY29weSwqL1xuICAgICAgICAgICAgICAgIGxlblxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAvL3ptZW1jcHkoc3RhdGUuaGVhZC5leHRyYSArIGxlbiwgbmV4dCxcbiAgICAgICAgICAgICAgLy8gICAgICAgIGxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCA/XG4gICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA6IGNvcHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGNvcHkgPSAwO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIC8vIFRPRE86IDIgb3IgMSBieXRlcz9cbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQubmFtZV9tYXgqLykpIHtcbiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT01NRU5UOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDEwMDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBIQ1JDO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEhDUkM6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS5jaGVjayAmIDB4ZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2hlYWRlciBjcmMgbWlzbWF0Y2gnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuaGNyYyA9ICgoc3RhdGUuZmxhZ3MgPj4gOSkgJiAxKTtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElDVElEOlxuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBESUNUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJQ1Q6XG4gICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUO1xuICAgICAgICB9XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVFlQRTpcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEVETzpcbiAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcbiAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBDSEVDSztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBORUVEQklUUygzKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpLypCSVRTKDEpKi87XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDEpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAxO1xuICAgICAgICBiaXRzIC09IDE7XG4gICAgICAgIC8vLS0tLy9cblxuICAgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xuICAgICAgICAgIGNhc2UgMDogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0b3JlZCBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgc3RvcmVkIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gU1RPUkVEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIGZpeGVkdGFibGVzKHN0YXRlKTtcbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIGZpeGVkIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXzsgICAgICAgICAgICAgLyogZGVjb2RlIGNvZGVzICovXG4gICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkeW5hbWljIGJsb2NrICovXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBkeW5hbWljIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gVEFCTEU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJsb2NrIHR5cGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTVE9SRUQ6XG4gICAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy8gLyogZ28gdG8gYnl0ZSBib3VuZGFyeSAqL1xuICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XG4gICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoaG9sZCAmIDB4ZmZmZikgIT09ICgoaG9sZCA+Pj4gMTYpIF4gMHhmZmZmKSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZCAmIDB4ZmZmZjtcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgbGVuZ3RoICV1XFxuXCIsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZXztcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPUFlfOlxuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZOlxuICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIC8vLS0tIHptZW1jcHkocHV0LCBuZXh0LCBjb3B5KTsgLS0tXG4gICAgICAgICAgdXRpbHMuYXJyYXlTZXQob3V0cHV0LCBpbnB1dCwgbmV4dCwgY29weSwgcHV0KTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgICAgcHV0ICs9IGNvcHk7XG4gICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgZW5kXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUQUJMRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTQpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE0KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm5sZW4gPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAyNTc7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmRpc3QgPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAxO1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNTtcbiAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLm5jb2RlID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgNDtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuLy8jaWZuZGVmIFBLWklQX0JVR19XT1JLQVJPVU5EXG4gICAgICAgIGlmIChzdGF0ZS5ubGVuID4gMjg2IHx8IHN0YXRlLm5kaXN0ID4gMzApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5MRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IDE5KSB7XG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gICAgICAgIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNztcblxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoQ09ERVMsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIGxlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgY29kZSBsZW5ndGhzIG9rXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT0RFTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT0RFTEVOUzpcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZXJlX3ZhbCA8IDE2KSB7XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBoZXJlX3ZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGVyZV92YWwgPT09IDE2KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDIpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMjtcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSAtIDFdO1xuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwMyk7Ly9CSVRTKDIpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoZXJlX3ZhbCA9PT0gMTcpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMyk7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAzO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgNyk7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyA3O1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICBjb3B5ID0gMTEgKyAoaG9sZCAmIDB4N2YpOy8vQklUUyg3KTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDc7XG4gICAgICAgICAgICAgIGJpdHMgLT0gNztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHtcbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGhhbmRsZSBlcnJvciBicmVha3MgaW4gd2hpbGUgKi9cbiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkgeyBicmVhazsgfVxuXG4gICAgICAgIC8qIGNoZWNrIGZvciBlbmQtb2YtYmxvY2sgY29kZSAoYmV0dGVyIGhhdmUgb25lKSAqL1xuICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0c1xuICAgICAgICAgICB2YWx1ZXMgaGVyZSAoOSBhbmQgNikgd2l0aG91dCByZWFkaW5nIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXG4gICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIEVOT1VHSCBjb25zdGFudHMsIHdoaWNoIGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMgKi9cbiAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7XG5cbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUubGVuYml0cyB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIHN0YXRlLm5sZW4sIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcbiAgICAgICAgLy8gc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcbiAgICAgICAgLy9zdGF0ZS5kaXN0Y29kZS5jb3B5KHN0YXRlLmNvZGVzKTtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjtcbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUuZGlzdGJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG4nKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fO1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU46XG4gICAgICAgIGlmIChoYXZlID49IDYgJiYgbGVmdCA+PSAyNTgpIHtcbiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgICAvLy0tLVxuICAgICAgICAgIGluZmxhdGVfZmFzdChzdHJtLCBfb3V0KTtcbiAgICAgICAgICAvLy0tLSBMT0FEKCkgLS0tXG4gICAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gICAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gICAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gICAgICAgICAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XG4gICAgICAgICAgLy8tLS1cblxuICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7XG4gICAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmJhY2sgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsgIC8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmJiAoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaGVyZV92YWw7XG4gICAgICAgIGlmIChoZXJlX29wID09PSAwKSB7XG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IExJVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmIDMyKSB7XG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVORVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNUOlxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5kaXN0Yml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsO1xuICAgICAgICBzdGF0ZS5leHRyYSA9IChoZXJlX29wKSAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVEVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNURVhUOlxuICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XG4gICAgICAgICAgbiA9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICB9XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gc3RhdGUuZG1heCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLm9mZnNldCkpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTUFUQ0g7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTUFUQ0g6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBjb3B5ID0gX291dCAtIGxlZnQ7XG4gICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBjb3B5KSB7ICAgICAgICAgLyogY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5O1xuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud2hhdmUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcbi8vICAgICAgICAgIGNvcHkgLT0gc3RhdGUud2hhdmU7XG4vLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4vLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbi8vICAgICAgICAgIGxlZnQgLT0gY29weTtcbi8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuLy8gICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gMDtcbi8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4vLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbi8vICAgICAgICAgIGJyZWFrO1xuLy8jZW5kaWZcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53c2l6ZSAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLnduZXh0IC0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuICAgICAgICAgIGZyb21fc291cmNlID0gc3RhdGUud2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvcHkgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0O1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBvdXRwdXRbcHV0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbiAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMSVQ6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBvdXRwdXRbcHV0KytdID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBsZWZ0LS07XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDSEVDSzpcbiAgICAgICAgaWYgKHN0YXRlLndyYXApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAvLyBVc2UgJ3wnIGluc3RlYWQgb2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWRcbiAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgX291dCAtPSBsZWZ0O1xuICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgICBpZiAoX291dCkge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID1cbiAgICAgICAgICAgICAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBwdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkpO1xuXG4gICAgICAgICAgfVxuICAgICAgICAgIF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIC8vIE5COiBjcmMzMiBzdG9yZWQgYXMgc2lnbmVkIDMyLWJpdCBpbnQsIHpzd2FwMzIgcmV0dXJucyBzaWduZWQgdG9vXG4gICAgICAgICAgaWYgKChzdGF0ZS5mbGFncyA/IGhvbGQgOiB6c3dhcDMyKGhvbGQpKSAhPT0gc3RhdGUuY2hlY2spIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5HVEg6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLnRvdGFsICYgMHhmZmZmZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgbGVuZ3RoIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRE9ORTpcbiAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIEJBRDpcbiAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIE1FTTpcbiAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgICAgY2FzZSBTWU5DOlxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5mX2xlYXZlIDwtIGhlcmUgaXMgcmVhbCBwbGFjZSBmb3IgXCJnb3RvIGluZl9sZWF2ZVwiLCBlbXVsYXRlZCB2aWEgXCJicmVhayBpbmZfbGVhdmVcIlxuXG4gIC8qXG4gICAgIFJldHVybiBmcm9tIGluZmxhdGUoKSwgdXBkYXRpbmcgdGhlIHRvdGFsIGNvdW50cyBhbmQgdGhlIGNoZWNrIHZhbHVlLlxuICAgICBJZiB0aGVyZSB3YXMgbm8gcHJvZ3Jlc3MgZHVyaW5nIHRoZSBpbmZsYXRlKCkgY2FsbCwgcmV0dXJuIGEgYnVmZmVyXG4gICAgIGVycm9yLiAgQ2FsbCB1cGRhdGV3aW5kb3coKSB0byBjcmVhdGUgYW5kL29yIHVwZGF0ZSB0aGUgd2luZG93IHN0YXRlLlxuICAgICBOb3RlOiBhIG1lbW9yeSBlcnJvciBmcm9tIGluZmxhdGUoKSBpcyBub24tcmVjb3ZlcmFibGUuXG4gICAqL1xuXG4gIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAvLy0tLVxuXG4gIGlmIChzdGF0ZS53c2l6ZSB8fCAoX291dCAhPT0gc3RybS5hdmFpbF9vdXQgJiYgc3RhdGUubW9kZSA8IEJBRCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIKSkpIHtcbiAgICBpZiAodXBkYXRld2luZG93KHN0cm0sIHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0LCBfb3V0IC0gc3RybS5hdmFpbF9vdXQpKSB7XG4gICAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgIH1cbiAgfVxuICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcbiAgX291dCAtPSBzdHJtLmF2YWlsX291dDtcbiAgc3RybS50b3RhbF9pbiArPSBfaW47XG4gIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHtcbiAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSk7XG4gIH1cbiAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPT09IFRZUEUgPyAxMjggOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7XG4gIGlmICgoKF9pbiA9PT0gMCAmJiBfb3V0ID09PSAwKSB8fCBmbHVzaCA9PT0gWl9GSU5JU0gpICYmIHJldCA9PT0gWl9PSykge1xuICAgIHJldCA9IFpfQlVGX0VSUk9SO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVFbmQoc3RybSkge1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSAvKnx8IHN0cm0tPnpmcmVlID09IChmcmVlX2Z1bmMpMCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLndpbmRvdykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG4gIHJldHVybiBaX09LO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlR2V0SGVhZGVyKHN0cm0sIGhlYWQpIHtcbiAgdmFyIHN0YXRlO1xuXG4gIC8qIGNoZWNrIHN0YXRlICovXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoKHN0YXRlLndyYXAgJiAyKSA9PT0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cblxuICAvKiBzYXZlIGhlYWRlciBzdHJ1Y3R1cmUgKi9cbiAgc3RhdGUuaGVhZCA9IGhlYWQ7XG4gIGhlYWQuZG9uZSA9IGZhbHNlO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSkge1xuICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIHZhciBzdGF0ZTtcbiAgdmFyIGRpY3RpZDtcbiAgdmFyIHJldDtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gLyogPT0gWl9OVUxMICovIHx8ICFzdHJtLnN0YXRlIC8qID09IFpfTlVMTCAqLykgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS53cmFwICE9PSAwICYmIHN0YXRlLm1vZGUgIT09IERJQ1QpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICAvKiBjaGVjayBmb3IgY29ycmVjdCBkaWN0aW9uYXJ5IGlkZW50aWZpZXIgKi9cbiAgaWYgKHN0YXRlLm1vZGUgPT09IERJQ1QpIHtcbiAgICBkaWN0aWQgPSAxOyAvKiBhZGxlcjMyKDAsIG51bGwsIDApKi9cbiAgICAvKiBkaWN0aWQgPSBhZGxlcjMyKGRpY3RpZCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICByZXR1cm4gWl9EQVRBX0VSUk9SO1xuICAgIH1cbiAgfVxuICAvKiBjb3B5IGRpY3Rpb25hcnkgdG8gd2luZG93IHVzaW5nIHVwZGF0ZXdpbmRvdygpLCB3aGljaCB3aWxsIGFtZW5kIHRoZVxuICAgZXhpc3RpbmcgZGljdGlvbmFyeSBpZiBhcHByb3ByaWF0ZSAqL1xuICByZXQgPSB1cGRhdGV3aW5kb3coc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgZGljdExlbmd0aCk7XG4gIGlmIChyZXQpIHtcbiAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgfVxuICBzdGF0ZS5oYXZlZGljdCA9IDE7XG4gIC8vIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgZGljdGlvbmFyeSBzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSztcbn1cblxuZXhwb3J0cy5pbmZsYXRlUmVzZXQgPSBpbmZsYXRlUmVzZXQ7XG5leHBvcnRzLmluZmxhdGVSZXNldDIgPSBpbmZsYXRlUmVzZXQyO1xuZXhwb3J0cy5pbmZsYXRlUmVzZXRLZWVwID0gaW5mbGF0ZVJlc2V0S2VlcDtcbmV4cG9ydHMuaW5mbGF0ZUluaXQgPSBpbmZsYXRlSW5pdDtcbmV4cG9ydHMuaW5mbGF0ZUluaXQyID0gaW5mbGF0ZUluaXQyO1xuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbmV4cG9ydHMuaW5mbGF0ZUVuZCA9IGluZmxhdGVFbmQ7XG5leHBvcnRzLmluZmxhdGVHZXRIZWFkZXIgPSBpbmZsYXRlR2V0SGVhZGVyO1xuZXhwb3J0cy5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGluZmxhdGVTZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5pbmZsYXRlSW5mbyA9ICdwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5leHBvcnRzLmluZmxhdGVDb3B5ID0gaW5mbGF0ZUNvcHk7XG5leHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG5leHBvcnRzLmluZmxhdGVNYXJrID0gaW5mbGF0ZU1hcms7XG5leHBvcnRzLmluZmxhdGVQcmltZSA9IGluZmxhdGVQcmltZTtcbmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYztcbmV4cG9ydHMuaW5mbGF0ZVN5bmNQb2ludCA9IGluZmxhdGVTeW5jUG9pbnQ7XG5leHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcbnZhciBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cbi8qXG4gICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nXG4gICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcbiAgIGF2YWlsYWJsZSwgYW4gZW5kLW9mLWJsb2NrIGlzIGVuY291bnRlcmVkLCBvciBhIGRhdGEgZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICBXaGVuIGxhcmdlIGVub3VnaCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yXG4gICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXG4gICBpbmZsYXRlIGV4ZWN1dGlvbiB0aW1lIGlzIHNwZW50IGluIHRoaXMgcm91dGluZS5cblxuICAgRW50cnkgYXNzdW1wdGlvbnM6XG5cbiAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOXG4gICAgICAgIHN0cm0uYXZhaWxfaW4gPj0gNlxuICAgICAgICBzdHJtLmF2YWlsX291dCA+PSAyNThcbiAgICAgICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXRcbiAgICAgICAgc3RhdGUuYml0cyA8IDhcblxuICAgT24gcmV0dXJuLCBzdGF0ZS5tb2RlIGlzIG9uZSBvZjpcblxuICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcbiAgICAgICAgVFlQRSAtLSByZWFjaGVkIGVuZCBvZiBibG9jayBjb2RlLCBpbmZsYXRlKCkgdG8gaW50ZXJwcmV0IG5leHQgYmxvY2tcbiAgICAgICAgQkFEIC0tIGVycm9yIGluIGJsb2NrIGRhdGFcblxuICAgTm90ZXM6XG5cbiAgICAtIFRoZSBtYXhpbXVtIGlucHV0IGJpdHMgdXNlZCBieSBhIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGlzIDE1IGJpdHMgZm9yIHRoZVxuICAgICAgbGVuZ3RoIGNvZGUsIDUgYml0cyBmb3IgdGhlIGxlbmd0aCBleHRyYSwgMTUgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGNvZGUsXG4gICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxuICAgICAgVGhlcmVmb3JlIGlmIHN0cm0uYXZhaWxfaW4gPj0gNiwgdGhlbiB0aGVyZSBpcyBlbm91Z2ggaW5wdXQgdG8gYXZvaWRcbiAgICAgIGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuXG5cbiAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNThcbiAgICAgIGJ5dGVzLCB3aGljaCBpcyB0aGUgbWF4aW11bSBsZW5ndGggdGhhdCBjYW4gYmUgY29kZWQuICBpbmZsYXRlX2Zhc3QoKVxuICAgICAgcmVxdWlyZXMgc3RybS5hdmFpbF9vdXQgPj0gMjU4IGZvciBlYWNoIGxvb3AgdG8gYXZvaWQgY2hlY2tpbmcgZm9yXG4gICAgICBvdXRwdXQgc3BhY2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIF9pbjsgICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi9cbiAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICB2YXIgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGJlZzsgICAgICAgICAgICAgICAgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgdmFyIGRtYXg7ICAgICAgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xuLy8jZW5kaWZcbiAgdmFyIHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB2YXIgd2hhdmU7ICAgICAgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIC8vIFVzZSBgc193aW5kb3dgIGluc3RlYWQgYHdpbmRvd2AsIGF2b2lkIGNvbmZsaWN0IHdpdGggaW5zdHJ1bWVudGF0aW9uIHRvb2xzXG4gIHZhciBzX3dpbmRvdzsgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5iaXRzICovXG4gIHZhciBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cbiAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgdmFyIGxtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxlbmd0aCBjb2RlcyAqL1xuICB2YXIgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cbiAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgb3A7ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBiaXRzLCBvcGVyYXRpb24sIGV4dHJhIGJpdHMsIG9yICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgdmFyIGRpc3Q7ICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuXG5cbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblxuICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIC8vaGVyZSA9IHN0YXRlLmhlcmU7XG4gIF9pbiA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTtcbiAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpO1xuICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gIGRtYXggPSBzdGF0ZS5kbWF4O1xuLy8jZW5kaWZcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcbiAgd25leHQgPSBzdGF0ZS53bmV4dDtcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlO1xuICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXG4gICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXG5cbiAgdG9wOlxuICBkbyB7XG4gICAgaWYgKGJpdHMgPCAxNSkge1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICBiaXRzICs9IDg7XG4gICAgfVxuXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XG5cbiAgICBkb2xlbjpcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXG4gICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgIGJpdHMgLT0gb3A7XG4gICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG4gICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgIGlmIChvcCkge1xuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XG5cbiAgICAgICAgZG9kaXN0OlxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xuICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgY29udGludWUgZG9sZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcblxudmFyIE1BWEJJVFMgPSAxNTtcbnZhciBFTk9VR0hfTEVOUyA9IDg1MjtcbnZhciBFTk9VR0hfRElTVFMgPSA1OTI7XG4vL3ZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxudmFyIENPREVTID0gMDtcbnZhciBMRU5TID0gMTtcbnZhciBESVNUUyA9IDI7XG5cbnZhciBsYmFzZSA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGJhc2UgKi9cbiAgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSxcbiAgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBcbl07XG5cbnZhciBsZXh0ID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXG4gIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhcbl07XG5cbnZhciBkYmFzZSA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xuICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXG4gIDI1NywgMzg1LCA1MTMsIDc2OSwgMTAyNSwgMTUzNywgMjA0OSwgMzA3MywgNDA5NywgNjE0NSxcbiAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxuXTtcblxudmFyIGRleHQgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxuICAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNyxcbiAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NFxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZsYXRlX3RhYmxlKHR5cGUsIGxlbnMsIGxlbnNfaW5kZXgsIGNvZGVzLCB0YWJsZSwgdGFibGVfaW5kZXgsIHdvcmssIG9wdHMpXG57XG4gIHZhciBiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgLy9oZXJlID0gb3B0cy5oZXJlOyAvKiB0YWJsZSBlbnRyeSBmb3IgZHVwbGljYXRpb24gKi9cblxuICB2YXIgbGVuID0gMDsgICAgICAgICAgICAgICAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqL1xuICB2YXIgc3ltID0gMDsgICAgICAgICAgICAgICAvKiBpbmRleCBvZiBjb2RlIHN5bWJvbHMgKi9cbiAgdmFyIG1pbiA9IDAsIG1heCA9IDA7ICAgICAgICAgIC8qIG1pbmltdW0gYW5kIG1heGltdW0gY29kZSBsZW5ndGhzICovXG4gIHZhciByb290ID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciByb290IHRhYmxlICovXG4gIHZhciBjdXJyID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovXG4gIHZhciBkcm9wID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgYml0cyB0byBkcm9wIGZvciBzdWItdGFibGUgKi9cbiAgdmFyIGxlZnQgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqL1xuICB2YXIgdXNlZCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGVudHJpZXMgaW4gdGFibGUgdXNlZCAqL1xuICB2YXIgaHVmZiA9IDA7ICAgICAgICAgICAgICAvKiBIdWZmbWFuIGNvZGUgKi9cbiAgdmFyIGluY3I7ICAgICAgICAgICAgICAvKiBmb3IgaW5jcmVtZW50aW5nIGNvZGUsIGluZGV4ICovXG4gIHZhciBmaWxsOyAgICAgICAgICAgICAgLyogaW5kZXggZm9yIHJlcGxpY2F0aW5nIGVudHJpZXMgKi9cbiAgdmFyIGxvdzsgICAgICAgICAgICAgICAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovXG4gIHZhciBtYXNrOyAgICAgICAgICAgICAgLyogbWFzayBmb3IgbG93IHJvb3QgYml0cyAqL1xuICB2YXIgbmV4dDsgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gdGFibGUgKi9cbiAgdmFyIGJhc2UgPSBudWxsOyAgICAgLyogYmFzZSB2YWx1ZSB0YWJsZSB0byB1c2UgKi9cbiAgdmFyIGJhc2VfaW5kZXggPSAwO1xuLy8gIHZhciBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHVzZSBiYXNlIGFuZCBleHRyYSBmb3Igc3ltYm9sID4gZW5kICovXG4gIHZhciBjb3VudCA9IG5ldyB1dGlscy5CdWYxNihNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgIC8qIG51bWJlciBvZiBjb2RlcyBvZiBlYWNoIGxlbmd0aCAqL1xuICB2YXIgb2ZmcyA9IG5ldyB1dGlscy5CdWYxNihNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgICAvKiBvZmZzZXRzIGluIHRhYmxlIGZvciBlYWNoIGxlbmd0aCAqL1xuICB2YXIgZXh0cmEgPSBudWxsO1xuICB2YXIgZXh0cmFfaW5kZXggPSAwO1xuXG4gIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsO1xuXG4gIC8qXG4gICBQcm9jZXNzIGEgc2V0IG9mIGNvZGUgbGVuZ3RocyB0byBjcmVhdGUgYSBjYW5vbmljYWwgSHVmZm1hbiBjb2RlLiAgVGhlXG4gICBjb2RlIGxlbmd0aHMgYXJlIGxlbnNbMC4uY29kZXMtMV0uICBFYWNoIGxlbmd0aCBjb3JyZXNwb25kcyB0byB0aGVcbiAgIHN5bWJvbHMgMC4uY29kZXMtMS4gIFRoZSBIdWZmbWFuIGNvZGUgaXMgZ2VuZXJhdGVkIGJ5IGZpcnN0IHNvcnRpbmcgdGhlXG4gICBzeW1ib2xzIGJ5IGxlbmd0aCBmcm9tIHNob3J0IHRvIGxvbmcsIGFuZCByZXRhaW5pbmcgdGhlIHN5bWJvbCBvcmRlclxuICAgZm9yIGNvZGVzIHdpdGggZXF1YWwgbGVuZ3Rocy4gIFRoZW4gdGhlIGNvZGUgc3RhcnRzIHdpdGggYWxsIHplcm8gYml0c1xuICAgZm9yIHRoZSBmaXJzdCBjb2RlIG9mIHRoZSBzaG9ydGVzdCBsZW5ndGgsIGFuZCB0aGUgY29kZXMgYXJlIGludGVnZXJcbiAgIGluY3JlbWVudHMgZm9yIHRoZSBzYW1lIGxlbmd0aCwgYW5kIHplcm9zIGFyZSBhcHBlbmRlZCBhcyB0aGUgbGVuZ3RoXG4gICBpbmNyZWFzZXMuICBGb3IgdGhlIGRlZmxhdGUgZm9ybWF0LCB0aGVzZSBiaXRzIGFyZSBzdG9yZWQgYmFja3dhcmRzXG4gICBmcm9tIHRoZWlyIG1vcmUgbmF0dXJhbCBpbnRlZ2VyIGluY3JlbWVudCBvcmRlcmluZywgYW5kIHNvIHdoZW4gdGhlXG4gICBkZWNvZGluZyB0YWJsZXMgYXJlIGJ1aWx0IGluIHRoZSBsYXJnZSBsb29wIGJlbG93LCB0aGUgaW50ZWdlciBjb2Rlc1xuICAgYXJlIGluY3JlbWVudGVkIGJhY2t3YXJkcy5cblxuICAgVGhpcyByb3V0aW5lIGFzc3VtZXMsIGJ1dCBkb2VzIG5vdCBjaGVjaywgdGhhdCBhbGwgb2YgdGhlIGVudHJpZXMgaW5cbiAgIGxlbnNbXSBhcmUgaW4gdGhlIHJhbmdlIDAuLk1BWEJJVFMuICBUaGUgY2FsbGVyIG11c3QgYXNzdXJlIHRoaXMuXG4gICAxLi5NQVhCSVRTIGlzIGludGVycHJldGVkIGFzIHRoYXQgY29kZSBsZW5ndGguICB6ZXJvIG1lYW5zIHRoYXQgdGhhdFxuICAgc3ltYm9sIGRvZXMgbm90IG9jY3VyIGluIHRoaXMgY29kZS5cblxuICAgVGhlIGNvZGVzIGFyZSBzb3J0ZWQgYnkgY29tcHV0aW5nIGEgY291bnQgb2YgY29kZXMgZm9yIGVhY2ggbGVuZ3RoLFxuICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGggaW4gdGhlXG4gICBzb3J0ZWQgdGFibGUsIGFuZCB0aGVuIGVudGVyaW5nIHRoZSBzeW1ib2xzIGluIG9yZGVyIGluIHRoZSBzb3J0ZWRcbiAgIHRhYmxlLiAgVGhlIHNvcnRlZCB0YWJsZSBpcyB3b3JrW10sIHdpdGggdGhhdCBzcGFjZSBiZWluZyBwcm92aWRlZCBieVxuICAgdGhlIGNhbGxlci5cblxuICAgVGhlIGxlbmd0aCBjb3VudHMgYXJlIHVzZWQgZm9yIG90aGVyIHB1cnBvc2VzIGFzIHdlbGwsIGkuZS4gZmluZGluZ1xuICAgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoIGNvZGVzLCBkZXRlcm1pbmluZyBpZiB0aGVyZSBhcmUgYW55XG4gICBjb2RlcyBhdCBhbGwsIGNoZWNraW5nIGZvciBhIHZhbGlkIHNldCBvZiBsZW5ndGhzLCBhbmQgbG9va2luZyBhaGVhZFxuICAgYXQgbGVuZ3RoIGNvdW50cyB0byBkZXRlcm1pbmUgc3ViLXRhYmxlIHNpemVzIHdoZW4gYnVpbGRpbmcgdGhlXG4gICBkZWNvZGluZyB0YWJsZXMuXG4gICAqL1xuXG4gIC8qIGFjY3VtdWxhdGUgbGVuZ3RocyBmb3IgY29kZXMgKGFzc3VtZXMgbGVuc1tdIGFsbCBpbiAwLi5NQVhCSVRTKSAqL1xuICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGNvdW50W2xlbl0gPSAwO1xuICB9XG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgY291bnRbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rKztcbiAgfVxuXG4gIC8qIGJvdW5kIGNvZGUgbGVuZ3RocywgZm9yY2Ugcm9vdCB0byBiZSB3aXRoaW4gY29kZSBsZW5ndGhzICovXG4gIHJvb3QgPSBiaXRzO1xuICBmb3IgKG1heCA9IE1BWEJJVFM7IG1heCA+PSAxOyBtYXgtLSkge1xuICAgIGlmIChjb3VudFttYXhdICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPiBtYXgpIHtcbiAgICByb290ID0gbWF4O1xuICB9XG4gIGlmIChtYXggPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAvKiBubyBzeW1ib2xzIHRvIGNvZGUgYXQgYWxsICovXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OyAgLy9oZXJlLm9wID0gKHZhciBjaGFyKTY0OyAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwOyAgIC8vaGVyZS52YWwgPSAodmFyIHNob3J0KTA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0O1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuICAgIG9wdHMuYml0cyA9IDE7XG4gICAgcmV0dXJuIDA7ICAgICAvKiBubyBzeW1ib2xzLCBidXQgd2FpdCBmb3IgZGVjb2RpbmcgdG8gcmVwb3J0IGVycm9yICovXG4gIH1cbiAgZm9yIChtaW4gPSAxOyBtaW4gPCBtYXg7IG1pbisrKSB7XG4gICAgaWYgKGNvdW50W21pbl0gIT09IDApIHsgYnJlYWs7IH1cbiAgfVxuICBpZiAocm9vdCA8IG1pbikge1xuICAgIHJvb3QgPSBtaW47XG4gIH1cblxuICAvKiBjaGVjayBmb3IgYW4gb3Zlci1zdWJzY3JpYmVkIG9yIGluY29tcGxldGUgc2V0IG9mIGxlbmd0aHMgKi9cbiAgbGVmdCA9IDE7XG4gIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgbGVmdCA8PD0gMTtcbiAgICBsZWZ0IC09IGNvdW50W2xlbl07XG4gICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSAgICAgICAgLyogb3Zlci1zdWJzY3JpYmVkICovXG4gIH1cbiAgaWYgKGxlZnQgPiAwICYmICh0eXBlID09PSBDT0RFUyB8fCBtYXggIT09IDEpKSB7XG4gICAgcmV0dXJuIC0xOyAgICAgICAgICAgICAgICAgICAgICAvKiBpbmNvbXBsZXRlIHNldCAqL1xuICB9XG5cbiAgLyogZ2VuZXJhdGUgb2Zmc2V0cyBpbnRvIHN5bWJvbCB0YWJsZSBmb3IgZWFjaCBsZW5ndGggZm9yIHNvcnRpbmcgKi9cbiAgb2Zmc1sxXSA9IDA7XG4gIGZvciAobGVuID0gMTsgbGVuIDwgTUFYQklUUzsgbGVuKyspIHtcbiAgICBvZmZzW2xlbiArIDFdID0gb2Zmc1tsZW5dICsgY291bnRbbGVuXTtcbiAgfVxuXG4gIC8qIHNvcnQgc3ltYm9scyBieSBsZW5ndGgsIGJ5IHN5bWJvbCBvcmRlciB3aXRoaW4gZWFjaCBsZW5ndGggKi9cbiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHtcbiAgICBpZiAobGVuc1tsZW5zX2luZGV4ICsgc3ltXSAhPT0gMCkge1xuICAgICAgd29ya1tvZmZzW2xlbnNbbGVuc19pbmRleCArIHN5bV1dKytdID0gc3ltO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICBDcmVhdGUgYW5kIGZpbGwgaW4gZGVjb2RpbmcgdGFibGVzLiAgSW4gdGhpcyBsb29wLCB0aGUgdGFibGUgYmVpbmdcbiAgIGZpbGxlZCBpcyBhdCBuZXh0IGFuZCBoYXMgY3VyciBpbmRleCBiaXRzLiAgVGhlIGNvZGUgYmVpbmcgdXNlZCBpcyBodWZmXG4gICB3aXRoIGxlbmd0aCBsZW4uICBUaGF0IGNvZGUgaXMgY29udmVydGVkIHRvIGFuIGluZGV4IGJ5IGRyb3BwaW5nIGRyb3BcbiAgIGJpdHMgb2ZmIG9mIHRoZSBib3R0b20uICBGb3IgY29kZXMgd2hlcmUgbGVuIGlzIGxlc3MgdGhhbiBkcm9wICsgY3VycixcbiAgIHRob3NlIHRvcCBkcm9wICsgY3VyciAtIGxlbiBiaXRzIGFyZSBpbmNyZW1lbnRlZCB0aHJvdWdoIGFsbCB2YWx1ZXMgdG9cbiAgIGZpbGwgdGhlIHRhYmxlIHdpdGggcmVwbGljYXRlZCBlbnRyaWVzLlxuXG4gICByb290IGlzIHRoZSBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgdGhlIHJvb3QgdGFibGUuICBXaGVuIGxlbiBleGNlZWRzXG4gICByb290LCBzdWItdGFibGVzIGFyZSBjcmVhdGVkIHBvaW50ZWQgdG8gYnkgdGhlIHJvb3QgZW50cnkgd2l0aCBhbiBpbmRleFxuICAgb2YgdGhlIGxvdyByb290IGJpdHMgb2YgaHVmZi4gIFRoaXMgaXMgc2F2ZWQgaW4gbG93IHRvIGNoZWNrIGZvciB3aGVuIGFcbiAgIG5ldyBzdWItdGFibGUgc2hvdWxkIGJlIHN0YXJ0ZWQuICBkcm9wIGlzIHplcm8gd2hlbiB0aGUgcm9vdCB0YWJsZSBpc1xuICAgYmVpbmcgZmlsbGVkLCBhbmQgZHJvcCBpcyByb290IHdoZW4gc3ViLXRhYmxlcyBhcmUgYmVpbmcgZmlsbGVkLlxuXG4gICBXaGVuIGEgbmV3IHN1Yi10YWJsZSBpcyBuZWVkZWQsIGl0IGlzIG5lY2Vzc2FyeSB0byBsb29rIGFoZWFkIGluIHRoZVxuICAgY29kZSBsZW5ndGhzIHRvIGRldGVybWluZSB3aGF0IHNpemUgc3ViLXRhYmxlIGlzIG5lZWRlZC4gIFRoZSBsZW5ndGhcbiAgIGNvdW50cyBhcmUgdXNlZCBmb3IgdGhpcywgYW5kIHNvIGNvdW50W10gaXMgZGVjcmVtZW50ZWQgYXMgY29kZXMgYXJlXG4gICBlbnRlcmVkIGluIHRoZSB0YWJsZXMuXG5cbiAgIHVzZWQga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgdGFibGUgZW50cmllcyBoYXZlIGJlZW4gYWxsb2NhdGVkIGZyb20gdGhlXG4gICBwcm92aWRlZCAqdGFibGUgc3BhY2UuICBJdCBpcyBjaGVja2VkIGZvciBMRU5TIGFuZCBESVNUIHRhYmxlcyBhZ2FpbnN0XG4gICB0aGUgY29uc3RhbnRzIEVOT1VHSF9MRU5TIGFuZCBFTk9VR0hfRElTVFMgdG8gZ3VhcmQgYWdhaW5zdCBjaGFuZ2VzIGluXG4gICB0aGUgaW5pdGlhbCByb290IHRhYmxlIHNpemUgY29uc3RhbnRzLiAgU2VlIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXG4gICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuICAgc3ltIGluY3JlbWVudHMgdGhyb3VnaCBhbGwgc3ltYm9scywgYW5kIHRoZSBsb29wIHRlcm1pbmF0ZXMgd2hlblxuICAgYWxsIGNvZGVzIG9mIGxlbmd0aCBtYXgsIGkuZS4gYWxsIGNvZGVzLCBoYXZlIGJlZW4gcHJvY2Vzc2VkLiAgVGhpc1xuICAgcm91dGluZSBwZXJtaXRzIGluY29tcGxldGUgY29kZXMsIHNvIGFub3RoZXIgbG9vcCBhZnRlciB0aGlzIG9uZSBmaWxsc1xuICAgaW4gdGhlIHJlc3Qgb2YgdGhlIGRlY29kaW5nIHRhYmxlcyB3aXRoIGludmFsaWQgY29kZSBtYXJrZXJzLlxuICAgKi9cblxuICAvKiBzZXQgdXAgZm9yIGNvZGUgdHlwZSAqL1xuICAvLyBwb29yIG1hbiBvcHRpbWl6YXRpb24gLSB1c2UgaWYtZWxzZSBpbnN0ZWFkIG9mIHN3aXRjaCxcbiAgLy8gdG8gYXZvaWQgZGVvcHRzIGluIG9sZCB2OFxuICBpZiAodHlwZSA9PT0gQ09ERVMpIHtcbiAgICBiYXNlID0gZXh0cmEgPSB3b3JrOyAgICAvKiBkdW1teSB2YWx1ZS0tbm90IHVzZWQgKi9cbiAgICBlbmQgPSAxOTtcblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMpIHtcbiAgICBiYXNlID0gbGJhc2U7XG4gICAgYmFzZV9pbmRleCAtPSAyNTc7XG4gICAgZXh0cmEgPSBsZXh0O1xuICAgIGV4dHJhX2luZGV4IC09IDI1NztcbiAgICBlbmQgPSAyNTY7XG5cbiAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgIC8qIERJU1RTICovXG4gICAgYmFzZSA9IGRiYXNlO1xuICAgIGV4dHJhID0gZGV4dDtcbiAgICBlbmQgPSAtMTtcbiAgfVxuXG4gIC8qIGluaXRpYWxpemUgb3B0cyBmb3IgbG9vcCAqL1xuICBodWZmID0gMDsgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSAqL1xuICBzeW0gPSAwOyAgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBzeW1ib2wgKi9cbiAgbGVuID0gbWluOyAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgbGVuZ3RoICovXG4gIG5leHQgPSB0YWJsZV9pbmRleDsgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgdG8gZmlsbCBpbiAqL1xuICBjdXJyID0gcm9vdDsgICAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSBpbmRleCBiaXRzICovXG4gIGRyb3AgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBjdXJyZW50IGJpdHMgdG8gZHJvcCBmcm9tIGNvZGUgZm9yIGluZGV4ICovXG4gIGxvdyA9IC0xOyAgICAgICAgICAgICAgICAgICAvKiB0cmlnZ2VyIG5ldyBzdWItdGFibGUgd2hlbiBsZW4gPiByb290ICovXG4gIHVzZWQgPSAxIDw8IHJvb3Q7ICAgICAgICAgIC8qIHVzZSByb290IHRhYmxlIGVudHJpZXMgKi9cbiAgbWFzayA9IHVzZWQgLSAxOyAgICAgICAgICAgIC8qIG1hc2sgZm9yIGNvbXBhcmluZyBsb3cgKi9cblxuICAvKiBjaGVjayBhdmFpbGFibGUgdGFibGUgc3BhY2UgKi9cbiAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHxcbiAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8qIHByb2Nlc3MgYWxsIGNvZGVzIGFuZCBtYWtlIHRhYmxlIGVudHJpZXMgKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqL1xuICAgIGhlcmVfYml0cyA9IGxlbiAtIGRyb3A7XG4gICAgaWYgKHdvcmtbc3ltXSA8IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IDA7XG4gICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTtcbiAgICB9XG4gICAgZWxzZSBpZiAod29ya1tzeW1dID4gZW5kKSB7XG4gICAgICBoZXJlX29wID0gZXh0cmFbZXh0cmFfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgICAgaGVyZV92YWwgPSBiYXNlW2Jhc2VfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGhlcmVfb3AgPSAzMiArIDY0OyAgICAgICAgIC8qIGVuZCBvZiBibG9jayAqL1xuICAgICAgaGVyZV92YWwgPSAwO1xuICAgIH1cblxuICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIGRyb3ApO1xuICAgIGZpbGwgPSAxIDw8IGN1cnI7XG4gICAgbWluID0gZmlsbDsgICAgICAgICAgICAgICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi9cbiAgICBkbyB7XG4gICAgICBmaWxsIC09IGluY3I7XG4gICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfDA7XG4gICAgfSB3aGlsZSAoZmlsbCAhPT0gMCk7XG5cbiAgICAvKiBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBsZW4tYml0IGNvZGUgaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTtcbiAgICB3aGlsZSAoaHVmZiAmIGluY3IpIHtcbiAgICAgIGluY3IgPj49IDE7XG4gICAgfVxuICAgIGlmIChpbmNyICE9PSAwKSB7XG4gICAgICBodWZmICY9IGluY3IgLSAxO1xuICAgICAgaHVmZiArPSBpbmNyO1xuICAgIH0gZWxzZSB7XG4gICAgICBodWZmID0gMDtcbiAgICB9XG5cbiAgICAvKiBnbyB0byBuZXh0IHN5bWJvbCwgdXBkYXRlIGNvdW50LCBsZW4gKi9cbiAgICBzeW0rKztcbiAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7XG4gICAgICBpZiAobGVuID09PSBtYXgpIHsgYnJlYWs7IH1cbiAgICAgIGxlbiA9IGxlbnNbbGVuc19pbmRleCArIHdvcmtbc3ltXV07XG4gICAgfVxuXG4gICAgLyogY3JlYXRlIG5ldyBzdWItdGFibGUgaWYgbmVlZGVkICovXG4gICAgaWYgKGxlbiA+IHJvb3QgJiYgKGh1ZmYgJiBtYXNrKSAhPT0gbG93KSB7XG4gICAgICAvKiBpZiBmaXJzdCB0aW1lLCB0cmFuc2l0aW9uIHRvIHN1Yi10YWJsZXMgKi9cbiAgICAgIGlmIChkcm9wID09PSAwKSB7XG4gICAgICAgIGRyb3AgPSByb290O1xuICAgICAgfVxuXG4gICAgICAvKiBpbmNyZW1lbnQgcGFzdCBsYXN0IHRhYmxlICovXG4gICAgICBuZXh0ICs9IG1pbjsgICAgICAgICAgICAvKiBoZXJlIG1pbiBpcyAxIDw8IGN1cnIgKi9cblxuICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovXG4gICAgICBjdXJyID0gbGVuIC0gZHJvcDtcbiAgICAgIGxlZnQgPSAxIDw8IGN1cnI7XG4gICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgpIHtcbiAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07XG4gICAgICAgIGlmIChsZWZ0IDw9IDApIHsgYnJlYWs7IH1cbiAgICAgICAgY3VycisrO1xuICAgICAgICBsZWZ0IDw8PSAxO1xuICAgICAgfVxuXG4gICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovXG4gICAgICB1c2VkICs9IDEgPDwgY3VycjtcbiAgICAgIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLyogcG9pbnQgZW50cnkgaW4gcm9vdCB0YWJsZSB0byBzdWItdGFibGUgKi9cbiAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrO1xuICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcbiAgICAgIHRhYmxlLmJpdHNbbG93XSA9IHJvb3Q7XG4gICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovXG4gICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XG4gICAgfVxuICB9XG5cbiAgLyogZmlsbCBpbiByZW1haW5pbmcgdGFibGUgZW50cnkgaWYgY29kZSBpcyBpbmNvbXBsZXRlIChndWFyYW50ZWVkIHRvIGhhdmVcbiAgIGF0IG1vc3Qgb25lIHJlbWFpbmluZyBlbnRyeSwgc2luY2UgaWYgdGhlIGNvZGUgaXMgaW5jb21wbGV0ZSwgdGhlXG4gICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovXG4gIGlmIChodWZmICE9PSAwKSB7XG4gICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7XG4gICAgLy90YWJsZS52YWxbbmV4dCArIGh1ZmZdID0gMDtcbiAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSAoKGxlbiAtIGRyb3ApIDw8IDI0KSB8ICg2NCA8PCAxNikgfDA7XG4gIH1cblxuICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG4gIG9wdHMuYml0cyA9IHJvb3Q7XG4gIHJldHVybiAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4gIFpfTk9fRkxVU0g6ICAgICAgICAgMCxcbiAgWl9QQVJUSUFMX0ZMVVNIOiAgICAxLFxuICBaX1NZTkNfRkxVU0g6ICAgICAgIDIsXG4gIFpfRlVMTF9GTFVTSDogICAgICAgMyxcbiAgWl9GSU5JU0g6ICAgICAgICAgICA0LFxuICBaX0JMT0NLOiAgICAgICAgICAgIDUsXG4gIFpfVFJFRVM6ICAgICAgICAgICAgNixcblxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICAqL1xuICBaX09LOiAgICAgICAgICAgICAgIDAsXG4gIFpfU1RSRUFNX0VORDogICAgICAgMSxcbiAgWl9ORUVEX0RJQ1Q6ICAgICAgICAyLFxuICBaX0VSUk5POiAgICAgICAgICAgLTEsXG4gIFpfU1RSRUFNX0VSUk9SOiAgICAtMixcbiAgWl9EQVRBX0VSUk9SOiAgICAgIC0zLFxuICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsXG4gIFpfQlVGX0VSUk9SOiAgICAgICAtNSxcbiAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG4gIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICBaX05PX0NPTVBSRVNTSU9OOiAgICAgICAgIDAsXG4gIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcbiAgWl9CRVNUX0NPTVBSRVNTSU9OOiAgICAgICA5LFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT046ICAgLTEsXG5cblxuICBaX0ZJTFRFUkVEOiAgICAgICAgICAgICAgIDEsXG4gIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcbiAgWl9STEU6ICAgICAgICAgICAgICAgICAgICAzLFxuICBaX0ZJWEVEOiAgICAgICAgICAgICAgICAgIDQsXG4gIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcblxuICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4gIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcbiAgWl9URVhUOiAgICAgICAgICAgICAgICAgICAxLFxuICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKVxuICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXG5cbiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gIFpfREVGTEFURUQ6ICAgICAgICAgICAgICAgOFxuICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J1ZmZlcicpLFxuICAgIEJ1ZmZlciA9IF9yZXF1aXJlLkJ1ZmZlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG5cbnZhciBjdXN0b20gPSBpbnNwZWN0ICYmIGluc3BlY3QuY3VzdG9tIHx8ICdpbnNwZWN0JztcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKHNyYywgdGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCdWZmZXJMaXN0LCBbe1xuICAgIGtleTogXCJwdXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2godikge1xuICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICBkYXRhOiB2LFxuICAgICAgICBuZXh0OiBudWxsXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgICArK3RoaXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnNoaWZ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICBkYXRhOiB2LFxuICAgICAgICBuZXh0OiB0aGlzLmhlYWRcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgICArK3RoaXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaGlmdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgICAtLXRoaXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJqb2luXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcblxuICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbmNhdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXQobikge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAocCkge1xuICAgICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIG9yIGNoYXJhY3RlcnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcImNvbnN1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3VtZShuLCBoYXNTdHJpbmdzKSB7XG4gICAgICB2YXIgcmV0O1xuXG4gICAgICBpZiAobiA8IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAvLyBgc2xpY2VgIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzLlxuICAgICAgICByZXQgPSB0aGlzLmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICAgICAgdGhpcy5oZWFkLmRhdGEgPSB0aGlzLmhlYWQuZGF0YS5zbGljZShuKTtcbiAgICAgIH0gZWxzZSBpZiAobiA9PT0gdGhpcy5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgIC8vIEZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaC5cbiAgICAgICAgcmV0ID0gdGhpcy5zaGlmdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyLlxuICAgICAgICByZXQgPSBoYXNTdHJpbmdzID8gdGhpcy5fZ2V0U3RyaW5nKG4pIDogdGhpcy5fZ2V0QnVmZmVyKG4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaXJzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0U3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTdHJpbmcobikge1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgYyA9IDE7XG4gICAgICB2YXIgcmV0ID0gcC5kYXRhO1xuICAgICAgbiAtPSByZXQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgICAgICBuIC09IG5iO1xuXG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgICsrYztcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRCdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEJ1ZmZlcihuKSB7XG4gICAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgYyA9IDE7XG4gICAgICBwLmRhdGEuY29weShyZXQpO1xuICAgICAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgICAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgICAgIG4gLT0gbmI7XG5cbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgIGlmIChwLm5leHQpIHRoaXMuaGVhZCA9IHAubmV4dDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7XG4gICAgICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgKytjO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCAtPSBjO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbGlua2VkIGxpc3Qgb25seSBzaG93cyB0aGUgbWluaW1hbCBuZWNlc3NhcnkgaW5mb3JtYXRpb24uXG5cbiAgfSwge1xuICAgIGtleTogY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIC8vIE9ubHkgaW5zcGVjdCBvbmUgbGV2ZWwuXG4gICAgICAgIGRlcHRoOiAwLFxuICAgICAgICAvLyBJdCBzaG91bGQgbm90IHJlY3Vyc2UuXG4gICAgICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX09iamVjdCRzZXRQcm90b3R5cGVPO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZmluaXNoZWQgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcblxudmFyIGtMYXN0UmVzb2x2ZSA9IFN5bWJvbCgnbGFzdFJlc29sdmUnKTtcbnZhciBrTGFzdFJlamVjdCA9IFN5bWJvbCgnbGFzdFJlamVjdCcpO1xudmFyIGtFcnJvciA9IFN5bWJvbCgnZXJyb3InKTtcbnZhciBrRW5kZWQgPSBTeW1ib2woJ2VuZGVkJyk7XG52YXIga0xhc3RQcm9taXNlID0gU3ltYm9sKCdsYXN0UHJvbWlzZScpO1xudmFyIGtIYW5kbGVQcm9taXNlID0gU3ltYm9sKCdoYW5kbGVQcm9taXNlJyk7XG52YXIga1N0cmVhbSA9IFN5bWJvbCgnc3RyZWFtJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJSZXN1bHQodmFsdWUsIGRvbmUpIHtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZG9uZTogZG9uZVxuICB9O1xufVxuXG5mdW5jdGlvbiByZWFkQW5kUmVzb2x2ZShpdGVyKSB7XG4gIHZhciByZXNvbHZlID0gaXRlcltrTGFzdFJlc29sdmVdO1xuXG4gIGlmIChyZXNvbHZlICE9PSBudWxsKSB7XG4gICAgdmFyIGRhdGEgPSBpdGVyW2tTdHJlYW1dLnJlYWQoKTsgLy8gd2UgZGVmZXIgaWYgZGF0YSBpcyBudWxsXG4gICAgLy8gd2UgY2FuIGJlIGV4cGVjdGluZyBlaXRoZXIgJ2VuZCcgb3JcbiAgICAvLyAnZXJyb3InXG5cbiAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgaXRlcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgIGl0ZXJba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICBpdGVyW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQoZGF0YSwgZmFsc2UpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZWFkYWJsZShpdGVyKSB7XG4gIC8vIHdlIHdhaXQgZm9yIHRoZSBuZXh0IHRpY2ssIGJlY2F1c2UgaXQgbWlnaHRcbiAgLy8gZW1pdCBhbiBlcnJvciB3aXRoIHByb2Nlc3MubmV4dFRpY2tcbiAgcHJvY2Vzcy5uZXh0VGljayhyZWFkQW5kUmVzb2x2ZSwgaXRlcik7XG59XG5cbmZ1bmN0aW9uIHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCBpdGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGFzdFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXRlcltrRW5kZWRdKSB7XG4gICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpdGVyW2tIYW5kbGVQcm9taXNlXShyZXNvbHZlLCByZWplY3QpO1xuICAgIH0sIHJlamVjdCk7XG4gIH07XG59XG5cbnZhciBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGZ1bmN0aW9uICgpIHt9KTtcbnZhciBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YoKF9PYmplY3Qkc2V0UHJvdG90eXBlTyA9IHtcbiAgZ2V0IHN0cmVhbSgpIHtcbiAgICByZXR1cm4gdGhpc1trU3RyZWFtXTtcbiAgfSxcblxuICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBpZiB3ZSBoYXZlIGRldGVjdGVkIGFuIGVycm9yIGluIHRoZSBtZWFud2hpbGVcbiAgICAvLyByZWplY3Qgc3RyYWlnaHQgYXdheVxuICAgIHZhciBlcnJvciA9IHRoaXNba0Vycm9yXTtcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1trRW5kZWRdKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNba1N0cmVhbV0uZGVzdHJveWVkKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGRlZmVyIHZpYSBuZXh0VGljayBiZWNhdXNlIGlmIC5kZXN0cm95KGVycikgaXNcbiAgICAgIC8vIGNhbGxlZCwgdGhlIGVycm9yIHdpbGwgYmUgZW1pdHRlZCB2aWEgbmV4dFRpY2ssIGFuZFxuICAgICAgLy8gd2UgY2Fubm90IGd1YXJhbnRlZSB0aGF0IHRoZXJlIGlzIG5vIGVycm9yIGxpbmdlcmluZyBhcm91bmRcbiAgICAgIC8vIHdhaXRpbmcgdG8gYmUgZW1pdHRlZC5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpc1trRXJyb3JdKSB7XG4gICAgICAgICAgICByZWplY3QoX3RoaXNba0Vycm9yXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSAvLyBpZiB3ZSBoYXZlIG11bHRpcGxlIG5leHQoKSBjYWxsc1xuICAgIC8vIHdlIHdpbGwgd2FpdCBmb3IgdGhlIHByZXZpb3VzIFByb21pc2UgdG8gZmluaXNoXG4gICAgLy8gdGhpcyBsb2dpYyBpcyBvcHRpbWl6ZWQgdG8gc3VwcG9ydCBmb3IgYXdhaXQgbG9vcHMsXG4gICAgLy8gd2hlcmUgbmV4dCgpIGlzIG9ubHkgY2FsbGVkIG9uY2UgYXQgYSB0aW1lXG5cblxuICAgIHZhciBsYXN0UHJvbWlzZSA9IHRoaXNba0xhc3RQcm9taXNlXTtcbiAgICB2YXIgcHJvbWlzZTtcblxuICAgIGlmIChsYXN0UHJvbWlzZSkge1xuICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCB0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZhc3QgcGF0aCBuZWVkZWQgdG8gc3VwcG9ydCBtdWx0aXBsZSB0aGlzLnB1c2goKVxuICAgICAgLy8gd2l0aG91dCB0cmlnZ2VyaW5nIHRoZSBuZXh0KCkgcXVldWVcbiAgICAgIHZhciBkYXRhID0gdGhpc1trU3RyZWFtXS5yZWFkKCk7XG5cbiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfVxuXG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2UodGhpc1trSGFuZGxlUHJvbWlzZV0pO1xuICAgIH1cblxuICAgIHRoaXNba0xhc3RQcm9taXNlXSA9IHByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbn0sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JHNldFByb3RvdHlwZU8sIFN5bWJvbC5hc3luY0l0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JHNldFByb3RvdHlwZU8sIFwicmV0dXJuXCIsIGZ1bmN0aW9uIF9yZXR1cm4oKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIC8vIGRlc3Ryb3koZXJyLCBjYikgaXMgYSBwcml2YXRlIEFQSVxuICAvLyB3ZSBjYW4gZ3VhcmFudGVlIHdlIGhhdmUgdGhhdCBoZXJlLCBiZWNhdXNlIHdlIGNvbnRyb2wgdGhlXG4gIC8vIFJlYWRhYmxlIGNsYXNzIHRoaXMgaXMgYXR0YWNoZWQgdG9cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBfdGhpczJba1N0cmVhbV0uZGVzdHJveShudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICB9KTtcbiAgfSk7XG59KSwgX09iamVjdCRzZXRQcm90b3R5cGVPKSwgQXN5bmNJdGVyYXRvclByb3RvdHlwZSk7XG5cbnZhciBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSBmdW5jdGlvbiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3Ioc3RyZWFtKSB7XG4gIHZhciBfT2JqZWN0JGNyZWF0ZTtcblxuICB2YXIgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgKF9PYmplY3QkY3JlYXRlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga1N0cmVhbSwge1xuICAgIHZhbHVlOiBzdHJlYW0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZXNvbHZlLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZWplY3QsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRXJyb3IsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRW5kZWQsIHtcbiAgICB2YWx1ZTogc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0hhbmRsZVByb21pc2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZGF0YSA9IGl0ZXJhdG9yW2tTdHJlYW1dLnJlYWQoKTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQoZGF0YSwgZmFsc2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSByZXNvbHZlO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSByZWplY3Q7XG4gICAgICB9XG4gICAgfSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX09iamVjdCRjcmVhdGUpKTtcbiAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gIGZpbmlzaGVkKHN0cmVhbSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09ICdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRScpIHtcbiAgICAgIHZhciByZWplY3QgPSBpdGVyYXRvcltrTGFzdFJlamVjdF07IC8vIHJlamVjdCBpZiB3ZSBhcmUgd2FpdGluZyBmb3IgZGF0YSBpbiB0aGUgUHJvbWlzZVxuICAgICAgLy8gcmV0dXJuZWQgYnkgbmV4dCgpIGFuZCBzdG9yZSB0aGUgZXJyb3JcblxuICAgICAgaWYgKHJlamVjdCAhPT0gbnVsbCkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuXG4gICAgICBpdGVyYXRvcltrRXJyb3JdID0gZXJyO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlID0gaXRlcmF0b3Jba0xhc3RSZXNvbHZlXTtcblxuICAgIGlmIChyZXNvbHZlICE9PSBudWxsKSB7XG4gICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICB9XG5cbiAgICBpdGVyYXRvcltrRW5kZWRdID0gdHJ1ZTtcbiAgfSk7XG4gIHN0cmVhbS5vbigncmVhZGFibGUnLCBvblJlYWRhYmxlLmJpbmQobnVsbCwgaXRlcmF0b3IpKTtcbiAgcmV0dXJuIGl0ZXJhdG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3I7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignUmVhZGFibGUuZnJvbSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyJylcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hZmludG9zaC9wdW1wIHdpdGhcbi8vIHBlcm1pc3Npb24gZnJvbSB0aGUgYXV0aG9yLCBNYXRoaWFzIEJ1dXMgKEBtYWZpbnRvc2gpLlxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW9zO1xuXG5mdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBjYWxsYmFjay5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLFxuICAgIEVSUl9NSVNTSU5HX0FSR1MgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUlTU0lOR19BUkdTLFxuICAgIEVSUl9TVFJFQU1fREVTVFJPWUVEID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9ERVNUUk9ZRUQ7XG5cbmZ1bmN0aW9uIG5vb3AoZXJyKSB7XG4gIC8vIFJldGhyb3cgdGhlIGVycm9yIGlmIGl0IGV4aXN0cyB0byBhdm9pZCBzd2FsbG93aW5nIGl0XG4gIGlmIChlcnIpIHRocm93IGVycjtcbn1cblxuZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkge1xuICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ZXIoc3RyZWFtLCByZWFkaW5nLCB3cml0aW5nLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2spO1xuICB2YXIgY2xvc2VkID0gZmFsc2U7XG4gIHN0cmVhbS5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgY2xvc2VkID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChlb3MgPT09IHVuZGVmaW5lZCkgZW9zID0gcmVxdWlyZSgnLi9lbmQtb2Ytc3RyZWFtJyk7XG4gIGVvcyhzdHJlYW0sIHtcbiAgICByZWFkYWJsZTogcmVhZGluZyxcbiAgICB3cml0YWJsZTogd3JpdGluZ1xuICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgY2xvc2VkID0gdHJ1ZTtcbiAgICBjYWxsYmFjaygpO1xuICB9KTtcbiAgdmFyIGRlc3Ryb3llZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChjbG9zZWQpIHJldHVybjtcbiAgICBpZiAoZGVzdHJveWVkKSByZXR1cm47XG4gICAgZGVzdHJveWVkID0gdHJ1ZTsgLy8gcmVxdWVzdC5kZXN0cm95IGp1c3QgZG8gLmVuZCAtIC5hYm9ydCBpcyB3aGF0IHdlIHdhbnRcblxuICAgIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkgcmV0dXJuIHN0cmVhbS5hYm9ydCgpO1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHJldHVybiBzdHJlYW0uZGVzdHJveSgpO1xuICAgIGNhbGxiYWNrKGVyciB8fCBuZXcgRVJSX1NUUkVBTV9ERVNUUk9ZRUQoJ3BpcGUnKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGwoZm4pIHtcbiAgZm4oKTtcbn1cblxuZnVuY3Rpb24gcGlwZShmcm9tLCB0bykge1xuICByZXR1cm4gZnJvbS5waXBlKHRvKTtcbn1cblxuZnVuY3Rpb24gcG9wQ2FsbGJhY2soc3RyZWFtcykge1xuICBpZiAoIXN0cmVhbXMubGVuZ3RoKSByZXR1cm4gbm9vcDtcbiAgaWYgKHR5cGVvZiBzdHJlYW1zW3N0cmVhbXMubGVuZ3RoIC0gMV0gIT09ICdmdW5jdGlvbicpIHJldHVybiBub29wO1xuICByZXR1cm4gc3RyZWFtcy5wb3AoKTtcbn1cblxuZnVuY3Rpb24gcGlwZWxpbmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHJlYW1zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHN0cmVhbXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY2FsbGJhY2sgPSBwb3BDYWxsYmFjayhzdHJlYW1zKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RyZWFtc1swXSkpIHN0cmVhbXMgPSBzdHJlYW1zWzBdO1xuXG4gIGlmIChzdHJlYW1zLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnc3RyZWFtcycpO1xuICB9XG5cbiAgdmFyIGVycm9yO1xuICB2YXIgZGVzdHJveXMgPSBzdHJlYW1zLm1hcChmdW5jdGlvbiAoc3RyZWFtLCBpKSB7XG4gICAgdmFyIHJlYWRpbmcgPSBpIDwgc3RyZWFtcy5sZW5ndGggLSAxO1xuICAgIHZhciB3cml0aW5nID0gaSA+IDA7XG4gICAgcmV0dXJuIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuICAgICAgaWYgKGVycikgZGVzdHJveXMuZm9yRWFjaChjYWxsKTtcbiAgICAgIGlmIChyZWFkaW5nKSByZXR1cm47XG4gICAgICBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN0cmVhbXMucmVkdWNlKHBpcGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBpcGVsaW5lOyIsInZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9kaWFnbm9zdGljcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBkaWFnbm9zdGljcyBsb2dnZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIGl0IHNob3VsZCBlbmFibGUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSBsb2dnZXIuXG4gKiBAcHVibGljXG4gKi9cbnZhciBkaWFnbm9zdGljcyA9IGNyZWF0ZShmdW5jdGlvbiBwcm9kKG5hbWVzcGFjZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIG9wdGlvbnMucHJvZCA9IHRydWU7XG4gIG9wdGlvbnMuZGV2ID0gZmFsc2U7XG5cbiAgaWYgKCEob3B0aW9ucy5mb3JjZSB8fCBwcm9kLmZvcmNlKSkgcmV0dXJuIHByb2Qubm9wZShvcHRpb25zKTtcbiAgcmV0dXJuIHByb2QueWVwKG9wdGlvbnMpO1xufSk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGRpYWdub3N0aWNzIGxvZ2dlci5cbi8vXG5tb2R1bGUuZXhwb3J0cyA9IGRpYWdub3N0aWNzO1xuIiwiLyoqXG4gKiBDb250YWlucyBhbGwgY29uZmlndXJlZCBhZGFwdGVycyBmb3IgdGhlIGdpdmVuIGVudmlyb25tZW50LlxuICpcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xudmFyIGFkYXB0ZXJzID0gW107XG5cbi8qKlxuICogQ29udGFpbnMgYWxsIG1vZGlmaWVyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAdHlwcyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbnZhciBtb2RpZmllcnMgPSBbXTtcblxuLyoqXG4gKiBPdXIgZGVmYXVsdCBsb2dnZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbG9nZ2VyID0gZnVuY3Rpb24gZGV2bnVsbCgpIHt9O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IGFkYXB0ZXIgdGhhdCB3aWxsIHVzZWQgdG8gZmluZCBlbnZpcm9ubWVudHMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gYWRhcHRlciBBIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gdGhlIHBvc3NpYmxlIGVudi5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIG9mIGEgc3VjY2Vzc2Z1bCBhZGQuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZShhZGFwdGVyKSB7XG4gIGlmICh+YWRhcHRlcnMuaW5kZXhPZihhZGFwdGVyKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGFkYXB0ZXJzLnB1c2goYWRhcHRlcik7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEFzc2lnbiBhIG5ldyBsb2cgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbSBUaGUgbG9nIG1ldGhvZC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc2V0KGN1c3RvbSkge1xuICBsb2dnZXIgPSBjdXN0b207XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIG5hbWVzcGFjZSBpcyBhbGxvd2VkIGJ5IGFueSBvZiBvdXIgYWRhcHRlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHRoYXQgbmVlZHMgdG8gYmUgZW5hYmxlZFxuICogQHJldHVybnMge0Jvb2xlYW58UHJvbWlzZX0gSW5kaWNhdGlvbiBpZiB0aGUgbmFtZXNwYWNlIGlzIGVuYWJsZWQgYnkgb3VyIGFkYXB0ZXJzLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmFibGVkKG5hbWVzcGFjZSkge1xuICB2YXIgYXN5bmMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkYXB0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFkYXB0ZXJzW2ldLmFzeW5jKSB7XG4gICAgICBhc3luYy5wdXNoKGFkYXB0ZXJzW2ldKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChhZGFwdGVyc1tpXShuYW1lc3BhY2UpKSByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghYXN5bmMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgLy9cbiAgLy8gTm93IHRoYXQgd2Uga25vdyB0aGF0IHdlIEFzeW5jIGZ1bmN0aW9ucywgd2Uga25vdyB3ZSBydW4gaW4gYW4gRVM2XG4gIC8vIGVudmlyb25tZW50IGFuZCBjYW4gdXNlIGFsbCB0aGUgQVBJJ3MgdGhhdCB0aGV5IG9mZmVyLCBpbiB0aGlzIGNhc2VcbiAgLy8gd2Ugd2FudCB0byByZXR1cm4gYSBQcm9taXNlIHNvIHRoYXQgd2UgY2FuIGBhd2FpdGAgaW4gUmVhY3QtTmF0aXZlXG4gIC8vIGZvciBhbiBhc3luYyBhZGFwdGVyLlxuICAvL1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gcGlua3kocmVzb2x2ZSkge1xuICAgIFByb21pc2UuYWxsKFxuICAgICAgYXN5bmMubWFwKGZ1bmN0aW9uIHByZWJpbmQoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKG5hbWVzcGFjZSk7XG4gICAgICB9KVxuICAgICkudGhlbihmdW5jdGlvbiByZXNvbHZlZCh2YWx1ZXMpIHtcbiAgICAgIHJlc29sdmUodmFsdWVzLnNvbWUoQm9vbGVhbikpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgbWVzc2FnZSBtb2RpZmllciB0byB0aGUgZGVidWdnZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gTW9kaWZpY2F0aW9uIGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Jvb2xlYW59IEluZGljYXRpb24gb2YgYSBzdWNjZXNzZnVsIGFkZC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbW9kaWZ5KGZuKSB7XG4gIGlmICh+bW9kaWZpZXJzLmluZGV4T2YoZm4pKSByZXR1cm4gZmFsc2U7XG5cbiAgbW9kaWZpZXJzLnB1c2goZm4pO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBXcml0ZSBkYXRhIHRvIHRoZSBzdXBwbGllZCBsb2dnZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1ldGEgTWV0YSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbG9nLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBBcmd1bWVudHMgZm9yIGNvbnNvbGUubG9nLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB3cml0ZSgpIHtcbiAgbG9nZ2VyLmFwcGx5KGxvZ2dlciwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzIHRoZSBtZXNzYWdlIHdpdGggdGhlIG1vZGlmaWVycy5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGJlIHRyYW5zZm9ybWVkIGJ5IG1vZGlmZXJzLlxuICogQHJldHVybnMge1N0cmluZ30gVHJhbnNmb3JtZWQgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJvY2VzcyhtZXNzYWdlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWVzc2FnZSA9IG1vZGlmaWVyc1tpXS5hcHBseShtb2RpZmllcnNbaV0sIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqXG4gKiBJbnRyb2R1Y2Ugb3B0aW9ucyB0byB0aGUgbG9nZ2VyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIENhbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBQcm9wZXJ0aWVzIHRvIGludHJvZHVjZSBvbiBmbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIHBhc3NlZCBmdW5jdGlvblxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpbnRyb2R1Y2UoZm4sIG9wdGlvbnMpIHtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICBpZiAoaGFzLmNhbGwob3B0aW9ucywga2V5KSkge1xuICAgICAgZm5ba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogTm9wZSwgd2UncmUgbm90IGFsbG93ZWQgdG8gd3JpdGUgbWVzc2FnZXMuXG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59IGZhbHNlXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIG5vcGUob3B0aW9ucykge1xuICBvcHRpb25zLmVuYWJsZWQgPSBmYWxzZTtcbiAgb3B0aW9ucy5tb2RpZnkgPSBtb2RpZnk7XG4gIG9wdGlvbnMuc2V0ID0gc2V0O1xuICBvcHRpb25zLnVzZSA9IHVzZTtcblxuICByZXR1cm4gaW50cm9kdWNlKGZ1bmN0aW9uIGRpYWdub3BlcygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFllcCwgd2UncmUgYWxsb3dlZCB0byB3cml0ZSBkZWJ1ZyBtZXNzYWdlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIGxvZ2dpbmcuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllcChvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyB0aGUgYWN0dWFsIGRlYnVnIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gaW5kaWNhdGlvbiB0aGF0IHdlJ3JlIGxvZ2dpbmcuXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGZ1bmN0aW9uIGRpYWdub3N0aWNzKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHdyaXRlLmNhbGwod3JpdGUsIG9wdGlvbnMsIHByb2Nlc3MoYXJncywgb3B0aW9ucykpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgb3B0aW9ucy5lbmFibGVkID0gdHJ1ZTtcbiAgb3B0aW9ucy5tb2RpZnkgPSBtb2RpZnk7XG4gIG9wdGlvbnMuc2V0ID0gc2V0O1xuICBvcHRpb25zLnVzZSA9IHVzZTtcblxuICByZXR1cm4gaW50cm9kdWNlKGRpYWdub3N0aWNzLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBTaW1wbGUgaGVscGVyIGZ1bmN0aW9uIHRvIGludHJvZHVjZSB2YXJpb3VzIG9mIGhlbHBlciBtZXRob2RzIHRvIG91ciBnaXZlblxuICogZGlhZ25vc3RpY3MgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlhZ25vc3RpY3MgVGhlIGRpYWdub3N0aWNzIGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBkaWFnbm9zdGljc1xuICogQHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShkaWFnbm9zdGljcykge1xuICBkaWFnbm9zdGljcy5pbnRyb2R1Y2UgPSBpbnRyb2R1Y2U7XG4gIGRpYWdub3N0aWNzLmVuYWJsZWQgPSBlbmFibGVkO1xuICBkaWFnbm9zdGljcy5wcm9jZXNzID0gcHJvY2VzcztcbiAgZGlhZ25vc3RpY3MubW9kaWZ5ID0gbW9kaWZ5O1xuICBkaWFnbm9zdGljcy53cml0ZSA9IHdyaXRlO1xuICBkaWFnbm9zdGljcy5ub3BlID0gbm9wZTtcbiAgZGlhZ25vc3RpY3MueWVwID0geWVwO1xuICBkaWFnbm9zdGljcy5zZXQgPSBzZXQ7XG4gIGRpYWdub3N0aWNzLnVzZSA9IHVzZTtcblxuICByZXR1cm4gZGlhZ25vc3RpY3M7XG59XG4iLCIvKipcbiAqIHRhaWwtZmlsZS5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGRlc2NyaXB0aW9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLFxuICAgIFN0cmluZ0RlY29kZXIgPSBfcmVxdWlyZS5TdHJpbmdEZWNvZGVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJyksXG4gICAgU3RyZWFtID0gX3JlcXVpcmUyLlN0cmVhbTtcbi8qKlxuICogU2ltcGxlIG5vLW9wIGZ1bmN0aW9uLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUT0RPOiBhZGQgZnVuY3Rpb24gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRhaWwuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBpdGVyIC0gSXRlcmF0b3IgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBsaW5lLlxuKiBgdGFpbCAtZmAgYSBmaWxlLiBPcHRpb25zIG11c3QgaW5jbHVkZSBmaWxlLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBpdGVyKSB7XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MoNjQgKiAxMDI0KTtcbiAgdmFyIGRlY29kZSA9IG5ldyBTdHJpbmdEZWNvZGVyKCd1dGY4Jyk7XG4gIHZhciBzdHJlYW0gPSBuZXcgU3RyZWFtKCk7XG4gIHZhciBidWZmID0gJyc7XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgcm93ID0gMDtcblxuICBpZiAob3B0aW9ucy5zdGFydCA9PT0gLTEpIHtcbiAgICBkZWxldGUgb3B0aW9ucy5zdGFydDtcbiAgfVxuXG4gIHN0cmVhbS5yZWFkYWJsZSA9IHRydWU7XG5cbiAgc3RyZWFtLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICB9O1xuXG4gIGZzLm9wZW4ob3B0aW9ucy5maWxlLCAnYSsnLCAnMDY0NCcsIGZ1bmN0aW9uIChlcnIsIGZkKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyKGVycik7XG4gICAgICB9XG5cbiAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgKGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICBpZiAoc3RyZWFtLmRlc3Ryb3llZCkge1xuICAgICAgICBmcy5jbG9zZShmZCwgbm9vcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZzLnJlYWQoZmQsIGJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCwgcG9zLCBmdW5jdGlvbiAoZXJyb3IsIGJ5dGVzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGlmICghaXRlcikge1xuICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyKGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYnl0ZXMpIHtcbiAgICAgICAgICBpZiAoYnVmZikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnQgPT0gbnVsbCB8fCByb3cgPiBvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgICAgICAgIGlmICghaXRlcikge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsaW5lJywgYnVmZik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcihudWxsLCBidWZmKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByb3crKztcbiAgICAgICAgICAgIGJ1ZmYgPSAnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZWFkLCAxMDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhID0gZGVjb2RlLndyaXRlKGJ1ZmZlci5zbGljZSgwLCBieXRlcykpO1xuXG4gICAgICAgIGlmICghaXRlcikge1xuICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhID0gKGJ1ZmYgKyBkYXRhKS5zcGxpdCgvXFxuKy8pO1xuICAgICAgICB2YXIgbCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICAgIGlmIChvcHRpb25zLnN0YXJ0ID09IG51bGwgfHwgcm93ID4gb3B0aW9ucy5zdGFydCkge1xuICAgICAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsaW5lJywgZGF0YVtpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVyKG51bGwsIGRhdGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvdysrO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVmZiA9IGRhdGFbbF07XG4gICAgICAgIHBvcyArPSBieXRlcztcbiAgICAgICAgcmV0dXJuIHJlYWQoKTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH0pO1xuXG4gIGlmICghaXRlcikge1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cblxuICByZXR1cm4gc3RyZWFtLmRlc3Ryb3k7XG59OyIsIi8qKlxuICogaHR0cC5qczogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGEganNvbi1ycGNzZXJ2ZXIuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuXG52YXIgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKSxcbiAgICBTdHJlYW0gPSBfcmVxdWlyZS5TdHJlYW07XG5cbnZhciBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuLyoqXG4gKiBUcmFuc3BvcnQgZm9yIG91dHB1dHRpbmcgdG8gYSBqc29uLXJwYyBzZXJ2ZXIuXG4gKiBAdHlwZSB7U3RyZWFtfVxuICogQGV4dGVuZHMge1RyYW5zcG9ydFN0cmVhbX1cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVHJhbnNwb3J0U3RyZWFtKSB7XG4gIF9pbmhlcml0cyhIdHRwLCBfVHJhbnNwb3J0U3RyZWFtKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEh0dHApO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIEh0dHAgdHJhbnNwb3J0IG9iamVjdCByZXNwb25zaWJsZSBmb3JcbiAgICogcGVyc2lzdGluZyBsb2cgbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIGEgdGVybWluYWwgb3IgVFRZLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiBIdHRwKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIdHRwKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgX3RoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCAnaHR0cCc7XG4gICAgX3RoaXMuc3NsID0gISFvcHRpb25zLnNzbDtcbiAgICBfdGhpcy5ob3N0ID0gb3B0aW9ucy5ob3N0IHx8ICdsb2NhbGhvc3QnO1xuICAgIF90aGlzLnBvcnQgPSBvcHRpb25zLnBvcnQ7XG4gICAgX3RoaXMuYXV0aCA9IG9wdGlvbnMuYXV0aDtcbiAgICBfdGhpcy5wYXRoID0gb3B0aW9ucy5wYXRoIHx8ICcnO1xuICAgIF90aGlzLmFnZW50ID0gb3B0aW9ucy5hZ2VudDtcbiAgICBfdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICAgIF90aGlzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgaWYgKCFfdGhpcy5wb3J0KSB7XG4gICAgICBfdGhpcy5wb3J0ID0gX3RoaXMuc3NsID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb3JlIGxvZ2dpbmcgbWV0aG9kIGV4cG9zZWQgdG8gV2luc3Rvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhIdHRwLCBbe1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKGluZm8sIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5fcmVxdWVzdChpbmZvLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgZXJyID0gbmV3IEVycm9yKFwiSW52YWxpZCBIVFRQIFN0YXR1cyBDb2RlOiBcIi5jb25jYXQocmVzLnN0YXR1c0NvZGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBfdGhpczIuZW1pdCgnd2FybicsIGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMyLmVtaXQoJ2xvZ2dlZCcsIGluZm8pO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gUmVtYXJrOiAoamNydWd6eikgRmlyZSBhbmQgZm9yZ2V0IGhlcmUgc28gcmVxdWVzdHMgZG9udCBjYXVzZSBidWZmZXJpbmdcbiAgICAgIC8vIGFuZCBibG9jayBtb3JlIHJlcXVlc3RzIGZyb20gaGFwcGVuaW5nP1xuXG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBzZXRJbW1lZGlhdGUoY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWVyeSB0aGUgdHJhbnNwb3J0LiBPcHRpb25zIG9iamVjdCBpcyBvcHRpb25hbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtICBMb2dnbHktbGlrZSBxdWVyeSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ29udGludWF0aW9uIHRvIHJlc3BvbmQgdG8gd2hlbiBjb21wbGV0ZS5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicXVlcnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcXVlcnkob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAncXVlcnknLFxuICAgICAgICBwYXJhbXM6IHRoaXMubm9ybWFsaXplUXVlcnkob3B0aW9ucylcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zLnBhcmFtcy5wYXRoKSB7XG4gICAgICAgIG9wdGlvbnMucGF0aCA9IG9wdGlvbnMucGFyYW1zLnBhdGg7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnBhcmFtcy5wYXRoO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5wYXJhbXMuYXV0aCkge1xuICAgICAgICBvcHRpb25zLmF1dGggPSBvcHRpb25zLnBhcmFtcy5hdXRoO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5wYXJhbXMuYXV0aDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVxdWVzdChvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCByZXMsIGJvZHkpIHtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgZXJyID0gbmV3IEVycm9yKFwiSW52YWxpZCBIVFRQIFN0YXR1cyBDb2RlOiBcIi5jb25jYXQocmVzLnN0YXR1c0NvZGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGJvZHkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsb2cgc3RyZWFtIGZvciB0aGlzIHRyYW5zcG9ydC4gT3B0aW9ucyBvYmplY3QgaXMgb3B0aW9uYWwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBTdHJlYW0gb3B0aW9ucyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7U3RyZWFtfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdHJlYW0oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbSgpO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnc3RyZWFtJyxcbiAgICAgICAgcGFyYW1zOiBvcHRpb25zXG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucy5wYXJhbXMucGF0aCkge1xuICAgICAgICBvcHRpb25zLnBhdGggPSBvcHRpb25zLnBhcmFtcy5wYXRoO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5wYXJhbXMucGF0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucGFyYW1zLmF1dGgpIHtcbiAgICAgICAgb3B0aW9ucy5hdXRoID0gb3B0aW9ucy5wYXJhbXMuYXV0aDtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMucGFyYW1zLmF1dGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBidWZmID0gJyc7XG5cbiAgICAgIHZhciByZXEgPSB0aGlzLl9yZXF1ZXN0KG9wdGlvbnMpO1xuXG4gICAgICBzdHJlYW0uZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcS5kZXN0cm95KCk7XG4gICAgICB9O1xuXG4gICAgICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBkYXRhID0gKGJ1ZmYgKyBkYXRhKS5zcGxpdCgvXFxuKy8pO1xuICAgICAgICB2YXIgbCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsb2cnLCBKU09OLnBhcnNlKGRhdGFbaV0pKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBidWZmID0gZGF0YVtsXTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIGEgd2luc3RvbmQgc2VydmVyIG9yIGFueSBodHRwIHNlcnZlciB3aGljaCBjYW5cbiAgICAgKiBoYW5kbGUganNvbi1ycGMuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gc2VudCB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIENvbnRpbnVhdGlvbiB0byByZXNwb25kIHRvIHdoZW4gY29tcGxldGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgYXV0aCA9IG9wdGlvbnMuYXV0aCB8fCB0aGlzLmF1dGg7XG4gICAgICB2YXIgcGF0aCA9IG9wdGlvbnMucGF0aCB8fCB0aGlzLnBhdGggfHwgJyc7XG4gICAgICBkZWxldGUgb3B0aW9ucy5hdXRoO1xuICAgICAgZGVsZXRlIG9wdGlvbnMucGF0aDsgLy8gUHJlcGFyZSBvcHRpb25zIGZvciBvdXRnb2luZyBIVFRQIHJlcXVlc3RcblxuICAgICAgdmFyIGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpO1xuXG4gICAgICBpZiAoYXV0aCAmJiBhdXRoLmJlYXJlcikge1xuICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBcIkJlYXJlciBcIi5jb25jYXQoYXV0aC5iZWFyZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVxID0gKHRoaXMuc3NsID8gaHR0cHMgOiBodHRwKS5yZXF1ZXN0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5vcHRpb25zKSwge30sIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhvc3Q6IHRoaXMuaG9zdCxcbiAgICAgICAgcG9ydDogdGhpcy5wb3J0LFxuICAgICAgICBwYXRoOiBcIi9cIi5jb25jYXQocGF0aC5yZXBsYWNlKC9eXFwvLywgJycpKSxcbiAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgYXV0aDogYXV0aCAmJiBhdXRoLnVzZXJuYW1lICYmIGF1dGgucGFzc3dvcmQgPyBcIlwiLmNvbmNhdChhdXRoLnVzZXJuYW1lLCBcIjpcIikuY29uY2F0KGF1dGgucGFzc3dvcmQpIDogJycsXG4gICAgICAgIGFnZW50OiB0aGlzLmFnZW50XG4gICAgICB9KSk7XG4gICAgICByZXEub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmVxLm9uKCdyZXNwb25zZScsIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXMpO1xuICAgICAgICB9KS5yZXN1bWUoKTtcbiAgICAgIH0pO1xuICAgICAgcmVxLmVuZChCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShvcHRpb25zKSwgJ3V0ZjgnKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEh0dHA7XG59KFRyYW5zcG9ydFN0cmVhbSk7IiwidmFyIGNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL2NhcGFiaWxpdHknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHJlc3BvbnNlID0gcmVxdWlyZSgnLi9yZXNwb25zZScpXG52YXIgc3RyZWFtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJylcbnZhciB0b0FycmF5QnVmZmVyID0gcmVxdWlyZSgndG8tYXJyYXlidWZmZXInKVxuXG52YXIgSW5jb21pbmdNZXNzYWdlID0gcmVzcG9uc2UuSW5jb21pbmdNZXNzYWdlXG52YXIgclN0YXRlcyA9IHJlc3BvbnNlLnJlYWR5U3RhdGVzXG5cbmZ1bmN0aW9uIGRlY2lkZU1vZGUgKHByZWZlckJpbmFyeSwgdXNlRmV0Y2gpIHtcblx0aWYgKGNhcGFiaWxpdHkuZmV0Y2ggJiYgdXNlRmV0Y2gpIHtcblx0XHRyZXR1cm4gJ2ZldGNoJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyKSB7XG5cdFx0cmV0dXJuICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1zc3RyZWFtKSB7XG5cdFx0cmV0dXJuICdtcy1zdHJlYW0nXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5hcnJheWJ1ZmZlciAmJiBwcmVmZXJCaW5hcnkpIHtcblx0XHRyZXR1cm4gJ2FycmF5YnVmZmVyJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkudmJBcnJheSAmJiBwcmVmZXJCaW5hcnkpIHtcblx0XHRyZXR1cm4gJ3RleHQ6dmJhcnJheSdcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gJ3RleHQnXG5cdH1cbn1cblxudmFyIENsaWVudFJlcXVlc3QgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzdHJlYW0uV3JpdGFibGUuY2FsbChzZWxmKVxuXG5cdHNlbGYuX29wdHMgPSBvcHRzXG5cdHNlbGYuX2JvZHkgPSBbXVxuXHRzZWxmLl9oZWFkZXJzID0ge31cblx0aWYgKG9wdHMuYXV0aClcblx0XHRzZWxmLnNldEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgbmV3IEJ1ZmZlcihvcHRzLmF1dGgpLnRvU3RyaW5nKCdiYXNlNjQnKSlcblx0T2JqZWN0LmtleXMob3B0cy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0c2VsZi5zZXRIZWFkZXIobmFtZSwgb3B0cy5oZWFkZXJzW25hbWVdKVxuXHR9KVxuXG5cdHZhciBwcmVmZXJCaW5hcnlcblx0dmFyIHVzZUZldGNoID0gdHJ1ZVxuXHRpZiAob3B0cy5tb2RlID09PSAnZGlzYWJsZS1mZXRjaCcgfHwgKCdyZXF1ZXN0VGltZW91dCcgaW4gb3B0cyAmJiAhY2FwYWJpbGl0eS5hYm9ydENvbnRyb2xsZXIpKSB7XG5cdFx0Ly8gSWYgdGhlIHVzZSBvZiBYSFIgc2hvdWxkIGJlIHByZWZlcnJlZC4gTm90IHR5cGljYWxseSBuZWVkZWQuXG5cdFx0dXNlRmV0Y2ggPSBmYWxzZVxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIGlmIChvcHRzLm1vZGUgPT09ICdwcmVmZXItc3RyZWFtaW5nJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBhIGhpZ2ggcHJpb3JpdHkgYnV0IGJpbmFyeSBjb21wYXRpYmlsaXR5IGFuZFxuXHRcdC8vIHRoZSBhY2N1cmFjeSBvZiB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyIGFyZW4ndFxuXHRcdHByZWZlckJpbmFyeSA9IGZhbHNlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAnYWxsb3ctd3JvbmctY29udGVudC10eXBlJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBtb3JlIGltcG9ydGFudCB0aGFuIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuXHRcdHByZWZlckJpbmFyeSA9ICFjYXBhYmlsaXR5Lm92ZXJyaWRlTWltZVR5cGVcblx0fSBlbHNlIGlmICghb3B0cy5tb2RlIHx8IG9wdHMubW9kZSA9PT0gJ2RlZmF1bHQnIHx8IG9wdHMubW9kZSA9PT0gJ3ByZWZlci1mYXN0Jykge1xuXHRcdC8vIFVzZSBiaW5hcnkgaWYgdGV4dCBzdHJlYW1pbmcgbWF5IGNvcnJ1cHQgZGF0YSBvciB0aGUgY29udGVudC10eXBlIGhlYWRlciwgb3IgZm9yIHNwZWVkXG5cdFx0cHJlZmVyQmluYXJ5ID0gdHJ1ZVxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igb3B0cy5tb2RlJylcblx0fVxuXHRzZWxmLl9tb2RlID0gZGVjaWRlTW9kZShwcmVmZXJCaW5hcnksIHVzZUZldGNoKVxuXHRzZWxmLl9mZXRjaFRpbWVyID0gbnVsbFxuXG5cdHNlbGYub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcblx0XHRzZWxmLl9vbkZpbmlzaCgpXG5cdH0pXG59XG5cbmluaGVyaXRzKENsaWVudFJlcXVlc3QsIHN0cmVhbS5Xcml0YWJsZSlcblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHR2YXIgbG93ZXJOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG5cdC8vIFRoaXMgY2hlY2sgaXMgbm90IG5lY2Vzc2FyeSwgYnV0IGl0IHByZXZlbnRzIHdhcm5pbmdzIGZyb20gYnJvd3NlcnMgYWJvdXQgc2V0dGluZyB1bnNhZmVcblx0Ly8gaGVhZGVycy4gVG8gYmUgaG9uZXN0IEknbSBub3QgZW50aXJlbHkgc3VyZSBoaWRpbmcgdGhlc2Ugd2FybmluZ3MgaXMgYSBnb29kIHRoaW5nLCBidXRcblx0Ly8gaHR0cC1icm93c2VyaWZ5IGRpZCBpdCwgc28gSSB3aWxsIHRvby5cblx0aWYgKHVuc2FmZUhlYWRlcnMuaW5kZXhPZihsb3dlck5hbWUpICE9PSAtMSlcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7XG5cdFx0bmFtZTogbmFtZSxcblx0XHR2YWx1ZTogdmFsdWVcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgaGVhZGVyID0gdGhpcy5faGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldXG5cdGlmIChoZWFkZXIpXG5cdFx0cmV0dXJuIGhlYWRlci52YWx1ZVxuXHRyZXR1cm4gbnVsbFxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0ZGVsZXRlIHNlbGYuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25GaW5pc2ggPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cdHZhciBvcHRzID0gc2VsZi5fb3B0c1xuXG5cdHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuXHR2YXIgYm9keSA9IG51bGxcblx0aWYgKG9wdHMubWV0aG9kICE9PSAnR0VUJyAmJiBvcHRzLm1ldGhvZCAhPT0gJ0hFQUQnKSB7XG5cdFx0aWYgKGNhcGFiaWxpdHkuYXJyYXlidWZmZXIpIHtcblx0XHRcdGJvZHkgPSB0b0FycmF5QnVmZmVyKEJ1ZmZlci5jb25jYXQoc2VsZi5fYm9keSkpXG5cdFx0fSBlbHNlIGlmIChjYXBhYmlsaXR5LmJsb2JDb25zdHJ1Y3Rvcikge1xuXHRcdFx0Ym9keSA9IG5ldyBnbG9iYWwuQmxvYihzZWxmLl9ib2R5Lm1hcChmdW5jdGlvbiAoYnVmZmVyKSB7XG5cdFx0XHRcdHJldHVybiB0b0FycmF5QnVmZmVyKGJ1ZmZlcilcblx0XHRcdH0pLCB7XG5cdFx0XHRcdHR5cGU6IChoZWFkZXJzT2JqWydjb250ZW50LXR5cGUnXSB8fCB7fSkudmFsdWUgfHwgJydcblx0XHRcdH0pXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGdldCB1dGY4IHN0cmluZ1xuXHRcdFx0Ym9keSA9IEJ1ZmZlci5jb25jYXQoc2VsZi5fYm9keSkudG9TdHJpbmcoKVxuXHRcdH1cblx0fVxuXG5cdC8vIGNyZWF0ZSBmbGF0dGVuZWQgbGlzdCBvZiBoZWFkZXJzXG5cdHZhciBoZWFkZXJzTGlzdCA9IFtdXG5cdE9iamVjdC5rZXlzKGhlYWRlcnNPYmopLmZvckVhY2goZnVuY3Rpb24gKGtleU5hbWUpIHtcblx0XHR2YXIgbmFtZSA9IGhlYWRlcnNPYmpba2V5TmFtZV0ubmFtZVxuXHRcdHZhciB2YWx1ZSA9IGhlYWRlcnNPYmpba2V5TmFtZV0udmFsdWVcblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcblx0XHRcdFx0aGVhZGVyc0xpc3QucHVzaChbbmFtZSwgdl0pXG5cdFx0XHR9KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoZWFkZXJzTGlzdC5wdXNoKFtuYW1lLCB2YWx1ZV0pXG5cdFx0fVxuXHR9KVxuXG5cdGlmIChzZWxmLl9tb2RlID09PSAnZmV0Y2gnKSB7XG5cdFx0dmFyIHNpZ25hbCA9IG51bGxcblx0XHR2YXIgZmV0Y2hUaW1lciA9IG51bGxcblx0XHRpZiAoY2FwYWJpbGl0eS5hYm9ydENvbnRyb2xsZXIpIHtcblx0XHRcdHZhciBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpXG5cdFx0XHRzaWduYWwgPSBjb250cm9sbGVyLnNpZ25hbFxuXHRcdFx0c2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIgPSBjb250cm9sbGVyXG5cblx0XHRcdGlmICgncmVxdWVzdFRpbWVvdXQnIGluIG9wdHMgJiYgb3B0cy5yZXF1ZXN0VGltZW91dCAhPT0gMCkge1xuXHRcdFx0XHRzZWxmLl9mZXRjaFRpbWVyID0gZ2xvYmFsLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHNlbGYuZW1pdCgncmVxdWVzdFRpbWVvdXQnKVxuXHRcdFx0XHRcdGlmIChzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlcilcblx0XHRcdFx0XHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyLmFib3J0KClcblx0XHRcdFx0fSwgb3B0cy5yZXF1ZXN0VGltZW91dClcblx0XHRcdH1cblx0XHR9XG5cblx0XHRnbG9iYWwuZmV0Y2goc2VsZi5fb3B0cy51cmwsIHtcblx0XHRcdG1ldGhvZDogc2VsZi5fb3B0cy5tZXRob2QsXG5cdFx0XHRoZWFkZXJzOiBoZWFkZXJzTGlzdCxcblx0XHRcdGJvZHk6IGJvZHkgfHwgdW5kZWZpbmVkLFxuXHRcdFx0bW9kZTogJ2NvcnMnLFxuXHRcdFx0Y3JlZGVudGlhbHM6IG9wdHMud2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ3NhbWUtb3JpZ2luJyxcblx0XHRcdHNpZ25hbDogc2lnbmFsXG5cdFx0fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdHNlbGYuX2ZldGNoUmVzcG9uc2UgPSByZXNwb25zZVxuXHRcdFx0c2VsZi5fY29ubmVjdCgpXG5cdFx0fSwgZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChzZWxmLl9mZXRjaFRpbWVyKVxuXHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCByZWFzb24pXG5cdFx0fSlcblx0fSBlbHNlIHtcblx0XHR2YXIgeGhyID0gc2VsZi5feGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKHNlbGYuX29wdHMubWV0aG9kLCBzZWxmLl9vcHRzLnVybCwgdHJ1ZSlcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdC8vIENhbid0IHNldCByZXNwb25zZVR5cGUgb24gcmVhbGx5IG9sZCBicm93c2Vyc1xuXHRcdGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpXG5cdFx0XHR4aHIucmVzcG9uc2VUeXBlID0gc2VsZi5fbW9kZS5zcGxpdCgnOicpWzBdXG5cblx0XHRpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKVxuXHRcdFx0eGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0cy53aXRoQ3JlZGVudGlhbHNcblxuXHRcdGlmIChzZWxmLl9tb2RlID09PSAndGV4dCcgJiYgJ292ZXJyaWRlTWltZVR5cGUnIGluIHhocilcblx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJylcblxuXHRcdGlmICgncmVxdWVzdFRpbWVvdXQnIGluIG9wdHMpIHtcblx0XHRcdHhoci50aW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dFxuXHRcdFx0eGhyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdyZXF1ZXN0VGltZW91dCcpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGVhZGVyc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XG5cdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJbMF0sIGhlYWRlclsxXSlcblx0XHR9KVxuXG5cdFx0c2VsZi5fcmVzcG9uc2UgPSBudWxsXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcblx0XHRcdFx0Y2FzZSByU3RhdGVzLkxPQURJTkc6XG5cdFx0XHRcdGNhc2UgclN0YXRlcy5ET05FOlxuXHRcdFx0XHRcdHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWRcblx0XHQvLyBpbiBvbnByb2dyZXNzLCBub3QgaW4gb25yZWFkeXN0YXRlY2hhbmdlIHdpdGggeGhyLnJlYWR5U3RhdGUgPSAzXG5cdFx0aWYgKHNlbGYuX21vZGUgPT09ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpIHtcblx0XHRcdHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLl9vblhIUlByb2dyZXNzKClcblx0XHRcdH1cblx0XHR9XG5cblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5zZW5kKGJvZHkpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgeGhyLnN0YXR1cyBpcyByZWFkYWJsZSBhbmQgbm9uLXplcm8sIGluZGljYXRpbmcgbm8gZXJyb3IuXG4gKiBFdmVuIHRob3VnaCB0aGUgc3BlYyBzYXlzIGl0IHNob3VsZCBiZSBhdmFpbGFibGUgaW4gcmVhZHlTdGF0ZSAzLFxuICogYWNjZXNzaW5nIGl0IHRocm93cyBhbiBleGNlcHRpb24gaW4gSUU4XG4gKi9cbmZ1bmN0aW9uIHN0YXR1c1ZhbGlkICh4aHIpIHtcblx0dHJ5IHtcblx0XHR2YXIgc3RhdHVzID0geGhyLnN0YXR1c1xuXHRcdHJldHVybiAoc3RhdHVzICE9PSBudWxsICYmIHN0YXR1cyAhPT0gMClcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXG5cdGlmICghc2VsZi5fcmVzcG9uc2UpXG5cdFx0c2VsZi5fY29ubmVjdCgpXG5cblx0c2VsZi5fcmVzcG9uc2UuX29uWEhSUHJvZ3Jlc3MoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0aWYgKHNlbGYuX2Rlc3Ryb3llZClcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9yZXNwb25zZSA9IG5ldyBJbmNvbWluZ01lc3NhZ2Uoc2VsZi5feGhyLCBzZWxmLl9mZXRjaFJlc3BvbnNlLCBzZWxmLl9tb2RlLCBzZWxmLl9mZXRjaFRpbWVyKVxuXHRzZWxmLl9yZXNwb25zZS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcblx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHR9KVxuXG5cdHNlbGYuZW1pdCgncmVzcG9uc2UnLCBzZWxmLl9yZXNwb25zZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0c2VsZi5fYm9keS5wdXNoKGNodW5rKVxuXHRjYigpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHNlbGYuX2Rlc3Ryb3llZCA9IHRydWVcblx0Z2xvYmFsLmNsZWFyVGltZW91dChzZWxmLl9mZXRjaFRpbWVyKVxuXHRpZiAoc2VsZi5fcmVzcG9uc2UpXG5cdFx0c2VsZi5fcmVzcG9uc2UuX2Rlc3Ryb3llZCA9IHRydWVcblx0aWYgKHNlbGYuX3hocilcblx0XHRzZWxmLl94aHIuYWJvcnQoKVxuXHRlbHNlIGlmIChzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlcilcblx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGNiID0gZGF0YVxuXHRcdGRhdGEgPSB1bmRlZmluZWRcblx0fVxuXG5cdHN0cmVhbS5Xcml0YWJsZS5wcm90b3R5cGUuZW5kLmNhbGwoc2VsZiwgZGF0YSwgZW5jb2RpbmcsIGNiKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5mbHVzaEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXROb0RlbGF5ID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFNvY2tldEtlZXBBbGl2ZSA9IGZ1bmN0aW9uICgpIHt9XG5cbi8vIFRha2VuIGZyb20gaHR0cDovL3d3dy53My5vcmcvVFIvWE1MSHR0cFJlcXVlc3QvI3RoZS1zZXRyZXF1ZXN0aGVhZGVyJTI4JTI5LW1ldGhvZFxudmFyIHVuc2FmZUhlYWRlcnMgPSBbXG5cdCdhY2NlcHQtY2hhcnNldCcsXG5cdCdhY2NlcHQtZW5jb2RpbmcnLFxuXHQnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1oZWFkZXJzJyxcblx0J2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtbWV0aG9kJyxcblx0J2Nvbm5lY3Rpb24nLFxuXHQnY29udGVudC1sZW5ndGgnLFxuXHQnY29va2llJyxcblx0J2Nvb2tpZTInLFxuXHQnZGF0ZScsXG5cdCdkbnQnLFxuXHQnZXhwZWN0Jyxcblx0J2hvc3QnLFxuXHQna2VlcC1hbGl2ZScsXG5cdCdvcmlnaW4nLFxuXHQncmVmZXJlcicsXG5cdCd0ZScsXG5cdCd0cmFpbGVyJyxcblx0J3RyYW5zZmVyLWVuY29kaW5nJyxcblx0J3VwZ3JhZGUnLFxuXHQndmlhJ1xuXVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWYpIHtcblx0Ly8gSWYgdGhlIGJ1ZmZlciBpcyBiYWNrZWQgYnkgYSBVaW50OEFycmF5LCBhIGZhc3RlciB2ZXJzaW9uIHdpbGwgd29ya1xuXHRpZiAoYnVmIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHRcdC8vIElmIHRoZSBidWZmZXIgaXNuJ3QgYSBzdWJhcnJheSwgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyXG5cdFx0aWYgKGJ1Zi5ieXRlT2Zmc2V0ID09PSAwICYmIGJ1Zi5ieXRlTGVuZ3RoID09PSBidWYuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcblx0XHRcdHJldHVybiBidWYuYnVmZmVyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgYnVmLmJ1ZmZlci5zbGljZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgdG8gZ2V0IGEgcHJvcGVyIGNvcHlcblx0XHRcdHJldHVybiBidWYuYnVmZmVyLnNsaWNlKGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZU9mZnNldCArIGJ1Zi5ieXRlTGVuZ3RoKVxuXHRcdH1cblx0fVxuXG5cdGlmIChCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuXHRcdC8vIFRoaXMgaXMgdGhlIHNsb3cgdmVyc2lvbiB0aGF0IHdpbGwgd29yayB3aXRoIGFueSBCdWZmZXJcblx0XHQvLyBpbXBsZW1lbnRhdGlvbiAoZXZlbiBpbiBvbGQgYnJvd3NlcnMpXG5cdFx0dmFyIGFycmF5Q29weSA9IG5ldyBVaW50OEFycmF5KGJ1Zi5sZW5ndGgpXG5cdFx0dmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRhcnJheUNvcHlbaV0gPSBidWZbaV1cblx0XHR9XG5cdFx0cmV0dXJuIGFycmF5Q29weS5idWZmZXJcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuXHR9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGV4dGVuZFxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldXG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiMTAwXCI6IFwiQ29udGludWVcIixcbiAgXCIxMDFcIjogXCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsXG4gIFwiMTAyXCI6IFwiUHJvY2Vzc2luZ1wiLFxuICBcIjIwMFwiOiBcIk9LXCIsXG4gIFwiMjAxXCI6IFwiQ3JlYXRlZFwiLFxuICBcIjIwMlwiOiBcIkFjY2VwdGVkXCIsXG4gIFwiMjAzXCI6IFwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIixcbiAgXCIyMDRcIjogXCJObyBDb250ZW50XCIsXG4gIFwiMjA1XCI6IFwiUmVzZXQgQ29udGVudFwiLFxuICBcIjIwNlwiOiBcIlBhcnRpYWwgQ29udGVudFwiLFxuICBcIjIwN1wiOiBcIk11bHRpLVN0YXR1c1wiLFxuICBcIjIwOFwiOiBcIkFscmVhZHkgUmVwb3J0ZWRcIixcbiAgXCIyMjZcIjogXCJJTSBVc2VkXCIsXG4gIFwiMzAwXCI6IFwiTXVsdGlwbGUgQ2hvaWNlc1wiLFxuICBcIjMwMVwiOiBcIk1vdmVkIFBlcm1hbmVudGx5XCIsXG4gIFwiMzAyXCI6IFwiRm91bmRcIixcbiAgXCIzMDNcIjogXCJTZWUgT3RoZXJcIixcbiAgXCIzMDRcIjogXCJOb3QgTW9kaWZpZWRcIixcbiAgXCIzMDVcIjogXCJVc2UgUHJveHlcIixcbiAgXCIzMDdcIjogXCJUZW1wb3JhcnkgUmVkaXJlY3RcIixcbiAgXCIzMDhcIjogXCJQZXJtYW5lbnQgUmVkaXJlY3RcIixcbiAgXCI0MDBcIjogXCJCYWQgUmVxdWVzdFwiLFxuICBcIjQwMVwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICBcIjQwMlwiOiBcIlBheW1lbnQgUmVxdWlyZWRcIixcbiAgXCI0MDNcIjogXCJGb3JiaWRkZW5cIixcbiAgXCI0MDRcIjogXCJOb3QgRm91bmRcIixcbiAgXCI0MDVcIjogXCJNZXRob2QgTm90IEFsbG93ZWRcIixcbiAgXCI0MDZcIjogXCJOb3QgQWNjZXB0YWJsZVwiLFxuICBcIjQwN1wiOiBcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDA4XCI6IFwiUmVxdWVzdCBUaW1lb3V0XCIsXG4gIFwiNDA5XCI6IFwiQ29uZmxpY3RcIixcbiAgXCI0MTBcIjogXCJHb25lXCIsXG4gIFwiNDExXCI6IFwiTGVuZ3RoIFJlcXVpcmVkXCIsXG4gIFwiNDEyXCI6IFwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLFxuICBcIjQxM1wiOiBcIlBheWxvYWQgVG9vIExhcmdlXCIsXG4gIFwiNDE0XCI6IFwiVVJJIFRvbyBMb25nXCIsXG4gIFwiNDE1XCI6IFwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLFxuICBcIjQxNlwiOiBcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiLFxuICBcIjQxN1wiOiBcIkV4cGVjdGF0aW9uIEZhaWxlZFwiLFxuICBcIjQxOFwiOiBcIkknbSBhIHRlYXBvdFwiLFxuICBcIjQyMVwiOiBcIk1pc2RpcmVjdGVkIFJlcXVlc3RcIixcbiAgXCI0MjJcIjogXCJVbnByb2Nlc3NhYmxlIEVudGl0eVwiLFxuICBcIjQyM1wiOiBcIkxvY2tlZFwiLFxuICBcIjQyNFwiOiBcIkZhaWxlZCBEZXBlbmRlbmN5XCIsXG4gIFwiNDI1XCI6IFwiVW5vcmRlcmVkIENvbGxlY3Rpb25cIixcbiAgXCI0MjZcIjogXCJVcGdyYWRlIFJlcXVpcmVkXCIsXG4gIFwiNDI4XCI6IFwiUHJlY29uZGl0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDI5XCI6IFwiVG9vIE1hbnkgUmVxdWVzdHNcIixcbiAgXCI0MzFcIjogXCJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlXCIsXG4gIFwiNDUxXCI6IFwiVW5hdmFpbGFibGUgRm9yIExlZ2FsIFJlYXNvbnNcIixcbiAgXCI1MDBcIjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIixcbiAgXCI1MDFcIjogXCJOb3QgSW1wbGVtZW50ZWRcIixcbiAgXCI1MDJcIjogXCJCYWQgR2F0ZXdheVwiLFxuICBcIjUwM1wiOiBcIlNlcnZpY2UgVW5hdmFpbGFibGVcIixcbiAgXCI1MDRcIjogXCJHYXRld2F5IFRpbWVvdXRcIixcbiAgXCI1MDVcIjogXCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwiLFxuICBcIjUwNlwiOiBcIlZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzXCIsXG4gIFwiNTA3XCI6IFwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIixcbiAgXCI1MDhcIjogXCJMb29wIERldGVjdGVkXCIsXG4gIFwiNTA5XCI6IFwiQmFuZHdpZHRoIExpbWl0IEV4Y2VlZGVkXCIsXG4gIFwiNTEwXCI6IFwiTm90IEV4dGVuZGVkXCIsXG4gIFwiNTExXCI6IFwiTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiXG59XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKVxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG5cbnZhciBodHRwcyA9IG1vZHVsZS5leHBvcnRzXG5cbmZvciAodmFyIGtleSBpbiBodHRwKSB7XG4gIGlmIChodHRwLmhhc093blByb3BlcnR5KGtleSkpIGh0dHBzW2tleV0gPSBodHRwW2tleV1cbn1cblxuaHR0cHMucmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gIHBhcmFtcyA9IHZhbGlkYXRlUGFyYW1zKHBhcmFtcylcbiAgcmV0dXJuIGh0dHAucmVxdWVzdC5jYWxsKHRoaXMsIHBhcmFtcywgY2IpXG59XG5cbmh0dHBzLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gIHBhcmFtcyA9IHZhbGlkYXRlUGFyYW1zKHBhcmFtcylcbiAgcmV0dXJuIGh0dHAuZ2V0LmNhbGwodGhpcywgcGFyYW1zLCBjYilcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMgKHBhcmFtcykge1xuICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXJhbXMgPSB1cmwucGFyc2UocGFyYW1zKVxuICB9XG4gIGlmICghcGFyYW1zLnByb3RvY29sKSB7XG4gICAgcGFyYW1zLnByb3RvY29sID0gJ2h0dHBzOidcbiAgfVxuICBpZiAocGFyYW1zLnByb3RvY29sICE9PSAnaHR0cHM6Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdG9jb2wgXCInICsgcGFyYW1zLnByb3RvY29sICsgJ1wiIG5vdCBzdXBwb3J0ZWQuIEV4cGVjdGVkIFwiaHR0cHM6XCInKVxuICB9XG4gIHJldHVybiBwYXJhbXNcbn1cbiIsIi8qKlxuICogc3RyZWFtLmpzOiBUcmFuc3BvcnQgZm9yIG91dHB1dHRpbmcgdG8gYW55IGFyYml0cmFyeSBzdHJlYW0uXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIGlzU3RyZWFtID0gcmVxdWlyZSgnaXMtc3RyZWFtJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gICAgTUVTU0FHRSA9IF9yZXF1aXJlLk1FU1NBR0U7XG5cbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG5cbnZhciBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuLyoqXG4gKiBUcmFuc3BvcnQgZm9yIG91dHB1dHRpbmcgdG8gYW55IGFyYml0cmFyeSBzdHJlYW0uXG4gKiBAdHlwZSB7U3RyZWFtfVxuICogQGV4dGVuZHMge1RyYW5zcG9ydFN0cmVhbX1cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVHJhbnNwb3J0U3RyZWFtKSB7XG4gIF9pbmhlcml0cyhTdHJlYW0sIF9UcmFuc3BvcnRTdHJlYW0pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU3RyZWFtKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBDb25zb2xlIHRyYW5zcG9ydCBvYmplY3QgcmVzcG9uc2libGUgZm9yXG4gICAqIHBlcnNpc3RpbmcgbG9nIG1lc3NhZ2VzIGFuZCBtZXRhZGF0YSB0byBhIHRlcm1pbmFsIG9yIFRUWS5cbiAgICogQHBhcmFtIHshT2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gU3RyZWFtKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJlYW0pO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICAgIGlmICghb3B0aW9ucy5zdHJlYW0gfHwgIWlzU3RyZWFtKG9wdGlvbnMuc3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLnN0cmVhbSBpcyByZXF1aXJlZC4nKTtcbiAgICB9IC8vIFdlIG5lZWQgdG8gbGlzdGVuIGZvciBkcmFpbiBldmVudHMgd2hlbiB3cml0ZSgpIHJldHVybnMgZmFsc2UuIFRoaXMgY2FuXG4gICAgLy8gbWFrZSBub2RlIG1hZCBhdCB0aW1lcy5cblxuXG4gICAgX3RoaXMuX3N0cmVhbSA9IG9wdGlvbnMuc3RyZWFtO1xuXG4gICAgX3RoaXMuX3N0cmVhbS5zZXRNYXhMaXN0ZW5lcnMoSW5maW5pdHkpO1xuXG4gICAgX3RoaXMuaXNPYmplY3RNb2RlID0gb3B0aW9ucy5zdHJlYW0uX3dyaXRhYmxlU3RhdGUub2JqZWN0TW9kZTtcbiAgICBfdGhpcy5lb2wgPSBvcHRpb25zLmVvbCB8fCBvcy5FT0w7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb3JlIGxvZ2dpbmcgbWV0aG9kIGV4cG9zZWQgdG8gV2luc3Rvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTdHJlYW0sIFt7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2coaW5mbywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoJ2xvZ2dlZCcsIGluZm8pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmlzT2JqZWN0TW9kZSkge1xuICAgICAgICB0aGlzLl9zdHJlYW0ud3JpdGUoaW5mbyk7XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RyZWFtLndyaXRlKFwiXCIuY29uY2F0KGluZm9bTUVTU0FHRV0pLmNvbmNhdCh0aGlzLmVvbCkpO1xuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHJlYW07XG59KFRyYW5zcG9ydFN0cmVhbSk7IiwiLyoqXG4gKiBsb2dnZXIuanM6IFRPRE86IGFkZCBmaWxlIGhlYWRlciBkZXNjcmlwdGlvbi5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKSxcbiAgICBTdHJlYW0gPSBfcmVxdWlyZS5TdHJlYW0sXG4gICAgVHJhbnNmb3JtID0gX3JlcXVpcmUuVHJhbnNmb3JtO1xuXG52YXIgYXN5bmNGb3JFYWNoID0gcmVxdWlyZSgnYXN5bmMvZm9yRWFjaCcpO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBMRVZFTCA9IF9yZXF1aXJlMi5MRVZFTCxcbiAgICBTUExBVCA9IF9yZXF1aXJlMi5TUExBVDtcblxudmFyIGlzU3RyZWFtID0gcmVxdWlyZSgnaXMtc3RyZWFtJyk7XG5cbnZhciBFeGNlcHRpb25IYW5kbGVyID0gcmVxdWlyZSgnLi9leGNlcHRpb24taGFuZGxlcicpO1xuXG52YXIgUmVqZWN0aW9uSGFuZGxlciA9IHJlcXVpcmUoJy4vcmVqZWN0aW9uLWhhbmRsZXInKTtcblxudmFyIExlZ2FjeVRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJ3dpbnN0b24tdHJhbnNwb3J0L2xlZ2FjeScpO1xuXG52YXIgUHJvZmlsZXIgPSByZXF1aXJlKCcuL3Byb2ZpbGVyJyk7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL2NvbW1vbicpLFxuICAgIHdhcm4gPSBfcmVxdWlyZTMud2FybjtcblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG4vKipcbiAqIENhcHR1cmVzIHRoZSBudW1iZXIgb2YgZm9ybWF0IChpLmUuICVzIHN0cmluZ3MpIGluIGEgZ2l2ZW4gc3RyaW5nLlxuICogQmFzZWQgb24gYHV0aWwuZm9ybWF0YCwgc2VlIE5vZGUuanMgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvYjFjOGYxNWM1ZjE2OWUwMjFmN2M0NmViN2IyMTlkZTk1ZmU5NzYwMy9saWIvdXRpbC5qcyNMMjAxLUwyMzBcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cblxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2Nkamlmb08lXS9nO1xuLyoqXG4gKiBUT0RPOiBhZGQgY2xhc3MgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7TG9nZ2VyfVxuICogQGV4dGVuZHMge1RyYW5zZm9ybX1cbiAqL1xuXG52YXIgTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVHJhbnNmb3JtKSB7XG4gIF9pbmhlcml0cyhMb2dnZXIsIF9UcmFuc2Zvcm0pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTG9nZ2VyKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBMb2dnZXIgb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBwZXJzaXN0aW5nIGxvZ1xuICAgKiBtZXNzYWdlcyBhbmQgbWV0YWRhdGEgdG8gb25lIG9yIG1vcmUgdHJhbnNwb3J0cy5cbiAgICogQHBhcmFtIHshT2JqZWN0fSBvcHRpb25zIC0gZm9vXG4gICAqL1xuICBmdW5jdGlvbiBMb2dnZXIob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2dnZXIpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB7XG4gICAgICBvYmplY3RNb2RlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBfdGhpcy5jb25maWd1cmUob3B0aW9ucyk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9nZ2VyLCBbe1xuICAgIGtleTogXCJjaGlsZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGlsZChkZWZhdWx0UmVxdWVzdE1ldGFkYXRhKSB7XG4gICAgICB2YXIgbG9nZ2VyID0gdGhpcztcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKGxvZ2dlciwge1xuICAgICAgICB3cml0ZToge1xuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShpbmZvKSB7XG4gICAgICAgICAgICB2YXIgaW5mb0Nsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFJlcXVlc3RNZXRhZGF0YSwgaW5mbyk7IC8vIE9iamVjdC5hc3NpZ24gZG9lc24ndCBjb3B5IGluaGVyaXRlZCBFcnJvclxuICAgICAgICAgICAgLy8gcHJvcGVydGllcyBzbyB3ZSBoYXZlIHRvIGRvIHRoYXQgZXhwbGljaXRseVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogd2Ugc2hvdWxkIHJlbW92ZSB0aGlzXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGUgZXJyb3JzIGZvcm1hdCB3aWxsIGhhbmRsZSB0aGlzIGNhc2UuXG4gICAgICAgICAgICAvL1xuXG4gICAgICAgICAgICBpZiAoaW5mbyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIGluZm9DbG9uZS5zdGFjayA9IGluZm8uc3RhY2s7XG4gICAgICAgICAgICAgIGluZm9DbG9uZS5tZXNzYWdlID0gaW5mby5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2dnZXIud3JpdGUoaW5mb0Nsb25lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgd2hvbGVzYWxlIHJlY29uZmlndXJlIHRoaXMgaW5zdGFuY2UgYnk6XG4gICAgICogMS4gUmVzZXR0aW5nIGFsbCB0cmFuc3BvcnRzLiBPbGRlciB0cmFuc3BvcnRzIHdpbGwgYmUgcmVtb3ZlZCBpbXBsaWNpdGx5LlxuICAgICAqIDIuIFNldCBhbGwgb3RoZXIgb3B0aW9ucyBpbmNsdWRpbmcgbGV2ZWxzLCBjb2xvcnMsIHJld3JpdGVycywgZmlsdGVycyxcbiAgICAgKiAgICBleGNlcHRpb25IYW5kbGVycywgZXRjLlxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb3B0aW9ucyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY29uZmlndXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmZpZ3VyZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgc2lsZW50ID0gX3JlZi5zaWxlbnQsXG4gICAgICAgICAgZm9ybWF0ID0gX3JlZi5mb3JtYXQsXG4gICAgICAgICAgZGVmYXVsdE1ldGEgPSBfcmVmLmRlZmF1bHRNZXRhLFxuICAgICAgICAgIGxldmVscyA9IF9yZWYubGV2ZWxzLFxuICAgICAgICAgIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgICAgIGxldmVsID0gX3JlZiRsZXZlbCA9PT0gdm9pZCAwID8gJ2luZm8nIDogX3JlZiRsZXZlbCxcbiAgICAgICAgICBfcmVmJGV4aXRPbkVycm9yID0gX3JlZi5leGl0T25FcnJvcixcbiAgICAgICAgICBleGl0T25FcnJvciA9IF9yZWYkZXhpdE9uRXJyb3IgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGV4aXRPbkVycm9yLFxuICAgICAgICAgIHRyYW5zcG9ydHMgPSBfcmVmLnRyYW5zcG9ydHMsXG4gICAgICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICAgICAgZW1pdEVycnMgPSBfcmVmLmVtaXRFcnJzLFxuICAgICAgICAgIGZvcm1hdHRlcnMgPSBfcmVmLmZvcm1hdHRlcnMsXG4gICAgICAgICAgcGFkTGV2ZWxzID0gX3JlZi5wYWRMZXZlbHMsXG4gICAgICAgICAgcmV3cml0ZXJzID0gX3JlZi5yZXdyaXRlcnMsXG4gICAgICAgICAgc3RyaXBDb2xvcnMgPSBfcmVmLnN0cmlwQ29sb3JzLFxuICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXJzID0gX3JlZi5leGNlcHRpb25IYW5kbGVycyxcbiAgICAgICAgICByZWplY3Rpb25IYW5kbGVycyA9IF9yZWYucmVqZWN0aW9uSGFuZGxlcnM7XG5cbiAgICAgIC8vIFJlc2V0IHRyYW5zcG9ydHMgaWYgd2UgYWxyZWFkeSBoYXZlIHRoZW1cbiAgICAgIGlmICh0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zaWxlbnQgPSBzaWxlbnQ7XG4gICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLmZvcm1hdCB8fCByZXF1aXJlKCdsb2dmb3JtL2pzb24nKSgpO1xuICAgICAgdGhpcy5kZWZhdWx0TWV0YSA9IGRlZmF1bHRNZXRhIHx8IG51bGw7IC8vIEhvaXN0IG90aGVyIG9wdGlvbnMgb250byB0aGlzIGluc3RhbmNlLlxuXG4gICAgICB0aGlzLmxldmVscyA9IGxldmVscyB8fCB0aGlzLmxldmVscyB8fCBjb25maWcubnBtLmxldmVscztcbiAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgIHRoaXMuZXhjZXB0aW9ucyA9IG5ldyBFeGNlcHRpb25IYW5kbGVyKHRoaXMpO1xuICAgICAgdGhpcy5yZWplY3Rpb25zID0gbmV3IFJlamVjdGlvbkhhbmRsZXIodGhpcyk7XG4gICAgICB0aGlzLnByb2ZpbGVycyA9IHt9O1xuICAgICAgdGhpcy5leGl0T25FcnJvciA9IGV4aXRPbkVycm9yOyAvLyBBZGQgYWxsIHRyYW5zcG9ydHMgd2UgaGF2ZSBiZWVuIHByb3ZpZGVkLlxuXG4gICAgICBpZiAodHJhbnNwb3J0cykge1xuICAgICAgICB0cmFuc3BvcnRzID0gQXJyYXkuaXNBcnJheSh0cmFuc3BvcnRzKSA/IHRyYW5zcG9ydHMgOiBbdHJhbnNwb3J0c107XG4gICAgICAgIHRyYW5zcG9ydHMuZm9yRWFjaChmdW5jdGlvbiAodHJhbnNwb3J0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5hZGQodHJhbnNwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2xvcnMgfHwgZW1pdEVycnMgfHwgZm9ybWF0dGVycyB8fCBwYWRMZXZlbHMgfHwgcmV3cml0ZXJzIHx8IHN0cmlwQ29sb3JzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ3sgY29sb3JzLCBlbWl0RXJycywgZm9ybWF0dGVycywgcGFkTGV2ZWxzLCByZXdyaXRlcnMsIHN0cmlwQ29sb3JzIH0gd2VyZSByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgJ1VzZSBhIGN1c3RvbSB3aW5zdG9uLmZvcm1hdChmdW5jdGlvbikgaW5zdGVhZC4nLCAnU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vdHJlZS9tYXN0ZXIvVVBHUkFERS0zLjAubWQnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChleGNlcHRpb25IYW5kbGVycykge1xuICAgICAgICB0aGlzLmV4Y2VwdGlvbnMuaGFuZGxlKGV4Y2VwdGlvbkhhbmRsZXJzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlamVjdGlvbkhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMucmVqZWN0aW9ucy5oYW5kbGUocmVqZWN0aW9uSGFuZGxlcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0xldmVsRW5hYmxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0xldmVsRW5hYmxlZChsZXZlbCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBnaXZlbkxldmVsVmFsdWUgPSBnZXRMZXZlbFZhbHVlKHRoaXMubGV2ZWxzLCBsZXZlbCk7XG5cbiAgICAgIGlmIChnaXZlbkxldmVsVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlndXJlZExldmVsVmFsdWUgPSBnZXRMZXZlbFZhbHVlKHRoaXMubGV2ZWxzLCB0aGlzLmxldmVsKTtcblxuICAgICAgaWYgKGNvbmZpZ3VyZWRMZXZlbFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydHMgfHwgdGhpcy50cmFuc3BvcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY29uZmlndXJlZExldmVsVmFsdWUgPj0gZ2l2ZW5MZXZlbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnRyYW5zcG9ydHMuZmluZEluZGV4KGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgdmFyIHRyYW5zcG9ydExldmVsVmFsdWUgPSBnZXRMZXZlbFZhbHVlKF90aGlzMy5sZXZlbHMsIHRyYW5zcG9ydC5sZXZlbCk7XG5cbiAgICAgICAgaWYgKHRyYW5zcG9ydExldmVsVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0cmFuc3BvcnRMZXZlbFZhbHVlID0gY29uZmlndXJlZExldmVsVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNwb3J0TGV2ZWxWYWx1ZSA+PSBnaXZlbkxldmVsVmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmRleCAhPT0gLTE7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBhIGBsb2dgIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGxldmVsIC0gTGV2ZWwgdGhlIGxvZyBtZXNzYWdlIGlzIHdyaXR0ZW4gYXQuXG4gICAgICogQHBhcmFtIHttaXhlZH0gbXNnIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IG1ldGEgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge0xvZ2dlcn0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICAvLyBTdXBwb3J0cyB0aGUgZXhpc3RpbmcgQVBJOlxuICAgICAqICAgIGxvZ2dlci5sb2coJ2luZm8nLCAnSGVsbG8gd29ybGQnLCB7IGN1c3RvbTogdHJ1ZSB9KTtcbiAgICAgKiAgICBsb2dnZXIubG9nKCdpbmZvJywgbmV3IEVycm9yKCdZbywgaXRcXCdzIG9uIGZpcmUnKSk7XG4gICAgICpcbiAgICAgKiAgICAvLyBSZXF1aXJlcyB3aW5zdG9uLmZvcm1hdC5zcGxhdCgpXG4gICAgICogICAgbG9nZ2VyLmxvZygnaW5mbycsICclcyAlZCUlJywgJ0Egc3RyaW5nJywgNTAsIHsgdGhpc0lzTWV0YTogdHJ1ZSB9KTtcbiAgICAgKlxuICAgICAqICAgIC8vIEFuZCB0aGUgbmV3IEFQSSB3aXRoIGEgc2luZ2xlIEpTT04gbGl0ZXJhbDpcbiAgICAgKiAgICBsb2dnZXIubG9nKHsgbGV2ZWw6ICdpbmZvJywgbWVzc2FnZTogJ0hlbGxvIHdvcmxkJywgY3VzdG9tOiB0cnVlIH0pO1xuICAgICAqICAgIGxvZ2dlci5sb2coeyBsZXZlbDogJ2luZm8nLCBtZXNzYWdlOiBuZXcgRXJyb3IoJ1lvLCBpdFxcJ3Mgb24gZmlyZScpIH0pO1xuICAgICAqXG4gICAgICogICAgLy8gQWxzbyByZXF1aXJlcyB3aW5zdG9uLmZvcm1hdC5zcGxhdCgpXG4gICAgICogICAgbG9nZ2VyLmxvZyh7XG4gICAgICogICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAqICAgICAgbWVzc2FnZTogJyVzICVkJSUnLFxuICAgICAqICAgICAgW1NQTEFUXTogWydBIHN0cmluZycsIDUwXSxcbiAgICAgKiAgICAgIG1ldGE6IHsgdGhpc0lzTWV0YTogdHJ1ZSB9XG4gICAgICogICAgfSk7XG4gICAgICpcbiAgICAgKi9cblxuICAgIC8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2cobGV2ZWwsIG1zZykge1xuICAgICAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNwbGF0ID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgc3BsYXRbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1wYXJhbXNcbiAgICAgIC8vIE9wdGltaXplIGZvciB0aGUgaG90cGF0aCBvZiBsb2dnaW5nIEpTT04gbGl0ZXJhbHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIFlvIGRhd2csIEkgaGVhcmQgeW91IGxpa2UgbGV2ZWxzIC4uLiBzZXJpb3VzbHkgLi4uXG4gICAgICAgIC8vIEluIHRoaXMgY29udGV4dCB0aGUgTEhTIGBsZXZlbGAgaGVyZSBpcyBhY3R1YWxseSB0aGUgYGluZm9gIHNvIHJlYWRcbiAgICAgICAgLy8gdGhpcyBhczogaW5mb1tMRVZFTF0gPSBpbmZvLmxldmVsO1xuICAgICAgICBsZXZlbFtMRVZFTF0gPSBsZXZlbC5sZXZlbDtcblxuICAgICAgICB0aGlzLl9hZGREZWZhdWx0TWV0YShsZXZlbCk7XG5cbiAgICAgICAgdGhpcy53cml0ZShsZXZlbCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSAvLyBTbGlnaHRseSBsZXNzIGhvdHBhdGgsIGJ1dCB3b3J0aCBvcHRpbWl6aW5nIGZvci5cblxuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICB2YXIgX3RoaXMkd3JpdGU7XG5cbiAgICAgICAgaWYgKG1zZyAmJiBfdHlwZW9mKG1zZykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgbXNnW0xFVkVMXSA9IG1zZy5sZXZlbCA9IGxldmVsO1xuXG4gICAgICAgICAgdGhpcy5fYWRkRGVmYXVsdE1ldGEobXNnKTtcblxuICAgICAgICAgIHRoaXMud3JpdGUobXNnKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMud3JpdGUoKF90aGlzJHdyaXRlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfdGhpcyR3cml0ZSwgTEVWRUwsIGxldmVsKSwgX2RlZmluZVByb3BlcnR5KF90aGlzJHdyaXRlLCBcImxldmVsXCIsIGxldmVsKSwgX2RlZmluZVByb3BlcnR5KF90aGlzJHdyaXRlLCBcIm1lc3NhZ2VcIiwgbXNnKSwgX3RoaXMkd3JpdGUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtZXRhID0gc3BsYXRbMF07XG5cbiAgICAgIGlmIChfdHlwZW9mKG1ldGEpID09PSAnb2JqZWN0JyAmJiBtZXRhICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEV4dHJhY3QgdG9rZW5zLCBpZiBub25lIGF2YWlsYWJsZSBkZWZhdWx0IHRvIGVtcHR5IGFycmF5IHRvXG4gICAgICAgIC8vIGVuc3VyZSBjb25zaXN0YW5jeSBpbiBleHBlY3RlZCByZXN1bHRzXG4gICAgICAgIHZhciB0b2tlbnMgPSBtc2cgJiYgbXNnLm1hdGNoICYmIG1zZy5tYXRjaChmb3JtYXRSZWdFeHApO1xuXG4gICAgICAgIGlmICghdG9rZW5zKSB7XG4gICAgICAgICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRNZXRhLCBtZXRhLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkYXNzaWduLCBMRVZFTCwgbGV2ZWwpLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRhc3NpZ24sIFNQTEFULCBzcGxhdCksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGFzc2lnbiwgXCJsZXZlbFwiLCBsZXZlbCksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGFzc2lnbiwgXCJtZXNzYWdlXCIsIG1zZyksIF9PYmplY3QkYXNzaWduKSk7XG4gICAgICAgICAgaWYgKG1ldGEubWVzc2FnZSkgaW5mby5tZXNzYWdlID0gXCJcIi5jb25jYXQoaW5mby5tZXNzYWdlLCBcIiBcIikuY29uY2F0KG1ldGEubWVzc2FnZSk7XG4gICAgICAgICAgaWYgKG1ldGEuc3RhY2spIGluZm8uc3RhY2sgPSBtZXRhLnN0YWNrO1xuICAgICAgICAgIHRoaXMud3JpdGUoaW5mbyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy53cml0ZShPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRNZXRhLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGFzc2lnbjIsIExFVkVMLCBsZXZlbCksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGFzc2lnbjIsIFNQTEFULCBzcGxhdCksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGFzc2lnbjIsIFwibGV2ZWxcIiwgbGV2ZWwpLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRhc3NpZ24yLCBcIm1lc3NhZ2VcIiwgbXNnKSwgX09iamVjdCRhc3NpZ24yKSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFB1c2hlcyBkYXRhIHNvIHRoYXQgaXQgY2FuIGJlIHBpY2tlZCB1cCBieSBhbGwgb2Ygb3VyIHBpcGUgdGFyZ2V0cy5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBjYWxsYmFjayAtIENvbnRpbnVlcyBzdHJlYW0gcHJvY2Vzc2luZy5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfdHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF90cmFuc2Zvcm0oaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHRoaXMuc2lsZW50KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfSAvLyBbTEVWRUxdIGlzIG9ubHkgc29mdCBndWFyYW50ZWVkIHRvIGJlIHNldCBoZXJlIHNpbmNlIHdlIGFyZSBhIHByb3BlclxuICAgICAgLy8gc3RyZWFtLiBJdCBpcyBsaWtlbHkgdGhhdCBgaW5mb2AgY2FtZSBpbiB0aHJvdWdoIGAubG9nKGluZm8pYCBvclxuICAgICAgLy8gYC5pbmZvKGluZm8pYC4gSWYgaXQgaXMgbm90IGRlZmluZWQsIGhvd2V2ZXIsIGRlZmluZSBpdC5cbiAgICAgIC8vIFRoaXMgTEVWRUwgc3ltYm9sIGlzIHByb3ZpZGVkIGJ5IGB0cmlwbGUtYmVhbWAgYW5kIGFsc28gdXNlZCBpbjpcbiAgICAgIC8vIC0gbG9nZm9ybVxuICAgICAgLy8gLSB3aW5zdG9uLXRyYW5zcG9ydFxuICAgICAgLy8gLSBhYnN0cmFjdC13aW5zdG9uLXRyYW5zcG9ydFxuXG5cbiAgICAgIGlmICghaW5mb1tMRVZFTF0pIHtcbiAgICAgICAgaW5mb1tMRVZFTF0gPSBpbmZvLmxldmVsO1xuICAgICAgfSAvLyBSZW1hcms6IHJlYWxseSBub3Qgc3VyZSB3aGF0IHRvIGRvIGhlcmUsIGJ1dCB0aGlzIGhhcyBiZWVuIHJlcG9ydGVkIGFzXG4gICAgICAvLyB2ZXJ5IGNvbmZ1c2luZyBieSBwcmUgd2luc3RvbkAyLjAuMCB1c2VycyBhcyBxdWl0ZSBjb25mdXNpbmcgd2hlbiB1c2luZ1xuICAgICAgLy8gY3VzdG9tIGxldmVscy5cblxuXG4gICAgICBpZiAoIXRoaXMubGV2ZWxzW2luZm9bTEVWRUxdXSAmJiB0aGlzLmxldmVsc1tpbmZvW0xFVkVMXV0gIT09IDApIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcignW3dpbnN0b25dIFVua25vd24gbG9nZ2VyIGxldmVsOiAlcycsIGluZm9bTEVWRUxdKTtcbiAgICAgIH0gLy8gUmVtYXJrOiBub3Qgc3VyZSBpZiB3ZSBzaG91bGQgc2ltcGx5IGVycm9yIGhlcmUuXG5cblxuICAgICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlLnBpcGVzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t3aW5zdG9uXSBBdHRlbXB0IHRvIHdyaXRlIGxvZ3Mgd2l0aCBubyB0cmFuc3BvcnRzICVqJywgaW5mbyk7XG4gICAgICB9IC8vIEhlcmUgd2Ugd3JpdGUgdG8gdGhlIGBmb3JtYXRgIHBpcGUtY2hhaW4sIHdoaWNoIG9uIGByZWFkYWJsZWAgYWJvdmUgd2lsbFxuICAgICAgLy8gcHVzaCB0aGUgZm9ybWF0dGVkIGBpbmZvYCBPYmplY3Qgb250byB0aGUgYnVmZmVyIGZvciB0aGlzIGluc3RhbmNlLiBXZSB0cmFwXG4gICAgICAvLyAoYW5kIHJlLXRocm93KSBhbnkgZXJyb3JzIGdlbmVyYXRlZCBieSB0aGUgdXNlci1wcm92aWRlZCBmb3JtYXQsIGJ1dCBhbHNvXG4gICAgICAvLyBndWFyYW50ZWUgdGhhdCB0aGUgc3RyZWFtcyBjYWxsYmFjayBpcyBpbnZva2VkIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVlIGZsb3dpbmcuXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5wdXNoKHRoaXMuZm9ybWF0LnRyYW5zZm9ybShpbmZvLCB0aGlzLmZvcm1hdC5vcHRpb25zKSk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsYXlzIHRoZSAnZmluaXNoJyBldmVudCB1bnRpbCBhbGwgdHJhbnNwb3J0IHBpcGUgdGFyZ2V0cyBoYXZlXG4gICAgICogYWxzbyBlbWl0dGVkICdmaW5pc2gnIG9yIGFyZSBhbHJlYWR5IGZpbmlzaGVkLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGNhbGxiYWNrIC0gQ29udGludWVzIHN0cmVhbSBwcm9jZXNzaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2ZpbmFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5hbChjYWxsYmFjaykge1xuICAgICAgdmFyIHRyYW5zcG9ydHMgPSB0aGlzLnRyYW5zcG9ydHMuc2xpY2UoKTtcbiAgICAgIGFzeW5jRm9yRWFjaCh0cmFuc3BvcnRzLCBmdW5jdGlvbiAodHJhbnNwb3J0LCBuZXh0KSB7XG4gICAgICAgIGlmICghdHJhbnNwb3J0IHx8IHRyYW5zcG9ydC5maW5pc2hlZCkgcmV0dXJuIHNldEltbWVkaWF0ZShuZXh0KTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoJ2ZpbmlzaCcsIG5leHQpO1xuICAgICAgICB0cmFuc3BvcnQuZW5kKCk7XG4gICAgICB9LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHRyYW5zcG9ydCB0byB0aGlzIGxvZ2dlciBpbnN0YW5jZSBieSBwaXBpbmcgdG8gaXQuXG4gICAgICogQHBhcmFtIHttaXhlZH0gdHJhbnNwb3J0IC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQodHJhbnNwb3J0KSB7XG4gICAgICAvLyBTdXBwb3J0IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggYWxsIGV4aXN0aW5nIGB3aW5zdG9uIDwgMy54LnhgXG4gICAgICAvLyB0cmFuc3BvcnRzIHdoaWNoIG1lZXQgb25lIG9mIHR3byBjcml0ZXJpYTpcbiAgICAgIC8vIDEuIFRoZXkgaW5oZXJpdCBmcm9tIHdpbnN0b24uVHJhbnNwb3J0IGluICA8IDMueC54IHdoaWNoIGlzIE5PVCBhIHN0cmVhbS5cbiAgICAgIC8vIDIuIFRoZXkgZXhwb3NlIGEgbG9nIG1ldGhvZCB3aGljaCBoYXMgYSBsZW5ndGggZ3JlYXRlciB0aGFuIDIgKGkuZS4gbW9yZSB0aGVuXG4gICAgICAvLyAgICBqdXN0IGBsb2coaW5mbywgY2FsbGJhY2spYC5cbiAgICAgIHZhciB0YXJnZXQgPSAhaXNTdHJlYW0odHJhbnNwb3J0KSB8fCB0cmFuc3BvcnQubG9nLmxlbmd0aCA+IDIgPyBuZXcgTGVnYWN5VHJhbnNwb3J0U3RyZWFtKHtcbiAgICAgICAgdHJhbnNwb3J0OiB0cmFuc3BvcnRcbiAgICAgIH0pIDogdHJhbnNwb3J0O1xuXG4gICAgICBpZiAoIXRhcmdldC5fd3JpdGFibGVTdGF0ZSB8fCAhdGFyZ2V0Ll93cml0YWJsZVN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnRzIG11c3QgV3JpdGFibGVTdHJlYW1zIGluIG9iamVjdE1vZGUuIFNldCB7IG9iamVjdE1vZGU6IHRydWUgfS4nKTtcbiAgICAgIH0gLy8gTGlzdGVuIGZvciB0aGUgYGVycm9yYCBldmVudCBhbmQgdGhlIGB3YXJuYCBldmVudCBvbiB0aGUgbmV3IFRyYW5zcG9ydC5cblxuXG4gICAgICB0aGlzLl9vbkV2ZW50KCdlcnJvcicsIHRhcmdldCk7XG5cbiAgICAgIHRoaXMuX29uRXZlbnQoJ3dhcm4nLCB0YXJnZXQpO1xuXG4gICAgICB0aGlzLnBpcGUodGFyZ2V0KTtcblxuICAgICAgaWYgKHRyYW5zcG9ydC5oYW5kbGVFeGNlcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZXhjZXB0aW9ucy5oYW5kbGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zcG9ydC5oYW5kbGVSZWplY3Rpb25zKSB7XG4gICAgICAgIHRoaXMucmVqZWN0aW9ucy5oYW5kbGUoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHRyYW5zcG9ydCBmcm9tIHRoaXMgbG9nZ2VyIGluc3RhbmNlIGJ5IHVucGlwaW5nIGZyb20gaXQuXG4gICAgICogQHBhcmFtIHttaXhlZH0gdHJhbnNwb3J0IC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUodHJhbnNwb3J0KSB7XG4gICAgICBpZiAoIXRyYW5zcG9ydCkgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgdGFyZ2V0ID0gdHJhbnNwb3J0O1xuXG4gICAgICBpZiAoIWlzU3RyZWFtKHRyYW5zcG9ydCkgfHwgdHJhbnNwb3J0LmxvZy5sZW5ndGggPiAyKSB7XG4gICAgICAgIHRhcmdldCA9IHRoaXMudHJhbnNwb3J0cy5maWx0ZXIoZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnRyYW5zcG9ydCA9PT0gdHJhbnNwb3J0O1xuICAgICAgICB9KVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0aGlzLnVucGlwZSh0YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgdHJhbnNwb3J0cyBmcm9tIHRoaXMgbG9nZ2VyIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy51bnBpcGUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgcmVzb3VyY2VzIChzdHJlYW1zLCBldmVudCBsaXN0ZW5lcnMpIGZvciBhbGwgdHJhbnNwb3J0c1xuICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluc3RhbmNlIChpZiBuZWNlc3NhcnkpLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5lbWl0KCdjbG9zZScpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0YXJnZXRgIGxldmVscyBzcGVjaWZpZWQgb24gdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gVGFyZ2V0IGxldmVscyB0byB1c2Ugb24gdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldExldmVsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMZXZlbHMoKSB7XG4gICAgICB3YXJuLmRlcHJlY2F0ZWQoJ3NldExldmVscycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWVyaWVzIHRoZSBhbGwgdHJhbnNwb3J0cyBmb3IgdGhpcyBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgYG9wdGlvbnNgLlxuICAgICAqIFRoaXMgd2lsbCBhZ2dyZWdhdGUgZWFjaCB0cmFuc3BvcnQncyByZXN1bHRzIGludG8gb25lIG9iamVjdCBjb250YWluaW5nXG4gICAgICogYSBwcm9wZXJ0eSBwZXIgdHJhbnNwb3J0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUXVlcnkgb3B0aW9ucyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIENvbnRpbnVhdGlvbiB0byByZXNwb25kIHRvIHdoZW4gY29tcGxldGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJxdWVyeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBxdWVyeShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICB2YXIgcXVlcnlPYmplY3QgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLnF1ZXJ5IHx8IHt9KTsgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHF1ZXJ5IGEgc2luZ2xlIHRyYW5zcG9ydFxuXG4gICAgICBmdW5jdGlvbiBxdWVyeVRyYW5zcG9ydCh0cmFuc3BvcnQsIG5leHQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucXVlcnkgJiYgdHlwZW9mIHRyYW5zcG9ydC5mb3JtYXRRdWVyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9wdGlvbnMucXVlcnkgPSB0cmFuc3BvcnQuZm9ybWF0UXVlcnkocXVlcnlPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNwb3J0LnF1ZXJ5KG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0cmFuc3BvcnQuZm9ybWF0UmVzdWx0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzID0gdHJhbnNwb3J0LmZvcm1hdFJlc3VsdHMocmVzLCBvcHRpb25zLmZvcm1hdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dChudWxsLCByZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGFjY3VtdWxhdGUgdGhlIHJlc3VsdHMgZnJvbSBgcXVlcnlUcmFuc3BvcnRgIGludG9cbiAgICAgIC8vIHRoZSBgcmVzdWx0c2AuXG5cblxuICAgICAgZnVuY3Rpb24gYWRkUmVzdWx0cyh0cmFuc3BvcnQsIG5leHQpIHtcbiAgICAgICAgcXVlcnlUcmFuc3BvcnQodHJhbnNwb3J0LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAvLyBxdWVyeVRyYW5zcG9ydCBjb3VsZCBwb3RlbnRpYWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgLy8gc2luY2UgVHJhbnNwb3J0IGNvZGUgY2FuIGJlIHVucHJlZGljdGFibGUuXG4gICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGVyciB8fCByZXN1bHQ7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0c1t0cmFuc3BvcnQubmFtZV0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cblxuXG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBJdGVyYXRlIG92ZXIgdGhlIHRyYW5zcG9ydHMgaW4gcGFyYWxsZWwgc2V0dGluZyB0aGUgYXBwcm9wcmlhdGUga2V5IGluXG4gICAgICAvLyB0aGUgYHJlc3VsdHNgLlxuXG5cbiAgICAgIGFzeW5jRm9yRWFjaCh0aGlzLnRyYW5zcG9ydHMuZmlsdGVyKGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgcmV0dXJuICEhdHJhbnNwb3J0LnF1ZXJ5O1xuICAgICAgfSksIGFkZFJlc3VsdHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsb2cgc3RyZWFtIGZvciBhbGwgdHJhbnNwb3J0cy4gT3B0aW9ucyBvYmplY3QgaXMgb3B0aW9uYWwuXG4gICAgICogQHBhcmFte09iamVjdH0gb3B0aW9ucz17fSAtIFN0cmVhbSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtTdHJlYW19IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdHJlYW0oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgb3V0ID0gbmV3IFN0cmVhbSgpO1xuICAgICAgdmFyIHN0cmVhbXMgPSBbXTtcbiAgICAgIG91dC5fc3RyZWFtcyA9IHN0cmVhbXM7XG5cbiAgICAgIG91dC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaSA9IHN0cmVhbXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBzdHJlYW1zW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gQ3JlYXRlIGEgbGlzdCBvZiBhbGwgdHJhbnNwb3J0cyBmb3IgdGhpcyBpbnN0YW5jZS5cblxuXG4gICAgICB0aGlzLnRyYW5zcG9ydHMuZmlsdGVyKGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgcmV0dXJuICEhdHJhbnNwb3J0LnN0cmVhbTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICB2YXIgc3RyID0gdHJhbnNwb3J0LnN0cmVhbShvcHRpb25zKTtcblxuICAgICAgICBpZiAoIXN0cikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmVhbXMucHVzaChzdHIpO1xuICAgICAgICBzdHIub24oJ2xvZycsIGZ1bmN0aW9uIChsb2cpIHtcbiAgICAgICAgICBsb2cudHJhbnNwb3J0ID0gbG9nLnRyYW5zcG9ydCB8fCBbXTtcbiAgICAgICAgICBsb2cudHJhbnNwb3J0LnB1c2godHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICAgIG91dC5lbWl0KCdsb2cnLCBsb2cpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBlcnIudHJhbnNwb3J0ID0gZXJyLnRyYW5zcG9ydCB8fCBbXTtcbiAgICAgICAgICBlcnIudHJhbnNwb3J0LnB1c2godHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICAgIG91dC5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIGEgc3BlY2lmaWMgdGltaW5nLiBXaGVuIGRvbmUgaXMgY2FsbGVkXG4gICAgICogdGhlIHRpbWVyIHdpbGwgZmluaXNoIGFuZCBsb2cgdGhlIGR1cmF0aW9uLiBlLmcuOlxuICAgICAqIEByZXR1cm5zIHtQcm9maWxlfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb25zdCB0aW1lciA9IHdpbnN0b24uc3RhcnRUaW1lcigpXG4gICAgICogICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICogICAgICB0aW1lci5kb25lKHtcbiAgICAgKiAgICAgICAgbWVzc2FnZTogJ0xvZ2dpbmcgbWVzc2FnZSdcbiAgICAgKiAgICAgIH0pO1xuICAgICAqICAgIH0sIDEwMDApO1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFRpbWVyKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9maWxlcih0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHRoZSB0aW1lIGluYmV0d2VlbiBzdWJzZXF1ZW50IGNhbGxzIHRvIHRoaXMgbWV0aG9kIHdpdGggdGhlIHNhbWVcbiAgICAgKiBgaWRgIHBhcmFtZXRlci4gVGhlIHNlY29uZCBjYWxsIHRvIHRoaXMgbWV0aG9kIHdpbGwgbG9nIHRoZSBkaWZmZXJlbmNlIGluXG4gICAgICogbWlsbGlzZWNvbmRzIGFsb25nIHdpdGggdGhlIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFVuaXF1ZSBpZCBvZiB0aGUgcHJvZmlsZXJcbiAgICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUoaWQpIHtcbiAgICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgaWYgKHRoaXMucHJvZmlsZXJzW2lkXSkge1xuICAgICAgICB2YXIgdGltZUVuZCA9IHRoaXMucHJvZmlsZXJzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMucHJvZmlsZXJzW2lkXTsgLy8gQXR0ZW1wdCB0byBiZSBraW5kIHRvIHVzZXJzIGlmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIG9sZGVyIEFQSXMuXG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignQ2FsbGJhY2sgZnVuY3Rpb24gbm8gbG9uZ2VyIHN1cHBvcnRlZCBhcyBvZiB3aW5zdG9uQDMuMC4wJyk7XG4gICAgICAgICAgYXJncy5wb3AoKTtcbiAgICAgICAgfSAvLyBTZXQgdGhlIGR1cmF0aW9uIHByb3BlcnR5IG9mIHRoZSBtZXRhZGF0YVxuXG5cbiAgICAgICAgdmFyIGluZm8gPSBfdHlwZW9mKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09ICdvYmplY3QnID8gYXJncy5wb3AoKSA6IHt9O1xuICAgICAgICBpbmZvLmxldmVsID0gaW5mby5sZXZlbCB8fCAnaW5mbyc7XG4gICAgICAgIGluZm8uZHVyYXRpb25NcyA9IHRpbWUgLSB0aW1lRW5kO1xuICAgICAgICBpbmZvLm1lc3NhZ2UgPSBpbmZvLm1lc3NhZ2UgfHwgaWQ7XG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlKGluZm8pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb2ZpbGVyc1tpZF0gPSB0aW1lO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIGBleGNlcHRpb25zLmhhbmRsZWAgaW4gd2luc3RvbiA8IDMuMC4wLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZUV4Y2VwdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRXhjZXB0aW9ucygpIHtcbiAgICAgIHZhciBfdGhpcyRleGNlcHRpb25zO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkOiAuaGFuZGxlRXhjZXB0aW9ucygpIHdpbGwgYmUgcmVtb3ZlZCBpbiB3aW5zdG9uQDQuIFVzZSAuZXhjZXB0aW9ucy5oYW5kbGUoKScpO1xuXG4gICAgICAoX3RoaXMkZXhjZXB0aW9ucyA9IHRoaXMuZXhjZXB0aW9ucykuaGFuZGxlLmFwcGx5KF90aGlzJGV4Y2VwdGlvbnMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIGBleGNlcHRpb25zLmhhbmRsZWAgaW4gd2luc3RvbiA8IDMuMC4wLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuaGFuZGxlRXhjZXB0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmhhbmRsZUV4Y2VwdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXMkZXhjZXB0aW9uczI7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQ6IC51bmhhbmRsZUV4Y2VwdGlvbnMoKSB3aWxsIGJlIHJlbW92ZWQgaW4gd2luc3RvbkA0LiBVc2UgLmV4Y2VwdGlvbnMudW5oYW5kbGUoKScpO1xuXG4gICAgICAoX3RoaXMkZXhjZXB0aW9uczIgPSB0aGlzLmV4Y2VwdGlvbnMpLnVuaGFuZGxlLmFwcGx5KF90aGlzJGV4Y2VwdGlvbnMyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaHJvdyBhIG1vcmUgbWVhbmluZ2Z1bCBkZXByZWNhdGlvbiBub3RpY2VcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBUT0RPOiBhZGQgdGhyb3dzIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xpXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsaSgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ0xvZ2dlci5jbGkoKSB3YXMgcmVtb3ZlZCBpbiB3aW5zdG9uQDMuMC4wJywgJ1VzZSBhIGN1c3RvbSB3aW5zdG9uLmZvcm1hdHMuY2xpKCkgaW5zdGVhZC4nLCAnU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vdHJlZS9tYXN0ZXIvVVBHUkFERS0zLjAubWQnXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1YmJsZXMgdGhlIGBldmVudGAgdGhhdCBvY2N1cmVkIG9uIHRoZSBzcGVjaWZpZWQgYHRyYW5zcG9ydGAgdXBcbiAgICAgKiBmcm9tIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IHRoYXQgb2NjdXJlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc3BvcnQgLSBUcmFuc3BvcnQgb24gd2hpY2ggdGhlIGV2ZW50IG9jY3VyZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29uRXZlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uRXZlbnQoZXZlbnQsIHRyYW5zcG9ydCkge1xuICAgICAgZnVuY3Rpb24gdHJhbnNwb3J0RXZlbnQoZXJyKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3Rvbi9pc3N1ZXMvMTM2NFxuICAgICAgICBpZiAoZXZlbnQgPT09ICdlcnJvcicgJiYgIXRoaXMudHJhbnNwb3J0cy5pbmNsdWRlcyh0cmFuc3BvcnQpKSB7XG4gICAgICAgICAgdGhpcy5hZGQodHJhbnNwb3J0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgZXJyLCB0cmFuc3BvcnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRyYW5zcG9ydFsnX193aW5zdG9uJyArIGV2ZW50XSkge1xuICAgICAgICB0cmFuc3BvcnRbJ19fd2luc3RvbicgKyBldmVudF0gPSB0cmFuc3BvcnRFdmVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0cmFuc3BvcnQub24oZXZlbnQsIHRyYW5zcG9ydFsnX193aW5zdG9uJyArIGV2ZW50XSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9hZGREZWZhdWx0TWV0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRGVmYXVsdE1ldGEobXNnKSB7XG4gICAgICBpZiAodGhpcy5kZWZhdWx0TWV0YSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKG1zZywgdGhpcy5kZWZhdWx0TWV0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvZ2dlcjtcbn0oVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gZ2V0TGV2ZWxWYWx1ZShsZXZlbHMsIGxldmVsKSB7XG4gIHZhciB2YWx1ZSA9IGxldmVsc1tsZXZlbF07XG5cbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBjdXJyZW50IHJlYWRhYmxlU3RhdGUgcGlwZSB0YXJnZXRzIGZvciB0aGlzIExvZ2dlciBpbnN0YW5jZS5cbiAqIEB0eXBlIHtBcnJheXxPYmplY3R9XG4gKi9cblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgJ3RyYW5zcG9ydHMnLCB7XG4gIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZhciBwaXBlcyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUucGlwZXM7XG4gICAgcmV0dXJuICFBcnJheS5pc0FycmF5KHBpcGVzKSA/IFtwaXBlc10uZmlsdGVyKEJvb2xlYW4pIDogcGlwZXM7XG4gIH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBMb2dnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2ludGVybmFsL2lzQXJyYXlMaWtlJyk7XG5cbnZhciBfaXNBcnJheUxpa2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBcnJheUxpa2UpO1xuXG52YXIgX2JyZWFrTG9vcCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvYnJlYWtMb29wJyk7XG5cbnZhciBfYnJlYWtMb29wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JyZWFrTG9vcCk7XG5cbnZhciBfZWFjaE9mTGltaXQgPSByZXF1aXJlKCcuL2VhY2hPZkxpbWl0Jyk7XG5cbnZhciBfZWFjaE9mTGltaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mTGltaXQpO1xuXG52YXIgX29uY2UgPSByZXF1aXJlKCcuL2ludGVybmFsL29uY2UnKTtcblxudmFyIF9vbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29uY2UpO1xuXG52YXIgX29ubHlPbmNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9vbmx5T25jZScpO1xuXG52YXIgX29ubHlPbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlPbmNlKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG52YXIgX2F3YWl0aWZ5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hd2FpdGlmeScpO1xuXG52YXIgX2F3YWl0aWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F3YWl0aWZ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gZWFjaE9mIGltcGxlbWVudGF0aW9uIG9wdGltaXplZCBmb3IgYXJyYXktbGlrZXNcbmZ1bmN0aW9uIGVhY2hPZkFycmF5TGlrZShjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9ICgwLCBfb25jZTIuZGVmYXVsdCkoY2FsbGJhY2spO1xuICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgIGNvbXBsZXRlZCA9IDAsXG4gICAgICAgIHsgbGVuZ3RoIH0gPSBjb2xsLFxuICAgICAgICBjYW5jZWxlZCA9IGZhbHNlO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXRlcmF0b3JDYWxsYmFjayhlcnIsIHZhbHVlKSB7XG4gICAgICAgIGlmIChlcnIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjYW5jZWxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbmNlbGVkID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0gZWxzZSBpZiAoKytjb21wbGV0ZWQgPT09IGxlbmd0aCB8fCB2YWx1ZSA9PT0gX2JyZWFrTG9vcDIuZGVmYXVsdCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgaXRlcmF0ZWUoY29sbFtpbmRleF0sIGluZGV4LCAoMCwgX29ubHlPbmNlMi5kZWZhdWx0KShpdGVyYXRvckNhbGxiYWNrKSk7XG4gICAgfVxufVxuXG4vLyBhIGdlbmVyaWMgdmVyc2lvbiBvZiBlYWNoT2Ygd2hpY2ggY2FuIGhhbmRsZSBhcnJheSwgb2JqZWN0LCBhbmQgaXRlcmF0b3IgY2FzZXMuXG5mdW5jdGlvbiBlYWNoT2ZHZW5lcmljKGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiAoMCwgX2VhY2hPZkxpbWl0Mi5kZWZhdWx0KShjb2xsLCBJbmZpbml0eSwgaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBMaWtlIFtgZWFjaGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofSwgZXhjZXB0IHRoYXQgaXQgcGFzc2VzIHRoZSBrZXkgKG9yIGluZGV4KSBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50XG4gKiB0byB0aGUgaXRlcmF0ZWUuXG4gKlxuICogQG5hbWUgZWFjaE9mXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgZm9yRWFjaE9mXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHNlZSBbYXN5bmMuZWFjaF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2h9XG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfEFzeW5jSXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2hcbiAqIGl0ZW0gaW4gYGNvbGxgLlxuICogVGhlIGBrZXlgIGlzIHRoZSBpdGVtJ3Mga2V5LCBvciBpbmRleCBpbiB0aGUgY2FzZSBvZiBhbiBhcnJheS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGxcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICogQHJldHVybnMge1Byb21pc2V9IGEgcHJvbWlzZSwgaWYgYSBjYWxsYmFjayBpcyBvbWl0dGVkXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmogPSB7ZGV2OiBcIi9kZXYuanNvblwiLCB0ZXN0OiBcIi90ZXN0Lmpzb25cIiwgcHJvZDogXCIvcHJvZC5qc29uXCJ9O1xuICogdmFyIGNvbmZpZ3MgPSB7fTtcbiAqXG4gKiBhc3luYy5mb3JFYWNoT2Yob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSwgY2FsbGJhY2spIHtcbiAqICAgICBmcy5yZWFkRmlsZShfX2Rpcm5hbWUgKyB2YWx1ZSwgXCJ1dGY4XCIsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAqICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gKiAgICAgICAgIHRyeSB7XG4gKiAgICAgICAgICAgICBjb25maWdzW2tleV0gPSBKU09OLnBhcnNlKGRhdGEpO1xuICogICAgICAgICB9IGNhdGNoIChlKSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgICAgY2FsbGJhY2soKTtcbiAqICAgICB9KTtcbiAqIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICBpZiAoZXJyKSBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAqICAgICAvLyBjb25maWdzIGlzIG5vdyBhIG1hcCBvZiBKU09OIGRhdGFcbiAqICAgICBkb1NvbWV0aGluZ1dpdGgoY29uZmlncyk7XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZWFjaE9mKGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHZhciBlYWNoT2ZJbXBsZW1lbnRhdGlvbiA9ICgwLCBfaXNBcnJheUxpa2UyLmRlZmF1bHQpKGNvbGwpID8gZWFjaE9mQXJyYXlMaWtlIDogZWFjaE9mR2VuZXJpYztcbiAgICByZXR1cm4gZWFjaE9mSW1wbGVtZW50YXRpb24oY29sbCwgKDAsIF93cmFwQXN5bmMyLmRlZmF1bHQpKGl0ZXJhdGVlKSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KShlYWNoT2YsIDMpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF93aXRob3V0SW5kZXg7XG5mdW5jdGlvbiBfd2l0aG91dEluZGV4KGl0ZXJhdGVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSwgaW5kZXgsIGNhbGxiYWNrKSA9PiBpdGVyYXRlZSh2YWx1ZSwgY2FsbGJhY2spO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRXh0cmFjdCBuYW1lcyBmcm9tIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gd2hvJ3MgbmFtZSB3ZSBuZWVkIHRvIGV4dHJhY3QuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbmFtZShmbikge1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBmbi5kaXNwbGF5TmFtZSAmJiBmbi5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgcmV0dXJuIGZuLmRpc3BsYXlOYW1lO1xuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgZm4ubmFtZSAmJiBmbi5uYW1lKSB7XG4gICAgcmV0dXJuIGZuLm5hbWU7XG4gIH1cblxuICAvL1xuICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGNvbnN0cnVjdG9yIGhhcyBhIG5hbWUuXG4gIC8vXG4gIGlmIChcbiAgICAgICAnb2JqZWN0JyA9PT0gdHlwZW9mIGZuXG4gICAgJiYgZm4uY29uc3RydWN0b3JcbiAgICAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGZuLmNvbnN0cnVjdG9yLm5hbWVcbiAgKSByZXR1cm4gZm4uY29uc3RydWN0b3IubmFtZTtcblxuICAvL1xuICAvLyB0b1N0cmluZyB0aGUgZ2l2ZW4gZnVuY3Rpb24gYW5kIGF0dGVtcHQgdG8gcGFyc2UgaXQgb3V0IG9mIGl0LCBvciBkZXRlcm1pbmVcbiAgLy8gdGhlIGNsYXNzLlxuICAvL1xuICB2YXIgbmFtZWQgPSBmbi50b1N0cmluZygpXG4gICAgLCB0eXBlID0gdG9TdHJpbmcuY2FsbChmbikuc2xpY2UoOCwgLTEpO1xuXG4gIGlmICgnRnVuY3Rpb24nID09PSB0eXBlKSB7XG4gICAgbmFtZWQgPSBuYW1lZC5zdWJzdHJpbmcobmFtZWQuaW5kZXhPZignKCcpICsgMSwgbmFtZWQuaW5kZXhPZignKScpKTtcbiAgfSBlbHNlIHtcbiAgICBuYW1lZCA9IHR5cGU7XG4gIH1cblxuICByZXR1cm4gbmFtZWQgfHwgJ2Fub255bW91cyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgeyBMRVZFTCB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcbmNvbnN0IFRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJy4vJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBMZWdhY3lUcmFuc3BvcnRTdHJlYW0uIFRoaXMgaXMgYW4gaW50ZXJuYWxcbiAqIHdyYXBwZXIgYHdpbnN0b24gPj0gM2AgdXNlcyB0byB3cmFwIG9sZGVyIHRyYW5zcG9ydHMgaW1wbGVtZW50aW5nXG4gKiBsb2cobGV2ZWwsIG1lc3NhZ2UsIG1ldGEpLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIFRyYW5zcG9ydFN0cmVhbSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7VHJhbnNwb3R9IG9wdGlvbnMudHJhbnNwb3J0IC0gd2luc3RvbkAyIG9yIG9sZGVyIFRyYW5zcG9ydCB0byB3cmFwLlxuICovXG5cbmNvbnN0IExlZ2FjeVRyYW5zcG9ydFN0cmVhbSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTGVnYWN5VHJhbnNwb3J0U3RyZWFtKG9wdGlvbnMgPSB7fSkge1xuICBUcmFuc3BvcnRTdHJlYW0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgaWYgKCFvcHRpb25zLnRyYW5zcG9ydCB8fCB0eXBlb2Ygb3B0aW9ucy50cmFuc3BvcnQubG9nICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRyYW5zcG9ydCwgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhIGxvZyBtZXRob2QuJyk7XG4gIH1cblxuICB0aGlzLnRyYW5zcG9ydCA9IG9wdGlvbnMudHJhbnNwb3J0O1xuICB0aGlzLmxldmVsID0gdGhpcy5sZXZlbCB8fCBvcHRpb25zLnRyYW5zcG9ydC5sZXZlbDtcbiAgdGhpcy5oYW5kbGVFeGNlcHRpb25zID0gdGhpcy5oYW5kbGVFeGNlcHRpb25zIHx8IG9wdGlvbnMudHJhbnNwb3J0LmhhbmRsZUV4Y2VwdGlvbnM7XG5cbiAgLy8gRGlzcGxheSBvdXIgZGVwcmVjYXRpb24gbm90aWNlLlxuICB0aGlzLl9kZXByZWNhdGVkKCk7XG5cbiAgLy8gUHJvcGVybHkgYnViYmxlIHVwIGVycm9ycyBmcm9tIHRoZSB0cmFuc3BvcnQgdG8gdGhlXG4gIC8vIExlZ2FjeVRyYW5zcG9ydFN0cmVhbSBpbnN0YW5jZSwgYnV0IG9ubHkgb25jZSBubyBtYXR0ZXIgaG93IG1hbnkgdGltZXNcbiAgLy8gdGhpcyB0cmFuc3BvcnQgaXMgc2hhcmVkLlxuICBmdW5jdGlvbiB0cmFuc3BvcnRFcnJvcihlcnIpIHtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyLCB0aGlzLnRyYW5zcG9ydCk7XG4gIH1cblxuICBpZiAoIXRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yKSB7XG4gICAgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IgPSB0cmFuc3BvcnRFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMudHJhbnNwb3J0Lm9uKCdlcnJvcicsIHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yKTtcbiAgfVxufTtcblxuLypcbiAqIEluaGVyaXQgZnJvbSBUcmFuc3BvcnRTdHJlYW0gdXNpbmcgTm9kZS5qcyBidWlsdC1pbnNcbiAqL1xudXRpbC5pbmhlcml0cyhMZWdhY3lUcmFuc3BvcnRTdHJlYW0sIFRyYW5zcG9ydFN0cmVhbSk7XG5cbi8qKlxuICogV3JpdGVzIHRoZSBpbmZvIG9iamVjdCB0byBvdXIgdHJhbnNwb3J0IGluc3RhbmNlLlxuICogQHBhcmFtIHttaXhlZH0gaW5mbyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cbkxlZ2FjeVRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlKGluZm8sIGVuYywgY2FsbGJhY2spIHtcbiAgaWYgKHRoaXMuc2lsZW50IHx8IChpbmZvLmV4Y2VwdGlvbiA9PT0gdHJ1ZSAmJiAhdGhpcy5oYW5kbGVFeGNlcHRpb25zKSkge1xuICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgfVxuXG4gIC8vIFJlbWFyazogVGhpcyBoYXMgdG8gYmUgaGFuZGxlZCBpbiB0aGUgYmFzZSB0cmFuc3BvcnQgbm93IGJlY2F1c2Ugd2VcbiAgLy8gY2Fubm90IGNvbmRpdGlvbmFsbHkgd3JpdGUgdG8gb3VyIHBpcGUgdGFyZ2V0cyBhcyBzdHJlYW0uXG4gIGlmICghdGhpcy5sZXZlbCB8fCB0aGlzLmxldmVsc1t0aGlzLmxldmVsXSA+PSB0aGlzLmxldmVsc1tpbmZvW0xFVkVMXV0pIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5sb2coaW5mb1tMRVZFTF0sIGluZm8ubWVzc2FnZSwgaW5mbywgdGhpcy5fbm9wKTtcbiAgfVxuXG4gIGNhbGxiYWNrKG51bGwpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgdGhlIGJhdGNoIG9mIGluZm8gb2JqZWN0cyAoaS5lLiBcIm9iamVjdCBjaHVua3NcIikgdG8gb3VyIHRyYW5zcG9ydFxuICogaW5zdGFuY2UgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVjZXNzYXJ5IGZpbHRlcmluZy5cbiAqIEBwYXJhbSB7bWl4ZWR9IGNodW5rcyAtIFRPRE86IGFkZCBwYXJhbXMgZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbXMgZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybnMgZGVzY3JpcHRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl93cml0ZXYgPSBmdW5jdGlvbiBfd3JpdGV2KGNodW5rcywgY2FsbGJhY2spIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5fYWNjZXB0KGNodW5rc1tpXSkpIHtcbiAgICAgIHRoaXMudHJhbnNwb3J0LmxvZyhcbiAgICAgICAgY2h1bmtzW2ldLmNodW5rW0xFVkVMXSxcbiAgICAgICAgY2h1bmtzW2ldLmNodW5rLm1lc3NhZ2UsXG4gICAgICAgIGNodW5rc1tpXS5jaHVuayxcbiAgICAgICAgdGhpcy5fbm9wXG4gICAgICApO1xuICAgICAgY2h1bmtzW2ldLmNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xufTtcblxuLyoqXG4gKiBEaXNwbGF5cyBhIGRlcHJlY2F0aW9uIG5vdGljZS4gRGVmaW5lZCBhcyBhIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZVxuICogb3ZlcnJpZGVuIGluIHRlc3RzLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fZGVwcmVjYXRlZCA9IGZ1bmN0aW9uIF9kZXByZWNhdGVkKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLmVycm9yKFtcbiAgICBgJHt0aGlzLnRyYW5zcG9ydC5uYW1lfSBpcyBhIGxlZ2FjeSB3aW5zdG9uIHRyYW5zcG9ydC4gQ29uc2lkZXIgdXBncmFkaW5nOiBgLFxuICAgICctIFVwZ3JhZGUgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL3dpbnN0b25qcy93aW5zdG9uL2Jsb2IvbWFzdGVyL1VQR1JBREUtMy4wLm1kJ1xuICBdLmpvaW4oJ1xcbicpKTtcbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZXJyb3IgaGFuZGxpbmcgc3RhdGUgb24gdGhlIGxlZ2FjeSB0cmFuc3BvcnQgYXNzb2NpYXRlZFxuICogd2l0aCB0aGlzIGluc3RhbmNlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuICBpZiAodGhpcy50cmFuc3BvcnQuY2xvc2UpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yKSB7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpO1xuICAgIHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yID0gbnVsbDtcbiAgfVxufTtcbiIsIi8qKlxuICogcHJvZmlsZXIuanM6IFRPRE86IGFkZCBmaWxlIGhlYWRlciBkZXNjcmlwdGlvbi5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cbid1c2Ugc3RyaWN0Jztcbi8qKlxuICogVE9ETzogYWRkIGNsYXNzIGRlc2NyaXB0aW9uLlxuICogQHR5cGUge1Byb2ZpbGVyfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBQcm9maWxlciBpbnN0YW5jZSB1c2VkIGJ5XG4gICAqIGBMb2dnZXIucHJvdG90eXBlLnN0YXJ0VGltZXJgLiBXaGVuIGRvbmUgaXMgY2FsbGVkIHRoZSB0aW1lciB3aWxsIGZpbmlzaFxuICAgKiBhbmQgbG9nIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHshTG9nZ2VyfSBsb2dnZXIgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBQcm9maWxlcihsb2dnZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZmlsZXIpO1xuXG4gICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTG9nZ2VyIGlzIHJlcXVpcmVkIGZvciBwcm9maWxpbmcuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5zdGFydCA9IERhdGUubm93KCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuZHMgdGhlIGN1cnJlbnQgdGltZXIgKGkuZS4gUHJvZmlsZXIpIGluc3RhbmNlIGFuZCBsb2dzIHRoZSBgbXNnYCBhbG9uZ1xuICAgKiB3aXRoIHRoZSBkdXJhdGlvbiBzaW5jZSBjcmVhdGlvbi5cbiAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFByb2ZpbGVyLCBbe1xuICAgIGtleTogXCJkb25lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKCdDYWxsYmFjayBmdW5jdGlvbiBubyBsb25nZXIgc3VwcG9ydGVkIGFzIG9mIHdpbnN0b25AMy4wLjAnKTtcbiAgICAgICAgYXJncy5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZm8gPSBfdHlwZW9mKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09ICdvYmplY3QnID8gYXJncy5wb3AoKSA6IHt9O1xuICAgICAgaW5mby5sZXZlbCA9IGluZm8ubGV2ZWwgfHwgJ2luZm8nO1xuICAgICAgaW5mby5kdXJhdGlvbk1zID0gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7XG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXIud3JpdGUoaW5mbyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb2ZpbGVyO1xufSgpOyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbmNvbnN0IHsgTUVTU0FHRSB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcbmNvbnN0IGpzb25TdHJpbmdpZnkgPSByZXF1aXJlKCdmYXN0LXNhZmUtc3RyaW5naWZ5Jyk7XG5cbi8qXG4gKiBmdW5jdGlvbiByZXBsYWNlciAoa2V5LCB2YWx1ZSlcbiAqIEhhbmRsZXMgcHJvcGVyIHN0cmluZ2lmaWNhdGlvbiBvZiBCdWZmZXIgYW5kIGJpZ2ludCBvdXRwdXQuXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyKVxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2YWxpZC10eXBlb2ZcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLypcbiAqIGZ1bmN0aW9uIGpzb24gKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBKU09OIGZvcm1hdCB0aGF0IHR1cm5zIGEgbG9nIGBpbmZvYFxuICogb2JqZWN0IGludG8gcHVyZSBKU09OLiBUaGlzIHdhcyBwcmV2aW91c2x5IGV4cG9zZWQgYXMgeyBqc29uOiB0cnVlIH1cbiAqIHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KChpbmZvLCBvcHRzID0ge30pID0+IHtcbiAgaW5mb1tNRVNTQUdFXSA9IChvcHRzLnN0YWJsZSA/IGpzb25TdHJpbmdpZnkuc3RhYmxlU3RyaW5naWZ5XG4gICAgOiBqc29uU3RyaW5naWZ5KShpbmZvLCBvcHRzLnJlcGxhY2VyIHx8IHJlcGxhY2VyLCBvcHRzLnNwYWNlKTtcbiAgcmV0dXJuIGluZm87XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLypcbiAqIERpc3BsYXlzIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCB0aGUgc291cmNlIG9mXG4gKiB0aGUgZm9ybWF0IHdoZW4gaXQgaXMgaW52YWxpZC5cbiAqL1xuY2xhc3MgSW52YWxpZEZvcm1hdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihmb3JtYXRGbikge1xuICAgIHN1cGVyKGBGb3JtYXQgZnVuY3Rpb25zIG11c3QgYmUgc3luY2hyb25vdXMgdGFraW5nIGEgdHdvIGFyZ3VtZW50czogKGluZm8sIG9wdHMpXG5Gb3VuZDogJHtmb3JtYXRGbi50b1N0cmluZygpLnNwbGl0KCdcXG4nKVswXX1cXG5gKTtcblxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEludmFsaWRGb3JtYXRFcnJvcik7XG4gIH1cbn1cblxuLypcbiAqIGZ1bmN0aW9uIGZvcm1hdCAoZm9ybWF0Rm4pXG4gKiBSZXR1cm5zIGEgY3JlYXRlIGZ1bmN0aW9uIGZvciB0aGUgYGZvcm1hdEZuYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXRGbiA9PiB7XG4gIGlmIChmb3JtYXRGbi5sZW5ndGggPiAyKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRGb3JtYXRFcnJvcihmb3JtYXRGbik7XG4gIH1cblxuICAvKlxuICAgKiBmdW5jdGlvbiBGb3JtYXQgKG9wdGlvbnMpXG4gICAqIEJhc2UgcHJvdG90eXBlIHdoaWNoIGNhbGxzIGEgYF9mb3JtYXRgXG4gICAqIGZ1bmN0aW9uIGFuZCBwdXNoZXMgdGhlIHJlc3VsdC5cbiAgICovXG4gIGZ1bmN0aW9uIEZvcm1hdChvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgRm9ybWF0LnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmb3JtYXRGbjtcblxuICAvL1xuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIG5ldyBpbnN0YW5jZXMgb2ZcbiAgLy8gRm9ybWF0V3JhcCBmb3Igc2ltcGxlIHN5bnRheCBsaWtlOlxuICAvL1xuICAvLyByZXF1aXJlKCd3aW5zdG9uJykuZm9ybWF0cy5qc29uKCk7XG4gIC8vXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1hdFdyYXAob3B0cykge1xuICAgIHJldHVybiBuZXcgRm9ybWF0KG9wdHMpO1xuICB9XG5cbiAgLy9cbiAgLy8gRXhwb3NlIHRoZSBGb3JtYXRXcmFwIHRocm91Z2ggdGhlIGNyZWF0ZSBmdW5jdGlvblxuICAvLyBmb3IgdGVzdGFiaWxpdHkuXG4gIC8vXG4gIGNyZWF0ZUZvcm1hdFdyYXAuRm9ybWF0ID0gRm9ybWF0O1xuICByZXR1cm4gY3JlYXRlRm9ybWF0V3JhcDtcbn07XG4iLCIvKipcbiAqIGNvbnRhaW5lci5qczogSW52ZXJzaW9uIG9mIGNvbnRyb2wgY29udGFpbmVyIGZvciB3aW5zdG9uIGxvZ2dlciBpbnN0YW5jZXMuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIGNyZWF0ZUxvZ2dlciA9IHJlcXVpcmUoJy4vY3JlYXRlLWxvZ2dlcicpO1xuLyoqXG4gKiBJbnZlcnNpb24gb2YgY29udHJvbCBjb250YWluZXIgZm9yIHdpbnN0b24gbG9nZ2VyIGluc3RhbmNlcy5cbiAqIEB0eXBlIHtDb250YWluZXJ9XG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIENvbnRhaW5lciBvYmplY3QgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIGFcbiAgICogc2V0IG9mIGB3aW5zdG9uLkxvZ2dlcmAgaW5zdGFuY2VzIGJhc2VkIG9uIHN0cmluZyBpZHMuXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gW29wdGlvbnM9e31dIC0gRGVmYXVsdCBwYXNzLXRocnUgb3B0aW9ucyBmb3IgTG9nZ2Vycy5cbiAgICovXG4gIGZ1bmN0aW9uIENvbnRhaW5lcigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGFpbmVyKTtcblxuICAgIHRoaXMubG9nZ2VycyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyZWl2ZXMgYSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlIGZvciB0aGUgc3BlY2lmaWVkIGBpZGAuIElmIGFuXG4gICAqIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0LCBvbmUgaXMgY3JlYXRlZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgTG9nZ2VyIHRvIGdldC5cbiAgICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgY29uZmlndXJlZCBMb2dnZXIgaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBpZC5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoQ29udGFpbmVyLCBbe1xuICAgIGtleTogXCJhZGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKGlkLCBvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMubG9nZ2Vycy5oYXMoaWQpKSB7XG4gICAgICAgIC8vIFJlbWFyazogU2ltcGxlIHNoYWxsb3cgY2xvbmUgZm9yIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBpbiBjYXNlIHdlIHBhc3NcbiAgICAgICAgLy8gaW4gaW5zdGFudGlhdGVkIHByb3RveXBhbCBvYmplY3RzXG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zIHx8IHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMudHJhbnNwb3J0cyB8fCB0aGlzLm9wdGlvbnMudHJhbnNwb3J0czsgLy8gUmVtYXJrOiBNYWtlIHN1cmUgaWYgd2UgaGF2ZSBhbiBhcnJheSBvZiB0cmFuc3BvcnRzIHdlIHNsaWNlIGl0IHRvXG4gICAgICAgIC8vIG1ha2UgY29waWVzIG9mIHRob3NlIHJlZmVyZW5jZXMuXG5cbiAgICAgICAgb3B0aW9ucy50cmFuc3BvcnRzID0gZXhpc3RpbmcgPyBleGlzdGluZy5zbGljZSgpIDogW107XG4gICAgICAgIHZhciBsb2dnZXIgPSBjcmVhdGVMb2dnZXIob3B0aW9ucyk7XG4gICAgICAgIGxvZ2dlci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLl9kZWxldGUoaWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sb2dnZXJzLnNldChpZCwgbG9nZ2VyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMubG9nZ2Vycy5nZXQoaWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyZWl2ZXMgYSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlIGZvciB0aGUgc3BlY2lmaWVkIGBpZGAuIElmXG4gICAgICogYW4gaW5zdGFuY2UgZG9lcyBub3QgZXhpc3QsIG9uZSBpcyBjcmVhdGVkLlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciB0byBnZXQuXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gQSBjb25maWd1cmVkIExvZ2dlciBpbnN0YW5jZSB3aXRoIGEgc3BlY2lmaWVkIGlkLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChpZCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuYWRkKGlkLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBoYXMgYSBsb2dnZXIgd2l0aCB0aGUgaWQuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlIHRvIGZpbmQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IC0gQm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIGlmIHRoaXMgaW5zdGFuY2UgaGFzIGFcbiAgICAgKiBsb2dnZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGBpZGAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoYXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKGlkKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmxvZ2dlcnMuaGFzKGlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIGEgYExvZ2dlcmAgaW5zdGFuY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGBpZGAgaWYgaXQgZXhpc3RzLlxuICAgICAqIElmIG5vIGBpZGAgaXMgc3VwcGxpZWQgdGhlbiBhbGwgTG9nZ2VycyBhcmUgY2xvc2VkLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBjbG9zZS5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoaWQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZUxvZ2dlcihpZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLl9yZW1vdmVMb2dnZXIoa2V5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBsb2dnZXIgYmFzZWQgb24gdGhlIGlkLlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIGxvZ2dlciB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbW92ZUxvZ2dlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlTG9nZ2VyKGlkKSB7XG4gICAgICBpZiAoIXRoaXMubG9nZ2Vycy5oYXMoaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGxvZ2dlciA9IHRoaXMubG9nZ2Vycy5nZXQoaWQpO1xuICAgICAgbG9nZ2VyLmNsb3NlKCk7XG5cbiAgICAgIHRoaXMuX2RlbGV0ZShpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBgTG9nZ2VyYCBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgYGlkYC5cbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2UgdG8gZGVsZXRlIGZyb21cbiAgICAgKiBjb250YWluZXIuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGlkKSB7XG4gICAgICB0aGlzLmxvZ2dlcnNbXCJkZWxldGVcIl0oaWQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb250YWluZXI7XG59KCk7IiwibW9kdWxlLmV4cG9ydHMgPSBtbDU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbnZhciBUaGVtZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbnZhciBDb25zdW1lciA9IFRoZW1lQ29udGV4dC5Db25zdW1lcixcbiAgICBQcm92aWRlciA9IFRoZW1lQ29udGV4dC5Qcm92aWRlcjtcblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhlcyA9IF9yZWYucHJlZml4ZXMsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb3BpZWRQcmVmaXhlcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJlZml4ZXMpO1xuICB9LCBbcHJlZml4ZXNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvcGllZFByZWZpeGVzXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJvb3RzdHJhcFByZWZpeChwcmVmaXgsIGRlZmF1bHRQcmVmaXgpIHtcbiAgdmFyIHByZWZpeGVzID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICByZXR1cm4gcHJlZml4IHx8IHByZWZpeGVzW2RlZmF1bHRQcmVmaXhdIHx8IGRlZmF1bHRQcmVmaXg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChDb21wb25lbnQsIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykgb3B0cyA9IHtcbiAgICBwcmVmaXg6IG9wdHNcbiAgfTtcbiAgdmFyIGlzQ2xhc3N5ID0gQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7IC8vIElmIGl0J3MgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCBtYWtlIHN1cmUgd2UgZG9uJ3QgYnJlYWsgaXQgd2l0aCBhIHJlZlxuXG4gIHZhciBfb3B0cyA9IG9wdHMsXG4gICAgICBwcmVmaXggPSBfb3B0cy5wcmVmaXgsXG4gICAgICBfb3B0cyRmb3J3YXJkUmVmQXMgPSBfb3B0cy5mb3J3YXJkUmVmQXMsXG4gICAgICBmb3J3YXJkUmVmQXMgPSBfb3B0cyRmb3J3YXJkUmVmQXMgPT09IHZvaWQgMCA/IGlzQ2xhc3N5ID8gJ3JlZicgOiAnaW5uZXJSZWYnIDogX29wdHMkZm9yd2FyZFJlZkFzO1xuICB2YXIgV3JhcHBlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgX3JlZjIpO1xuXG4gICAgcHJvcHNbZm9yd2FyZFJlZkFzXSA9IHJlZjtcbiAgICB2YXIgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgocHJvcHMuYnNQcmVmaXgsIHByZWZpeCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBic1ByZWZpeDogYnNQcmVmaXhcbiAgICB9KSk7XG4gIH0pO1xuICBXcmFwcGVkLmRpc3BsYXlOYW1lID0gXCJCb290c3RyYXAoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICByZXR1cm4gV3JhcHBlZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50LCBDb25zdW1lciBhcyBUaGVtZUNvbnN1bWVyIH07XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYgIT0gbnVsbDtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGYpIHtcbiAgICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKTtcbiAgICB9XG5cbiAgICBpZiAoYWNjID09PSBudWxsKSByZXR1cm4gZjtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpOyAvLyBAdHMtaWdub3JlXG5cbiAgICAgIGYuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBpc1RyaXZpYWxIcmVmKGhyZWYpIHtcbiAgcmV0dXJuICFocmVmIHx8IGhyZWYudHJpbSgpID09PSAnIyc7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgRHJvcGRvd25JdGVtcywgZXRjLlxuICovXG5cblxudmFyIFNhZmVBbmNob3IgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2EnIDogX3JlZiRhcyxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIG9uS2V5RG93biA9IF9yZWYub25LZXlEb3duLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhc1wiLCBcImRpc2FibGVkXCIsIFwib25LZXlEb3duXCJdKTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBocmVmID0gcHJvcHMuaHJlZixcbiAgICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2s7XG5cbiAgICBpZiAoZGlzYWJsZWQgfHwgaXNUcml2aWFsSHJlZihocmVmKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBpZiAoaXNUcml2aWFsSHJlZihwcm9wcy5ocmVmKSkge1xuICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgLy8gb3RoZXJ3aXNlLCB0aGUgY3Vyc29yIGluY29ycmVjdGx5IHN0eWxlZCAoZXhjZXB0IHdpdGggcm9sZT0nYnV0dG9uJylcblxuICAgIHByb3BzLmhyZWYgPSBwcm9wcy5ocmVmIHx8ICcjJztcbiAgfVxuXG4gIGlmIChkaXNhYmxlZCkge1xuICAgIHByb3BzLnRhYkluZGV4ID0gLTE7XG4gICAgcHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICBvbktleURvd246IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVLZXlEb3duLCBvbktleURvd24pXG4gIH0pKTtcbn0pO1xuU2FmZUFuY2hvci5kaXNwbGF5TmFtZSA9ICdTYWZlQW5jaG9yJztcbmV4cG9ydCBkZWZhdWx0IFNhZmVBbmNob3I7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgdmFyaWFudDogJ3ByaW1hcnknLFxuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG52YXIgQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICB2YXJpYW50ID0gX3JlZi52YXJpYW50LFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBibG9jayA9IF9yZWYuYmxvY2ssXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgYXMgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcInZhcmlhbnRcIiwgXCJzaXplXCIsIFwiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiYmxvY2tcIiwgXCJ0eXBlXCIsIFwiYXNcIl0pO1xuXG4gIHZhciBwcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdidG4nKTtcbiAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4LCBhY3RpdmUgJiYgJ2FjdGl2ZScsIHByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgYmxvY2sgJiYgcHJlZml4ICsgXCItYmxvY2tcIiwgc2l6ZSAmJiBwcmVmaXggKyBcIi1cIiArIHNpemUpO1xuXG4gIGlmIChwcm9wcy5ocmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNhZmVBbmNob3IsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYXM6IGFzLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NlcywgcHJvcHMuZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJylcbiAgICB9KSk7XG4gIH1cblxuICBpZiAocmVmKSB7XG4gICAgcHJvcHMucmVmID0gcmVmO1xuICB9XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBwcm9wcy50eXBlID0gdHlwZTtcbiAgfSBlbHNlIGlmICghYXMpIHtcbiAgICBwcm9wcy50eXBlID0gJ2J1dHRvbic7XG4gIH1cblxuICB2YXIgQ29tcG9uZW50ID0gYXMgfHwgJ2J1dHRvbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG59KTtcbkJ1dHRvbi5kaXNwbGF5TmFtZSA9ICdCdXR0b24nO1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjsiLCJpbXBvcnQgd2luc3RvbiBmcm9tIFwid2luc3RvblwiO1xuXG5sZXQgSU5TVEFOQ0U6IHdpbnN0b24uTG9nZ2VyO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvZ2dlcigpOiB3aW5zdG9uLkxvZ2dlciB7XG4gIGlmIChJTlNUQU5DRSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgSU5TVEFOQ0UgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcih7XG4gICAgICBsZXZlbDogXCJkZWJ1Z1wiLFxuICAgICAgdHJhbnNwb3J0czogW25ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSgpXSxcbiAgICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuY29tYmluZShcbiAgICAgICAgd2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSxcbiAgICAgICAgd2luc3Rvbi5mb3JtYXQuc3BsYXQoKSxcbiAgICAgICAgd2luc3Rvbi5mb3JtYXQuc2ltcGxlKClcbiAgICAgICksXG4gICAgfSk7XG5cbiAgfVxuICByZXR1cm4gSU5TVEFOQ0U7XG59XG4iLCJjb25zdCBub3Rlczogc3RyaW5nW10gPSBbXG4gIFwiQVwiLCAvLyAyMVxuICBcIkLima1cIiwgLy8gMjJcbiAgXCJCXCIsIC8vIDIzXG4gIFwiQ1wiLCAvLyAyNFxuICBcIkPima9cIiwgLy8gMjVcbiAgXCJEXCIsIC8vIDI2XG4gIFwiROKZr1wiLCAvLyAyN1xuICBcIkVcIiwgLy8gMjhcbiAgXCJGXCIsIC8vIDI5XG4gIFwiRuKZr1wiLCAvLyAzMFxuICBcIkdcIiwgLy8gMzFcbiAgXCJH4pmvXCIsIC8vIDMyXG5dO1xuY29uc3QgbmFtZSA9IChub3RlOiBudW1iZXIpOiBzdHJpbmcgPT4gbm90ZXNbKG5vdGUgLSAyMSkgJSAxMl07XG5jb25zdCBvY3RhdmUgPSAobm90ZTogbnVtYmVyKTogbnVtYmVyID0+IE1hdGguZmxvb3Iobm90ZSAvIDEyIC0gMSk7XG5cbmNvbnN0IG5vdGVUb0ZyZXEgPSAobm90ZTogbnVtYmVyKTogbnVtYmVyID0+XG4gIDQ0MCAqIE1hdGgucG93KDIsIChub3RlIC0gNjkpIC8gMTIpO1xuXG5jb25zdCBmcmVxVG9Ob3RlID0gKGZyZXE6IG51bWJlcik6IG51bWJlciA9PiA2OSArIDEyICogTWF0aC5sb2cyKGZyZXEgLyA0NDApO1xuXG5jb25zdCBkaWZmID0gKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyID0+IDEyMDAgKiBNYXRoLmxvZzIoYiAvIGEpO1xuXG5jbGFzcyBOb3RlIHtcbiAgcmVhZG9ubHkgZnJlcXVlbmN5OiBudW1iZXI7XG4gIHJlYWRvbmx5IG5vdGU6IG51bWJlcjtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICByZWFkb25seSBvY3RhdmU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9mcmVxOiBudW1iZXIpIHtcbiAgICB0aGlzLm5vdGUgPSBNYXRoLnJvdW5kKGZyZXFUb05vdGUoX2ZyZXEpKTtcblxuICAgIHRoaXMuZnJlcXVlbmN5ID0gbm90ZVRvRnJlcSh0aGlzLm5vdGUpO1xuICAgIHRoaXMubmFtZSA9IG5hbWUodGhpcy5ub3RlKTtcbiAgICB0aGlzLm9jdGF2ZSA9IG9jdGF2ZSh0aGlzLm5vdGUpO1xuICB9XG59XG5cbnR5cGUgUGl0Y2ggPSB7XG4gIHRhcmdldDogTm90ZTtcbiAgbm90ZTogbnVtYmVyO1xuICBmcmVxdWVuY3k6IG51bWJlcjtcbiAgZGlmZjogbnVtYmVyO1xufTtcblxuY29uc3Qgbm90ZSA9IChmcmVxPzogbnVtYmVyIHwgbnVsbCk6IFBpdGNoIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKGZyZXEgPT09IHVuZGVmaW5lZCB8fCBmcmVxID09PSBudWxsKSByZXR1cm47XG5cbiAgY29uc3QgbiA9IG5ldyBOb3RlKGZyZXEpO1xuICByZXR1cm4ge1xuICAgIGZyZXF1ZW5jeTogZnJlcSxcbiAgICB0YXJnZXQ6IG4sXG4gICAgbm90ZTogZnJlcVRvTm90ZShmcmVxKSxcbiAgICBkaWZmOiBkaWZmKG4uZnJlcXVlbmN5LCBmcmVxKSxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IG5hbWUsIG9jdGF2ZSwgbm90ZSwgTm90ZSwgUGl0Y2gsIGZyZXFUb05vdGUsIG5vdGVUb0ZyZXEsIGRpZmYgfTtcbiIsImltcG9ydCBcIm1sNVwiO1xuXG5pbXBvcnQgeyBub3RlLCBQaXRjaCB9IGZyb20gXCJwaXRjaC9ub3Rlc1wiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImxvZ1wiO1xuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5cblxuZXhwb3J0IHR5cGUgU2FtcGxlID0gUGl0Y2ggfCB1bmRlZmluZWQ7XG5leHBvcnQgdHlwZSBSZWNvcmRpbmcgPSBTYW1wbGVbXTtcbnR5cGUgUGl0Y2hHZW5lcmF0b3IgPSBBc3luY0dlbmVyYXRvcjxTYW1wbGU+O1xuXG5jb25zdCBNT0RFTF9VUkwgPVxuICBcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9tbDVqcy9tbDUtZGF0YS1hbmQtbW9kZWxzL21vZGVscy9waXRjaC1kZXRlY3Rpb24vY3JlcGUvXCI7XG5cbmFzeW5jIGZ1bmN0aW9uKiBtbDVQaXRjaERldGVjdGlvbihcbiAgY3R4OiBBdWRpb0NvbnRleHQsXG4gIHN0cmVhbTogTWVkaWFTdHJlYW1cbik6IFBpdGNoR2VuZXJhdG9yIHtcbiAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgY29uc3QgcGl0Y2hEZXRlY3Rpb246IGFueSA9IG1sNS5waXRjaERldGVjdGlvbihNT0RFTF9VUkwsIGN0eCwgc3RyZWFtKTtcbiAgTE9HLmluZm8oXCJDcmVhdGVkIHBpdGNoIGRldGVjdGlvbi5cIiwgcGl0Y2hEZXRlY3Rpb24pO1xuXG4gIGF3YWl0IHBpdGNoRGV0ZWN0aW9uLnJlYWR5O1xuICBMT0cuaW5mbyhcIkluaXRpYWxpemVkIHRoZSBtb2RlbC5cIik7XG5cbiAgd2hpbGUgKHN0cmVhbS5hY3RpdmUgJiYgY3R4LnN0YXRlID09PSBcInJ1bm5pbmdcIikge1xuICAgIGNvbnN0IHBpdGNoID0gYXdhaXQgcGl0Y2hEZXRlY3Rpb24uZ2V0UGl0Y2goKTtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIExPRy5pbmZvKFwiR290IGZpcnN0IGRldGVjdGlvbiAlai5cIiwgcGl0Y2gpO1xuICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgfVxuICAgIHlpZWxkIG5vdGUocGl0Y2gpO1xuICB9XG5cbiAgcmV0dXJuO1xufVxuXG5leHBvcnQgeyBQaXRjaEdlbmVyYXRvciwgbWw1UGl0Y2hEZXRlY3Rpb24gfTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbnR5cGUgR2VuZXJhdG9yQ29tcG9uZW50UHJvcHM8VD4gPSB7XG4gIGdlbmVyYXRvcjogQXN5bmNHZW5lcmF0b3I8VCB8IHVuZGVmaW5lZCwgYW55LCBhbnk+O1xuICBjaGlsZHJlbjogYW55O1xuICBvblRpY2s/OiAodDogVCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbn07XG5cbmZ1bmN0aW9uIEdlbmVyYXRvckNvbXBvbmVudDxUPihwcm9wczogR2VuZXJhdG9yQ29tcG9uZW50UHJvcHM8VD4pIHtcbiAgY29uc3QgW2ZsYWcsIHNldEZsYWddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY3VycmVudFZhbHVlLCBzZXRDdXJyZW50VmFsdWVdID0gdXNlU3RhdGU8VCB8IHVuZGVmaW5lZD4oKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBtb3VudGVkID0gdHJ1ZTtcblxuICAgIHByb3BzLmdlbmVyYXRvci5uZXh0KCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmRvbmUgfHwgIW1vdW50ZWQpIHJldHVybjtcblxuICAgICAgc2V0Q3VycmVudFZhbHVlKHJlc3VsdC52YWx1ZSk7XG4gICAgICBzZXRGbGFnKCFmbGFnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW2ZsYWddKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5vblRpY2sgJiYgY3VycmVudFZhbHVlKSB7XG4gICAgICBwcm9wcy5vblRpY2soY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH0sIFtjdXJyZW50VmFsdWVdKTtcblxuICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oY3VycmVudFZhbHVlKTtcbn1cblxuZXhwb3J0IHsgR2VuZXJhdG9yQ29tcG9uZW50IH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBQaXRjaCwgbm90ZVRvRnJlcSwgbm90ZSwgZGlmZiB9IGZyb20gXCIuLi9waXRjaC9ub3Rlc1wiO1xuaW1wb3J0IHsgUGl0Y2hHZW5lcmF0b3IsIFNhbXBsZSB9IGZyb20gXCJwaXRjaC9waXRjaFwiO1xuXG5pbXBvcnQgeyBHZW5lcmF0b3JDb21wb25lbnQgfSBmcm9tIFwiLi9HZW5lcmF0b3JDb21wb25lbnRcIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCJsb2dcIjtcblxuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5cbnR5cGUgUmVjb3JkaW5nID0gU2FtcGxlW107XG50eXBlIFBpdGNoUmVjb3JkZXJQcm9wcyA9IHtcbiAgcGl0Y2hHZW5lcmF0b3I/OiBQaXRjaEdlbmVyYXRvcjtcbiAgdGltZW91dE1zOiBudW1iZXI7XG4gIG9uRmluaXNoOiAoc2FtcGxlczogUmVjb3JkaW5nKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFBpdGNoUmVjb3JkZXIoe1xuICBwaXRjaEdlbmVyYXRvcixcbiAgdGltZW91dE1zLFxuICBvbkZpbmlzaCxcbn06IFBpdGNoUmVjb3JkZXJQcm9wcykge1xuICBjb25zdCBbcmVjb3JkaW5nLCBzZXRSZWNvcmRpbmddID0gdXNlU3RhdGU8UmVjb3JkaW5nPihbXSk7XG4gIGNvbnN0IFtmaW5pc2hlZCwgc2V0RmluaXNoZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgTE9HLmluZm8oXCJTZXR0aW5nIHVwIHRoZSB0aW1lb3V0LlwiKTtcbiAgICBjb25zdCB0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBMT0cuZGVidWcoXCJGaW5pc2hpbmcgdGhlIHN0cmVhbSB3aXRoICVkIHNhbXBsZXMuXCIsIHJlY29yZGluZy5sZW5ndGgpO1xuICAgICAgc2V0RmluaXNoZWQodHJ1ZSk7XG4gICAgfSwgdGltZW91dE1zKTtcblxuICAgIExPRy5pbmZvKFwiU2V0IHVwIHRpbWVyICVkIGZvciAlZCBtcy5cIiwgdCwgdGltZW91dE1zKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBMT0cuaW5mbyhcIkNsZWFyaW5nIG91dCB0aGUgdGltZW91dCAlZC5cIiwgdCk7XG4gICAgICBjbGVhclRpbWVvdXQodCk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICBMT0cuaW5mbyhcIkZpbmlzaGluZyByZWNvcmRpbmcuXCIpO1xuICAgICAgb25GaW5pc2gocmVjb3JkaW5nKTtcbiAgICB9XG4gIH0sIFtmaW5pc2hlZCwgcmVjb3JkaW5nXSk7XG5cbiAgY29uc3QgYWRkU2FtcGxlID0gKHA6IFNhbXBsZSkgPT4ge1xuICAgIGNvbnN0IG5ld1JlY29yZGluZyA9IHJlY29yZGluZy5jb25jYXQoW3BdKTtcbiAgICBzZXRSZWNvcmRpbmcobmV3UmVjb3JkaW5nKTtcbiAgICBMT0cuZGVidWcoXCJSZWNvcmRpbmcgc2l6ZTogJWRcIiwgcmVjb3JkaW5nLmxlbmd0aCk7XG4gIH07XG5cbiAgcmV0dXJuIHBpdGNoR2VuZXJhdG9yID8gKFxuICAgIDw+XG4gICAgICA8R2VuZXJhdG9yQ29tcG9uZW50IGdlbmVyYXRvcj17cGl0Y2hHZW5lcmF0b3J9IG9uVGljaz17YWRkU2FtcGxlfT5cbiAgICAgICAgeyh2YWx1ZTogUGl0Y2gpID0+IDxoMz5MaXN0ZW5pbmcuLi48L2gzPn1cbiAgICAgIDwvR2VuZXJhdG9yQ29tcG9uZW50PlxuICAgIDwvPlxuICApIDogKFxuICAgIDxzcGFuPkluaXRpYWxpemluZy4uLjwvc3Bhbj5cbiAgKTtcbn1cbiIsImltcG9ydCBjYW5Vc2VET00gZnJvbSAnLi9jYW5Vc2VET00nO1xuaW1wb3J0IGNzcyBmcm9tICcuL2Nzcyc7XG5pbXBvcnQgbGlzdGVuIGZyb20gJy4vbGlzdGVuJztcbmV4cG9ydCB2YXIgVFJBTlNJVElPTl9TVVBQT1JURUQgPSBjYW5Vc2VET00gJiYgJ29udHJhbnNpdGlvbmVuZCcgaW4gd2luZG93O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRHVyYXRpb24obm9kZSkge1xuICB2YXIgc3RyID0gY3NzKG5vZGUsICd0cmFuc2l0aW9uRHVyYXRpb24nKSB8fCAnJztcbiAgdmFyIG11bHQgPSBzdHIuaW5kZXhPZignbXMnKSA9PT0gLTEgPyAxMDAwIDogMTtcbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKSAqIG11bHQ7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGV2dC5pbml0RXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB0cnVlLCB0cnVlKTtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dCk7XG59XG5cbmZ1bmN0aW9uIGVtdWxhdGVUcmFuc2l0aW9uRW5kKGVsZW1lbnQsIGR1cmF0aW9uLCBwYWRkaW5nKSB7XG4gIGlmIChwYWRkaW5nID09PSB2b2lkIDApIHtcbiAgICBwYWRkaW5nID0gNTtcbiAgfVxuXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgdmFyIGhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KTtcbiAgfSwgZHVyYXRpb24gKyBwYWRkaW5nKTtcbiAgdmFyIHJlbW92ZSA9IGxpc3RlbihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICB9LCB7XG4gICAgb25jZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICByZW1vdmUoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlbGVtZW50LCBoYW5kbGVyLCBkdXJhdGlvbikge1xuICBpZiAoZHVyYXRpb24gPT0gbnVsbCkgZHVyYXRpb24gPSBwYXJzZUR1cmF0aW9uKGVsZW1lbnQpIHx8IDA7XG4gIHZhciByZW1vdmVFbXVsYXRlID0gZW11bGF0ZVRyYW5zaXRpb25FbmQoZWxlbWVudCwgZHVyYXRpb24pO1xuICB2YXIgcmVtb3ZlID0gbGlzdGVuKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kJywgaGFuZGxlcik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmVtb3ZlRW11bGF0ZSgpO1xuICAgIHJlbW92ZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2l0aW9uRW5kOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihFbGVtZW50KVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuXG52YXIgX2ZhZGVTdHlsZXM7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnZG9tLWhlbHBlcnMvdHJhbnNpdGlvbkVuZCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbiwgeyBFTlRFUkVELCBFTlRFUklORyB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7XG5pbXBvcnQgdHJpZ2dlckJyb3dzZXJSZWZsb3cgZnJvbSAnLi90cmlnZ2VyQnJvd3NlclJlZmxvdyc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIHRpbWVvdXQ6IDMwMCxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2Vcbn07XG52YXIgZmFkZVN0eWxlcyA9IChfZmFkZVN0eWxlcyA9IHt9LCBfZmFkZVN0eWxlc1tFTlRFUklOR10gPSAnc2hvdycsIF9mYWRlU3R5bGVzW0VOVEVSRURdID0gJ3Nob3cnLCBfZmFkZVN0eWxlcyk7XG52YXIgRmFkZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpO1xuICAgIGlmIChwcm9wcy5vbkVudGVyKSBwcm9wcy5vbkVudGVyKG5vZGUpO1xuICB9LCBbcHJvcHNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBhZGRFbmRMaXN0ZW5lcjogdHJhbnNpdGlvbkVuZFxuICB9LCBwcm9wcywge1xuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyXG4gIH0pLCBmdW5jdGlvbiAoc3RhdHVzLCBpbm5lclByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcygnZmFkZScsIGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBmYWRlU3R5bGVzW3N0YXR1c10pXG4gICAgfSkpO1xuICB9KTtcbn0pO1xuRmFkZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5GYWRlLmRpc3BsYXlOYW1lID0gJ0ZhZGUnO1xuZXhwb3J0IGRlZmF1bHQgRmFkZTsiLCIvLyByZWFkaW5nIGEgZGltZW5zaW9uIHByb3Agd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byByZWNhbGN1bGF0ZSxcbi8vIHdoaWNoIHdpbGwgbGV0IG91ciBhbmltYXRpb25zIHdvcmtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgbm9kZS5vZmZzZXRIZWlnaHQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGxhYmVsOiAnQ2xvc2UnXG59O1xudmFyIENsb3NlQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImxhYmVsXCIsIFwib25DbGlja1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcygnY2xvc2UnLCBjbGFzc05hbWUpLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgXCJcXHhEN1wiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gIH0sIGxhYmVsKSk7XG59KTtcbkNsb3NlQnV0dG9uLmRpc3BsYXlOYW1lID0gJ0Nsb3NlQnV0dG9uJztcbkNsb3NlQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNsb3NlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENsb3NlQnV0dG9uOyIsInZhciBySHlwaGVuID0gLy0oLikvZztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGNhbWVsaXplIGZyb20gJ2RvbS1oZWxwZXJzL2NhbWVsaXplJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgcGFzY2FsQ2FzZSA9IGZ1bmN0aW9uIHBhc2NhbENhc2Uoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaXplKHN0cikuc2xpY2UoMSk7XG59O1xuXG4vLyBUT0RPOiBlbXN0cmljdGVuICYgZml4IHRoZSB0eXBpbmcgaGVyZSEgYGNyZWF0ZVdpdGhCc1ByZWZpeDxURWxlbWVudFR5cGU+Li4uYFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlV2l0aEJzUHJlZml4KHByZWZpeCwgX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfcmVmJGRpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBwYXNjYWxDYXNlKHByZWZpeCkgOiBfcmVmJGRpc3BsYXlOYW1lLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZi5Db21wb25lbnQsXG4gICAgICBkZWZhdWx0UHJvcHMgPSBfcmVmLmRlZmF1bHRQcm9wcztcblxuICB2YXIgQnNDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgcmVmKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IF9yZWYyLmNsYXNzTmFtZSxcbiAgICAgICAgYnNQcmVmaXggPSBfcmVmMi5ic1ByZWZpeCxcbiAgICAgICAgX3JlZjIkYXMgPSBfcmVmMi5hcyxcbiAgICAgICAgVGFnID0gX3JlZjIkYXMgPT09IHZvaWQgMCA/IENvbXBvbmVudCB8fCAnZGl2JyA6IF9yZWYyJGFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcImFzXCJdKTtcblxuICAgIHZhciByZXNvbHZlZFByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgcHJlZml4KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHJlc29sdmVkUHJlZml4KVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xuICBCc0NvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4gIEJzQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIHJldHVybiBCc0NvbXBvbmVudDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVW5jb250cm9sbGVkIH0gZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnQHJlc3RhcnQvaG9va3MvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcbmltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tICcuL0Nsb3NlQnV0dG9uJztcbmltcG9ydCBkaXZXaXRoQ2xhc3NOYW1lIGZyb20gJy4vZGl2V2l0aENsYXNzTmFtZSc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG52YXIgRGl2U3R5bGVkQXNINCA9IGRpdldpdGhDbGFzc05hbWUoJ2g0Jyk7XG5EaXZTdHlsZWRBc0g0LmRpc3BsYXlOYW1lID0gJ0RpdlN0eWxlZEFzSDQnO1xudmFyIEFsZXJ0SGVhZGluZyA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnYWxlcnQtaGVhZGluZycsIHtcbiAgQ29tcG9uZW50OiBEaXZTdHlsZWRBc0g0XG59KTtcbnZhciBBbGVydExpbmsgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2FsZXJ0LWxpbmsnLCB7XG4gIENvbXBvbmVudDogU2FmZUFuY2hvclxufSk7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiB0cnVlLFxuICB0cmFuc2l0aW9uOiBGYWRlLFxuICBjbG9zZUxhYmVsOiAnQ2xvc2UgYWxlcnQnXG59O1xudmFyIEFsZXJ0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAodW5jb250cm9sbGVkUHJvcHMsIHJlZikge1xuICB2YXIgX3VzZVVuY29udHJvbGxlZCA9IHVzZVVuY29udHJvbGxlZCh1bmNvbnRyb2xsZWRQcm9wcywge1xuICAgIHNob3c6ICdvbkNsb3NlJ1xuICB9KSxcbiAgICAgIGJzUHJlZml4ID0gX3VzZVVuY29udHJvbGxlZC5ic1ByZWZpeCxcbiAgICAgIHNob3cgPSBfdXNlVW5jb250cm9sbGVkLnNob3csXG4gICAgICBjbG9zZUxhYmVsID0gX3VzZVVuY29udHJvbGxlZC5jbG9zZUxhYmVsLFxuICAgICAgY2xhc3NOYW1lID0gX3VzZVVuY29udHJvbGxlZC5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF91c2VVbmNvbnRyb2xsZWQuY2hpbGRyZW4sXG4gICAgICB2YXJpYW50ID0gX3VzZVVuY29udHJvbGxlZC52YXJpYW50LFxuICAgICAgb25DbG9zZSA9IF91c2VVbmNvbnRyb2xsZWQub25DbG9zZSxcbiAgICAgIGRpc21pc3NpYmxlID0gX3VzZVVuY29udHJvbGxlZC5kaXNtaXNzaWJsZSxcbiAgICAgIHRyYW5zaXRpb24gPSBfdXNlVW5jb250cm9sbGVkLnRyYW5zaXRpb24sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF91c2VVbmNvbnRyb2xsZWQsIFtcImJzUHJlZml4XCIsIFwic2hvd1wiLCBcImNsb3NlTGFiZWxcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcInZhcmlhbnRcIiwgXCJvbkNsb3NlXCIsIFwiZGlzbWlzc2libGVcIiwgXCJ0cmFuc2l0aW9uXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnYWxlcnQnKTtcbiAgdmFyIGhhbmRsZUNsb3NlID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZSkge1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGZhbHNlLCBlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgVHJhbnNpdGlvbiA9IHRyYW5zaXRpb24gPT09IHRydWUgPyBGYWRlIDogdHJhbnNpdGlvbjtcbiAgdmFyIGFsZXJ0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IFwiYWxlcnRcIlxuICB9LCBUcmFuc2l0aW9uID8gcHJvcHMgOiB1bmRlZmluZWQsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXgsIHZhcmlhbnQgJiYgcHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBkaXNtaXNzaWJsZSAmJiBwcmVmaXggKyBcIi1kaXNtaXNzaWJsZVwiKVxuICB9KSwgZGlzbWlzc2libGUgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VCdXR0b24sIHtcbiAgICBvbkNsaWNrOiBoYW5kbGVDbG9zZSxcbiAgICBsYWJlbDogY2xvc2VMYWJlbFxuICB9KSwgY2hpbGRyZW4pO1xuICBpZiAoIVRyYW5zaXRpb24pIHJldHVybiBzaG93ID8gYWxlcnQgOiBudWxsO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgIHVubW91bnRPbkV4aXQ6IHRydWVcbiAgfSwgcHJvcHMsIHtcbiAgICByZWY6IHVuZGVmaW5lZCxcbiAgICBpbjogc2hvd1xuICB9KSwgYWxlcnQpO1xufSk7XG5BbGVydC5kaXNwbGF5TmFtZSA9ICdBbGVydCc7XG5BbGVydC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5BbGVydC5MaW5rID0gQWxlcnRMaW5rO1xuQWxlcnQuSGVhZGluZyA9IEFsZXJ0SGVhZGluZztcbmV4cG9ydCBkZWZhdWx0IEFsZXJ0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgcmV0dXJuIFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHAsIHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgcCwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMocC5jbGFzc05hbWUsIGNsYXNzTmFtZSlcbiAgICB9KSk7XG4gIH0pO1xufSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwibG9nXCI7XG5cbmNvbnN0IExPRyA9IGdldExvZ2dlcigpO1xuXG5pbXBvcnQgeyBTYW1wbGUsIFJlY29yZGluZyB9IGZyb20gXCJwaXRjaC9waXRjaFwiO1xuaW1wb3J0IHsgUGl0Y2ggfSBmcm9tIFwicGl0Y2gvbm90ZXNcIjtcblxudHlwZSBTdW1tYXJ5UHJvcHMgPSB7XG4gIHJlY29yZGluZzogUmVjb3JkaW5nO1xuICByZWZlcmVuY2U6IFBpdGNoO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFN1bW1hcnkoeyByZWNvcmRpbmcsIHJlZmVyZW5jZSB9OiBTdW1tYXJ5UHJvcHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gcmVjb3JkaW5nXG4gICAgLmZpbHRlcigocz86IFNhbXBsZSkgPT4gISFzKVxuICAgIC5tYXAoKHM6IFNhbXBsZSkgPT4gcyEuZnJlcXVlbmN5IC0gcmVmZXJlbmNlLmZyZXF1ZW5jeSk7XG4gIGNvbnN0IHN1bSA9IHJlc3VsdC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcblxuICByZXR1cm4gKFxuICAgIDxBbGVydCB2YXJpYW50PXtcInN1Y2Nlc3NcIn0+XG4gICAgICBSZWNlaXZlZCB7cmVzdWx0Lmxlbmd0aH0gc2FtcGxlKHMpIGF2ZXJhZ2luZyB0byB7c3VtIC8gcmVzdWx0Lmxlbmd0aH0gZnJvbVxuICAgICAgQzQuXG4gICAgPC9BbGVydD5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwibG9nXCI7XG5cbmltcG9ydCB7IG1sNVBpdGNoRGV0ZWN0aW9uLCBQaXRjaEdlbmVyYXRvciwgUmVjb3JkaW5nIH0gZnJvbSBcInBpdGNoL3BpdGNoXCI7XG5pbXBvcnQgeyBQaXRjaCwgbm90ZSwgbm90ZVRvRnJlcSB9IGZyb20gXCJwaXRjaC9ub3Rlc1wiO1xuXG5pbXBvcnQgeyBQaXRjaFJlY29yZGVyIH0gZnJvbSBcIi4vUGl0Y2hSZWNvcmRlclwiO1xuaW1wb3J0IHsgU3VtbWFyeSB9IGZyb20gXCIuL1N1bW1hcnlcIjtcblxuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5jb25zdCBQaXRjaERldGVjdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgW3N0YXJ0ZWQsIHNldElzU3RhcnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gQXVkaW8gaW50ZXJmYWNlc1xuICBjb25zdCBbYXVkaW9Db250ZXh0LCBfXSA9IHVzZVN0YXRlKG5ldyBBdWRpb0NvbnRleHQoKSk7IC8vIHJlYWQtb25seVxuICBjb25zdCBbc3RyZWFtLCBzZXRTdHJlYW1dID0gdXNlU3RhdGU8TWVkaWFTdHJlYW0+KCk7XG4gIGNvbnN0IFtwaXRjaERldGVjdGlvbkdlbmVyYXRvciwgc2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3JdID0gdXNlU3RhdGU8XG4gICAgUGl0Y2hHZW5lcmF0b3JcbiAgPigpO1xuICBjb25zdCBbcmVjb3JkaW5nLCBzZXRSZWNvcmRpbmddID0gdXNlU3RhdGU8UmVjb3JkaW5nPigpO1xuXG4gIC8vIFNldCB1cCB0aGUgbWljcm9waG9uZS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMT0cuaW5mbyhcIkFjcXVpcmluZyBtaWNyb3Bob25lLlwiKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzXG4gICAgICAuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAudGhlbigobmV3U3RyZWFtKSA9PiB7XG4gICAgICAgIExPRy5kZWJ1ZyhcIk1pY3JvcGhvbmUgaW5pdGlhbGl6ZWQgd2l0aCBzdHJlYW06ICVqLlwiLCBuZXdTdHJlYW0pO1xuICAgICAgICBMT0cuZGVidWcoXCJOZXcgc3RyZWFtIGlzIGFjdGl2ZT8gJWpcIiwgbmV3U3RyZWFtLmFjdGl2ZSk7XG4gICAgICAgIHNldFN0cmVhbShuZXdTdHJlYW0pO1xuICAgICAgfSk7XG4gIH0sIFtzdGFydGVkXSk7XG5cbiAgLy8gQ29uZmlndXJlIHRoZSBhdWRpbyBzdHJlYW0uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdGFydGVkIHx8IHN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgTE9HLmluZm8oXCJTZXR0aW5nIHVwIHRoZSBjb250ZXh0ICVqIGFuZCBzdHJlYW0gJWpcIiwgYXVkaW9Db250ZXh0LCBzdHJlYW0pO1xuICAgIGF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0pO1xuXG4gICAgTE9HLmluZm8oXCJJbml0aWFsaXplZCBhdWRpby5cIik7XG4gICAgc2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3IobWw1UGl0Y2hEZXRlY3Rpb24oYXVkaW9Db250ZXh0LCBzdHJlYW0pKTtcbiAgICBhdWRpb0NvbnRleHQucmVzdW1lKCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgTE9HLmluZm8oXCJDbGVhbnVwIHRoZSBhdWRpbyBzZXR0aW5nc1wiKTtcblxuICAgICAgTE9HLmRlYnVnKFwiU3RvcCBhbGwgdHJhY2tzIGluIHRoZSBzdHJlYW0gJWouXCIsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0/LmdldFRyYWNrcygpLmZvckVhY2goKHQpID0+IHQuc3RvcCgpKTtcblxuICAgICAgTE9HLmRlYnVnKFwiU3VzcGVuZCBhdWRpbyBjb250ZXh0ICVqLlwiLCBhdWRpb0NvbnRleHQpO1xuICAgICAgYXVkaW9Db250ZXh0LnN1c3BlbmQoKTtcbiAgICB9O1xuICB9LCBbc3RyZWFtLCBzdGFydGVkXSk7XG5cbiAgaWYgKHJlY29yZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgcmVmZXJlbmNlUGl0Y2ggPSBub3RlKG5vdGVUb0ZyZXEoNjApKSBhcyBQaXRjaDtcblxuICAgIHJldHVybiA8U3VtbWFyeSByZWNvcmRpbmc9e3JlY29yZGluZ30gcmVmZXJlbmNlPXtyZWZlcmVuY2VQaXRjaH0gLz47XG4gIH0gZWxzZSBpZiAoc3RhcnRlZCAmJiBwaXRjaERldGVjdGlvbkdlbmVyYXRvcikge1xuICAgIHJldHVybiAoXG4gICAgICA8UGl0Y2hSZWNvcmRlclxuICAgICAgICBvbkZpbmlzaD17KHJlc3VsdCkgPT4ge1xuICAgICAgICAgIExPRy5pbmZvKFwiUmVzdWx0XCIsIHJlc3VsdCk7XG4gICAgICAgICAgc2V0SXNTdGFydGVkKGZhbHNlKTtcbiAgICAgICAgICBzZXRSZWNvcmRpbmcocmVjb3JkaW5nKTtcbiAgICAgICAgfX1cbiAgICAgICAgcGl0Y2hHZW5lcmF0b3I9e3BpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yfVxuICAgICAgICB0aW1lb3V0TXM9ezEwMDAwfVxuICAgICAgLz5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICA8QnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzU3RhcnRlZCh0cnVlKX1cbiAgICAgICAgdmFyaWFudD1cIm91dGxpbmUtcHJpbWFyeVwiXG4gICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICA+XG4gICAgICAgIFN0YXJ0XG4gICAgICA8L0J1dHRvbj5cbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgeyBQaXRjaERldGVjdGlvbiB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBmbHVpZDogZmFsc2Vcbn07XG52YXIgQ29udGFpbmVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBmbHVpZCA9IF9yZWYuZmx1aWQsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiRhcyxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImZsdWlkXCIsIFwiYXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHZhciBwcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdjb250YWluZXInKTtcbiAgdmFyIHN1ZmZpeCA9IHR5cGVvZiBmbHVpZCA9PT0gJ3N0cmluZycgPyBcIi1cIiArIGZsdWlkIDogJy1mbHVpZCc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGZsdWlkID8gXCJcIiArIHByZWZpeCArIHN1ZmZpeCA6IHByZWZpeClcbiAgfSkpO1xufSk7XG5Db250YWluZXIuZGlzcGxheU5hbWUgPSAnQ29udGFpbmVyJztcbkNvbnRhaW5lci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBDb250YWluZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgREVWSUNFX1NJWkVTID0gWyd4bCcsICdsZycsICdtZCcsICdzbScsICd4cyddO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbm9HdXR0ZXJzOiBmYWxzZVxufTtcbnZhciBSb3cgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgbm9HdXR0ZXJzID0gX3JlZi5ub0d1dHRlcnMsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiRhcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJub0d1dHRlcnNcIiwgXCJhc1wiXSk7XG5cbiAgdmFyIGRlY29yYXRlZEJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAncm93Jyk7XG4gIHZhciBzaXplUHJlZml4ID0gZGVjb3JhdGVkQnNQcmVmaXggKyBcIi1jb2xzXCI7XG4gIHZhciBjbGFzc2VzID0gW107XG4gIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChicmtQb2ludCkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1ticmtQb2ludF07XG4gICAgZGVsZXRlIHByb3BzW2Jya1BvaW50XTtcbiAgICB2YXIgY29scztcblxuICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgY29scyA9IHByb3BWYWx1ZS5jb2xzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xzID0gcHJvcFZhbHVlO1xuICAgIH1cblxuICAgIHZhciBpbmZpeCA9IGJya1BvaW50ICE9PSAneHMnID8gXCItXCIgKyBicmtQb2ludCA6ICcnO1xuICAgIGlmIChjb2xzICE9IG51bGwpIGNsYXNzZXMucHVzaChcIlwiICsgc2l6ZVByZWZpeCArIGluZml4ICsgXCItXCIgKyBjb2xzKTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5hcHBseSh2b2lkIDAsIFtjbGFzc05hbWUsIGRlY29yYXRlZEJzUHJlZml4LCBub0d1dHRlcnMgJiYgJ25vLWd1dHRlcnMnXS5jb25jYXQoY2xhc3NlcykpXG4gIH0pKTtcbn0pO1xuUm93LmRpc3BsYXlOYW1lID0gJ1Jvdyc7XG5Sb3cuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgUm93OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIERFVklDRV9TSVpFUyA9IFsneGwnLCAnbGcnLCAnbWQnLCAnc20nLCAneHMnXTtcbnZhciBDb2wgPSBSZWFjdC5mb3J3YXJkUmVmKCAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG5mdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnY29sJyk7XG4gIHZhciBzcGFucyA9IFtdO1xuICB2YXIgY2xhc3NlcyA9IFtdO1xuICBERVZJQ0VfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoYnJrUG9pbnQpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbYnJrUG9pbnRdO1xuICAgIGRlbGV0ZSBwcm9wc1ticmtQb2ludF07XG4gICAgdmFyIHNwYW47XG4gICAgdmFyIG9mZnNldDtcbiAgICB2YXIgb3JkZXI7XG5cbiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcgJiYgcHJvcFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciBfcHJvcFZhbHVlJHNwYW4gPSBwcm9wVmFsdWUuc3BhbjtcbiAgICAgIHNwYW4gPSBfcHJvcFZhbHVlJHNwYW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcFZhbHVlJHNwYW47XG4gICAgICBvZmZzZXQgPSBwcm9wVmFsdWUub2Zmc2V0O1xuICAgICAgb3JkZXIgPSBwcm9wVmFsdWUub3JkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwYW4gPSBwcm9wVmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGluZml4ID0gYnJrUG9pbnQgIT09ICd4cycgPyBcIi1cIiArIGJya1BvaW50IDogJyc7XG4gICAgaWYgKHNwYW4pIHNwYW5zLnB1c2goc3BhbiA9PT0gdHJ1ZSA/IFwiXCIgKyBwcmVmaXggKyBpbmZpeCA6IFwiXCIgKyBwcmVmaXggKyBpbmZpeCArIFwiLVwiICsgc3Bhbik7XG4gICAgaWYgKG9yZGVyICE9IG51bGwpIGNsYXNzZXMucHVzaChcIm9yZGVyXCIgKyBpbmZpeCArIFwiLVwiICsgb3JkZXIpO1xuICAgIGlmIChvZmZzZXQgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKFwib2Zmc2V0XCIgKyBpbmZpeCArIFwiLVwiICsgb2Zmc2V0KTtcbiAgfSk7XG5cbiAgaWYgKCFzcGFucy5sZW5ndGgpIHtcbiAgICBzcGFucy5wdXNoKHByZWZpeCk7IC8vIHBsYWluICdjb2wnXG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMuYXBwbHkodm9pZCAwLCBbY2xhc3NOYW1lXS5jb25jYXQoc3BhbnMsIGNsYXNzZXMpKVxuICB9KSk7XG59KTtcbkNvbC5kaXNwbGF5TmFtZSA9ICdDb2wnO1xuZXhwb3J0IGRlZmF1bHQgQ29sOyIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzXCI7XG5pbXBvcnQgXCIuL0FwcC5jc3NcIjtcblxuaW1wb3J0IHsgUGl0Y2hEZXRlY3Rpb24gfSBmcm9tIFwiLi9jb21wb25lbnRzL1BpdGNoRGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBDb250YWluZXIsIFJvdywgQ29sIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xuXG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwibG9nXCI7XG5jb25zdCBMT0cgPSBnZXRMb2dnZXIoKTtcblxuZXhwb3J0IGNvbnN0IEFwcCA9ICgpID0+IHtcbiAgTE9HLmluZm8oXCJTdGFydGluZyBhcHAuXCIpXG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxSb3cgYXM9XCJoZWFkZXJcIiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8aDEgY2xhc3NOYW1lPXtjbHN4KFwiZGlzcGxheS0xXCIsIFwibXQtNVwiLCBcInRpdGxlXCIpfT52b2NhbGx5PC9oMT5cbiAgICAgICAgPGgyPlxuICAgICAgICAgIHNpbmcgQzxzdWI+NDwvc3ViPlxuICAgICAgICA8L2gyPlxuICAgICAgPC9Sb3c+XG5cbiAgICAgIDxSb3cgYXM9XCJzZWN0aW9uXCIgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgPENvbD5cbiAgICAgICAgICA8UGl0Y2hEZXRlY3Rpb24gLz5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cblxuICAgICAgPFJvdyBhcz1cImZvb3RlclwiPjwvUm93PlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vQXBwXCI7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwPjwvQXBwPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==