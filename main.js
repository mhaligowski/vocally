!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t){e.exports=React},function(e,t){e.exports=ReactBootstrap},function(e,t){e.exports=PropTypes},function(e,t){e.exports=Sentry},function(e,t,n){"use strict";function r(e){return"[object String]"===Object.prototype.toString.call(e)}function o(e){return"[object RegExp]"===Object.prototype.toString.call(e)}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(4);function r(e,t){var n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);var o=Math.max(t-60,0);o<5&&(o=0);var i=Math.min(o+140,r);return i>r-5&&(i=r),i===r&&(o=Math.max(i-140,0)),n=n.slice(o,i),o>0&&(n="'{snip} "+n),i<r&&(n+=" {snip}"),n}},function(e,t){e.exports=ReactDOM},function(e,t){e.exports=LogRocket},function(e,t){e.exports=Sentry.Integrations},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){o({ResponderEventPlugin:{extractEvents:function(e,t,n,r){try{if("click"!==e||!n||!r)return;for(var o=n,i=[];o;){var a="function"==typeof o.elementType&&o.elementType.displayName;a&&i.push(a),o=o.return}r.__lrName=i}catch(e){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(6),o=void 0,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;o=i&&i.Events&&i.Events[3]?i.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},e.exports=t.default},function(e,t,n){"use strict";var r=n(16),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function u(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var l=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=d(n);o&&o!==m&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var c=u(t),y=u(n),h=0;h<a.length;++h){var v=a[h];if(!(i[v]||r&&r[v]||y&&y[v]||c&&c[v])){var b=p(n,v);try{l(t,v,b)}catch(e){}}}}return t}},,function(e,t,n){var r=n(13),o=n(14);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var f=c(s),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:s,updater:h(p,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,y=0;function h(e,t){var n,r,o;if(t.singleton){var i=y++;n=m||(m=l(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=l(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(e,t),l=0;l<n.length;l++){var s=c(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";e.exports=n(17)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,S=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case u:case c:case m:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case h:case l:return e;default:return t}}case i:return t}}}function j(e){return O(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=l,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=h,t.Portal=i,t.Profiler=u,t.StrictMode=c,t.Suspense=m,t.isAsyncMode=function(e){return j(e)||O(e)===f},t.isConcurrentMode=j,t.isContextConsumer=function(e){return O(e)===s},t.isContextProvider=function(e){return O(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===d},t.isFragment=function(e){return O(e)===a},t.isLazy=function(e){return O(e)===v},t.isMemo=function(e){return O(e)===h},t.isPortal=function(e){return O(e)===i},t.isProfiler=function(e){return O(e)===u},t.isStrictMode=function(e){return O(e)===c},t.isSuspense=function(e){return O(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===u||e===c||e===m||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===l||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===S||e.$$typeof===w||e.$$typeof===b)},t.typeOf=O},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,l=[],s=!1,f=-1;function p(){s&&u&&(s=!1,u.length?l=u.concat(l):f=-1,l.length&&d())}function d(){if(!s){var e=c(p);s=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new m(e,t)),1!==l.length||s||c(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(6),a=n(3),c=n(8),u=n(7),l=n.n(u),s=n(9),f=n.n(s);n(12);function p(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=p(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var d=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=p(e))&&(r&&(r+=" "),r+=t);return r},m=function(){return console},y=n(1),h=function(e,t){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function v(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}var b=n(24),g=(n(10),{id:"Tracing"}),S=null;!function(e){function t(t){var n=e.call(this,t)||this;n._mountActivity=null,n._mountSpan=void 0;var r=n.props,o=r.name,i=r.disabled;if(void 0!==i&&i)return n;if(S||(S=Object(a.getCurrentHub)().getIntegration(g)))n._mountActivity=function(e,t){return null===S?null:S.constructor.pushActivity(e,{description:"<"+e+">",op:"react."+t})}(o,"mount");else{var c=w();c&&(n._mountSpan=c.startChild({description:"<"+o+">",op:"react.mount"}))}return n}(function(e,t){function n(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)})(t,e),t.prototype.componentDidMount=function(){var e;this._mountSpan?this._mountSpan.finish():(this._mountSpan=function(e){if(null!==e&&null!==S)return S.constructor.getActivitySpan(e)}(this._mountActivity),null!==(e=this._mountActivity)&&null!==S&&S.constructor.popActivity(e),this._mountActivity=null)},t.prototype.componentDidUpdate=function(e){var t=this,n=e.updateProps,r=e.includeUpdates;if((void 0===r||r)&&this._mountSpan&&n!==this.props.updateProps){var o=Object.keys(n).filter((function(e){return n[e]!==t.props.updateProps[e]}));if(o.length>0){var i=Object(b.a)();this._mountSpan.startChild({data:{changedProps:o},description:"<"+this.props.name+">",endTimestamp:i,op:"react.update",startTimestamp:i})}}},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.name,n=e.includeRender,r=void 0===n||n;this._mountSpan&&r&&this._mountSpan.startChild({description:"<"+t+">",endTimestamp:Object(b.a)(),op:"react.render",startTimestamp:this._mountSpan.endTimestamp})},t.prototype.render=function(){return this.props.children},t.defaultProps={disabled:!1,includeRender:!0,includeUpdates:!0}}(r.Component);function w(e){if(void 0===e&&(e=Object(a.getCurrentHub)()),e){var t=e.getScope();if(t)return t.getTransaction()}}n(15);var O=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],j=function(e){return 440*Math.pow((e-69)/12,2)},E=function(e){return 69+12*Math.log2(e/440)},x=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._freq=t,this.note=Math.round(E(t)),this.frequency=j(this.note),this.name=function(e){return O[(e-21)%12]}(this.note),this.octave=function(e){return Math.floor(e/12-1)}(this.note)},T=function(e){if(null==e)return null;var t,n,r=new x(e);return{frequency:e,target:r,note:E(e),diff:(t=r.frequency,n=e,1200*Math.log2(n/t))}},_=function(e){return this instanceof _?(this.v=e,this):new _(e)},C=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof _?Promise.resolve(n.value.v).then(u,l):s(i[0][2],n)}catch(e){s(i[0][3],e)}var n}function u(e){c("next",e)}function l(e){c("throw",e)}function s(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}},P=m(),M="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return k(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $=function(e){var t=A(Object(r.useState)(!1),2),n=t[0],o=t[1],i=A(Object(r.useState)(),2),a=i[0],c=i[1];return Object(r.useEffect)((function(){var t=!0;return e.generator.next().then((function(e){!e.done&&t&&(c(e.value||void 0),o(!n))})),function(){t=!1}}),[n]),Object(r.useEffect)((function(){e.onTick&&a&&e.onTick(a)}),[a]),"function"==typeof e.children?e.children(a):e.children};function R(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return I(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var N=m();function L(e){var t=e.pitchGenerator,n=e.timeoutMs,i=e.onFinish,a=R(Object(r.useState)([]),2),c=a[0],u=a[1],l=R(Object(r.useState)(!1),2),s=l[0],f=l[1],p=R(Object(r.useState)(!1),2),d=p[0],m=p[1];Object(r.useEffect)((function(){if(!s)return function(){};N.info("Setting up the timeout.");var e=setTimeout((function(){m(!0),f(!1)}),n);return N.info("Set up timer %d for %d ms.",e,n),function(){N.info("Clearing out the timeout %d.",e),clearTimeout(e)}}),[s]),Object(r.useEffect)((function(){d&&(N.info("Finishing recording."),i(c))}),[d,c]);var h=s?o.a.createElement(y.Spinner,{animation:"grow",variant:"danger"}):o.a.createElement("span",null,"sing now!");return t?o.a.createElement($,{generator:t,onTick:function(e){var t=c.concat([e]);u(t),s||f(!0)}},o.a.createElement("h3",null,h)):o.a.createElement(y.Spinner,{animation:"border",variant:"primary"})}var z=n(2),D=n.n(z);function F(){return(F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function B(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var U=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,i=B(e,["color","size"]);return o.a.createElement("svg",F({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},i),o.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));U.propTypes={color:D.a.string,size:D.a.oneOfType([D.a.string,D.a.number])},U.defaultProps={color:"currentColor",size:"1em"};var q=U;function G(){return(G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function H(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var W=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,i=H(e,["color","size"]);return o.a.createElement("svg",G({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},i),o.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));W.propTypes={color:D.a.string,size:D.a.oneOfType([D.a.string,D.a.number])},W.defaultProps={color:"currentColor",size:"1em"};var J=W;function V(e){for(var t=e.no,n=e.of,r=[],i=0;i<n;i+=1)r.push(i<=t?o.a.createElement(q,null):o.a.createElement(J,null));return o.a.createElement("div",{className:d("text-primary","display-3")},r)}var Y=function(e,t){return e+t},K=function(e){var t,n=e.recording,r=e.reference,i=n.filter((function(e){return!!e})),a=i.map((function(e){return e.frequency-r.frequency})).reduce(Y,0)/i.length,c=i.map((function(e){return Math.abs(e.note-r.note)})).reduce(Y,0)/i.length;return t=c<=.5?5:c<=1?4:c<=2?3:c<=4?2:c<=7?1:0,o.a.createElement(y.Container,null,o.a.createElement(y.Row,null,o.a.createElement(y.Col,{className:"pb-3"},o.a.createElement(V,{no:t,of:5}))),o.a.createElement(y.Row,null,o.a.createElement(y.Col,{className:d("col-md-6","offset-md-3")},o.a.createElement(y.Alert,{variant:"success"},"Received ",i.length," sample(s) averaging to ",a," from C",o.a.createElement("sub",null,"4"),"."))))};function Q(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return X(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Z=m(),ee=function(){!function(e,t){void 0===t&&(t={disabled:!1,hasRenderSpan:!0});var n=v(r.useState((function(){if(!t||!t.disabled){var n=w();return n?n.startChild({description:"<"+e+">",op:"react.mount"}):void 0}})),1)[0];r.useEffect((function(){return n&&n.finish(),function(){n&&t.hasRenderSpan&&n.startChild({description:"<"+e+">",endTimestamp:Object(b.a)(),op:"react.render",startTimestamp:n.endTimestamp})}}),[])}("PitchDetection");var e=Q(Object(r.useState)(!1),2),t=e[0],n=e[1],i=Q(Object(r.useState)(new AudioContext),1)[0],a=Q(Object(r.useState)(),2),c=a[0],u=a[1],l=Q(Object(r.useState)(),2),s=l[0],f=l[1],p=Q(Object(r.useState)(),2),d=p[0],m=p[1];if(Object(r.useEffect)((function(){t&&(Z.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){Z.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),u(e)})))}),[t]),Object(r.useEffect)((function(){return t&&void 0!==c?(Z.info("Setting up the context %j and stream %j",i,c),i.createMediaStreamSource(c),Z.info("Initialized audio."),f(function(e,t){return C(this,arguments,regeneratorRuntime.mark((function n(){var r,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=ml5.pitchDetection(M,e,t),P.info("Created pitch detection.",r),n.next=4,_(r.ready);case 4:P.info("Initialized the model.");case 5:if(!t.active||"running"!==e.state){n.next=19;break}return n.next=8,_(r.getPitch());case 8:if(null!==(o=n.sent)){n.next=13;break}P.debug("Skipping"),n.next=17;break;case 13:return n.next=15,_(T(o));case 15:return n.next=17,n.sent;case 17:n.next=5;break;case 19:case"end":return n.stop()}}),n)})))}(i,c)),i.resume(),function(){Z.info("Cleanup the audio settings"),Z.debug("Stop all tracks in the stream %j.",c),null==c||c.getTracks().forEach((function(e){return e.stop()})),Z.debug("Suspend audio context %j.",i),i.suspend()}):function(){}}),[c,t]),void 0!==d){var h=T(j(60));return o.a.createElement(K,{recording:d,reference:h})}return t&&s?o.a.createElement(L,{onFinish:function(e){Z.info("Result, %j",e),m(e),n(!1)},pitchGenerator:s,timeoutMs:5e3}):o.a.createElement(y.Button,{onClick:function(){return n(!0)},variant:"outline-primary",size:"lg"},"click to start")},te=m(),ne=function(){return te.info("Starting app."),o.a.createElement(y.Container,null,o.a.createElement("header",{className:d("text-center","mt-5")},o.a.createElement("h1",{className:d("display-1","text-primary","title")},"vocally"),o.a.createElement("h2",{className:"text-secondary"},"sing C",o.a.createElement("sub",null,"4"),"!")),o.a.createElement("main",{className:d("text-center","py-5"),role:"main"},o.a.createElement(ee,null)),o.a.createElement("footer",{className:d("py-3","border-top","text-muted")},o.a.createElement(y.Container,null,o.a.createElement("p",null,"vocally.app 2020"))))};a.init({dsn:"https://ffe439ac65b84889a37518037a23a7b1@o433557.ingest.sentry.io/5388917",release:"testing",environment:"testing",integrations:[new c.CaptureConsole({levels:["info"]}),new a.Integrations.BrowserTracing]}),l.a.init("6ayqi7/vocallytest",{release:"testing"}),f()(l.a),i.render(r.createElement(ne,null),document.getElementById("app"))},,,function(e,t,n){"use strict";(function(e,r,o){n.d(t,"a",(function(){return p}));n(4),n(5);function i(){return"[object process]"===Object.prototype.toString.call(void 0!==e?e:0)}var a={};function c(){return i()?r:"undefined"!=typeof window?window:"undefined"!=typeof self?self:a}var u=Date.now(),l=0,s={now:function(){var e=Date.now()-u;return e<l&&(e=l),l=e,e},timeOrigin:u},f=function(){if(i())try{return(e="perf_hooks",o.require(e)).performance}catch(e){return s}var e,t=c().performance;return t&&t.now?(void 0===t.timeOrigin&&(t.timeOrigin=t.timing&&t.timing.navigationStart||u),t):s}();function p(){return(f.timeOrigin+f.now())/1e3}}).call(this,n(18),n(19),n(20)(e))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdEJvb3RzdHJhcFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIlByb3BUeXBlc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcIlNlbnRyeVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vc3RyaW5nLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiTG9nUm9ja2V0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiU2VudHJ5LkludGVncmF0aW9uc1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dyb2NrZXQtcmVhY3QvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1sNVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlLWxpYnMtYnJvd3Nlci9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2cudGVzdGluZy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9yZWFjdC9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3JlYWN0L2VzbS9wcm9maWxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGl0Y2gvbm90ZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BpdGNoL3BpdGNoLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0dlbmVyYXRvckNvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGl0Y2hSZWNvcmRlci50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC1pY29ucy9kaXN0L2ljb25zL3N0YXItZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwLWljb25zL2Rpc3QvaWNvbnMvc3Rhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TdW1tYXJ5LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QaXRjaERldGVjdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luaXQudGVzdGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9taXNjLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUmVhY3QiLCJSZWFjdEJvb3RzdHJhcCIsIlByb3BUeXBlcyIsIlNlbnRyeSIsImlzU3RyaW5nIiwid2F0IiwidG9TdHJpbmciLCJpc1JlZ0V4cCIsInNuaXBMaW5lIiwibGluZSIsImNvbG5vIiwibmV3TGluZSIsImxsIiwibGVuZ3RoIiwic3RhcnQiLCJNYXRoIiwibWF4IiwiZW5kIiwibWluIiwic2xpY2UiLCJSZWFjdERPTSIsIkxvZ1JvY2tldCIsIkludGVncmF0aW9ucyIsImRlZmF1bHQiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJSZXNwb25kZXJFdmVudFBsdWdpbiIsImV4dHJhY3RFdmVudHMiLCJ0b3BMZXZlbFR5cGUiLCJ0YXJnZXRJbnN0IiwiZmliZXJOb2RlIiwibmF0aXZlRXZlbnQiLCJjdXJyZW50RWxlbWVudCIsIm5hbWVzIiwiZWxlbWVudFR5cGUiLCJkaXNwbGF5TmFtZSIsInB1c2giLCJyZXR1cm4iLCJfX2xyTmFtZSIsImVycm9yIiwiY29uc29sZSIsIl9yZWFjdERvbSIsInNlY3JldCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiRXZlbnRzIiwid2FybiIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiZSIsImFwaSIsImNvbnRlbnQiLCJvcHRpb25zIiwibG9jYWxzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwibWw1IiwiYiIsImZvciIsImYiLCJnIiwiaCIsImsiLCJxIiwidiIsInciLCJ4IiwieSIsInoiLCJhIiwidSIsIiQkdHlwZW9mIiwiQSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwidGhpcyIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIkZ1bmN0aW9uIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjaGlsZHJlbiIsInRvVmFsIiwibWl4Iiwic3RyIiwiaXNBcnJheSIsInRtcCIsImV4dGVuZFN0YXRpY3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9fcmVhZCIsIml0ZXJhdG9yIiwiYXIiLCJuZXh0IiwiZG9uZSIsIlRSQUNJTkdfR0VUVEVSIiwiZ2xvYmFsVHJhY2luZ0ludGVncmF0aW9uIiwiX3N1cGVyIiwicHJvcHMiLCJfdGhpcyIsIl9tb3VudEFjdGl2aXR5IiwiX21vdW50U3BhbiIsInVuZGVmaW5lZCIsIl9hIiwiX2IiLCJkaXNhYmxlZCIsImdldEludGVncmF0aW9uIiwib3AiLCJjb25zdHJ1Y3RvciIsInB1c2hBY3Rpdml0eSIsImRlc2NyaXB0aW9uIiwiYWN0aXZlVHJhbnNhY3Rpb24iLCJnZXRBY3RpdmVUcmFuc2FjdGlvbiIsInN0YXJ0Q2hpbGQiLCJfXyIsIl9fZXh0ZW5kcyIsImNvbXBvbmVudERpZE1vdW50IiwiYWN0aXZpdHkiLCJmaW5pc2giLCJnZXRBY3Rpdml0eVNwYW4iLCJwb3BBY3Rpdml0eSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInVwZGF0ZVByb3BzIiwiaW5jbHVkZVVwZGF0ZXMiLCJjaGFuZ2VkUHJvcHMiLCJub3ciLCJkYXRhIiwiZW5kVGltZXN0YW1wIiwic3RhcnRUaW1lc3RhbXAiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImluY2x1ZGVSZW5kZXIiLCJodWIiLCJzY29wZSIsImdldFNjb3BlIiwiZ2V0VHJhbnNhY3Rpb24iLCJub3RlcyIsIm5vdGVUb0ZyZXEiLCJub3RlIiwiZnJlcVRvTm90ZSIsImZyZXEiLCJsb2cyIiwiTm90ZSIsIl9mcmVxIiwicm91bmQiLCJmcmVxdWVuY3kiLCJvY3RhdmUiLCJmbG9vciIsImRpZmYiLCJMT0ciLCJNT0RFTF9VUkwiLCJmbGFnIiwic2V0RmxhZyIsImN1cnJlbnRWYWx1ZSIsInNldEN1cnJlbnRWYWx1ZSIsIm1vdW50ZWQiLCJnZW5lcmF0b3IiLCJ0aGVuIiwib25UaWNrIiwiUGl0Y2hSZWNvcmRlciIsInBpdGNoR2VuZXJhdG9yIiwidGltZW91dE1zIiwib25GaW5pc2giLCJyZWNvcmRpbmciLCJzZXRSZWNvcmRpbmciLCJzdGFydGVkIiwic2V0U3RhcnRlZCIsImZpbmlzaGVkIiwic2V0RmluaXNoZWQiLCJpbmZvIiwibGFiZWwiLCJhbmltYXRpb24iLCJ2YXJpYW50IiwibmV3UmVjb3JkaW5nIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzb3VyY2UiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJpbmRleE9mIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTdGFyRmlsbCIsIl9yZWYiLCJyZWYiLCJjb2xvciIsInNpemUiLCJyZXN0IiwieG1sbnMiLCJ2aWV3Qm94Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwic3RyaW5nIiwib25lT2ZUeXBlIiwibnVtYmVyIiwiU3RhciIsImZpbGxSdWxlIiwiUmF0aW5nIiwibm8iLCJvZiIsInN0YXJzIiwiY2xhc3NOYW1lIiwic3VtIiwic3RhckNvdW50IiwicmVmZXJlbmNlIiwibm9uRW1wdHkiLCJmcmVxUmVzdWx0IiwibWFwIiwicmVkdWNlIiwibWlkaVJlc3VsdCIsImFicyIsImhhc1JlbmRlclNwYW4iLCJtb3VudFNwYW4iLCJzZXRJc1N0YXJ0ZWQiLCJhdWRpb0NvbnRleHQiLCJBdWRpb0NvbnRleHQiLCJzdHJlYW0iLCJzZXRTdHJlYW0iLCJwaXRjaERldGVjdGlvbkdlbmVyYXRvciIsInNldFBpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwiYXVkaW8iLCJ2aWRlbyIsIm5ld1N0cmVhbSIsImRlYnVnIiwiYWN0aXZlIiwiZ2V0QXVkaW9UcmFja3MiLCJyZWFkeVN0YXRlIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJjdHgiLCJwaXRjaERldGVjdGlvbiIsInJlYWR5Iiwic3RhdGUiLCJnZXRQaXRjaCIsInBpdGNoIiwibWw1UGl0Y2hEZXRlY3Rpb24iLCJyZXN1bWUiLCJnZXRUcmFja3MiLCJzdG9wIiwic3VzcGVuZCIsInJlZmVyZW5jZVBpdGNoIiwiU3VtbWFyeSIsIm9uQ2xpY2siLCJyb2xlIiwiZHNuIiwicmVsZWFzZSIsImVudmlyb25tZW50IiwiaW50ZWdyYXRpb25zIiwibGV2ZWxzIiwiQnJvd3NlclRyYWNpbmciLCJpbml0IiwiZ2V0RWxlbWVudEJ5SWQiLCJpc05vZGVFbnYiLCJmYWxsYmFja0dsb2JhbE9iamVjdCIsImdldEdsb2JhbE9iamVjdCIsImdsb2JhbCIsInNlbGYiLCJJTklUSUFMX1RJTUUiLCJEYXRlIiwicHJldk5vdyIsInBlcmZvcm1hbmNlRmFsbGJhY2siLCJ0aW1lT3JpZ2luIiwiY3Jvc3NQbGF0Zm9ybVBlcmZvcm1hbmNlIiwicmVxdWVzdCIsInJlcXVpcmUiLCJwZXJmb3JtYW5jZSIsIl8iLCJ0aW1pbmciLCJuYXZpZ2F0aW9uU3RhcnQiLCJ0aW1lc3RhbXBXaXRoTXMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVB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TTBJLElBQ04xSSxFQUFNMEksR0FFVkEsRUFBVTFJLEVBQ0hBLEdBRVg0SSxXQUFZSixHQUVMSyxFQUEyQixXQUNsQyxHQUFJVixJQUNBLElBRUksT0FqUndCVyxFQWdSZSxhQUFSbmUsRUE5UTVCb2UsUUFBUUQsSUErUU1FLFlBRXJCLE1BQU9DLEdBQ0gsT0FBT04sRUFwUlosSUFBNkJHLEVBdVI1QkUsRUFBY1gsSUFBa0JXLFlBQ3BDLE9BQUtBLEdBQWdCQSxFQUFZaEosVUFPRnZCLElBQTNCdUssRUFBWUosYUFLWkksRUFBWUosV0FBY0ksRUFBWUUsUUFBVUYsRUFBWUUsT0FBT0MsaUJBQW9CWCxHQUVwRlEsR0FiSUwsRUFadUIsR0E4Qi9CLFNBQVNTLElBQ1osT0FBUVAsRUFBeUJELFdBQWFDLEVBQXlCN0ksT0FBUyxPIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjEpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Qm9vdHN0cmFwOyIsIm1vZHVsZS5leHBvcnRzID0gUHJvcFR5cGVzOyIsIm1vZHVsZS5leHBvcnRzID0gU2VudHJ5OyIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMgKi9cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIG9uZSBvZiBhIGZldyBFcnJvciBvciBFcnJvci1saWtlXG4gKiB7QGxpbmsgaXNFcnJvcn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKHdhdCkge1xuICAgIHN3aXRjaCAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkpIHtcbiAgICAgICAgY2FzZSAnW29iamVjdCBFcnJvcl0nOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRXhjZXB0aW9uXSc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSAnW29iamVjdCBET01FeGNlcHRpb25dJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGlzSW5zdGFuY2VPZih3YXQsIEVycm9yKTtcbiAgICB9XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBFcnJvckV2ZW50XG4gKiB7QGxpbmsgaXNFcnJvckV2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3JFdmVudCh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IEVycm9yRXZlbnRdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIERPTUVycm9yXG4gKiB7QGxpbmsgaXNET01FcnJvcn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RPTUVycm9yKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgRE9NRXJyb3JdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIERPTUV4Y2VwdGlvblxuICoge0BsaW5rIGlzRE9NRXhjZXB0aW9ufS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRE9NRXhjZXB0aW9uKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhIHN0cmluZ1xuICoge0BsaW5rIGlzU3RyaW5nfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgaXMgYSBwcmltaXRpdmUgKHVuZGVmaW5lZCwgbnVsbCwgbnVtYmVyLCBib29sZWFuLCBzdHJpbmcpXG4gKiB7QGxpbmsgaXNQcmltaXRpdmV9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmUod2F0KSB7XG4gICAgcmV0dXJuIHdhdCA9PT0gbnVsbCB8fCAodHlwZW9mIHdhdCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHdhdCAhPT0gJ2Z1bmN0aW9uJyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBvYmplY3QgbGl0ZXJhbFxuICoge0BsaW5rIGlzUGxhaW5PYmplY3R9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gRXZlbnQgaW5zdGFuY2VcbiAqIHtAbGluayBpc0V2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXZlbnQod2F0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBFdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNJbnN0YW5jZU9mKHdhdCwgRXZlbnQpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gRWxlbWVudCBpbnN0YW5jZVxuICoge0BsaW5rIGlzRWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQod2F0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luc3RhbmNlT2Yod2F0LCBFbGVtZW50KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIHJlZ2V4cFxuICoge0BsaW5rIGlzUmVnRXhwfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVnRXhwKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlIGhhcyBhIHRoZW4gZnVuY3Rpb24uXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGhlbmFibGUod2F0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHJldHVybiBCb29sZWFuKHdhdCAmJiB3YXQudGhlbiAmJiB0eXBlb2Ygd2F0LnRoZW4gPT09ICdmdW5jdGlvbicpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBTeW50aGV0aWNFdmVudFxuICoge0BsaW5rIGlzU3ludGhldGljRXZlbnR9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTeW50aGV0aWNFdmVudCh3YXQpIHtcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh3YXQpICYmICduYXRpdmVFdmVudCcgaW4gd2F0ICYmICdwcmV2ZW50RGVmYXVsdCcgaW4gd2F0ICYmICdzdG9wUHJvcGFnYXRpb24nIGluIHdhdDtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIGluc3RhbmNlIG9mIHByb3ZpZGVkIGNvbnN0cnVjdG9yLlxuICoge0BsaW5rIGlzSW5zdGFuY2VPZn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcGFyYW0gYmFzZSBBIGNvbnN0cnVjdG9yIHRvIGJlIHVzZWQgaW4gYSBjaGVjay5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5zdGFuY2VPZih3YXQsIGJhc2UpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gd2F0IGluc3RhbmNlb2YgYmFzZTtcbiAgICB9XG4gICAgY2F0Y2ggKF9lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy5qcy5tYXAiLCJpbXBvcnQgeyBpc1JlZ0V4cCwgaXNTdHJpbmcgfSBmcm9tICcuL2lzJztcbi8qKlxuICogVHJ1bmNhdGVzIGdpdmVuIHN0cmluZyB0byB0aGUgbWF4aW11bSBjaGFyYWN0ZXJzIGNvdW50XG4gKlxuICogQHBhcmFtIHN0ciBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gKiBAcGFyYW0gbWF4IE1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdHJ1bmNhdGVkIHN0cmluZ1xuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRydW5jYXRlKHN0ciwgbWF4KSB7XG4gICAgaWYgKG1heCA9PT0gdm9pZCAwKSB7IG1heCA9IDA7IH1cbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgbWF4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHJldHVybiBzdHIubGVuZ3RoIDw9IG1heCA/IHN0ciA6IHN0ci5zdWJzdHIoMCwgbWF4KSArIFwiLi4uXCI7XG59XG4vKipcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGp1c3QgYHRyaW1fbGluZWAgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnkvYmxvYi9tYXN0ZXIvc3JjL3NlbnRyeS9sYW5nL2phdmFzY3JpcHQvcHJvY2Vzc29yLnB5I0w2N1xuICpcbiAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHBhcmFtIG1heCBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRydW5jYXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbmlwTGluZShsaW5lLCBjb2xubykge1xuICAgIHZhciBuZXdMaW5lID0gbGluZTtcbiAgICB2YXIgbGwgPSBuZXdMaW5lLmxlbmd0aDtcbiAgICBpZiAobGwgPD0gMTUwKSB7XG4gICAgICAgIHJldHVybiBuZXdMaW5lO1xuICAgIH1cbiAgICBpZiAoY29sbm8gPiBsbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgY29sbm8gPSBsbDtcbiAgICB9XG4gICAgdmFyIHN0YXJ0ID0gTWF0aC5tYXgoY29sbm8gLSA2MCwgMCk7XG4gICAgaWYgKHN0YXJ0IDwgNSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHZhciBlbmQgPSBNYXRoLm1pbihzdGFydCArIDE0MCwgbGwpO1xuICAgIGlmIChlbmQgPiBsbCAtIDUpIHtcbiAgICAgICAgZW5kID0gbGw7XG4gICAgfVxuICAgIGlmIChlbmQgPT09IGxsKSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoZW5kIC0gMTQwLCAwKTtcbiAgICB9XG4gICAgbmV3TGluZSA9IG5ld0xpbmUuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgaWYgKHN0YXJ0ID4gMCkge1xuICAgICAgICBuZXdMaW5lID0gXCIne3NuaXB9IFwiICsgbmV3TGluZTtcbiAgICB9XG4gICAgaWYgKGVuZCA8IGxsKSB7XG4gICAgICAgIG5ld0xpbmUgKz0gJyB7c25pcH0nO1xuICAgIH1cbiAgICByZXR1cm4gbmV3TGluZTtcbn1cbi8qKlxuICogSm9pbiB2YWx1ZXMgaW4gYXJyYXlcbiAqIEBwYXJhbSBpbnB1dCBhcnJheSBvZiB2YWx1ZXMgdG8gYmUgam9pbmVkIHRvZ2V0aGVyXG4gKiBAcGFyYW0gZGVsaW1pdGVyIHN0cmluZyB0byBiZSBwbGFjZWQgaW4tYmV0d2VlbiB2YWx1ZXNcbiAqIEByZXR1cm5zIEpvaW5lZCB2YWx1ZXNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBzYWZlSm9pbihpbnB1dCwgZGVsaW1pdGVyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1mb3Itb2ZcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKCdbdmFsdWUgY2Fubm90IGJlIHNlcmlhbGl6ZWRdJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5qb2luKGRlbGltaXRlcik7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgbWF0Y2hlcyBhIHJlZ2V4IG9yIGluY2x1ZGVzIHRoZSBzdHJpbmdcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHZhbHVlIHRvIGJlIGNoZWNrZWQgYWdhaW5zdFxuICogQHBhcmFtIHBhdHRlcm4gRWl0aGVyIGEgcmVnZXggb3IgYSBzdHJpbmcgdGhhdCBtdXN0IGJlIGNvbnRhaW5lZCBpbiB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNNYXRjaGluZ1BhdHRlcm4odmFsdWUsIHBhdHRlcm4pIHtcbiAgICBpZiAoIWlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihwYXR0ZXJuKSAhPT0gLTE7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZy5qcy5tYXAiLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyIsIm1vZHVsZS5leHBvcnRzID0gTG9nUm9ja2V0OyIsIm1vZHVsZS5leHBvcnRzID0gU2VudHJ5LkludGVncmF0aW9uczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXR1cFJlYWN0O1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUgPSB2b2lkIDA7XG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL3YxNi41LjEvcGFja2FnZXMvcmVhY3QtZG9tL3NyYy9jbGllbnQvUmVhY3RET00uanMjTDc1MFxudmFyIHNlY3JldCA9IF9yZWFjdERvbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbmlmIChzZWNyZXQgJiYgc2VjcmV0LkV2ZW50cyAmJiBzZWNyZXQuRXZlbnRzWzNdKSB7XG4gIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSA9IHNlY3JldC5FdmVudHNbM107XG59IGVsc2Uge1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUgPSBmdW5jdGlvbiBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoKSB7XG4gICAgY29uc29sZS53YXJuKCdsb2dyb2NrZXQtcmVhY3QgZG9lcyBub3Qgd29yayB3aXRoIHRoaXMgdmVyc2lvbiBvZiBSZWFjdCcpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZXR1cFJlYWN0KCkge1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgIFJlc3BvbmRlckV2ZW50UGx1Z2luOiB7XG4gICAgICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiBsb2dSb2NrZXRSZWFjdEV2ZW50SG9vayh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIGZpYmVyTm9kZSwgbmF0aXZlRXZlbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSAnY2xpY2snIHx8ICFmaWJlck5vZGUgfHwgIW5hdGl2ZUV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGN1cnJlbnRFbGVtZW50ID0gZmliZXJOb2RlO1xuXG4gICAgICAgICAgdmFyIG5hbWVzID0gW107XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHR5cGVvZiBjdXJyZW50RWxlbWVudC5lbGVtZW50VHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiBjdXJyZW50RWxlbWVudC5lbGVtZW50VHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgbmF0aXZlRXZlbnQuX19sck5hbWUgPSBuYW1lcztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdsb2dyb2NrZXQtcmVhY3QgY2F1Z2h0IGFuIGVycm9yIHdoaWxlIGhvb2tpbmcgaW50byBSZWFjdC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgYXJlIHVzaW5nIHRoZSBjb3JyZWN0IHZlcnNpb24gb2YgbG9ncm9ja2V0LXJlYWN0IGZvciB5b3VyIHZlcnNpb24gb2YgcmVhY3QtZG9tLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IG1sNTsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgKCkgPT4gY29uc29sZTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5pbXBvcnQgeyB0aW1lc3RhbXBXaXRoTXMgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFVOS05PV05fQ09NUE9ORU5UID0gJ3Vua25vd24nO1xudmFyIFRSQUNJTkdfR0VUVEVSID0ge1xuICAgIGlkOiAnVHJhY2luZycsXG59O1xudmFyIGdsb2JhbFRyYWNpbmdJbnRlZ3JhdGlvbiA9IG51bGw7XG4vKiogQGRlcHJlY2F0ZWQgcmVtb3ZlIHdoZW4gQHNlbnRyeS9hcG0gbm8gbG9uZ2VyIHVzZWQgKi9cbnZhciBnZXRUcmFjaW5nSW50ZWdyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdsb2JhbFRyYWNpbmdJbnRlZ3JhdGlvbikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVHJhY2luZ0ludGVncmF0aW9uO1xuICAgIH1cbiAgICBnbG9iYWxUcmFjaW5nSW50ZWdyYXRpb24gPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oVFJBQ0lOR19HRVRURVIpO1xuICAgIHJldHVybiBnbG9iYWxUcmFjaW5nSW50ZWdyYXRpb247XG59O1xuLyoqXG4gKiBwdXNoQWN0aXZpdHkgY3JlYXRlcyBhbiBuZXcgcmVhY3QgYWN0aXZpdHkuXG4gKiBJcyBhIG5vLW9wIGlmIFRyYWNpbmcgaW50ZWdyYXRpb24gaXMgbm90IHZhbGlkXG4gKiBAcGFyYW0gbmFtZSBkaXNwbGF5TmFtZSBvZiBjb21wb25lbnQgdGhhdCBzdGFydGVkIGFjdGl2aXR5XG4gKiBAZGVwcmVjYXRlZCByZW1vdmUgd2hlbiBAc2VudHJ5L2FwbSBubyBsb25nZXIgdXNlZFxuICovXG5mdW5jdGlvbiBwdXNoQWN0aXZpdHkobmFtZSwgb3ApIHtcbiAgICBpZiAoZ2xvYmFsVHJhY2luZ0ludGVncmF0aW9uID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2xvYmFsVHJhY2luZ0ludGVncmF0aW9uLmNvbnN0cnVjdG9yLnB1c2hBY3Rpdml0eShuYW1lLCB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIjxcIiArIG5hbWUgKyBcIj5cIixcbiAgICAgICAgb3A6IFwicmVhY3QuXCIgKyBvcCxcbiAgICB9KTtcbn1cbi8qKlxuICogcG9wQWN0aXZpdHkgcmVtb3ZlcyBhIFJlYWN0IGFjdGl2aXR5LlxuICogSXMgYSBuby1vcCBpZiBUcmFjaW5nIGludGVncmF0aW9uIGlzIG5vdCB2YWxpZC5cbiAqIEBwYXJhbSBhY3Rpdml0eSBpZCBvZiBhY3Rpdml0eSB0aGF0IGlzIGJlaW5nIHBvcHBlZFxuICogQGRlcHJlY2F0ZWQgcmVtb3ZlIHdoZW4gQHNlbnRyeS9hcG0gbm8gbG9uZ2VyIHVzZWRcbiAqL1xuZnVuY3Rpb24gcG9wQWN0aXZpdHkoYWN0aXZpdHkpIHtcbiAgICBpZiAoYWN0aXZpdHkgPT09IG51bGwgfHwgZ2xvYmFsVHJhY2luZ0ludGVncmF0aW9uID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ2xvYmFsVHJhY2luZ0ludGVncmF0aW9uLmNvbnN0cnVjdG9yLnBvcEFjdGl2aXR5KGFjdGl2aXR5KTtcbn1cbi8qKlxuICogT2J0YWluIGEgc3BhbiBnaXZlbiBhbiBhY3Rpdml0eSBpZC5cbiAqIElzIGEgbm8tb3AgaWYgVHJhY2luZyBpbnRlZ3JhdGlvbiBpcyBub3QgdmFsaWQuXG4gKiBAcGFyYW0gYWN0aXZpdHkgYWN0aXZpdHkgaWQgYXNzb2NpYXRlZCB3aXRoIG9idGFpbmVkIHNwYW5cbiAqIEBkZXByZWNhdGVkIHJlbW92ZSB3aGVuIEBzZW50cnkvYXBtIG5vIGxvbmdlciB1c2VkXG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2aXR5U3BhbihhY3Rpdml0eSkge1xuICAgIGlmIChhY3Rpdml0eSA9PT0gbnVsbCB8fCBnbG9iYWxUcmFjaW5nSW50ZWdyYXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFRyYWNpbmdJbnRlZ3JhdGlvbi5jb25zdHJ1Y3Rvci5nZXRBY3Rpdml0eVNwYW4oYWN0aXZpdHkpO1xufVxuLyoqXG4gKiBUaGUgUHJvZmlsZXIgY29tcG9uZW50IGxldmVyYWdlcyBTZW50cnkncyBUcmFjaW5nIGludGVncmF0aW9uIHRvIGdlbmVyYXRlXG4gKiBzcGFucyBiYXNlZCBvbiBjb21wb25lbnQgbGlmZWN5Y2xlcy5cbiAqL1xudmFyIFByb2ZpbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQcm9maWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcm9maWxlcihwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgLy8gVGhlIGFjdGl2aXR5IHJlcHJlc2VudGluZyBob3cgbG9uZyBpdCB0YWtlcyB0byBtb3VudCBhIGNvbXBvbmVudC5cbiAgICAgICAgX3RoaXMuX21vdW50QWN0aXZpdHkgPSBudWxsO1xuICAgICAgICAvLyBUaGUgc3BhbiBvZiB0aGUgbW91bnQgYWN0aXZpdHlcbiAgICAgICAgX3RoaXMuX21vdW50U3BhbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIG5hbWUgPSBfYS5uYW1lLCBfYiA9IF9hLmRpc2FibGVkLCBkaXNhYmxlZCA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xuICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGV5IGFyZSB1c2luZyBAc2VudHJ5L2FwbSwgd2UgbmVlZCB0byBwdXNoL3BvcCBhY3Rpdml0aWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBpZiAoZ2V0VHJhY2luZ0ludGVncmF0aW9uKCkpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgX3RoaXMuX21vdW50QWN0aXZpdHkgPSBwdXNoQWN0aXZpdHkobmFtZSwgJ21vdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYWN0aXZlVHJhbnNhY3Rpb24gPSBnZXRBY3RpdmVUcmFuc2FjdGlvbigpO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21vdW50U3BhbiA9IGFjdGl2ZVRyYW5zYWN0aW9uLnN0YXJ0Q2hpbGQoe1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCI8XCIgKyBuYW1lICsgXCI+XCIsXG4gICAgICAgICAgICAgICAgICAgIG9wOiAncmVhY3QubW91bnQnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLy8gSWYgYSBjb21wb25lbnQgbW91bnRlZCwgd2UgY2FuIGZpbmlzaCB0aGUgbW91bnQgYWN0aXZpdHkuXG4gICAgUHJvZmlsZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbW91bnRTcGFuKSB7XG4gICAgICAgICAgICB0aGlzLl9tb3VudFNwYW4uZmluaXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgIHRoaXMuX21vdW50U3BhbiA9IGdldEFjdGl2aXR5U3Bhbih0aGlzLl9tb3VudEFjdGl2aXR5KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgcG9wQWN0aXZpdHkodGhpcy5fbW91bnRBY3Rpdml0eSk7XG4gICAgICAgICAgICB0aGlzLl9tb3VudEFjdGl2aXR5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUHJvZmlsZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdXBkYXRlUHJvcHMgPSBfYS51cGRhdGVQcm9wcywgX2IgPSBfYS5pbmNsdWRlVXBkYXRlcywgaW5jbHVkZVVwZGF0ZXMgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iO1xuICAgICAgICAvLyBPbmx5IGdlbmVyYXRlIGFuIHVwZGF0ZSBzcGFuIGlmIGhhc1VwZGF0ZVNwYW4gaXMgdHJ1ZSwgaWYgdGhlcmUgaXMgYSB2YWxpZCBtb3VudFNwYW4sXG4gICAgICAgIC8vIGFuZCBpZiB0aGUgdXBkYXRlUHJvcHMgaGF2ZSBjaGFuZ2VkLiBJdCBpcyBvayB0byBub3QgZG8gYSBkZWVwIGVxdWFsaXR5IGNoZWNrIGhlcmUgYXMgaXQgaXMgZXhwZW5zaXZlLlxuICAgICAgICAvLyBXZSBhcmUganVzdCB0cnlpbmcgdG8gZ2l2ZSBiYXNlbGluZSBjbHVlcyBmb3IgZnVydGhlciBpbnZlc3RpZ2F0aW9uLlxuICAgICAgICBpZiAoaW5jbHVkZVVwZGF0ZXMgJiYgdGhpcy5fbW91bnRTcGFuICYmIHVwZGF0ZVByb3BzICE9PSB0aGlzLnByb3BzLnVwZGF0ZVByb3BzKSB7XG4gICAgICAgICAgICAvLyBTZWUgd2hhdCBwcm9wcyBoYXZlZCBjaGFuZ2VkIGJldHdlZW4gdGhlIHByZXZpb3VzIHByb3BzLCBhbmQgdGhlIGN1cnJlbnQgcHJvcHMuIFRoaXMgaXNcbiAgICAgICAgICAgIC8vIHNldCBhcyBkYXRhIG9uIHRoZSBzcGFuLiBXZSBqdXN0IHN0b3JlIHRoZSBwcm9wIGtleXMgYXMgdGhlIHZhbHVlcyBjb3VsZCBiZSBwb3RlbmlhbGx5IHZlcnkgbGFyZ2UuXG4gICAgICAgICAgICB2YXIgY2hhbmdlZFByb3BzID0gT2JqZWN0LmtleXModXBkYXRlUHJvcHMpLmZpbHRlcihmdW5jdGlvbiAoaykgeyByZXR1cm4gdXBkYXRlUHJvcHNba10gIT09IF90aGlzLnByb3BzLnVwZGF0ZVByb3BzW2tdOyB9KTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkUHJvcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB1cGRhdGUgc3BhbiBpcyBhIHBvaW50IGluIHRpbWUgc3BhbiB3aXRoIDAgZHVyYXRpb24sIGp1c3Qgc2lnbmlmeWluZyB0aGF0IHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAvLyBoYXMgYmVlbiB1cGRhdGVkLlxuICAgICAgICAgICAgICAgIHZhciBub3cgPSB0aW1lc3RhbXBXaXRoTXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3VudFNwYW4uc3RhcnRDaGlsZCh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRQcm9wczogY2hhbmdlZFByb3BzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCI8XCIgKyB0aGlzLnByb3BzLm5hbWUgKyBcIj5cIixcbiAgICAgICAgICAgICAgICAgICAgZW5kVGltZXN0YW1wOiBub3csXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcInJlYWN0LnVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogbm93LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQsIHdlIGNhbiBzYXkgaXQgaXMgbm8gbG9uZ2VyIG9uIHRoZSBzY3JlZW4uXG4gICAgLy8gVGhpcyBtZWFucyB3ZSBjYW4gZmluaXNoIHRoZSBzcGFuIHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50IHJlbmRlci5cbiAgICBQcm9maWxlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIG5hbWUgPSBfYS5uYW1lLCBfYiA9IF9hLmluY2x1ZGVSZW5kZXIsIGluY2x1ZGVSZW5kZXIgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iO1xuICAgICAgICBpZiAodGhpcy5fbW91bnRTcGFuICYmIGluY2x1ZGVSZW5kZXIpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgYWJsZSB0byBvYnRhaW4gdGhlIHNwYW5JZCBvZiB0aGUgbW91bnQgYWN0aXZpdHksIHdlIHNob3VsZCBzZXQgdGhlXG4gICAgICAgICAgICAvLyBuZXh0IGFjdGl2aXR5IGFzIGEgY2hpbGQgdG8gdGhlIGNvbXBvbmVudCBtb3VudCBhY3Rpdml0eS5cbiAgICAgICAgICAgIHRoaXMuX21vdW50U3Bhbi5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCI8XCIgKyBuYW1lICsgXCI+XCIsXG4gICAgICAgICAgICAgICAgZW5kVGltZXN0YW1wOiB0aW1lc3RhbXBXaXRoTXMoKSxcbiAgICAgICAgICAgICAgICBvcDogXCJyZWFjdC5yZW5kZXJcIixcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogdGhpcy5fbW91bnRTcGFuLmVuZFRpbWVzdGFtcCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQcm9maWxlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbWVtYmVyLW9yZGVyaW5nXG4gICAgUHJvZmlsZXIuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIGluY2x1ZGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGluY2x1ZGVVcGRhdGVzOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIFByb2ZpbGVyO1xufShSZWFjdC5Db21wb25lbnQpKTtcbi8qKlxuICogd2l0aFByb2ZpbGVyIGlzIGEgaGlnaGVyIG9yZGVyIGNvbXBvbmVudCB0aGF0IHdyYXBzIGFcbiAqIGNvbXBvbmVudCBpbiBhIHtAbGluayBQcm9maWxlcn0gY29tcG9uZW50LiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0XG4gKiB0aGUgaGlnaGVyIG9yZGVyIGNvbXBvbmVudCBiZSB1c2VkIG92ZXIgdGhlIHJlZ3VsYXIge0BsaW5rIFByb2ZpbGVyfSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIFdyYXBwZWRDb21wb25lbnQgY29tcG9uZW50IHRoYXQgaXMgd3JhcHBlZCBieSBQcm9maWxlclxuICogQHBhcmFtIG9wdGlvbnMgdGhlIHtAbGluayBQcm9maWxlclByb3BzfSB5b3UgY2FuIHBhc3MgaW50byB0aGUgUHJvZmlsZXJcbiAqL1xuZnVuY3Rpb24gd2l0aFByb2ZpbGVyKFdyYXBwZWRDb21wb25lbnQsIFxuLy8gV2UgZG8gbm90IHdhbnQgdG8gaGF2ZSBgdXBkYXRlUHJvcHNgIGdpdmVuIGluIG9wdGlvbnMsIGl0IGlzIGluc3RlYWQgZmlsbGVkIHRocm91Z2ggdGhlIEhPQy5cbm9wdGlvbnMpIHtcbiAgICB2YXIgY29tcG9uZW50RGlzcGxheU5hbWUgPSAob3B0aW9ucyAmJiBvcHRpb25zLm5hbWUpIHx8IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8IFVOS05PV05fQ09NUE9ORU5UO1xuICAgIHZhciBXcmFwcGVkID0gZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQcm9maWxlciwgX19hc3NpZ24oe30sIG9wdGlvbnMsIHsgbmFtZTogY29tcG9uZW50RGlzcGxheU5hbWUsIHVwZGF0ZVByb3BzOiBwcm9wcyB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfX2Fzc2lnbih7fSwgcHJvcHMpKSkpOyB9O1xuICAgIFdyYXBwZWQuZGlzcGxheU5hbWUgPSBcInByb2ZpbGVyKFwiICsgY29tcG9uZW50RGlzcGxheU5hbWUgKyBcIilcIjtcbiAgICAvLyBDb3B5IG92ZXIgc3RhdGljIG1ldGhvZHMgZnJvbSBXcmFwcGVkIGNvbXBvbmVudCB0byBQcm9maWxlciBIT0NcbiAgICAvLyBTZWU6IGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9oaWdoZXItb3JkZXItY29tcG9uZW50cy5odG1sI3N0YXRpYy1tZXRob2RzLW11c3QtYmUtY29waWVkLW92ZXJcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXcmFwcGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICByZXR1cm4gV3JhcHBlZDtcbn1cbi8qKlxuICpcbiAqIGB1c2VQcm9maWxlcmAgaXMgYSBSZWFjdCBob29rIHRoYXQgcHJvZmlsZXMgYSBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogUmVxdWlyZXMgUmVhY3QgMTYuOCBvciBhYm92ZS5cbiAqIEBwYXJhbSBuYW1lIGRpc3BsYXlOYW1lIG9mIGNvbXBvbmVudCBiZWluZyBwcm9maWxlZFxuICovXG5mdW5jdGlvbiB1c2VQcm9maWxlcihuYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge1xuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIGhhc1JlbmRlclNwYW46IHRydWUsXG4gICAgfTsgfVxuICAgIHZhciBfYSA9IF9fcmVhZChSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGl2ZVRyYW5zYWN0aW9uID0gZ2V0QWN0aXZlVHJhbnNhY3Rpb24oKTtcbiAgICAgICAgaWYgKGFjdGl2ZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlVHJhbnNhY3Rpb24uc3RhcnRDaGlsZCh7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiPFwiICsgbmFtZSArIFwiPlwiLFxuICAgICAgICAgICAgICAgIG9wOiAncmVhY3QubW91bnQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KSwgMSksIG1vdW50U3BhbiA9IF9hWzBdO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChtb3VudFNwYW4pIHtcbiAgICAgICAgICAgIG1vdW50U3Bhbi5maW5pc2goKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG1vdW50U3BhbiAmJiBvcHRpb25zLmhhc1JlbmRlclNwYW4pIHtcbiAgICAgICAgICAgICAgICBtb3VudFNwYW4uc3RhcnRDaGlsZCh7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIjxcIiArIG5hbWUgKyBcIj5cIixcbiAgICAgICAgICAgICAgICAgICAgZW5kVGltZXN0YW1wOiB0aW1lc3RhbXBXaXRoTXMoKSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwicmVhY3QucmVuZGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiBtb3VudFNwYW4uZW5kVGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdGhpcyB0byBydW4gb25jZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtdKTtcbn1cbmV4cG9ydCB7IHdpdGhQcm9maWxlciwgUHJvZmlsZXIsIHVzZVByb2ZpbGVyIH07XG4vKiogR3JhYnMgYWN0aXZlIHRyYW5zYWN0aW9uIG9mZiBzY29wZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZVRyYW5zYWN0aW9uKGh1Yikge1xuICAgIGlmIChodWIgPT09IHZvaWQgMCkgeyBodWIgPSBnZXRDdXJyZW50SHViKCk7IH1cbiAgICBpZiAoaHViKSB7XG4gICAgICAgIHZhciBzY29wZSA9IGh1Yi5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxlci5qcy5tYXAiLCJjb25zdCBub3Rlczogc3RyaW5nW10gPSBbXG4gIFwiQVwiLCAvLyAyMVxuICBcIkLima1cIiwgLy8gMjJcbiAgXCJCXCIsIC8vIDIzXG4gIFwiQ1wiLCAvLyAyNFxuICBcIkPima9cIiwgLy8gMjVcbiAgXCJEXCIsIC8vIDI2XG4gIFwiROKZr1wiLCAvLyAyN1xuICBcIkVcIiwgLy8gMjhcbiAgXCJGXCIsIC8vIDI5XG4gIFwiRuKZr1wiLCAvLyAzMFxuICBcIkdcIiwgLy8gMzFcbiAgXCJH4pmvXCIsIC8vIDMyXG5dO1xuY29uc3QgbmFtZSA9IChub3RlOiBudW1iZXIpOiBzdHJpbmcgPT4gbm90ZXNbKG5vdGUgLSAyMSkgJSAxMl07XG5jb25zdCBvY3RhdmUgPSAobm90ZTogbnVtYmVyKTogbnVtYmVyID0+IE1hdGguZmxvb3Iobm90ZSAvIDEyIC0gMSk7XG5cbmNvbnN0IG5vdGVUb0ZyZXEgPSAobm90ZTogbnVtYmVyKTogbnVtYmVyID0+IDQ0MCAqICgobm90ZSAtIDY5KSAvIDEyKSAqKiAyO1xuXG5jb25zdCBmcmVxVG9Ob3RlID0gKGZyZXE6IG51bWJlcik6IG51bWJlciA9PiA2OSArIDEyICogTWF0aC5sb2cyKGZyZXEgLyA0NDApO1xuXG5jb25zdCBkaWZmID0gKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyID0+IDEyMDAgKiBNYXRoLmxvZzIoYiAvIGEpO1xuXG5jbGFzcyBOb3RlIHtcbiAgcmVhZG9ubHkgZnJlcXVlbmN5OiBudW1iZXI7XG5cbiAgcmVhZG9ubHkgbm90ZTogbnVtYmVyO1xuXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICByZWFkb25seSBvY3RhdmU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9mcmVxOiBudW1iZXIpIHtcbiAgICB0aGlzLm5vdGUgPSBNYXRoLnJvdW5kKGZyZXFUb05vdGUoX2ZyZXEpKTtcblxuICAgIHRoaXMuZnJlcXVlbmN5ID0gbm90ZVRvRnJlcSh0aGlzLm5vdGUpO1xuICAgIHRoaXMubmFtZSA9IG5hbWUodGhpcy5ub3RlKTtcbiAgICB0aGlzLm9jdGF2ZSA9IG9jdGF2ZSh0aGlzLm5vdGUpO1xuICB9XG59XG5cbnR5cGUgUGl0Y2ggPSB7XG4gIHRhcmdldDogTm90ZTtcbiAgbm90ZTogbnVtYmVyO1xuICBmcmVxdWVuY3k6IG51bWJlcjtcbiAgZGlmZjogbnVtYmVyO1xufTtcblxuY29uc3Qgbm90ZSA9IChmcmVxPzogbnVtYmVyIHwgbnVsbCk6IFBpdGNoIHwgbnVsbCA9PiB7XG4gIGlmIChmcmVxID09PSB1bmRlZmluZWQgfHwgZnJlcSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgbiA9IG5ldyBOb3RlKGZyZXEpO1xuICByZXR1cm4ge1xuICAgIGZyZXF1ZW5jeTogZnJlcSxcbiAgICB0YXJnZXQ6IG4sXG4gICAgbm90ZTogZnJlcVRvTm90ZShmcmVxKSxcbiAgICBkaWZmOiBkaWZmKG4uZnJlcXVlbmN5LCBmcmVxKSxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IG5hbWUsIG9jdGF2ZSwgbm90ZSwgTm90ZSwgUGl0Y2gsIGZyZXFUb05vdGUsIG5vdGVUb0ZyZXEsIGRpZmYgfTtcbiIsImltcG9ydCBcIm1sNVwiO1xuXG5pbXBvcnQgeyBub3RlLCBQaXRjaCB9IGZyb20gXCJwaXRjaC9ub3Rlc1wiO1xuaW1wb3J0IGdldExvZ2dlciBmcm9tIFwibG9nXCI7XG5cbmNvbnN0IExPRyA9IGdldExvZ2dlcigpO1xuXG5leHBvcnQgdHlwZSBTYW1wbGUgPSBQaXRjaCB8IG51bGw7XG5leHBvcnQgdHlwZSBSZWNvcmRpbmcgPSBTYW1wbGVbXTtcblxudHlwZSBQaXRjaEdlbmVyYXRvciA9IEFzeW5jR2VuZXJhdG9yPFNhbXBsZT47XG5cbmNvbnN0IE1PREVMX1VSTCA9XG4gIFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL21sNWpzL21sNS1kYXRhLWFuZC1tb2RlbHMvbW9kZWxzL3BpdGNoLWRldGVjdGlvbi9jcmVwZS9cIjtcblxuYXN5bmMgZnVuY3Rpb24qIG1sNVBpdGNoRGV0ZWN0aW9uKFxuICBjdHg6IEF1ZGlvQ29udGV4dCxcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbVxuKTogUGl0Y2hHZW5lcmF0b3Ige1xuICBjb25zdCBwaXRjaERldGVjdGlvbjogYW55ID0gbWw1LnBpdGNoRGV0ZWN0aW9uKE1PREVMX1VSTCwgY3R4LCBzdHJlYW0pO1xuICBMT0cuaW5mbyhcIkNyZWF0ZWQgcGl0Y2ggZGV0ZWN0aW9uLlwiLCBwaXRjaERldGVjdGlvbik7XG5cbiAgYXdhaXQgcGl0Y2hEZXRlY3Rpb24ucmVhZHk7XG4gIExPRy5pbmZvKFwiSW5pdGlhbGl6ZWQgdGhlIG1vZGVsLlwiKTtcblxuICB3aGlsZSAoc3RyZWFtLmFjdGl2ZSAmJiBjdHguc3RhdGUgPT09IFwicnVubmluZ1wiKSB7XG4gICAgLy8gVGhpcyBpcyBmaW5lIGFzIHRoaXMgaXMgYSBnZW5lcmF0b3IgY29kZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgIGNvbnN0IHBpdGNoID0gYXdhaXQgcGl0Y2hEZXRlY3Rpb24uZ2V0UGl0Y2goKTtcbiAgICBpZiAocGl0Y2ggPT09IG51bGwpIHtcbiAgICAgIExPRy5kZWJ1ZyhcIlNraXBwaW5nXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB5aWVsZCBub3RlKHBpdGNoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgUGl0Y2hHZW5lcmF0b3IsIG1sNVBpdGNoRGV0ZWN0aW9uIH07XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbnR5cGUgR2VuZXJhdG9yQ29tcG9uZW50UHJvcHM8VD4gPSB7XG4gIGdlbmVyYXRvcjogQXN5bmNHZW5lcmF0b3I8VCB8IG51bGwsIGFueSwgYW55PjtcbiAgY2hpbGRyZW46IGFueTtcbiAgb25UaWNrPzogKHQ6IFQgfCBudWxsKSA9PiB2b2lkO1xufTtcblxuZnVuY3Rpb24gR2VuZXJhdG9yQ29tcG9uZW50PFQ+KHByb3BzOiBHZW5lcmF0b3JDb21wb25lbnRQcm9wczxUPikge1xuICBjb25zdCBbZmxhZywgc2V0RmxhZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtjdXJyZW50VmFsdWUsIHNldEN1cnJlbnRWYWx1ZV0gPSB1c2VTdGF0ZTxUIHwgdW5kZWZpbmVkPigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG1vdW50ZWQgPSB0cnVlO1xuXG4gICAgcHJvcHMuZ2VuZXJhdG9yLm5leHQoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQuZG9uZSB8fCAhbW91bnRlZCkgcmV0dXJuO1xuXG4gICAgICBzZXRDdXJyZW50VmFsdWUocmVzdWx0LnZhbHVlIHx8IHVuZGVmaW5lZCk7XG4gICAgICBzZXRGbGFnKCFmbGFnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW2ZsYWddKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5vblRpY2sgJiYgY3VycmVudFZhbHVlKSB7XG4gICAgICBwcm9wcy5vblRpY2soY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH0sIFtjdXJyZW50VmFsdWVdKTtcblxuICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oY3VycmVudFZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlbmVyYXRvckNvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFBpdGNoR2VuZXJhdG9yLCBTYW1wbGUgfSBmcm9tIFwicGl0Y2gvcGl0Y2hcIjtcblxuaW1wb3J0IGdldExvZ2dlciBmcm9tIFwibG9nXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuaW1wb3J0IEdlbmVyYXRvckNvbXBvbmVudCBmcm9tIFwiLi9HZW5lcmF0b3JDb21wb25lbnRcIjtcblxuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5cbnR5cGUgUmVjb3JkaW5nID0gU2FtcGxlW107XG50eXBlIFBpdGNoUmVjb3JkZXJQcm9wcyA9IHtcbiAgcGl0Y2hHZW5lcmF0b3I6IFBpdGNoR2VuZXJhdG9yO1xuICB0aW1lb3V0TXM6IG51bWJlcjtcbiAgb25GaW5pc2g6IChzYW1wbGVzOiBSZWNvcmRpbmcpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQaXRjaFJlY29yZGVyKHtcbiAgcGl0Y2hHZW5lcmF0b3IsXG4gIHRpbWVvdXRNcyxcbiAgb25GaW5pc2gsXG59OiBQaXRjaFJlY29yZGVyUHJvcHMpIHtcbiAgY29uc3QgW3JlY29yZGluZywgc2V0UmVjb3JkaW5nXSA9IHVzZVN0YXRlPFJlY29yZGluZz4oW10pO1xuICBjb25zdCBbc3RhcnRlZCwgc2V0U3RhcnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtmaW5pc2hlZCwgc2V0RmluaXNoZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgfVxuICAgIExPRy5pbmZvKFwiU2V0dGluZyB1cCB0aGUgdGltZW91dC5cIik7XG4gICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0RmluaXNoZWQodHJ1ZSk7XG4gICAgICBzZXRTdGFydGVkKGZhbHNlKTtcbiAgICB9LCB0aW1lb3V0TXMpO1xuXG4gICAgTE9HLmluZm8oXCJTZXQgdXAgdGltZXIgJWQgZm9yICVkIG1zLlwiLCB0LCB0aW1lb3V0TXMpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIExPRy5pbmZvKFwiQ2xlYXJpbmcgb3V0IHRoZSB0aW1lb3V0ICVkLlwiLCB0KTtcbiAgICAgIGNsZWFyVGltZW91dCh0KTtcbiAgICB9O1xuICB9LCBbc3RhcnRlZF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICBMT0cuaW5mbyhcIkZpbmlzaGluZyByZWNvcmRpbmcuXCIpO1xuICAgICAgb25GaW5pc2gocmVjb3JkaW5nKTtcbiAgICB9XG4gIH0sIFtmaW5pc2hlZCwgcmVjb3JkaW5nXSk7XG5cbiAgY29uc3QgYWRkU2FtcGxlID0gKHA6IFNhbXBsZSkgPT4ge1xuICAgIGNvbnN0IG5ld1JlY29yZGluZyA9IHJlY29yZGluZy5jb25jYXQoW3BdKTtcbiAgICBzZXRSZWNvcmRpbmcobmV3UmVjb3JkaW5nKTtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIHNldFN0YXJ0ZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxhYmVsID0gIXN0YXJ0ZWQgPyAoXG4gICAgPHNwYW4+c2luZyBub3chPC9zcGFuPlxuICApIDogKFxuICAgIDxTcGlubmVyIGFuaW1hdGlvbj1cImdyb3dcIiB2YXJpYW50PVwiZGFuZ2VyXCIgLz5cbiAgKTtcblxuICByZXR1cm4gcGl0Y2hHZW5lcmF0b3IgPyAoXG4gICAgPEdlbmVyYXRvckNvbXBvbmVudCBnZW5lcmF0b3I9e3BpdGNoR2VuZXJhdG9yfSBvblRpY2s9e2FkZFNhbXBsZX0+XG4gICAgICA8aDM+e2xhYmVsfTwvaDM+XG4gICAgPC9HZW5lcmF0b3JDb21wb25lbnQ+XG4gICkgOiAoXG4gICAgPFNwaW5uZXIgYW5pbWF0aW9uPVwiYm9yZGVyXCIgdmFyaWFudD1cInByaW1hcnlcIiAvPlxuICApO1xufVxuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xudmFyIFN0YXJGaWxsID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBzaXplID0gX3JlZi5zaXplLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJjb2xvclwiLCBcInNpemVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE2IDE2XCIsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgaGVpZ2h0OiBzaXplLFxuICAgIGZpbGw6IGNvbG9yXG4gIH0sIHJlc3QpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMy42MTIgMTUuNDQzYy0uMzg2LjE5OC0uODI0LS4xNDktLjc0Ni0uNTkybC44My00LjczTC4xNzMgNi43NjVjLS4zMjktLjMxNC0uMTU4LS44ODguMjgzLS45NWw0Ljg5OC0uNjk2TDcuNTM4Ljc5MmMuMTk3LS4zOS43My0uMzkuOTI3IDBsMi4xODQgNC4zMjcgNC44OTguNjk2Yy40NDEuMDYyLjYxMi42MzYuMjgzLjk1bC0zLjUyMyAzLjM1Ni44MyA0LjczYy4wNzguNDQzLS4zNi43OS0uNzQ2LjU5Mkw4IDEzLjE4N2wtNC4zODkgMi4yNTZ6XCJcbiAgfSkpO1xufSk7XG5TdGFyRmlsbC5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn07XG5TdGFyRmlsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgc2l6ZTogJzFlbSdcbn07XG5leHBvcnQgZGVmYXVsdCBTdGFyRmlsbDsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG52YXIgU3RhciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiY29sb3JcIiwgXCJzaXplXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLFxuICAgIHdpZHRoOiBzaXplLFxuICAgIGhlaWdodDogc2l6ZSxcbiAgICBmaWxsOiBjb2xvclxuICB9LCByZXN0KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk0yLjg2NiAxNC44NWMtLjA3OC40NDQuMzYuNzkxLjc0Ni41OTNsNC4zOS0yLjI1NiA0LjM4OSAyLjI1NmMuMzg2LjE5OC44MjQtLjE0OS43NDYtLjU5MmwtLjgzLTQuNzMgMy41MjMtMy4zNTZjLjMyOS0uMzE0LjE1OC0uODg4LS4yODMtLjk1bC00Ljg5OC0uNjk2TDguNDY1Ljc5MmEuNTEzLjUxMyAwIDAgMC0uOTI3IDBMNS4zNTQgNS4xMmwtNC44OTguNjk2Yy0uNDQxLjA2Mi0uNjEyLjYzNi0uMjgzLjk1bDMuNTIzIDMuMzU2LS44MyA0Ljczem00LjkwNS0yLjc2N2wtMy42ODYgMS44OTQuNjk0LTMuOTU3YS41NjUuNTY1IDAgMCAwLS4xNjMtLjUwNUwxLjcxIDYuNzQ1bDQuMDUyLS41NzZhLjUyNS41MjUgMCAwIDAgLjM5My0uMjg4bDEuODQ3LTMuNjU4IDEuODQ2IDMuNjU4YS41MjUuNTI1IDAgMCAwIC4zOTMuMjg4bDQuMDUyLjU3NS0yLjkwNiAyLjc3YS41NjQuNTY0IDAgMCAwLS4xNjMuNTA2bC42OTQgMy45NTctMy42ODYtMS44OTRhLjUwMy41MDMgMCAwIDAtLjQ2MSAwelwiXG4gIH0pKTtcbn0pO1xuU3Rhci5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn07XG5TdGFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBzaXplOiAnMWVtJ1xufTtcbmV4cG9ydCBkZWZhdWx0IFN0YXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQWxlcnQsIENvbnRhaW5lciwgUm93LCBDb2wgfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5pbXBvcnQgeyBTdGFyLCBTdGFyRmlsbCB9IGZyb20gXCJyZWFjdC1ib290c3RyYXAtaWNvbnNcIjtcblxuaW1wb3J0IHsgU2FtcGxlLCBSZWNvcmRpbmcgfSBmcm9tIFwicGl0Y2gvcGl0Y2hcIjtcbmltcG9ydCB7IFBpdGNoIH0gZnJvbSBcInBpdGNoL25vdGVzXCI7XG5pbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xuXG50eXBlIFJhdGluZ1Byb3BzID0ge1xuICBubzogbnVtYmVyO1xuICBvZjogbnVtYmVyO1xufTtcbmZ1bmN0aW9uIFJhdGluZyh7IG5vLCBvZiB9OiBSYXRpbmdQcm9wcykge1xuICBjb25zdCBzdGFycyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG9mOyBpICs9IDEpIHtcbiAgICBzdGFycy5wdXNoKGkgPD0gbm8gPyA8U3RhckZpbGwgLz4gOiA8U3RhciAvPik7XG4gIH1cblxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2Nsc3goXCJ0ZXh0LXByaW1hcnlcIiwgXCJkaXNwbGF5LTNcIil9PntzdGFyc308L2Rpdj47XG59XG5cbnR5cGUgU3VtbWFyeVByb3BzID0ge1xuICByZWNvcmRpbmc6IFJlY29yZGluZztcbiAgcmVmZXJlbmNlOiBQaXRjaDtcbn07XG5jb25zdCBzdW0gPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IGEgKyBiO1xuZXhwb3J0IGRlZmF1bHQgKHsgcmVjb3JkaW5nLCByZWZlcmVuY2UgfTogU3VtbWFyeVByb3BzKSA9PiB7XG4gIGNvbnN0IG5vbkVtcHR5ID0gcmVjb3JkaW5nLmZpbHRlcigocz86IFNhbXBsZSkgPT4gISFzKTtcbiAgY29uc3QgZnJlcVJlc3VsdCA9XG4gICAgbm9uRW1wdHlcbiAgICAgIC5tYXAoKHM6IFNhbXBsZSkgPT4gcyEuZnJlcXVlbmN5IC0gcmVmZXJlbmNlLmZyZXF1ZW5jeSlcbiAgICAgIC5yZWR1Y2Uoc3VtLCAwKSAvIG5vbkVtcHR5Lmxlbmd0aDtcblxuICBjb25zdCBtaWRpUmVzdWx0ID1cbiAgICBub25FbXB0eVxuICAgICAgLm1hcCgoczogU2FtcGxlKSA9PiBNYXRoLmFicyhzIS5ub3RlIC0gcmVmZXJlbmNlLm5vdGUpKVxuICAgICAgLnJlZHVjZShzdW0sIDApIC8gbm9uRW1wdHkubGVuZ3RoO1xuXG4gIGxldCBzdGFyQ291bnQ6IG51bWJlcjtcbiAgaWYgKG1pZGlSZXN1bHQgPD0gMC41KSB7XG4gICAgc3RhckNvdW50ID0gNTtcbiAgfSBlbHNlIGlmIChtaWRpUmVzdWx0IDw9IDEpIHtcbiAgICAvLyB3aXRoaW4gaGFsZiBzdGVwXG4gICAgc3RhckNvdW50ID0gNDtcbiAgfSBlbHNlIGlmIChtaWRpUmVzdWx0IDw9IDIpIHtcbiAgICAvLyB3aXRoaW4gd2hvbGUgc3RlcFxuICAgIHN0YXJDb3VudCA9IDM7XG4gIH0gZWxzZSBpZiAobWlkaVJlc3VsdCA8PSA0KSB7XG4gICAgLy8gd2l0aGluIHRoaXJkXG4gICAgc3RhckNvdW50ID0gMjtcbiAgfSBlbHNlIGlmIChtaWRpUmVzdWx0IDw9IDcpIHtcbiAgICAvLyB3aXRoaW5uIGZpZnRoXG4gICAgc3RhckNvdW50ID0gMTtcbiAgfSBlbHNlIHtcbiAgICAvLyB5b3Ugc3Vja1xuICAgIHN0YXJDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxDb250YWluZXI+XG4gICAgICA8Um93PlxuICAgICAgICA8Q29sIGNsYXNzTmFtZT1cInBiLTNcIj5cbiAgICAgICAgICA8UmF0aW5nIG5vPXtzdGFyQ291bnR9IG9mPXs1fSAvPlxuICAgICAgICA8L0NvbD5cbiAgICAgIDwvUm93PlxuICAgICAgPFJvdz5cbiAgICAgICAgPENvbCBjbGFzc05hbWU9e2Nsc3goXCJjb2wtbWQtNlwiLCBcIm9mZnNldC1tZC0zXCIpfT5cbiAgICAgICAgICA8QWxlcnQgdmFyaWFudD1cInN1Y2Nlc3NcIj5cbiAgICAgICAgICAgIFJlY2VpdmVkIHtub25FbXB0eS5sZW5ndGh9IHNhbXBsZShzKSBhdmVyYWdpbmcgdG8ge2ZyZXFSZXN1bHR9IGZyb21cbiAgICAgICAgICAgIEM8c3ViPjQ8L3N1Yj4uXG4gICAgICAgICAgPC9BbGVydD5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuaW1wb3J0IGdldExvZ2dlciBmcm9tIFwibG9nXCI7XG5pbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvcmVhY3RcIjtcblxuaW1wb3J0IHsgbWw1UGl0Y2hEZXRlY3Rpb24sIFBpdGNoR2VuZXJhdG9yLCBSZWNvcmRpbmcgfSBmcm9tIFwicGl0Y2gvcGl0Y2hcIjtcbmltcG9ydCB7IFBpdGNoLCBub3RlLCBub3RlVG9GcmVxIH0gZnJvbSBcInBpdGNoL25vdGVzXCI7XG5cbmltcG9ydCBQaXRjaFJlY29yZGVyIGZyb20gXCIuL1BpdGNoUmVjb3JkZXJcIjtcbmltcG9ydCBTdW1tYXJ5IGZyb20gXCIuL1N1bW1hcnlcIjtcblxuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5jb25zdCBQaXRjaERldGVjdGlvbiA9ICgpID0+IHtcbiAgU2VudHJ5LnVzZVByb2ZpbGVyKFwiUGl0Y2hEZXRlY3Rpb25cIik7XG5cbiAgY29uc3QgW3N0YXJ0ZWQsIHNldElzU3RhcnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gQXVkaW8gaW50ZXJmYWNlc1xuICBjb25zdCBbYXVkaW9Db250ZXh0XSA9IHVzZVN0YXRlKG5ldyBBdWRpb0NvbnRleHQoKSk7IC8vIHJlYWQtb25seVxuICBjb25zdCBbc3RyZWFtLCBzZXRTdHJlYW1dID0gdXNlU3RhdGU8TWVkaWFTdHJlYW0+KCk7XG4gIGNvbnN0IFtwaXRjaERldGVjdGlvbkdlbmVyYXRvciwgc2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3JdID0gdXNlU3RhdGU8XG4gICAgUGl0Y2hHZW5lcmF0b3JcbiAgPigpO1xuICBjb25zdCBbcmVjb3JkaW5nLCBzZXRSZWNvcmRpbmddID0gdXNlU3RhdGU8UmVjb3JkaW5nPigpO1xuXG4gIC8vIFNldCB1cCB0aGUgbWljcm9waG9uZS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMT0cuaW5mbyhcIkFjcXVpcmluZyBtaWNyb3Bob25lLlwiKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzXG4gICAgICAuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAudGhlbigobmV3U3RyZWFtKSA9PiB7XG4gICAgICAgIExPRy5kZWJ1ZyhcbiAgICAgICAgICBcIk1pY3JvcGhvbmUgaW5pdGlhbGl6ZWQgd2l0aCBzdHJlYW06ICVqLCBhY3RpdmU/LCAlcywgc3RhdGU6ICVzLlwiLFxuICAgICAgICAgIG5ld1N0cmVhbSxcbiAgICAgICAgICBuZXdTdHJlYW0uYWN0aXZlLFxuICAgICAgICAgIG5ld1N0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdLnJlYWR5U3RhdGVcbiAgICAgICAgKTtcbiAgICAgICAgc2V0U3RyZWFtKG5ld1N0cmVhbSk7XG4gICAgICB9KTtcbiAgfSwgW3N0YXJ0ZWRdKTtcblxuICAvLyBDb25maWd1cmUgdGhlIGF1ZGlvIHN0cmVhbS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXN0YXJ0ZWQgfHwgc3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICB9XG5cbiAgICBMT0cuaW5mbyhcIlNldHRpbmcgdXAgdGhlIGNvbnRleHQgJWogYW5kIHN0cmVhbSAlalwiLCBhdWRpb0NvbnRleHQsIHN0cmVhbSk7XG4gICAgYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG5cbiAgICBMT0cuaW5mbyhcIkluaXRpYWxpemVkIGF1ZGlvLlwiKTtcbiAgICBzZXRQaXRjaERldGVjdGlvbkdlbmVyYXRvcihtbDVQaXRjaERldGVjdGlvbihhdWRpb0NvbnRleHQsIHN0cmVhbSkpO1xuICAgIGF1ZGlvQ29udGV4dC5yZXN1bWUoKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBMT0cuaW5mbyhcIkNsZWFudXAgdGhlIGF1ZGlvIHNldHRpbmdzXCIpO1xuXG4gICAgICBMT0cuZGVidWcoXCJTdG9wIGFsbCB0cmFja3MgaW4gdGhlIHN0cmVhbSAlai5cIiwgc3RyZWFtKTtcbiAgICAgIHN0cmVhbT8uZ2V0VHJhY2tzKCkuZm9yRWFjaCgodCkgPT4gdC5zdG9wKCkpO1xuXG4gICAgICBMT0cuZGVidWcoXCJTdXNwZW5kIGF1ZGlvIGNvbnRleHQgJWouXCIsIGF1ZGlvQ29udGV4dCk7XG4gICAgICBhdWRpb0NvbnRleHQuc3VzcGVuZCgpO1xuICAgIH07XG4gIH0sIFtzdHJlYW0sIHN0YXJ0ZWRdKTtcblxuICBpZiAocmVjb3JkaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCByZWZlcmVuY2VQaXRjaCA9IG5vdGUobm90ZVRvRnJlcSg2MCkpIGFzIFBpdGNoO1xuXG4gICAgcmV0dXJuIDxTdW1tYXJ5IHJlY29yZGluZz17cmVjb3JkaW5nfSByZWZlcmVuY2U9e3JlZmVyZW5jZVBpdGNofSAvPjtcbiAgfVxuICBpZiAoc3RhcnRlZCAmJiBwaXRjaERldGVjdGlvbkdlbmVyYXRvcikge1xuICAgIHJldHVybiAoXG4gICAgICA8UGl0Y2hSZWNvcmRlclxuICAgICAgICBvbkZpbmlzaD17KHJlc3VsdCkgPT4ge1xuICAgICAgICAgIExPRy5pbmZvKFwiUmVzdWx0LCAlalwiLCByZXN1bHQpO1xuICAgICAgICAgIHNldFJlY29yZGluZyhyZXN1bHQpO1xuICAgICAgICAgIHNldElzU3RhcnRlZChmYWxzZSk7XG4gICAgICAgIH19XG4gICAgICAgIHBpdGNoR2VuZXJhdG9yPXtwaXRjaERldGVjdGlvbkdlbmVyYXRvcn1cbiAgICAgICAgdGltZW91dE1zPXs1MDAwfVxuICAgICAgLz5cbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNTdGFydGVkKHRydWUpfVxuICAgICAgdmFyaWFudD1cIm91dGxpbmUtcHJpbWFyeVwiXG4gICAgICBzaXplPVwibGdcIlxuICAgID5cbiAgICAgIGNsaWNrIHRvIHN0YXJ0XG4gICAgPC9CdXR0b24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQaXRjaERldGVjdGlvbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vQXBwLmNzc1wiO1xuXG5pbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xuXG5pbXBvcnQgZ2V0TG9nZ2VyIGZyb20gXCJsb2dcIjtcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcbmltcG9ydCBQaXRjaERldGVjdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL1BpdGNoRGV0ZWN0aW9uXCI7XG5cbmNvbnN0IExPRyA9IGdldExvZ2dlcigpO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIExPRy5pbmZvKFwiU3RhcnRpbmcgYXBwLlwiKTtcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9e2Nsc3goXCJ0ZXh0LWNlbnRlclwiLCBcIm10LTVcIil9PlxuICAgICAgICA8aDEgY2xhc3NOYW1lPXtjbHN4KFwiZGlzcGxheS0xXCIsIFwidGV4dC1wcmltYXJ5XCIsIFwidGl0bGVcIil9PnZvY2FsbHk8L2gxPlxuICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC1zZWNvbmRhcnlcIj5cbiAgICAgICAgICBzaW5nIEM8c3ViPjQ8L3N1Yj4hXG4gICAgICAgIDwvaDI+XG4gICAgICA8L2hlYWRlcj5cblxuICAgICAgPG1haW4gY2xhc3NOYW1lPXtjbHN4KFwidGV4dC1jZW50ZXJcIiwgXCJweS01XCIpfSByb2xlPVwibWFpblwiPlxuICAgICAgICA8UGl0Y2hEZXRlY3Rpb24gLz5cbiAgICAgIDwvbWFpbj5cblxuICAgICAgPGZvb3RlciBjbGFzc05hbWU9e2Nsc3goXCJweS0zXCIsIFwiYm9yZGVyLXRvcFwiLCBcInRleHQtbXV0ZWRcIil9PlxuICAgICAgICA8Q29udGFpbmVyPlxuICAgICAgICAgIDxwPnZvY2FsbHkuYXBwIDIwMjA8L3A+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgPC9mb290ZXI+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L3JlYWN0XCI7XG5pbXBvcnQgKiBhcyBJbnRlZ3JhdGlvbnMgZnJvbSBcIkBzZW50cnkvaW50ZWdyYXRpb25zXCI7XG5pbXBvcnQgeyBJbnRlZ3JhdGlvbnMgYXMgVHJhY2luZ0ludGVncmF0aW9ucyB9IGZyb20gXCJAc2VudHJ5L3RyYWNpbmdcIjtcblxuaW1wb3J0IExvZ1JvY2tldCBmcm9tIFwibG9ncm9ja2V0XCI7XG5pbXBvcnQgc2V0dXBMb2dSb2NrZXRSZWFjdCBmcm9tIFwibG9ncm9ja2V0LXJlYWN0XCI7XG5cbmRlY2xhcmUgY29uc3QgUkVMRUFTRTogc3RyaW5nO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIFNlbnRyeS5pbml0KHtcbiAgICBkc246XG4gICAgICBcImh0dHBzOi8vZmZlNDM5YWM2NWI4NDg4OWEzNzUxODAzN2EyM2E3YjFAbzQzMzU1Ny5pbmdlc3Quc2VudHJ5LmlvLzUzODg5MTdcIixcbiAgICByZWxlYXNlOiBSRUxFQVNFLFxuICAgIGVudmlyb25tZW50OiBcInRlc3RpbmdcIixcbiAgICBpbnRlZ3JhdGlvbnM6IFtcbiAgICAgIG5ldyBJbnRlZ3JhdGlvbnMuQ2FwdHVyZUNvbnNvbGUoe1xuICAgICAgICBsZXZlbHM6IFtcImluZm9cIl0sXG4gICAgICB9KSxcbiAgICAgIG5ldyBUcmFjaW5nSW50ZWdyYXRpb25zLkJyb3dzZXJUcmFjaW5nKCksXG4gICAgXSxcbiAgfSk7XG5cbiAgTG9nUm9ja2V0LmluaXQoXCI2YXlxaTcvdm9jYWxseXRlc3RcIiwge1xuICAgIHJlbGVhc2U6IFJFTEVBU0UsXG4gIH0pO1xuICBzZXR1cExvZ1JvY2tldFJlYWN0KExvZ1JvY2tldCk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmltcG9ydCBpbml0IGZyb20gXCJpbml0XCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xuXG5pbml0KCk7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKSk7XG4iLCJpbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4vaXMnO1xuaW1wb3J0IHsgc25pcExpbmUgfSBmcm9tICcuL3N0cmluZyc7XG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gZHluYW1pY1JlcXVpcmUobW9kLCByZXF1ZXN0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHJldHVybiBtb2QucmVxdWlyZShyZXF1ZXN0KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgd2UncmUgaW4gdGhlIE5vZGUuanMgb3IgQnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byBnaXZlbiBxdWVzdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlRW52KCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG59XG52YXIgZmFsbGJhY2tHbG9iYWxPYmplY3QgPSB7fTtcbi8qKlxuICogU2FmZWx5IGdldCBnbG9iYWwgc2NvcGUgb2JqZWN0XG4gKlxuICogQHJldHVybnMgR2xvYmFsIHNjb3BlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsT2JqZWN0KCkge1xuICAgIHJldHVybiAoaXNOb2RlRW52KClcbiAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgICAgIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBzZWxmXG4gICAgICAgICAgICAgICAgOiBmYWxsYmFja0dsb2JhbE9iamVjdCk7XG59XG4vKipcbiAqIFVVSUQ0IGdlbmVyYXRvclxuICpcbiAqIEByZXR1cm5zIHN0cmluZyBHZW5lcmF0ZWQgVVVJRDQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dWlkNCgpIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvO1xuICAgIGlmICghKGNyeXB0byA9PT0gdm9pZCAwKSAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIC8vIFVzZSB3aW5kb3cuY3J5cHRvIEFQSSBpZiBhdmFpbGFibGVcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50MTZBcnJheSg4KTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgICAvLyBzZXQgNCBpbiBieXRlIDdcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgYXJyWzNdID0gKGFyclszXSAmIDB4ZmZmKSB8IDB4NDAwMDtcbiAgICAgICAgLy8gc2V0IDIgbW9zdCBzaWduaWZpY2FudCBiaXRzIG9mIGJ5dGUgOSB0byAnMTAnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIGFycls0XSA9IChhcnJbNF0gJiAweDNmZmYpIHwgMHg4MDAwO1xuICAgICAgICB2YXIgcGFkID0gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICAgICAgdmFyIHYgPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgd2hpbGUgKHYubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgICAgIHYgPSBcIjBcIiArIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChwYWQoYXJyWzBdKSArIHBhZChhcnJbMV0pICsgcGFkKGFyclsyXSkgKyBwYWQoYXJyWzNdKSArIHBhZChhcnJbNF0pICsgcGFkKGFycls1XSkgKyBwYWQoYXJyWzZdKSArIHBhZChhcnJbN10pKTtcbiAgICB9XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxMTc1MjMjMjExNzUyM1xuICAgIHJldHVybiAneHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgdmFyIHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIHZhciB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKC9eKChbXjovPyNdKyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICAgIHZhciBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICAgIHZhciBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgICAgICBwYXRoOiBtYXRjaFs1XSxcbiAgICAgICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgICAgICByZWxhdGl2ZTogbWF0Y2hbNV0gKyBxdWVyeSArIGZyYWdtZW50LFxuICAgIH07XG59XG4vKipcbiAqIEV4dHJhY3RzIGVpdGhlciBtZXNzYWdlIG9yIHR5cGUrdmFsdWUgZnJvbSBhbiBldmVudCB0aGF0IGNhbiBiZSB1c2VkIGZvciB1c2VyLWZhY2luZyBsb2dzXG4gKiBAcmV0dXJucyBldmVudCdzIGRlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50Lm1lc3NhZ2U7XG4gICAgfVxuICAgIGlmIChldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB7XG4gICAgICAgIHZhciBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgICAgICBpZiAoZXhjZXB0aW9uLnR5cGUgJiYgZXhjZXB0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0aW9uLnR5cGUgKyBcIjogXCIgKyBleGNlcHRpb24udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbi50eXBlIHx8IGV4Y2VwdGlvbi52YWx1ZSB8fCBldmVudC5ldmVudF9pZCB8fCAnPHVua25vd24+JztcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50LmV2ZW50X2lkIHx8ICc8dW5rbm93bj4nO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGxldmVscyA9IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2xvZycsICdhc3NlcnQnXTtcbiAgICBpZiAoISgnY29uc29sZScgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgdmFyIG9yaWdpbmFsQ29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICAgIHZhciB3cmFwcGVkTGV2ZWxzID0ge307XG4gICAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKGxldmVsIGluIGdsb2JhbC5jb25zb2xlICYmIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXykge1xuICAgICAgICAgICAgd3JhcHBlZExldmVsc1tsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdO1xuICAgICAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFBlcmZvcm0gY2FsbGJhY2sgbWFuaXB1bGF0aW9uc1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgT2JqZWN0LmtleXMod3JhcHBlZExldmVscykuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IHdyYXBwZWRMZXZlbHNbbGV2ZWxdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIHZhbHVlcywgdHlwZSBhbmQgdmFsdWUgdG8gYW4gc3ludGhldGljIEV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAcGFyYW0gdHlwZSBUeXBlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeGNlcHRpb25UeXBlVmFsdWUoZXZlbnQsIHZhbHVlLCB0eXBlKSB7XG4gICAgZXZlbnQuZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzIHx8IFtdO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udmFsdWUgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnZhbHVlIHx8IHZhbHVlIHx8ICcnO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSB8fCB0eXBlIHx8ICdFcnJvcic7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIG1lY2hhbmlzbSB0byBhIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gbWVjaGFuaXNtIE1lY2hhbmlzbSBvZiB0aGUgbWVjaGFuaXNtLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCBtZWNoYW5pc20pIHtcbiAgICBpZiAobWVjaGFuaXNtID09PSB2b2lkIDApIHsgbWVjaGFuaXNtID0ge307IH1cbiAgICAvLyBUT0RPOiBVc2UgcmVhbCB0eXBlIHdpdGggYGtleW9mIE1lY2hhbmlzbWAgdGhpbmd5IGFuZCBtYXliZSBtYWtlIGl0IGJldHRlcj9cbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFR5cGUgJ01lY2hhbmlzbSB8IHt9JyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdNZWNoYW5pc20gfCB1bmRlZmluZWQnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0ubWVjaGFuaXNtID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc20gfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKG1lY2hhbmlzbSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIE1lY2hhbmlzbSBoYXMgbm8gaW5kZXggc2lnbmF0dXJlXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc21ba2V5XSA9IG1lY2hhbmlzbVtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbn1cbi8qKlxuICogQSBzYWZlIGZvcm0gb2YgbG9jYXRpb24uaHJlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgIH1cbiAgICBjYXRjaCAob08pIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBjaGlsZCBET00gZWxlbWVudCwgcmV0dXJucyBhIHF1ZXJ5LXNlbGVjdG9yIHN0YXRlbWVudCBkZXNjcmliaW5nIHRoYXRcbiAqIGFuZCBpdHMgYW5jZXN0b3JzXG4gKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gYm9keSA+IGRpdiA+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxUcmVlQXNTdHJpbmcoZWxlbSkge1xuICAgIC8vIHRyeS9jYXRjaCBib3RoOlxuICAgIC8vIC0gYWNjZXNzaW5nIGV2ZW50LnRhcmdldCAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gICAgLy8gLSBgaHRtbFRyZWVBc1N0cmluZ2AgYmVjYXVzZSBpdCdzIGNvbXBsZXgsIGFuZCBqdXN0IGFjY2Vzc2luZyB0aGUgRE9NIGluY29ycmVjdGx5XG4gICAgLy8gLSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy5cbiAgICB0cnkge1xuICAgICAgICB2YXIgY3VycmVudEVsZW0gPSBlbGVtO1xuICAgICAgICB2YXIgTUFYX1RSQVZFUlNFX0hFSUdIVCA9IDU7XG4gICAgICAgIHZhciBNQVhfT1VUUFVUX0xFTiA9IDgwO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICB2YXIgbGVuID0gMDtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcgPiAnO1xuICAgICAgICB2YXIgc2VwTGVuZ3RoID0gc2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgICAgdmFyIG5leHRTdHIgPSB2b2lkIDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgICAgICB3aGlsZSAoY3VycmVudEVsZW0gJiYgaGVpZ2h0KysgPCBNQVhfVFJBVkVSU0VfSEVJR0hUKSB7XG4gICAgICAgICAgICBuZXh0U3RyID0gX2h0bWxFbGVtZW50QXNTdHJpbmcoY3VycmVudEVsZW0pO1xuICAgICAgICAgICAgLy8gYmFpbCBvdXQgaWZcbiAgICAgICAgICAgIC8vIC0gbmV4dFN0ciBpcyB0aGUgJ2h0bWwnIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIC0gdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRoYXQgd291bGQgYmUgY3JlYXRlZCBleGNlZWRzIE1BWF9PVVRQVVRfTEVOXG4gICAgICAgICAgICAvLyAgIChpZ25vcmUgdGhpcyBsaW1pdCBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IGl0ZXJhdGlvbilcbiAgICAgICAgICAgIGlmIChuZXh0U3RyID09PSAnaHRtbCcgfHwgKGhlaWdodCA+IDEgJiYgbGVuICsgb3V0Lmxlbmd0aCAqIHNlcExlbmd0aCArIG5leHRTdHIubGVuZ3RoID49IE1BWF9PVVRQVVRfTEVOKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0LnB1c2gobmV4dFN0cik7XG4gICAgICAgICAgICBsZW4gKz0gbmV4dFN0ci5sZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50RWxlbSA9IGN1cnJlbnRFbGVtLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dC5yZXZlcnNlKCkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgIHJldHVybiAnPHVua25vd24+JztcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgYSBzaW1wbGUsIHF1ZXJ5LXNlbGVjdG9yIHJlcHJlc2VudGF0aW9uIG9mIGEgRE9NIGVsZW1lbnRcbiAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBpbnB1dCNmb28uYnRuW25hbWU9YmF6XVxuICogQHJldHVybnMgZ2VuZXJhdGVkIERPTSBwYXRoXG4gKi9cbmZ1bmN0aW9uIF9odG1sRWxlbWVudEFzU3RyaW5nKGVsKSB7XG4gICAgdmFyIGVsZW0gPSBlbDtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgdmFyIGNsYXNzTmFtZTtcbiAgICB2YXIgY2xhc3NlcztcbiAgICB2YXIga2V5O1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBpO1xuICAgIGlmICghZWxlbSB8fCAhZWxlbS50YWdOYW1lKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgb3V0LnB1c2goZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIGlmIChlbGVtLmlkKSB7XG4gICAgICAgIG91dC5wdXNoKFwiI1wiICsgZWxlbS5pZCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZTtcbiAgICBpZiAoY2xhc3NOYW1lICYmIGlzU3RyaW5nKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0LnB1c2goXCIuXCIgKyBjbGFzc2VzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgYWxsb3dlZEF0dHJzID0gWyd0eXBlJywgJ25hbWUnLCAndGl0bGUnLCAnYWx0J107XG4gICAgZm9yIChpID0gMDsgaSA8IGFsbG93ZWRBdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBhbGxvd2VkQXR0cnNbaV07XG4gICAgICAgIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgb3V0LnB1c2goXCJbXCIgKyBrZXkgKyBcIj1cXFwiXCIgKyBhdHRyICsgXCJcXFwiXVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xufVxudmFyIElOSVRJQUxfVElNRSA9IERhdGUubm93KCk7XG52YXIgcHJldk5vdyA9IDA7XG52YXIgcGVyZm9ybWFuY2VGYWxsYmFjayA9IHtcbiAgICBub3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCkgLSBJTklUSUFMX1RJTUU7XG4gICAgICAgIGlmIChub3cgPCBwcmV2Tm93KSB7XG4gICAgICAgICAgICBub3cgPSBwcmV2Tm93O1xuICAgICAgICB9XG4gICAgICAgIHByZXZOb3cgPSBub3c7XG4gICAgICAgIHJldHVybiBub3c7XG4gICAgfSxcbiAgICB0aW1lT3JpZ2luOiBJTklUSUFMX1RJTUUsXG59O1xuZXhwb3J0IHZhciBjcm9zc1BsYXRmb3JtUGVyZm9ybWFuY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc05vZGVFbnYoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHBlcmZIb29rcyA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3BlcmZfaG9va3MnKTtcbiAgICAgICAgICAgIHJldHVybiBwZXJmSG9va3MucGVyZm9ybWFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgIHJldHVybiBwZXJmb3JtYW5jZUZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBwZXJmb3JtYW5jZSA9IGdldEdsb2JhbE9iamVjdCgpLnBlcmZvcm1hbmNlO1xuICAgIGlmICghcGVyZm9ybWFuY2UgfHwgIXBlcmZvcm1hbmNlLm5vdykge1xuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2VGYWxsYmFjaztcbiAgICB9XG4gICAgLy8gUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4uXG4gICAgLy9cbiAgICAvLyBXaGlsZSBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0IGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgcGVyZm9ybWFuY2UudGltZU9yaWdpbiwgcGVyZm9ybWFuY2UudGltZU9yaWdpblxuICAgIC8vIGlzIG5vdCBhcyB3aWRlbHkgc3VwcG9ydGVkLiBOYW1lbHksIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gaXMgdW5kZWZpbmVkIGluIFNhZmFyaSBhcyBvZiB3cml0aW5nLlxuICAgIGlmIChwZXJmb3JtYW5jZS50aW1lT3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gQXMgb2Ygd3JpdGluZywgcGVyZm9ybWFuY2UudGltaW5nIGlzIG5vdCBhdmFpbGFibGUgaW4gV2ViIFdvcmtlcnMgaW4gbWFpbnN0cmVhbSBicm93c2Vycywgc28gaXQgaXMgbm90IGFsd2F5cyBhXG4gICAgICAgIC8vIHZhbGlkIGZhbGxiYWNrLiBJbiB0aGUgYWJzZW5jZSBvZiBhIGluaXRpYWwgdGltZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciwgZmFsbGJhY2sgdG8gSU5JVElBTF9USU1FLlxuICAgICAgICAvLyBAdHMtaWdub3JlIGlnbm9yZWQgYmVjYXVzZSB0aW1lT3JpZ2luIGlzIGEgcmVhZG9ubHkgcHJvcGVydHkgYnV0IHdlIHdhbnQgdG8gb3ZlcnJpZGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gPSAocGVyZm9ybWFuY2UudGltaW5nICYmIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQpIHx8IElOSVRJQUxfVElNRTtcbiAgICB9XG4gICAgcmV0dXJuIHBlcmZvcm1hbmNlO1xufSkoKTtcbi8qKlxuICogUmV0dXJucyBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzIHdpdGggbWlsbGlzZWNvbmRzIHByZWNpc2lvbiBzaW5jZSB0aGUgVU5JWCBlcG9jaCBjYWxjdWxhdGVkIHdpdGggdGhlIG1vbm90b25pYyBjbG9jay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVzdGFtcFdpdGhNcygpIHtcbiAgICByZXR1cm4gKGNyb3NzUGxhdGZvcm1QZXJmb3JtYW5jZS50aW1lT3JpZ2luICsgY3Jvc3NQbGF0Zm9ybVBlcmZvcm1hbmNlLm5vdygpKSAvIDEwMDA7XG59XG4vLyBodHRwczovL3NlbXZlci5vcmcvI2lzLXRoZXJlLWEtc3VnZ2VzdGVkLXJlZ3VsYXItZXhwcmVzc2lvbi1yZWdleC10by1jaGVjay1hLXNlbXZlci1zdHJpbmdcbnZhciBTRU1WRVJfUkVHRVhQID0gL14oMHxbMS05XVxcZCopXFwuKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKikoPzotKCg/OjB8WzEtOV1cXGQqfFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSg/OlxcLig/OjB8WzEtOV1cXGQqfFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSkqKSk/KD86XFwrKFswLTlhLXpBLVotXSsoPzpcXC5bMC05YS16QS1aLV0rKSopKT8kLztcbi8qKlxuICogUGFyc2VzIGlucHV0IGludG8gYSBTZW1WZXIgaW50ZXJmYWNlXG4gKiBAcGFyYW0gaW5wdXQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc2VtdmVyIHZlcnNpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2VtdmVyKGlucHV0KSB7XG4gICAgdmFyIG1hdGNoID0gaW5wdXQubWF0Y2goU0VNVkVSX1JFR0VYUCkgfHwgW107XG4gICAgdmFyIG1ham9yID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICB2YXIgbWlub3IgPSBwYXJzZUludChtYXRjaFsyXSwgMTApO1xuICAgIHZhciBwYXRjaCA9IHBhcnNlSW50KG1hdGNoWzNdLCAxMCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYnVpbGRtZXRhZGF0YTogbWF0Y2hbNV0sXG4gICAgICAgIG1ham9yOiBpc05hTihtYWpvcikgPyB1bmRlZmluZWQgOiBtYWpvcixcbiAgICAgICAgbWlub3I6IGlzTmFOKG1pbm9yKSA/IHVuZGVmaW5lZCA6IG1pbm9yLFxuICAgICAgICBwYXRjaDogaXNOYU4ocGF0Y2gpID8gdW5kZWZpbmVkIDogcGF0Y2gsXG4gICAgICAgIHByZXJlbGVhc2U6IG1hdGNoWzRdLFxuICAgIH07XG59XG52YXIgZGVmYXVsdFJldHJ5QWZ0ZXIgPSA2MCAqIDEwMDA7IC8vIDYwIHNlY29uZHNcbi8qKlxuICogRXh0cmFjdHMgUmV0cnktQWZ0ZXIgdmFsdWUgZnJvbSB0aGUgcmVxdWVzdCBoZWFkZXIgb3IgcmV0dXJucyBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0gbm93IGN1cnJlbnQgdW5peCB0aW1lc3RhbXBcbiAqIEBwYXJhbSBoZWFkZXIgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mICdSZXRyeS1BZnRlcicgaGVhZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIobm93LCBoZWFkZXIpIHtcbiAgICBpZiAoIWhlYWRlcikge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFJldHJ5QWZ0ZXI7XG4gICAgfVxuICAgIHZhciBoZWFkZXJEZWxheSA9IHBhcnNlSW50KFwiXCIgKyBoZWFkZXIsIDEwKTtcbiAgICBpZiAoIWlzTmFOKGhlYWRlckRlbGF5KSkge1xuICAgICAgICByZXR1cm4gaGVhZGVyRGVsYXkgKiAxMDAwO1xuICAgIH1cbiAgICB2YXIgaGVhZGVyRGF0ZSA9IERhdGUucGFyc2UoXCJcIiArIGhlYWRlcik7XG4gICAgaWYgKCFpc05hTihoZWFkZXJEYXRlKSkge1xuICAgICAgICByZXR1cm4gaGVhZGVyRGF0ZSAtIG5vdztcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRSZXRyeUFmdGVyO1xufVxudmFyIGRlZmF1bHRGdW5jdGlvbk5hbWUgPSAnPGFub255bW91cz4nO1xuLyoqXG4gKiBTYWZlbHkgZXh0cmFjdCBmdW5jdGlvbiBuYW1lIGZyb20gaXRzZWxmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWZuIHx8IHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLm5hbWUgfHwgZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSnVzdCBhY2Nlc3NpbmcgY3VzdG9tIHByb3BzIGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgICAgIC8vIGNhbiBjYXVzZSBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBleGNlcHRpb24gKHNlZSByYXZlbi1qcyM0OTUpLlxuICAgICAgICByZXR1cm4gZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgICB9XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWRkcyBjb250ZXh0IChwcmUvcG9zdC9saW5lKSBsaW5lcyB0byB0aGUgcHJvdmlkZWQgZnJhbWVcbiAqXG4gKiBAcGFyYW0gbGluZXMgc3RyaW5nW10gY29udGFpbmluZyBhbGwgbGluZXNcbiAqIEBwYXJhbSBmcmFtZSBTdGFja0ZyYW1lIHRoYXQgd2lsbCBiZSBtdXRhdGVkXG4gKiBAcGFyYW0gbGluZXNPZkNvbnRleHQgbnVtYmVyIG9mIGNvbnRleHQgbGluZXMgd2Ugd2FudCB0byBhZGQgcHJlL3Bvc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZENvbnRleHRUb0ZyYW1lKGxpbmVzLCBmcmFtZSwgbGluZXNPZkNvbnRleHQpIHtcbiAgICBpZiAobGluZXNPZkNvbnRleHQgPT09IHZvaWQgMCkgeyBsaW5lc09mQ29udGV4dCA9IDU7IH1cbiAgICB2YXIgbGluZW5vID0gZnJhbWUubGluZW5vIHx8IDA7XG4gICAgdmFyIG1heExpbmVzID0gbGluZXMubGVuZ3RoO1xuICAgIHZhciBzb3VyY2VMaW5lID0gTWF0aC5tYXgoTWF0aC5taW4obWF4TGluZXMsIGxpbmVubyAtIDEpLCAwKTtcbiAgICBmcmFtZS5wcmVfY29udGV4dCA9IGxpbmVzXG4gICAgICAgIC5zbGljZShNYXRoLm1heCgwLCBzb3VyY2VMaW5lIC0gbGluZXNPZkNvbnRleHQpLCBzb3VyY2VMaW5lKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiBzbmlwTGluZShsaW5lLCAwKTsgfSk7XG4gICAgZnJhbWUuY29udGV4dF9saW5lID0gc25pcExpbmUobGluZXNbTWF0aC5taW4obWF4TGluZXMgLSAxLCBzb3VyY2VMaW5lKV0sIGZyYW1lLmNvbG5vIHx8IDApO1xuICAgIGZyYW1lLnBvc3RfY29udGV4dCA9IGxpbmVzXG4gICAgICAgIC5zbGljZShNYXRoLm1pbihzb3VyY2VMaW5lICsgMSwgbWF4TGluZXMpLCBzb3VyY2VMaW5lICsgMSArIGxpbmVzT2ZDb250ZXh0KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiBzbmlwTGluZShsaW5lLCAwKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXNjLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=