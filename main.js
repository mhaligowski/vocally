!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=PropTypes},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,c){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,a,o,i,c],l=0;(u=new Error(t.replace(/%s/g,(function(){return s[l++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t){e.exports=LogRocket},function(e,t,n){"use strict";var r=n(7),a=!1,o=!1;try{var i={get passive(){return a=!0},get once(){return o=a=!0}};r.a&&(window.addEventListener("test",i,i),window.removeEventListener("test",i,!0))}catch(e){}var c=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!o){var i=r.once,c=r.capture,u=n;!o&&i&&(u=n.__once||function e(r){this.removeEventListener(t,e,c),n.call(this,r)},n.__once=u),e.addEventListener(t,u,a?r:c)}e.addEventListener(t,n,r)};var u=function(e,t,n,r){var a=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,a),n.__once&&e.removeEventListener(t,n.__once,a)};t.a=function(e,t,n,r){return c(e,t,n,r),function(){u(e,t,n,r)}}},function(e,t){e.exports=reactLifecyclesCompat},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){a({ResponderEventPlugin:{extractEvents:function(e,t,n,r){try{if("click"!==e||!n||!r)return;for(var a=n,o=[];a;){var i="function"==typeof a.elementType&&a.elementType.displayName;i&&o.push(i),a=a.return}r.__lrName=o}catch(e){console.error("logrocket-react caught an error while hooking into React. Please make sure you are using the correct version of logrocket-react for your version of react-dom.")}}}})};var r=n(5),a=void 0,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;a=o&&o.Events&&o.Events[3]?o.Events[3]:function(){console.warn("logrocket-react does not work with this version of React")},e.exports=t.default},function(e,t,n){"use strict";var r=n(13);function a(e,t){return function(e){var t=Object(r.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var o=/([A-Z])/g;var i=/^ms-/;function c(e){return function(e){return e.replace(o,"-$1").toLowerCase()}(e).replace(i,"-ms-")}var u=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;t.a=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(c(t))||a(e).getPropertyValue(c(t));Object.keys(t).forEach((function(a){var o=t[a];o||0===o?!function(e){return!(!e||!u.test(e))}(a)?n+=c(a)+": "+o+";":r+=a+"("+o+") ":e.style.removeProperty(c(a))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(1),a=n(2),o=n(0);n(9);function i(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function c(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function u(e,t){return Object.keys(t).reduce((function(n,u){var s,l=n,f=l[i(u)],d=l[u],p=Object(a.a)(l,[i(u),u].map(c)),m=t[u],v=function(e,t,n){var r=Object(o.useRef)(void 0!==e),a=Object(o.useState)(t),i=a[0],c=a[1],u=void 0!==e,s=r.current;return r.current=u,!u&&s&&i!==t&&c(t),[u?e:i,Object(o.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];n&&n.apply(void 0,[e].concat(r)),c(e)}),[n])]}(d,f,e[m]),h=v[0],b=v[1];return Object(r.a)({},p,((s={})[u]=h,s[m]=b,s))}),e)}n(6),n(12)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);var a=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function o(e){var t=a(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t,n){var r=n(19),a=n(20);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],u=t.base?o[0]+t.base:o[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var f=c(l),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:h(d,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,v=0;function h(e,t){var n,r,a;if(t.singleton){var o=v++;n=m||(m=s(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=s(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=c(n[r]);i[a].references--}for(var o=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=o}}}},function(e,t,n){},function(e,t){e.exports=ml5},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(5),i=n.n(o),c=(n(18),n(1)),u=n(2),s=n(3),l=n.n(s),f=a.a.createContext({});f.Consumer,f.Provider;function d(e,t){var n=Object(r.useContext)(f);return e||n[t]||t}var p=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}}),null)};function m(e){return!e||"#"===e.trim()}var v=a.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,o=e.disabled,i=e.onKeyDown,s=Object(u.a)(e,["as","disabled","onKeyDown"]),l=function(e){var t=s.href,n=s.onClick;(o||m(t))&&e.preventDefault(),o?e.stopPropagation():n&&n(e)};return m(s.href)&&(s.role=s.role||"button",s.href=s.href||"#"),o&&(s.tabIndex=-1,s["aria-disabled"]=!0),a.a.createElement(r,Object(c.a)({ref:t},s,{onClick:l,onKeyDown:p((function(e){" "===e.key&&(e.preventDefault(),l(e))}),i)}))}));v.displayName="SafeAnchor";var h=v,b=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.size,i=e.active,s=e.className,f=e.block,p=e.type,m=e.as,v=Object(u.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),b=d(n,"btn"),y=l()(s,b,i&&"active",b+"-"+r,f&&b+"-block",o&&b+"-"+o);if(v.href)return a.a.createElement(h,Object(c.a)({},v,{as:m,ref:t,className:l()(y,v.disabled&&"disabled")}));t&&(v.ref=t),p?v.type=p:m||(v.type="button");var g=m||"button";return a.a.createElement(g,Object(c.a)({},v,{className:y}))}));b.displayName="Button",b.defaultProps={variant:"primary",active:!1,disabled:!1};var y=b,g=function(){return console};n(21);var E=["A","B♭","B","C","C♯","D","D♯","E","F","F♯","G","G♯"],x=function(e){return 440*Math.pow(2,(e-69)/12)},O=function(e){return 69+12*Math.log2(e/440)},j=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._freq=t,this.note=Math.round(O(t)),this.frequency=x(this.note),this.name=function(e){return E[(e-21)%12]}(this.note),this.octave=function(e){return Math.floor(e/12-1)}(this.note)},w=function(e){if(null!=e){var t,n,r=new j(e);return{frequency:e,target:r,note:O(e),diff:(t=r.frequency,n=e,1200*Math.log2(n/t))}}},S=function(e){return this instanceof S?(this.v=e,this):new S(e)},N=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,a=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){a[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=a[e](t)).value instanceof S?Promise.resolve(n.value.v).then(u,s):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function u(e){c("next",e)}function s(e){c("throw",e)}function l(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}},C=g(),k="https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/";function P(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return T(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return T(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function R(e){var t=P(Object(r.useState)(!1),2),n=t[0],a=t[1],o=P(Object(r.useState)(),2),i=o[0],c=o[1];return Object(r.useEffect)((function(){var t=!0;return e.generator.next().then((function(e){!e.done&&t&&(c(e.value),a(!n))})),function(){t=!1}}),[n]),Object(r.useEffect)((function(){e.onTick&&i&&e.onTick(i)}),[i]),"function"==typeof e.children?e.children(i):e.children}var A=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,o=e.animation,i=e.size,s=e.children,f=e.as,p=void 0===f?"div":f,m=e.className,v=Object(u.a)(e,["bsPrefix","variant","animation","size","children","as","className"]),h=(n=d(n,"spinner"))+"-"+o;return a.a.createElement(p,Object(c.a)({ref:t},v,{className:l()(m,h,i&&h+"-"+i,r&&"text-"+r)}),s)}));A.displayName="Spinner";var M=A;function _(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return L(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return L(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=g();function D(e){var t=e.pitchGenerator,n=e.timeoutMs,o=e.onFinish,i=_(Object(r.useState)([]),2),c=i[0],u=i[1],s=_(Object(r.useState)(!1),2),l=s[0],f=s[1],d=_(Object(r.useState)(!1),2),p=d[0],m=d[1];Object(r.useEffect)((function(){if(l){I.info("Setting up the timeout.");var e=setTimeout((function(){m(!0),f(!1)}),n);return I.info("Set up timer %d for %d ms.",e,n),function(){I.info("Clearing out the timeout %d.",e),clearTimeout(e)}}}),[l]),Object(r.useEffect)((function(){p&&(I.info("Finishing recording."),o(c))}),[p,c]);var v=l?a.a.createElement(M,{animation:"grow",variant:"danger"}):a.a.createElement("span",null,"sing now!");return t?a.a.createElement(R,{generator:t,onTick:function(e){var t=c.concat([e]);u(t),l||f(!0)}},a.a.createElement("h3",null,v)):a.a.createElement(M,{animation:"border",variant:"primary"})}var z=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,o=e.as,i=void 0===o?"div":o,s=e.className,f=Object(u.a)(e,["bsPrefix","fluid","as","className"]),p=d(n,"container"),m="string"==typeof r?"-"+r:"-fluid";return a.a.createElement(i,Object(c.a)({ref:t},f,{className:l()(s,r?""+p+m:p)}))}));z.displayName="Container",z.defaultProps={fluid:!1};var U=z,B=["xl","lg","md","sm","xs"],F=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.noGutters,i=e.as,s=void 0===i?"div":i,f=Object(u.a)(e,["bsPrefix","className","noGutters","as"]),p=d(n,"row"),m=p+"-cols",v=[];return B.forEach((function(e){var t,n=f[e];delete f[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&v.push(""+m+r+"-"+t)})),a.a.createElement(s,Object(c.a)({ref:t},f,{className:l.a.apply(void 0,[r,p,o&&"no-gutters"].concat(v))}))}));F.displayName="Row",F.defaultProps={noGutters:!1};var q=F,G=["xl","lg","md","sm","xs"],H=a.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,o=e.as,i=void 0===o?"div":o,s=Object(u.a)(e,["bsPrefix","className","as"]),f=d(n,"col"),p=[],m=[];return G.forEach((function(e){var t,n,r,a=s[e];if(delete s[e],"object"==typeof a&&null!=a){var o=a.span;t=void 0===o||o,n=a.offset,r=a.order}else t=a;var i="xs"!==e?"-"+e:"";t&&p.push(!0===t?""+f+i:""+f+i+"-"+t),null!=r&&m.push("order"+i+"-"+r),null!=n&&m.push("offset"+i+"-"+n)})),p.length||p.push(f),a.a.createElement(i,Object(c.a)({},s,{ref:t,className:l.a.apply(void 0,[r].concat(p,m))}))}));H.displayName="Col";var $=H,V=n(16),X=n(17),K=n(7),Y=n(15),W=n(11);K.a&&window;function Z(e,t,n){void 0===n&&(n=5);var r=!1,a=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),o=Object(W.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(a),o()}}var J=function(e,t,n){var r,a,o;null==n&&(r=e,a=Object(Y.a)(r,"transitionDuration")||"",o=-1===a.indexOf("ms")?1e3:1,n=parseFloat(a)*o||0);var i=Z(e,n),c=Object(W.a)(e,"transitionend",t);return function(){i(),c()}},Q=n(6),ee=n(4),te=n.n(ee),ne=!1,re=a.a.createContext(null),ae=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a="exited",r.appearStatus="entering"):a="entered":a=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:a},r.nextCallback=null,r}Object(Q.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[i.a.findDOMNode(this),r],o=a[0],c=a[1],u=this.getTimeouts(),s=r?u.appear:u.enter;!e&&!n||ne?this.safeSetState({status:"entered"},(function(){t.props.onEntered(o)})):(this.props.onEnter(o,c),this.safeSetState({status:"entering"},(function(){t.props.onEntering(o,c),t.onTransitionEnd(s,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(o,c)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:i.a.findDOMNode(this);t&&!ne?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:i.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=a[0],c=a[1];this.props.addEndListener(o,c)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(u.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement(re.Provider,{value:null},"function"==typeof n?n(e,r):a.a.cloneElement(a.a.Children.only(n),r))},t}(a.a.Component);function oe(){}ae.contextType=re,ae.propTypes={},ae.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:oe,onEntering:oe,onEntered:oe,onExit:oe,onExiting:oe,onExited:oe},ae.UNMOUNTED="unmounted",ae.EXITED="exited",ae.ENTERING="entering",ae.ENTERED="entered",ae.EXITING="exiting";var ie,ce=ae;var ue=((ie={}).entering="show",ie.entered="show",ie),se=a.a.forwardRef((function(e,t){var n=e.className,o=e.children,i=Object(u.a)(e,["className","children"]),s=Object(r.useCallback)((function(e){!function(e){e.offsetHeight}(e),i.onEnter&&i.onEnter(e)}),[i]);return a.a.createElement(ce,Object(c.a)({ref:t,addEndListener:J},i,{onEnter:s}),(function(e,t){return a.a.cloneElement(o,Object(c.a)({},t,{className:l()("fade",n,o.props.className,ue[e])}))}))}));se.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},se.displayName="Fade";var le=se,fe={label:te.a.string.isRequired,onClick:te.a.func},de=a.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,o=e.className,i=Object(u.a)(e,["label","onClick","className"]);return a.a.createElement("button",Object(c.a)({ref:t,type:"button",className:l()("close",o),onClick:r},i),a.a.createElement("span",{"aria-hidden":"true"},"×"),a.a.createElement("span",{className:"sr-only"},n))}));de.displayName="CloseButton",de.propTypes=fe,de.defaultProps={label:"Close"};var pe=de,me=/-(.)/g;var ve=function(e){return e[0].toUpperCase()+(t=e,t.replace(me,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function he(e,t){var n=void 0===t?{}:t,r=n.displayName,o=void 0===r?ve(e):r,i=n.Component,s=n.defaultProps,f=a.a.forwardRef((function(t,n){var r=t.className,o=t.bsPrefix,s=t.as,f=void 0===s?i||"div":s,p=Object(u.a)(t,["className","bsPrefix","as"]),m=d(o,e);return a.a.createElement(f,Object(c.a)({ref:n,className:l()(r,m)},p))}));return f.defaultProps=s,f.displayName=o,f}var be,ye=(be="h4",a.a.forwardRef((function(e,t){return a.a.createElement("div",Object(c.a)({},e,{ref:t,className:l()(e.className,be)}))})));ye.displayName="DivStyledAsH4";var ge=he("alert-heading",{Component:ye}),Ee=he("alert-link",{Component:h}),xe={show:!0,transition:le,closeLabel:"Close alert"},Oe=a.a.forwardRef((function(e,t){var n=Object(V.a)(e,{show:"onClose"}),r=n.bsPrefix,o=n.show,i=n.closeLabel,s=n.className,f=n.children,p=n.variant,m=n.onClose,v=n.dismissible,h=n.transition,b=Object(u.a)(n,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),y=d(r,"alert"),g=Object(X.a)((function(e){m&&m(!1,e)})),E=!0===h?le:h,x=a.a.createElement("div",Object(c.a)({role:"alert"},E?b:void 0,{ref:t,className:l()(s,y,p&&y+"-"+p,v&&y+"-dismissible")}),v&&a.a.createElement(pe,{onClick:g,label:i}),f);return E?a.a.createElement(E,Object(c.a)({unmountOnExit:!0},b,{ref:void 0,in:o}),x):o?x:null}));Oe.displayName="Alert",Oe.defaultProps=xe,Oe.Link=Ee,Oe.Heading=ge;var je=Oe;function we(){return(we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Se(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Ne=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,o=Se(e,["color","size"]);return a.a.createElement("svg",we({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),a.a.createElement("path",{d:"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"}))}));Ne.propTypes={color:te.a.string,size:te.a.oneOfType([te.a.string,te.a.number])},Ne.defaultProps={color:"currentColor",size:"1em"};var Ce=Ne;function ke(){return(ke=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Pe(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Te=Object(r.forwardRef)((function(e,t){var n=e.color,r=e.size,o=Pe(e,["color","size"]);return a.a.createElement("svg",ke({ref:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:r,height:r,fill:n},o),a.a.createElement("path",{fillRule:"evenodd",d:"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"}))}));Te.propTypes={color:te.a.string,size:te.a.oneOfType([te.a.string,te.a.number])},Te.defaultProps={color:"currentColor",size:"1em"};var Re=Te;function Ae(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Ae(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var Me=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Ae(e))&&(r&&(r+=" "),r+=t);return r};function _e(e){for(var t=e.no,n=e.of,r=[],o=0;o<n;o++)r.push(o<=t?a.a.createElement(Ce,null):a.a.createElement(Re,null));return a.a.createElement("div",{className:Me("text-primary","display-3")},r)}var Le=function(e,t){return e+t};function Ie(e){var t,n=e.recording,r=e.reference,o=n.filter((function(e){return!!e})),i=o.map((function(e){return e.frequency-r.frequency})).reduce(Le,0)/o.length,c=o.map((function(e){return Math.abs(e.note-r.note)})).reduce(Le,0)/o.length;return t=c<=.5?5:c<=1?4:c<=2?3:c<=4?2:c<=7?1:0,a.a.createElement(U,null,a.a.createElement(q,null,a.a.createElement($,{className:"pb-3"},a.a.createElement(_e,{no:t,of:5}))),a.a.createElement(q,null,a.a.createElement($,{className:Me("col-md-6","offset-md-3")},a.a.createElement(je,{variant:"success"},"Received ",o.length," sample(s) averaging to ",i," from C",a.a.createElement("sub",null,"4"),"."))))}function De(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ze(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ze(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ue=g(),Be=function(){var e=De(Object(r.useState)(!1),2),t=e[0],n=e[1],o=De(Object(r.useState)(new AudioContext),2),i=o[0],c=(o[1],De(Object(r.useState)(),2)),u=c[0],s=c[1],l=De(Object(r.useState)(),2),f=l[0],d=l[1],p=De(Object(r.useState)(),2),m=p[0],v=p[1];if(Object(r.useEffect)((function(){t&&(Ue.info("Acquiring microphone."),navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){Ue.debug("Microphone initialized with stream: %j, active?, %s, state: %s.",e,e.active,e.getAudioTracks()[0].readyState),s(e)})))}),[t]),Object(r.useEffect)((function(){if(t&&void 0!==u)return Ue.info("Setting up the context %j and stream %j",i,u),i.createMediaStreamSource(u),Ue.info("Initialized audio."),d(function(e,t){return N(this,arguments,regeneratorRuntime.mark((function n(){var r,a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=ml5.pitchDetection(k,e,t),C.info("Created pitch detection.",r),n.next=4,S(r.ready);case 4:C.info("Initialized the model.");case 5:if(!t.active||"running"!==e.state){n.next=18;break}return n.next=8,S(r.getPitch());case 8:if(null!==(a=n.sent)){n.next=12;break}return C.debug("Skipping"),n.abrupt("continue",5);case 12:return n.next=14,S(w(a));case 14:return n.next=16,n.sent;case 16:n.next=5;break;case 18:return n.next=20,S(void 0);case 20:return n.abrupt("return",n.sent);case 21:case"end":return n.stop()}}),n)})))}(i,u)),i.resume(),function(){Ue.info("Cleanup the audio settings"),Ue.debug("Stop all tracks in the stream %j.",u),null==u||u.getTracks().forEach((function(e){return e.stop()})),Ue.debug("Suspend audio context %j.",i),i.suspend()}}),[u,t]),void 0!==m){var h=w(x(60));return a.a.createElement(Ie,{recording:m,reference:h})}return t&&f?a.a.createElement(D,{onFinish:function(e){Ue.info("Result, %j",e),v(e),n(!1)},pitchGenerator:f,timeoutMs:5e3}):a.a.createElement(y,{onClick:function(){return n(!0)},variant:"outline-primary",size:"lg"},"click to start")},Fe=g(),qe=function(){return Fe.info("Starting app."),a.a.createElement(U,null,a.a.createElement("header",{className:Me("text-center","mt-5")},a.a.createElement("h1",{className:Me("display-1","text-primary","title")},"vocally"),a.a.createElement("h2",{className:"text-secondary"},"sing C",a.a.createElement("sub",null,"4"),"!")),a.a.createElement("main",{className:Me("text-center","py-5"),role:"main"},a.a.createElement(Be,null)),a.a.createElement("footer",{className:Me("py-3","border-top","text-muted")},a.a.createElement(U,null,a.a.createElement("p",null,"vocally.app 2020"))))},Ge=n(10),He=n.n(Ge),$e=n(14),Ve=n.n($e);He.a.init("6ayqi7/vocallytest",{release:"RELEASE"}),Ve()(He.a),o.render(r.createElement(qe,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJQcm9wVHlwZXNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdERPTVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vY2FuVXNlRE9NLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJMb2dSb2NrZXRcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2FkZEV2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9yZW1vdmVFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vbGlzdGVuLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0TGlmZWN5Y2xlc0NvbXBhdFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9ncm9ja2V0LXJlYWN0L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9oeXBoZW5hdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9oeXBoZW5hdGVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2lzVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vY3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9lc20vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuY29udHJvbGxhYmxlL2VzbS9ob29rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlQ29tbWl0dGVkUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibWw1XCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vU2FmZUFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvZy50ZXN0aW5nLnRzIiwid2VicGFjazovLy8uL3NyYy9waXRjaC9ub3Rlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGl0Y2gvcGl0Y2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvR2VuZXJhdG9yQ29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9TcGlubmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BpdGNoUmVjb3JkZXIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Sb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQ29sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vdHJhbnNpdGlvbkVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vdHJpZ2dlckJyb3dzZXJSZWZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQ2xvc2VCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9jcmVhdGVXaXRoQnNQcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQWxlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vZGl2V2l0aENsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwLWljb25zL2Rpc3QvaWNvbnMvc3Rhci1maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAtaWNvbnMvZGlzdC9pY29ucy9zdGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N1bW1hcnkudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BpdGNoRGV0ZWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUmVhY3QiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwidGhpcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwia2V5cyIsImluZGV4T2YiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFyZ1R5cGUiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJqb2luIiwiZGVmYXVsdCIsIlByb3BUeXBlcyIsIlJlYWN0RE9NIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsImNvbmRpdGlvbiIsImZvcm1hdCIsImEiLCJiIiwiZSIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiTG9nUm9ja2V0Iiwib3B0aW9uc1N1cHBvcnRlZCIsIm9uY2VTdXBwb3J0ZWQiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm5vZGUiLCJldmVudE5hbWUiLCJoYW5kbGVyIiwib3B0aW9ucyIsIm9uY2UiLCJjYXB0dXJlIiwid3JhcHBlZEhhbmRsZXIiLCJfX29uY2UiLCJvbmNlSGFuZGxlciIsImV2ZW50IiwicmVhY3RMaWZlY3ljbGVzQ29tcGF0Iiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiUmVzcG9uZGVyRXZlbnRQbHVnaW4iLCJleHRyYWN0RXZlbnRzIiwidG9wTGV2ZWxUeXBlIiwidGFyZ2V0SW5zdCIsImZpYmVyTm9kZSIsIm5hdGl2ZUV2ZW50IiwiY3VycmVudEVsZW1lbnQiLCJuYW1lcyIsImVsZW1lbnRUeXBlIiwiZGlzcGxheU5hbWUiLCJyZXR1cm4iLCJfX2xyTmFtZSIsImNvbnNvbGUiLCJfcmVhY3REb20iLCJzZWNyZXQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIkV2ZW50cyIsIndhcm4iLCJnZXRDb21wdXRlZFN0eWxlIiwicHN1ZWRvRWxlbWVudCIsImRvYyIsImRlZmF1bHRWaWV3Iiwib3duZXJXaW5kb3ciLCJyVXBwZXIiLCJtc1BhdHRlcm4iLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImh5cGhlbmF0ZSIsInN1cHBvcnRlZFRyYW5zZm9ybXMiLCJjc3MiLCJ0cmFuc2Zvcm1zIiwic3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZm9yRWFjaCIsInRlc3QiLCJpc1RyYW5zZm9ybSIsInJlbW92ZVByb3BlcnR5IiwiY3NzVGV4dCIsImRlZmF1bHRLZXkiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIl90b1Byb3BlcnR5S2V5IiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwicmVzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX3RvUHJpbWl0aXZlIiwidXNlVW5jb250cm9sbGVkIiwicHJvcHMiLCJjb25maWciLCJyZWR1Y2UiLCJyZXN1bHQiLCJmaWVsZE5hbWUiLCJfZXh0ZW5kczIiLCJfcmVmIiwiZGVmYXVsdFZhbHVlIiwicHJvcHNWYWx1ZSIsInJlc3QiLCJtYXAiLCJoYW5kbGVyTmFtZSIsIl91c2VVbmNvbnRyb2xsZWRQcm9wIiwicHJvcFZhbHVlIiwid2FzUHJvcFJlZiIsIl91c2VTdGF0ZSIsInN0YXRlVmFsdWUiLCJzZXRTdGF0ZSIsImlzUHJvcCIsIndhc1Byb3AiLCJjdXJyZW50IiwiX2xlbiIsIl9rZXkiLCJjb25jYXQiLCJ1c2VVbmNvbnRyb2xsZWRQcm9wIiwicmVmIiwidXNlRXZlbnRDYWxsYmFjayIsImZuIiwiYXBpIiwiY29udGVudCIsImxvY2FscyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwibWw1IiwiVGhlbWVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJ1c2VCb290c3RyYXBQcmVmaXgiLCJwcmVmaXgiLCJkZWZhdWx0UHJlZml4IiwicHJlZml4ZXMiLCJmdW5jcyIsImFjYyIsIl9sZW4yIiwiX2tleTIiLCJpc1RyaXZpYWxIcmVmIiwiaHJlZiIsInRyaW0iLCJTYWZlQW5jaG9yIiwiZm9yd2FyZFJlZiIsIl9yZWYkYXMiLCJhcyIsIkNvbXBvbmVudCIsImRpc2FibGVkIiwib25LZXlEb3duIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJyb2xlIiwidGFiSW5kZXgiLCJCdXR0b24iLCJic1ByZWZpeCIsInZhcmlhbnQiLCJzaXplIiwiYWN0aXZlIiwiY2xhc3NOYW1lIiwiYmxvY2siLCJ0eXBlIiwiZGVmYXVsdFByb3BzIiwiZ2V0TG9nZ2VyIiwibm90ZXMiLCJub3RlVG9GcmVxIiwibm90ZSIsIk1hdGgiLCJwb3ciLCJmcmVxVG9Ob3RlIiwiZnJlcSIsImxvZzIiLCJOb3RlIiwiX2ZyZXEiLCJyb3VuZCIsImZyZXF1ZW5jeSIsIm9jdGF2ZSIsImZsb29yIiwiZGlmZiIsIkxPRyIsIk1PREVMX1VSTCIsIkdlbmVyYXRvckNvbXBvbmVudCIsImZsYWciLCJzZXRGbGFnIiwiY3VycmVudFZhbHVlIiwic2V0Q3VycmVudFZhbHVlIiwibW91bnRlZCIsImdlbmVyYXRvciIsIm5leHQiLCJ0aGVuIiwiZG9uZSIsIm9uVGljayIsImNoaWxkcmVuIiwiU3Bpbm5lciIsImFuaW1hdGlvbiIsImJzU3Bpbm5lclByZWZpeCIsIlBpdGNoUmVjb3JkZXIiLCJwaXRjaEdlbmVyYXRvciIsInRpbWVvdXRNcyIsIm9uRmluaXNoIiwicmVjb3JkaW5nIiwic2V0UmVjb3JkaW5nIiwic3RhcnRlZCIsInNldFN0YXJ0ZWQiLCJmaW5pc2hlZCIsInNldEZpbmlzaGVkIiwiaW5mbyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJsYWJlbCIsIm5ld1JlY29yZGluZyIsIkNvbnRhaW5lciIsImZsdWlkIiwic3VmZml4IiwiREVWSUNFX1NJWkVTIiwiUm93Iiwibm9HdXR0ZXJzIiwiZGVjb3JhdGVkQnNQcmVmaXgiLCJzaXplUHJlZml4IiwiYnJrUG9pbnQiLCJjb2xzIiwiaW5maXgiLCJDb2wiLCJzcGFucyIsInNwYW4iLCJvZmZzZXQiLCJvcmRlciIsIl9wcm9wVmFsdWUkc3BhbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiZWxlbWVudCIsImR1cmF0aW9uIiwicGFkZGluZyIsImNhbGxlZCIsImhhbmRsZSIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwibGlzdGVuIiwic3RyIiwibXVsdCIsInBhcnNlRmxvYXQiLCJyZW1vdmVFbXVsYXRlIiwiX1JlYWN0JENvbXBvbmVudCIsIlRyYW5zaXRpb24iLCJjb250ZXh0IiwiX3RoaXMiLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyIiwiaXNNb3VudGluZyIsImVudGVyIiwiYXBwZWFyU3RhdHVzIiwiaW4iLCJ1bm1vdW50T25FeGl0IiwibW91bnRPbkVudGVyIiwic3RhdGUiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJwcmV2U3RhdGUiLCJfcHJvdG8iLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZVN0YXR1cyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwiZXhpdCIsInRpbWVvdXQiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiX3RoaXMyIiwiYXBwZWFyaW5nIiwiX3JlZjIiLCJub2RlUmVmIiwiZmluZERPTU5vZGUiLCJtYXliZU5vZGUiLCJtYXliZUFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwic2FmZVNldFN0YXRlIiwib25FbnRlcmVkIiwib25FbnRlciIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsImNhbmNlbCIsIm5leHRTdGF0ZSIsImNhbGxiYWNrIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiX3JlZjMiLCJtYXliZU5leHRDYWxsYmFjayIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiY2hpbGRQcm9wcyIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJjbG9uZUVsZW1lbnQiLCJDaGlsZHJlbiIsIm9ubHkiLCJub29wIiwiY29udGV4dFR5cGUiLCJwcm9wVHlwZXMiLCJVTk1PVU5URUQiLCJFWElURUQiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJFWElUSU5HIiwiX2ZhZGVTdHlsZXMiLCJmYWRlU3R5bGVzIiwiRmFkZSIsImhhbmRsZUVudGVyIiwib2Zmc2V0SGVpZ2h0IiwidHJpZ2dlckJyb3dzZXJSZWZsb3ciLCJpbm5lclByb3BzIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJDbG9zZUJ1dHRvbiIsInJIeXBoZW4iLCJfIiwiY2hyIiwic2xpY2UiLCJjcmVhdGVXaXRoQnNQcmVmaXgiLCJfdGVtcCIsIl9yZWYkZGlzcGxheU5hbWUiLCJCc0NvbXBvbmVudCIsIl9yZWYyJGFzIiwiVGFnIiwicmVzb2x2ZWRQcmVmaXgiLCJEaXZTdHlsZWRBc0g0IiwiQWxlcnRIZWFkaW5nIiwiQWxlcnRMaW5rIiwic2hvdyIsInRyYW5zaXRpb24iLCJjbG9zZUxhYmVsIiwiQWxlcnQiLCJ1bmNvbnRyb2xsZWRQcm9wcyIsIl91c2VVbmNvbnRyb2xsZWQiLCJvbkNsb3NlIiwiZGlzbWlzc2libGUiLCJoYW5kbGVDbG9zZSIsImFsZXJ0IiwiTGluayIsIkhlYWRpbmciLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTdGFyRmlsbCIsImNvbG9yIiwieG1sbnMiLCJ2aWV3Qm94Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwib25lT2ZUeXBlIiwibnVtYmVyIiwiU3RhciIsImZpbGxSdWxlIiwidG9WYWwiLCJtaXgiLCJrIiwieSIsInRtcCIsIngiLCJSYXRpbmciLCJubyIsIm9mIiwic3RhcnMiLCJzdW0iLCJTdW1tYXJ5Iiwic3RhckNvdW50IiwicmVmZXJlbmNlIiwibm9uRW1wdHkiLCJmcmVxUmVzdWx0IiwibWlkaVJlc3VsdCIsImFicyIsInNldElzU3RhcnRlZCIsIkF1ZGlvQ29udGV4dCIsImF1ZGlvQ29udGV4dCIsInN0cmVhbSIsInNldFN0cmVhbSIsInBpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yIiwic2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3IiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJhdWRpbyIsInZpZGVvIiwibmV3U3RyZWFtIiwiZGVidWciLCJnZXRBdWRpb1RyYWNrcyIsInJlYWR5U3RhdGUiLCJjcmVhdGVNZWRpYVN0cmVhbVNvdXJjZSIsImN0eCIsInBpdGNoRGV0ZWN0aW9uIiwicmVhZHkiLCJnZXRQaXRjaCIsInBpdGNoIiwibWw1UGl0Y2hEZXRlY3Rpb24iLCJyZXN1bWUiLCJnZXRUcmFja3MiLCJzdG9wIiwic3VzcGVuZCIsInJlZmVyZW5jZVBpdGNoIiwiaW5pdCIsInJlbGVhc2UiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxH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S0FBSyxRQUNqRCxrQkFBQyxHQUFjLE9BR2pCLDRCQUFRTyxVQUFXLEdBQUssT0FBUSxhQUFjLGVBQzVDLGtCQUFDLEVBQVMsS0FDUixtRCx3Q0NyQlYsS0FBVStQLEtBQUsscUJBQXNCLENBRW5DQyxRQUFTLFlBRVgsS0FBb0IsTUFFcEIsU0FBZ0IsZ0JBQUMsR0FBRyxNQUFTL2IsU0FBU2djLGVBQWUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBQcm9wVHlwZXM7IiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiZXhwb3J0IGRlZmF1bHQgISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IExvZ1JvY2tldDsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXR1cm4tYXNzaWduICovXG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gJy4vY2FuVXNlRE9NJztcbmV4cG9ydCB2YXIgb3B0aW9uc1N1cHBvcnRlZCA9IGZhbHNlO1xuZXhwb3J0IHZhciBvbmNlU3VwcG9ydGVkID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIGdldCBwYXNzaXZlKCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBnZXQgb25jZSgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1tdWx0aS1hc3NpZ25cbiAgICAgIHJldHVybiBvbmNlU3VwcG9ydGVkID0gb3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgfVxuXG4gIH07XG5cbiAgaWYgKGNhblVzZURPTSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCB0cnVlKTtcbiAgfVxufSBjYXRjaCAoZSkge1xuICAvKiAqL1xufVxuXG4vKipcbiAqIEFuIGBhZGRFdmVudExpc3RlbmVyYCBwb255ZmlsbCwgc3VwcG9ydHMgdGhlIGBvbmNlYCBvcHRpb25cbiAqL1xuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdib29sZWFuJyAmJiAhb25jZVN1cHBvcnRlZCkge1xuICAgIHZhciBvbmNlID0gb3B0aW9ucy5vbmNlLFxuICAgICAgICBjYXB0dXJlID0gb3B0aW9ucy5jYXB0dXJlO1xuICAgIHZhciB3cmFwcGVkSGFuZGxlciA9IGhhbmRsZXI7XG5cbiAgICBpZiAoIW9uY2VTdXBwb3J0ZWQgJiYgb25jZSkge1xuICAgICAgd3JhcHBlZEhhbmRsZXIgPSBoYW5kbGVyLl9fb25jZSB8fCBmdW5jdGlvbiBvbmNlSGFuZGxlcihldmVudCkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9O1xuXG4gICAgICBoYW5kbGVyLl9fb25jZSA9IHdyYXBwZWRIYW5kbGVyO1xuICAgIH1cblxuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHdyYXBwZWRIYW5kbGVyLCBvcHRpb25zU3VwcG9ydGVkID8gb3B0aW9ucyA6IGNhcHR1cmUpO1xuICB9XG5cbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZEV2ZW50TGlzdGVuZXI7IiwiZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgdmFyIGNhcHR1cmUgPSBvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zICE9PSAnYm9vbGVhbicgPyBvcHRpb25zLmNhcHR1cmUgOiBvcHRpb25zO1xuICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKTtcblxuICBpZiAoaGFuZGxlci5fX29uY2UpIHtcbiAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLl9fb25jZSwgY2FwdHVyZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVtb3ZlRXZlbnRMaXN0ZW5lcjsiLCJpbXBvcnQgYWRkRXZlbnRMaXN0ZW5lciBmcm9tICcuL2FkZEV2ZW50TGlzdGVuZXInO1xuaW1wb3J0IHJlbW92ZUV2ZW50TGlzdGVuZXIgZnJvbSAnLi9yZW1vdmVFdmVudExpc3RlbmVyJztcblxuZnVuY3Rpb24gbGlzdGVuKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0ZW47IiwibW9kdWxlLmV4cG9ydHMgPSByZWFjdExpZmVjeWNsZXNDb21wYXQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXR1cFJlYWN0O1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUgPSB2b2lkIDA7XG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL3YxNi41LjEvcGFja2FnZXMvcmVhY3QtZG9tL3NyYy9jbGllbnQvUmVhY3RET00uanMjTDc1MFxudmFyIHNlY3JldCA9IF9yZWFjdERvbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbmlmIChzZWNyZXQgJiYgc2VjcmV0LkV2ZW50cyAmJiBzZWNyZXQuRXZlbnRzWzNdKSB7XG4gIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSA9IHNlY3JldC5FdmVudHNbM107XG59IGVsc2Uge1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUgPSBmdW5jdGlvbiBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoKSB7XG4gICAgY29uc29sZS53YXJuKCdsb2dyb2NrZXQtcmVhY3QgZG9lcyBub3Qgd29yayB3aXRoIHRoaXMgdmVyc2lvbiBvZiBSZWFjdCcpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZXR1cFJlYWN0KCkge1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgIFJlc3BvbmRlckV2ZW50UGx1Z2luOiB7XG4gICAgICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiBsb2dSb2NrZXRSZWFjdEV2ZW50SG9vayh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIGZpYmVyTm9kZSwgbmF0aXZlRXZlbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSAnY2xpY2snIHx8ICFmaWJlck5vZGUgfHwgIW5hdGl2ZUV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGN1cnJlbnRFbGVtZW50ID0gZmliZXJOb2RlO1xuXG4gICAgICAgICAgdmFyIG5hbWVzID0gW107XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHR5cGVvZiBjdXJyZW50RWxlbWVudC5lbGVtZW50VHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiBjdXJyZW50RWxlbWVudC5lbGVtZW50VHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgbmF0aXZlRXZlbnQuX19sck5hbWUgPSBuYW1lcztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdsb2dyb2NrZXQtcmVhY3QgY2F1Z2h0IGFuIGVycm9yIHdoaWxlIGhvb2tpbmcgaW50byBSZWFjdC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgYXJlIHVzaW5nIHRoZSBjb3JyZWN0IHZlcnNpb24gb2YgbG9ncm9ja2V0LXJlYWN0IGZvciB5b3VyIHZlcnNpb24gb2YgcmVhY3QtZG9tLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuL293bmVyV2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUobm9kZSwgcHN1ZWRvRWxlbWVudCkge1xuICByZXR1cm4gb3duZXJXaW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBwc3VlZG9FbGVtZW50KTtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYyAmJiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsInZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoclVwcGVyLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMmFlYjhhMmE2YmViMDA2MTdhNDIxN2Y3ZjgyODQ5MjRmYTJhZDgxOS9zcmMvdmVuZG9yL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cbmltcG9ydCBoeXBoZW5hdGUgZnJvbSAnLi9oeXBoZW5hdGUnO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufSIsInZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KHZhbHVlKSk7XG59IiwiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCBoeXBoZW5hdGUgZnJvbSAnLi9oeXBoZW5hdGVTdHlsZSc7XG5pbXBvcnQgaXNUcmFuc2Zvcm0gZnJvbSAnLi9pc1RyYW5zZm9ybSc7XG5cbmZ1bmN0aW9uIHN0eWxlKG5vZGUsIHByb3BlcnR5KSB7XG4gIHZhciBjc3MgPSAnJztcbiAgdmFyIHRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoaHlwaGVuYXRlKHByb3BlcnR5KSkgfHwgZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKGh5cGhlbmF0ZShwcm9wZXJ0eSkpO1xuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcGVydHkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BlcnR5W2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGh5cGhlbmF0ZShrZXkpKTtcbiAgICB9IGVsc2UgaWYgKGlzVHJhbnNmb3JtKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9IGh5cGhlbmF0ZShrZXkpICsgXCI6IFwiICsgdmFsdWUgKyBcIjtcIjtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICh0cmFuc2Zvcm1zKSB7XG4gICAgY3NzICs9IFwidHJhbnNmb3JtOiBcIiArIHRyYW5zZm9ybXMgKyBcIjtcIjtcbiAgfVxuXG4gIG5vZGUuc3R5bGUuY3NzVGV4dCArPSBcIjtcIiArIGNzcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gcmVhZE9ubHlQcm9wVHlwZShoYW5kbGVyLCBuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXByb3BzW2hhbmRsZXJdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJZb3UgaGF2ZSBwcm92aWRlZCBhIGBcIiArIHByb3BOYW1lICsgXCJgIHByb3AgdG8gYFwiICsgbmFtZSArIFwiYCBcIiArIChcIndpdGhvdXQgYW4gYFwiICsgaGFuZGxlciArIFwiYCBoYW5kbGVyIHByb3AuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIFwiKSArIChcIklmIHRoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYFwiICsgZGVmYXVsdEtleShwcm9wTmFtZSkgKyBcImAuIFwiKSArIChcIk90aGVyd2lzZSwgc2V0IGBcIiArIGhhbmRsZXIgKyBcImAuXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmNvbnRyb2xsZWRQcm9wVHlwZXMoY29udHJvbGxlZFZhbHVlcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHByb3BUeXBlcyA9IHt9O1xuICBPYmplY3Qua2V5cyhjb250cm9sbGVkVmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gYWRkIGRlZmF1bHQgcHJvcFR5cGVzIGZvciBmb2xrcyB0aGF0IHVzZSBydW50aW1lIGNoZWNrc1xuICAgIHByb3BUeXBlc1tkZWZhdWx0S2V5KHByb3ApXSA9IG5vb3A7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGhhbmRsZXIgPSBjb250cm9sbGVkVmFsdWVzW3Byb3BdO1xuICAgICAgISh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycgJiYgaGFuZGxlci50cmltKCkubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1VuY29udHJvbGxhYmxlIC0gWyVzXTogdGhlIHByb3AgYCVzYCBuZWVkcyBhIHZhbGlkIGhhbmRsZXIga2V5IG5hbWUgaW4gb3JkZXIgdG8gbWFrZSBpdCB1bmNvbnRyb2xsYWJsZScsIGRpc3BsYXlOYW1lLCBwcm9wKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBwcm9wVHlwZXNbcHJvcF0gPSByZWFkT25seVByb3BUeXBlKGhhbmRsZXIsIGRpc3BsYXlOYW1lKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvcFR5cGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcChwcm9wcywgcHJvcCkge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0S2V5KGtleSkge1xuICByZXR1cm4gJ2RlZmF1bHQnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbn1cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2FuQWNjZXB0UmVmKGNvbXBvbmVudCkge1xuICByZXR1cm4gISFjb21wb25lbnQgJiYgKHR5cGVvZiBjb21wb25lbnQgIT09ICdmdW5jdGlvbicgfHwgY29tcG9uZW50LnByb3RvdHlwZSAmJiBjb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cblxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIHVzZVVuY29udHJvbGxlZFByb3AocHJvcFZhbHVlLCBkZWZhdWx0VmFsdWUsIGhhbmRsZXIpIHtcbiAgdmFyIHdhc1Byb3BSZWYgPSB1c2VSZWYocHJvcFZhbHVlICE9PSB1bmRlZmluZWQpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShkZWZhdWx0VmFsdWUpLFxuICAgICAgc3RhdGVWYWx1ZSA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldFN0YXRlID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBpc1Byb3AgPSBwcm9wVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgdmFyIHdhc1Byb3AgPSB3YXNQcm9wUmVmLmN1cnJlbnQ7XG4gIHdhc1Byb3BSZWYuY3VycmVudCA9IGlzUHJvcDtcbiAgLyoqXG4gICAqIElmIGEgcHJvcCBzd2l0Y2hlcyBmcm9tIGNvbnRyb2xsZWQgdG8gVW5jb250cm9sbGVkXG4gICAqIHJlc2V0IGl0cyB2YWx1ZSB0byB0aGUgZGVmYXVsdFZhbHVlXG4gICAqL1xuXG4gIGlmICghaXNQcm9wICYmIHdhc1Byb3AgJiYgc3RhdGVWYWx1ZSAhPT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgc2V0U3RhdGUoZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBbaXNQcm9wID8gcHJvcFZhbHVlIDogc3RhdGVWYWx1ZSwgdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZXIpIGhhbmRsZXIuYXBwbHkodm9pZCAwLCBbdmFsdWVdLmNvbmNhdChhcmdzKSk7XG4gICAgc2V0U3RhdGUodmFsdWUpO1xuICB9LCBbaGFuZGxlcl0pXTtcbn1cblxuZXhwb3J0IHsgdXNlVW5jb250cm9sbGVkUHJvcCB9O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVW5jb250cm9sbGVkKHByb3BzLCBjb25maWcpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbmZpZykucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGZpZWxkTmFtZSkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3JlZiA9IHJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gX3JlZltVdGlscy5kZWZhdWx0S2V5KGZpZWxkTmFtZSldLFxuICAgICAgICBwcm9wc1ZhbHVlID0gX3JlZltmaWVsZE5hbWVdLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1V0aWxzLmRlZmF1bHRLZXkoZmllbGROYW1lKSwgZmllbGROYW1lXS5tYXAoX3RvUHJvcGVydHlLZXkpKTtcblxuICAgIHZhciBoYW5kbGVyTmFtZSA9IGNvbmZpZ1tmaWVsZE5hbWVdO1xuXG4gICAgdmFyIF91c2VVbmNvbnRyb2xsZWRQcm9wID0gdXNlVW5jb250cm9sbGVkUHJvcChwcm9wc1ZhbHVlLCBkZWZhdWx0VmFsdWUsIHByb3BzW2hhbmRsZXJOYW1lXSksXG4gICAgICAgIHZhbHVlID0gX3VzZVVuY29udHJvbGxlZFByb3BbMF0sXG4gICAgICAgIGhhbmRsZXIgPSBfdXNlVW5jb250cm9sbGVkUHJvcFsxXTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcmVzdCwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbZmllbGROYW1lXSA9IHZhbHVlLCBfZXh0ZW5kczJbaGFuZGxlck5hbWVdID0gaGFuZGxlciwgX2V4dGVuZHMyKSk7XG4gIH0sIHByb3BzKTtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQ3JlYXRlcyBhIGBSZWZgIHdob3NlIHZhbHVlIGlzIHVwZGF0ZWQgaW4gYW4gZWZmZWN0LCBlbnN1cmluZyB0aGUgbW9zdCByZWNlbnRcbiAqIHZhbHVlIGlzIHRoZSBvbmUgcmVuZGVyZWQgd2l0aC4gR2VuZXJhbGx5IG9ubHkgcmVxdWlyZWQgZm9yIENvbmN1cnJlbnQgbW9kZSB1c2FnZVxuICogd2hlcmUgcHJldmlvdXMgd29yayBpbiBgcmVuZGVyKClgIG1heSBiZSBkaXNjYXJkZWQgYmVmb3IgYmVpbmcgdXNlZC5cbiAqXG4gKiBUaGlzIGlzIHNhZmUgdG8gYWNjZXNzIGluIGFuIGV2ZW50IGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBgUmVmYCB2YWx1ZVxuICovXG5cbmZ1bmN0aW9uIHVzZUNvbW1pdHRlZFJlZih2YWx1ZSkge1xuICB2YXIgcmVmID0gdXNlUmVmKHZhbHVlKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9LCBbdmFsdWVdKTtcbiAgcmV0dXJuIHJlZjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlQ29tbWl0dGVkUmVmOyIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUNvbW1pdHRlZFJlZiBmcm9tICcuL3VzZUNvbW1pdHRlZFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIHZhciByZWYgPSB1c2VDb21taXR0ZWRSZWYoZm4pO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWYuY3VycmVudCAmJiByZWYuY3VycmVudC5hcHBseShyZWYsIGFyZ3VtZW50cyk7XG4gIH0sIFtyZWZdKTtcbn0iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gbWw1OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG52YXIgQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXIsXG4gICAgUHJvdmlkZXIgPSBUaGVtZUNvbnRleHQuUHJvdmlkZXI7XG5cbmZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIoX3JlZikge1xuICB2YXIgcHJlZml4ZXMgPSBfcmVmLnByZWZpeGVzLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29waWVkUHJlZml4ZXMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHByZWZpeGVzKTtcbiAgfSwgW3ByZWZpeGVzXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQcm92aWRlciwge1xuICAgIHZhbHVlOiBjb3BpZWRQcmVmaXhlc1xuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VCb290c3RyYXBQcmVmaXgocHJlZml4LCBkZWZhdWx0UHJlZml4KSB7XG4gIHZhciBwcmVmaXhlcyA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgcmV0dXJuIHByZWZpeCB8fCBwcmVmaXhlc1tkZWZhdWx0UHJlZml4XSB8fCBkZWZhdWx0UHJlZml4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ29tcG9uZW50LCBvcHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIG9wdHMgPSB7XG4gICAgcHJlZml4OiBvcHRzXG4gIH07XG4gIHZhciBpc0NsYXNzeSA9IENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50OyAvLyBJZiBpdCdzIGEgZnVuY3Rpb25hbCBjb21wb25lbnQgbWFrZSBzdXJlIHdlIGRvbid0IGJyZWFrIGl0IHdpdGggYSByZWZcblxuICB2YXIgX29wdHMgPSBvcHRzLFxuICAgICAgcHJlZml4ID0gX29wdHMucHJlZml4LFxuICAgICAgX29wdHMkZm9yd2FyZFJlZkFzID0gX29wdHMuZm9yd2FyZFJlZkFzLFxuICAgICAgZm9yd2FyZFJlZkFzID0gX29wdHMkZm9yd2FyZFJlZkFzID09PSB2b2lkIDAgPyBpc0NsYXNzeSA/ICdyZWYnIDogJ2lubmVyUmVmJyA6IF9vcHRzJGZvcndhcmRSZWZBcztcbiAgdmFyIFdyYXBwZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIF9yZWYyKTtcblxuICAgIHByb3BzW2ZvcndhcmRSZWZBc10gPSByZWY7XG4gICAgdmFyIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KHByb3BzLmJzUHJlZml4LCBwcmVmaXgpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYnNQcmVmaXg6IGJzUHJlZml4XG4gICAgfSkpO1xuICB9KTtcbiAgV3JhcHBlZC5kaXNwbGF5TmFtZSA9IFwiQm9vdHN0cmFwKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgcmV0dXJuIFdyYXBwZWQ7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCwgQ29uc3VtZXIgYXMgVGhlbWVDb25zdW1lciB9O1xuZXhwb3J0IGRlZmF1bHQgVGhlbWVQcm92aWRlcjsiLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLmZpbHRlcihmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmICE9IG51bGw7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmKSB7XG4gICAgaWYgKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJyk7XG4gICAgfVxuXG4gICAgaWYgKGFjYyA9PT0gbnVsbCkgcmV0dXJuIGY7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDaGFpbmVkRnVuY3Rpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcblxuZnVuY3Rpb24gaXNUcml2aWFsSHJlZihocmVmKSB7XG4gIHJldHVybiAhaHJlZiB8fCBocmVmLnRyaW0oKSA9PT0gJyMnO1xufVxuLyoqXG4gKiBUaGVyZSBhcmUgc2l0dWF0aW9ucyBkdWUgdG8gYnJvd3NlciBxdWlya3Mgb3IgQm9vdHN0cmFwIENTUyB3aGVyZVxuICogYW4gYW5jaG9yIHRhZyBpcyBuZWVkZWQsIHdoZW4gc2VtYW50aWNhbGx5IGEgYnV0dG9uIHRhZyBpcyB0aGVcbiAqIGJldHRlciBjaG9pY2UuIFNhZmVBbmNob3IgZW5zdXJlcyB0aGF0IHdoZW4gYW4gYW5jaG9yIGlzIHVzZWQgbGlrZSBhXG4gKiBidXR0b24gaXRzIGFjY2Vzc2libGUuIEl0IGFsc28gZW11bGF0ZXMgaW5wdXQgYGRpc2FibGVkYCBiZWhhdmlvciBmb3JcbiAqIGxpbmtzLCB3aGljaCBpcyB1c3VhbGx5IGRlc2lyYWJsZSBmb3IgQnV0dG9ucywgTmF2SXRlbXMsIERyb3Bkb3duSXRlbXMsIGV0Yy5cbiAqL1xuXG5cbnZhciBTYWZlQW5jaG9yID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdhJyA6IF9yZWYkYXMsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBvbktleURvd24gPSBfcmVmLm9uS2V5RG93bixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXNcIiwgXCJkaXNhYmxlZFwiLCBcIm9uS2V5RG93blwiXSk7XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB2YXIgaHJlZiA9IHByb3BzLmhyZWYsXG4gICAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuXG4gICAgaWYgKGRpc2FibGVkIHx8IGlzVHJpdmlhbEhyZWYoaHJlZikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGhhbmRsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICBwcm9wcy5yb2xlID0gcHJvcHMucm9sZSB8fCAnYnV0dG9uJzsgLy8gd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgYSBocmVmIGF0dHJpYnV0ZSBvbiB0aGUgbm9kZVxuICAgIC8vIG90aGVyd2lzZSwgdGhlIGN1cnNvciBpbmNvcnJlY3RseSBzdHlsZWQgKGV4Y2VwdCB3aXRoIHJvbGU9J2J1dHRvbicpXG5cbiAgICBwcm9wcy5ocmVmID0gcHJvcHMuaHJlZiB8fCAnIyc7XG4gIH1cblxuICBpZiAoZGlzYWJsZWQpIHtcbiAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xuICAgIHByb3BzWydhcmlhLWRpc2FibGVkJ10gPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLCB7XG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgb25LZXlEb3duOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICB9KSk7XG59KTtcblNhZmVBbmNob3IuZGlzcGxheU5hbWUgPSAnU2FmZUFuY2hvcic7XG5leHBvcnQgZGVmYXVsdCBTYWZlQW5jaG9yOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHZhcmlhbnQ6ICdwcmltYXJ5JyxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xudmFyIEJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgdmFyaWFudCA9IF9yZWYudmFyaWFudCxcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYmxvY2sgPSBfcmVmLmJsb2NrLFxuICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgIGFzID0gX3JlZi5hcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJ2YXJpYW50XCIsIFwic2l6ZVwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImJsb2NrXCIsIFwidHlwZVwiLCBcImFzXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnYnRuJyk7XG4gIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeCwgYWN0aXZlICYmICdhY3RpdmUnLCBwcmVmaXggKyBcIi1cIiArIHZhcmlhbnQsIGJsb2NrICYmIHByZWZpeCArIFwiLWJsb2NrXCIsIHNpemUgJiYgcHJlZml4ICsgXCItXCIgKyBzaXplKTtcblxuICBpZiAocHJvcHMuaHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGFzOiBhcyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzZXMsIHByb3BzLmRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gICAgfSkpO1xuICB9XG5cbiAgaWYgKHJlZikge1xuICAgIHByb3BzLnJlZiA9IHJlZjtcbiAgfVxuXG4gIGlmICh0eXBlKSB7XG4gICAgcHJvcHMudHlwZSA9IHR5cGU7XG4gIH0gZWxzZSBpZiAoIWFzKSB7XG4gICAgcHJvcHMudHlwZSA9ICdidXR0b24nO1xuICB9XG5cbiAgdmFyIENvbXBvbmVudCA9IGFzIHx8ICdidXR0b24nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5CdXR0b24uZGlzcGxheU5hbWUgPSAnQnV0dG9uJztcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiZXhwb3J0IGNvbnN0IGdldExvZ2dlciA9ICgpID0+IGNvbnNvbGU7XG4iLCJjb25zdCBub3Rlczogc3RyaW5nW10gPSBbXG4gIFwiQVwiLCAvLyAyMVxuICBcIkLima1cIiwgLy8gMjJcbiAgXCJCXCIsIC8vIDIzXG4gIFwiQ1wiLCAvLyAyNFxuICBcIkPima9cIiwgLy8gMjVcbiAgXCJEXCIsIC8vIDI2XG4gIFwiROKZr1wiLCAvLyAyN1xuICBcIkVcIiwgLy8gMjhcbiAgXCJGXCIsIC8vIDI5XG4gIFwiRuKZr1wiLCAvLyAzMFxuICBcIkdcIiwgLy8gMzFcbiAgXCJH4pmvXCIsIC8vIDMyXG5dO1xuY29uc3QgbmFtZSA9IChub3RlOiBudW1iZXIpOiBzdHJpbmcgPT4gbm90ZXNbKG5vdGUgLSAyMSkgJSAxMl07XG5jb25zdCBvY3RhdmUgPSAobm90ZTogbnVtYmVyKTogbnVtYmVyID0+IE1hdGguZmxvb3Iobm90ZSAvIDEyIC0gMSk7XG5cbmNvbnN0IG5vdGVUb0ZyZXEgPSAobm90ZTogbnVtYmVyKTogbnVtYmVyID0+XG4gIDQ0MCAqIE1hdGgucG93KDIsIChub3RlIC0gNjkpIC8gMTIpO1xuXG5jb25zdCBmcmVxVG9Ob3RlID0gKGZyZXE6IG51bWJlcik6IG51bWJlciA9PiA2OSArIDEyICogTWF0aC5sb2cyKGZyZXEgLyA0NDApO1xuXG5jb25zdCBkaWZmID0gKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyID0+IDEyMDAgKiBNYXRoLmxvZzIoYiAvIGEpO1xuXG5jbGFzcyBOb3RlIHtcbiAgcmVhZG9ubHkgZnJlcXVlbmN5OiBudW1iZXI7XG4gIHJlYWRvbmx5IG5vdGU6IG51bWJlcjtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICByZWFkb25seSBvY3RhdmU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9mcmVxOiBudW1iZXIpIHtcbiAgICB0aGlzLm5vdGUgPSBNYXRoLnJvdW5kKGZyZXFUb05vdGUoX2ZyZXEpKTtcblxuICAgIHRoaXMuZnJlcXVlbmN5ID0gbm90ZVRvRnJlcSh0aGlzLm5vdGUpO1xuICAgIHRoaXMubmFtZSA9IG5hbWUodGhpcy5ub3RlKTtcbiAgICB0aGlzLm9jdGF2ZSA9IG9jdGF2ZSh0aGlzLm5vdGUpO1xuICB9XG59XG5cbnR5cGUgUGl0Y2ggPSB7XG4gIHRhcmdldDogTm90ZTtcbiAgbm90ZTogbnVtYmVyO1xuICBmcmVxdWVuY3k6IG51bWJlcjtcbiAgZGlmZjogbnVtYmVyO1xufTtcblxuY29uc3Qgbm90ZSA9IChmcmVxPzogbnVtYmVyIHwgbnVsbCk6IFBpdGNoIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKGZyZXEgPT09IHVuZGVmaW5lZCB8fCBmcmVxID09PSBudWxsKSByZXR1cm47XG5cbiAgY29uc3QgbiA9IG5ldyBOb3RlKGZyZXEpO1xuICByZXR1cm4ge1xuICAgIGZyZXF1ZW5jeTogZnJlcSxcbiAgICB0YXJnZXQ6IG4sXG4gICAgbm90ZTogZnJlcVRvTm90ZShmcmVxKSxcbiAgICBkaWZmOiBkaWZmKG4uZnJlcXVlbmN5LCBmcmVxKSxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IG5hbWUsIG9jdGF2ZSwgbm90ZSwgTm90ZSwgUGl0Y2gsIGZyZXFUb05vdGUsIG5vdGVUb0ZyZXEsIGRpZmYgfTtcbiIsImltcG9ydCBcIm1sNVwiO1xuXG5pbXBvcnQgeyBub3RlLCBQaXRjaCB9IGZyb20gXCJwaXRjaC9ub3Rlc1wiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImxvZ1wiO1xuY29uc3QgTE9HID0gZ2V0TG9nZ2VyKCk7XG5cbmV4cG9ydCB0eXBlIFNhbXBsZSA9IFBpdGNoIHwgdW5kZWZpbmVkO1xuZXhwb3J0IHR5cGUgUmVjb3JkaW5nID0gU2FtcGxlW107XG5cbnR5cGUgUGl0Y2hHZW5lcmF0b3IgPSBBc3luY0dlbmVyYXRvcjxTYW1wbGU+O1xuXG5jb25zdCBNT0RFTF9VUkwgPVxuICBcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9tbDVqcy9tbDUtZGF0YS1hbmQtbW9kZWxzL21vZGVscy9waXRjaC1kZXRlY3Rpb24vY3JlcGUvXCI7XG5cbmFzeW5jIGZ1bmN0aW9uKiBtbDVQaXRjaERldGVjdGlvbihcbiAgY3R4OiBBdWRpb0NvbnRleHQsXG4gIHN0cmVhbTogTWVkaWFTdHJlYW1cbik6IFBpdGNoR2VuZXJhdG9yIHtcbiAgY29uc3QgcGl0Y2hEZXRlY3Rpb246IGFueSA9IG1sNS5waXRjaERldGVjdGlvbihNT0RFTF9VUkwsIGN0eCwgc3RyZWFtKTtcbiAgTE9HLmluZm8oXCJDcmVhdGVkIHBpdGNoIGRldGVjdGlvbi5cIiwgcGl0Y2hEZXRlY3Rpb24pO1xuICBcbiAgYXdhaXQgcGl0Y2hEZXRlY3Rpb24ucmVhZHk7XG4gIExPRy5pbmZvKFwiSW5pdGlhbGl6ZWQgdGhlIG1vZGVsLlwiKTtcblxuICB3aGlsZSAoc3RyZWFtLmFjdGl2ZSAmJiBjdHguc3RhdGUgPT09IFwicnVubmluZ1wiKSB7XG4gICAgY29uc3QgcGl0Y2ggPSBhd2FpdCBwaXRjaERldGVjdGlvbi5nZXRQaXRjaCgpO1xuICAgIGlmIChwaXRjaCA9PT0gbnVsbCkge1xuICAgICAgTE9HLmRlYnVnKFwiU2tpcHBpbmdcIik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB5aWVsZCBub3RlKHBpdGNoKTtcbiAgfVxuXG4gIHJldHVybjtcbn1cblxuZXhwb3J0IHsgUGl0Y2hHZW5lcmF0b3IsIG1sNVBpdGNoRGV0ZWN0aW9uIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG50eXBlIEdlbmVyYXRvckNvbXBvbmVudFByb3BzPFQ+ID0ge1xuICBnZW5lcmF0b3I6IEFzeW5jR2VuZXJhdG9yPFQgfCB1bmRlZmluZWQsIGFueSwgYW55PjtcbiAgY2hpbGRyZW46IGFueTtcbiAgb25UaWNrPzogKHQ6IFQgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG59O1xuXG5mdW5jdGlvbiBHZW5lcmF0b3JDb21wb25lbnQ8VD4ocHJvcHM6IEdlbmVyYXRvckNvbXBvbmVudFByb3BzPFQ+KSB7XG4gIGNvbnN0IFtmbGFnLCBzZXRGbGFnXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2N1cnJlbnRWYWx1ZSwgc2V0Q3VycmVudFZhbHVlXSA9IHVzZVN0YXRlPFQgfCB1bmRlZmluZWQ+KCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgbW91bnRlZCA9IHRydWU7XG5cbiAgICBwcm9wcy5nZW5lcmF0b3IubmV4dCgpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5kb25lIHx8ICFtb3VudGVkKSByZXR1cm47XG5cbiAgICAgIHNldEN1cnJlbnRWYWx1ZShyZXN1bHQudmFsdWUpO1xuICAgICAgc2V0RmxhZyghZmxhZyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtmbGFnXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvcHMub25UaWNrICYmIGN1cnJlbnRWYWx1ZSkge1xuICAgICAgcHJvcHMub25UaWNrKGN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9LCBbY3VycmVudFZhbHVlXSk7XG5cbiAgaWYgKHR5cGVvZiBwcm9wcy5jaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKGN1cnJlbnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCB7IEdlbmVyYXRvckNvbXBvbmVudCB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgU3Bpbm5lciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgdmFyaWFudCA9IF9yZWYudmFyaWFudCxcbiAgICAgIGFuaW1hdGlvbiA9IF9yZWYuYW5pbWF0aW9uLFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcImFuaW1hdGlvblwiLCBcInNpemVcIiwgXCJjaGlsZHJlblwiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ3NwaW5uZXInKTtcbiAgdmFyIGJzU3Bpbm5lclByZWZpeCA9IGJzUHJlZml4ICsgXCItXCIgKyBhbmltYXRpb247XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzU3Bpbm5lclByZWZpeCwgc2l6ZSAmJiBic1NwaW5uZXJQcmVmaXggKyBcIi1cIiArIHNpemUsIHZhcmlhbnQgJiYgXCJ0ZXh0LVwiICsgdmFyaWFudClcbiAgfSksIGNoaWxkcmVuKTtcbn0pO1xuU3Bpbm5lci5kaXNwbGF5TmFtZSA9ICdTcGlubmVyJztcbmV4cG9ydCBkZWZhdWx0IFNwaW5uZXI7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUGl0Y2hHZW5lcmF0b3IsIFNhbXBsZSB9IGZyb20gXCJwaXRjaC9waXRjaFwiO1xuXG5pbXBvcnQgeyBHZW5lcmF0b3JDb21wb25lbnQgfSBmcm9tIFwiLi9HZW5lcmF0b3JDb21wb25lbnRcIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCJsb2dcIjtcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5cbmNvbnN0IExPRyA9IGdldExvZ2dlcigpO1xuXG50eXBlIFJlY29yZGluZyA9IFNhbXBsZVtdO1xudHlwZSBQaXRjaFJlY29yZGVyUHJvcHMgPSB7XG4gIHBpdGNoR2VuZXJhdG9yPzogUGl0Y2hHZW5lcmF0b3I7XG4gIHRpbWVvdXRNczogbnVtYmVyO1xuICBvbkZpbmlzaDogKHNhbXBsZXM6IFJlY29yZGluZykgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBQaXRjaFJlY29yZGVyKHtcbiAgcGl0Y2hHZW5lcmF0b3IsXG4gIHRpbWVvdXRNcyxcbiAgb25GaW5pc2gsXG59OiBQaXRjaFJlY29yZGVyUHJvcHMpIHtcbiAgY29uc3QgW3JlY29yZGluZywgc2V0UmVjb3JkaW5nXSA9IHVzZVN0YXRlPFJlY29yZGluZz4oW10pO1xuICBjb25zdCBbc3RhcnRlZCwgc2V0U3RhcnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtmaW5pc2hlZCwgc2V0RmluaXNoZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIExPRy5pbmZvKFwiU2V0dGluZyB1cCB0aGUgdGltZW91dC5cIik7XG4gICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0RmluaXNoZWQodHJ1ZSk7XG4gICAgICBzZXRTdGFydGVkKGZhbHNlKTtcbiAgICB9LCB0aW1lb3V0TXMpO1xuXG4gICAgTE9HLmluZm8oXCJTZXQgdXAgdGltZXIgJWQgZm9yICVkIG1zLlwiLCB0LCB0aW1lb3V0TXMpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIExPRy5pbmZvKFwiQ2xlYXJpbmcgb3V0IHRoZSB0aW1lb3V0ICVkLlwiLCB0KTtcbiAgICAgIGNsZWFyVGltZW91dCh0KTtcbiAgICB9O1xuICB9LCBbc3RhcnRlZF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICBMT0cuaW5mbyhcIkZpbmlzaGluZyByZWNvcmRpbmcuXCIpO1xuICAgICAgb25GaW5pc2gocmVjb3JkaW5nKTtcbiAgICB9XG4gIH0sIFtmaW5pc2hlZCwgcmVjb3JkaW5nXSk7XG5cbiAgY29uc3QgYWRkU2FtcGxlID0gKHA6IFNhbXBsZSkgPT4ge1xuICAgIGNvbnN0IG5ld1JlY29yZGluZyA9IHJlY29yZGluZy5jb25jYXQoW3BdKTtcbiAgICBzZXRSZWNvcmRpbmcobmV3UmVjb3JkaW5nKTtcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIHNldFN0YXJ0ZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxhYmVsID0gIXN0YXJ0ZWQgPyAoXG4gICAgPHNwYW4+c2luZyBub3chPC9zcGFuPlxuICApIDogKFxuICAgIDxTcGlubmVyIGFuaW1hdGlvbj1cImdyb3dcIiB2YXJpYW50PVwiZGFuZ2VyXCIgLz5cbiAgKTtcblxuICByZXR1cm4gcGl0Y2hHZW5lcmF0b3IgPyAoXG4gICAgPEdlbmVyYXRvckNvbXBvbmVudCBnZW5lcmF0b3I9e3BpdGNoR2VuZXJhdG9yfSBvblRpY2s9e2FkZFNhbXBsZX0+XG4gICAgICA8aDM+e2xhYmVsfTwvaDM+XG4gICAgPC9HZW5lcmF0b3JDb21wb25lbnQ+XG4gICkgOiAoXG4gICAgPFNwaW5uZXIgYW5pbWF0aW9uPVwiYm9yZGVyXCIgdmFyaWFudD1cInByaW1hcnlcIiAvPlxuICApO1xufVxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBmbHVpZDogZmFsc2Vcbn07XG52YXIgQ29udGFpbmVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBmbHVpZCA9IF9yZWYuZmx1aWQsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiRhcyxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImZsdWlkXCIsIFwiYXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHZhciBwcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdjb250YWluZXInKTtcbiAgdmFyIHN1ZmZpeCA9IHR5cGVvZiBmbHVpZCA9PT0gJ3N0cmluZycgPyBcIi1cIiArIGZsdWlkIDogJy1mbHVpZCc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGZsdWlkID8gXCJcIiArIHByZWZpeCArIHN1ZmZpeCA6IHByZWZpeClcbiAgfSkpO1xufSk7XG5Db250YWluZXIuZGlzcGxheU5hbWUgPSAnQ29udGFpbmVyJztcbkNvbnRhaW5lci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBDb250YWluZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgREVWSUNFX1NJWkVTID0gWyd4bCcsICdsZycsICdtZCcsICdzbScsICd4cyddO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbm9HdXR0ZXJzOiBmYWxzZVxufTtcbnZhciBSb3cgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgbm9HdXR0ZXJzID0gX3JlZi5ub0d1dHRlcnMsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiRhcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJub0d1dHRlcnNcIiwgXCJhc1wiXSk7XG5cbiAgdmFyIGRlY29yYXRlZEJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAncm93Jyk7XG4gIHZhciBzaXplUHJlZml4ID0gZGVjb3JhdGVkQnNQcmVmaXggKyBcIi1jb2xzXCI7XG4gIHZhciBjbGFzc2VzID0gW107XG4gIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChicmtQb2ludCkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1ticmtQb2ludF07XG4gICAgZGVsZXRlIHByb3BzW2Jya1BvaW50XTtcbiAgICB2YXIgY29scztcblxuICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgY29scyA9IHByb3BWYWx1ZS5jb2xzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xzID0gcHJvcFZhbHVlO1xuICAgIH1cblxuICAgIHZhciBpbmZpeCA9IGJya1BvaW50ICE9PSAneHMnID8gXCItXCIgKyBicmtQb2ludCA6ICcnO1xuICAgIGlmIChjb2xzICE9IG51bGwpIGNsYXNzZXMucHVzaChcIlwiICsgc2l6ZVByZWZpeCArIGluZml4ICsgXCItXCIgKyBjb2xzKTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5hcHBseSh2b2lkIDAsIFtjbGFzc05hbWUsIGRlY29yYXRlZEJzUHJlZml4LCBub0d1dHRlcnMgJiYgJ25vLWd1dHRlcnMnXS5jb25jYXQoY2xhc3NlcykpXG4gIH0pKTtcbn0pO1xuUm93LmRpc3BsYXlOYW1lID0gJ1Jvdyc7XG5Sb3cuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgUm93OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIERFVklDRV9TSVpFUyA9IFsneGwnLCAnbGcnLCAnbWQnLCAnc20nLCAneHMnXTtcbnZhciBDb2wgPSBSZWFjdC5mb3J3YXJkUmVmKCAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG5mdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnY29sJyk7XG4gIHZhciBzcGFucyA9IFtdO1xuICB2YXIgY2xhc3NlcyA9IFtdO1xuICBERVZJQ0VfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoYnJrUG9pbnQpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbYnJrUG9pbnRdO1xuICAgIGRlbGV0ZSBwcm9wc1ticmtQb2ludF07XG4gICAgdmFyIHNwYW47XG4gICAgdmFyIG9mZnNldDtcbiAgICB2YXIgb3JkZXI7XG5cbiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcgJiYgcHJvcFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciBfcHJvcFZhbHVlJHNwYW4gPSBwcm9wVmFsdWUuc3BhbjtcbiAgICAgIHNwYW4gPSBfcHJvcFZhbHVlJHNwYW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcFZhbHVlJHNwYW47XG4gICAgICBvZmZzZXQgPSBwcm9wVmFsdWUub2Zmc2V0O1xuICAgICAgb3JkZXIgPSBwcm9wVmFsdWUub3JkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwYW4gPSBwcm9wVmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGluZml4ID0gYnJrUG9pbnQgIT09ICd4cycgPyBcIi1cIiArIGJya1BvaW50IDogJyc7XG4gICAgaWYgKHNwYW4pIHNwYW5zLnB1c2goc3BhbiA9PT0gdHJ1ZSA/IFwiXCIgKyBwcmVmaXggKyBpbmZpeCA6IFwiXCIgKyBwcmVmaXggKyBpbmZpeCArIFwiLVwiICsgc3Bhbik7XG4gICAgaWYgKG9yZGVyICE9IG51bGwpIGNsYXNzZXMucHVzaChcIm9yZGVyXCIgKyBpbmZpeCArIFwiLVwiICsgb3JkZXIpO1xuICAgIGlmIChvZmZzZXQgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKFwib2Zmc2V0XCIgKyBpbmZpeCArIFwiLVwiICsgb2Zmc2V0KTtcbiAgfSk7XG5cbiAgaWYgKCFzcGFucy5sZW5ndGgpIHtcbiAgICBzcGFucy5wdXNoKHByZWZpeCk7IC8vIHBsYWluICdjb2wnXG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMuYXBwbHkodm9pZCAwLCBbY2xhc3NOYW1lXS5jb25jYXQoc3BhbnMsIGNsYXNzZXMpKVxuICB9KSk7XG59KTtcbkNvbC5kaXNwbGF5TmFtZSA9ICdDb2wnO1xuZXhwb3J0IGRlZmF1bHQgQ29sOyIsImltcG9ydCBjYW5Vc2VET00gZnJvbSAnLi9jYW5Vc2VET00nO1xuaW1wb3J0IGNzcyBmcm9tICcuL2Nzcyc7XG5pbXBvcnQgbGlzdGVuIGZyb20gJy4vbGlzdGVuJztcbmV4cG9ydCB2YXIgVFJBTlNJVElPTl9TVVBQT1JURUQgPSBjYW5Vc2VET00gJiYgJ29udHJhbnNpdGlvbmVuZCcgaW4gd2luZG93O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRHVyYXRpb24obm9kZSkge1xuICB2YXIgc3RyID0gY3NzKG5vZGUsICd0cmFuc2l0aW9uRHVyYXRpb24nKSB8fCAnJztcbiAgdmFyIG11bHQgPSBzdHIuaW5kZXhPZignbXMnKSA9PT0gLTEgPyAxMDAwIDogMTtcbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKSAqIG11bHQ7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGV2dC5pbml0RXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB0cnVlLCB0cnVlKTtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dCk7XG59XG5cbmZ1bmN0aW9uIGVtdWxhdGVUcmFuc2l0aW9uRW5kKGVsZW1lbnQsIGR1cmF0aW9uLCBwYWRkaW5nKSB7XG4gIGlmIChwYWRkaW5nID09PSB2b2lkIDApIHtcbiAgICBwYWRkaW5nID0gNTtcbiAgfVxuXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgdmFyIGhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KTtcbiAgfSwgZHVyYXRpb24gKyBwYWRkaW5nKTtcbiAgdmFyIHJlbW92ZSA9IGxpc3RlbihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICB9LCB7XG4gICAgb25jZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICByZW1vdmUoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlbGVtZW50LCBoYW5kbGVyLCBkdXJhdGlvbikge1xuICBpZiAoZHVyYXRpb24gPT0gbnVsbCkgZHVyYXRpb24gPSBwYXJzZUR1cmF0aW9uKGVsZW1lbnQpIHx8IDA7XG4gIHZhciByZW1vdmVFbXVsYXRlID0gZW11bGF0ZVRyYW5zaXRpb25FbmQoZWxlbWVudCwgZHVyYXRpb24pO1xuICB2YXIgcmVtb3ZlID0gbGlzdGVuKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kJywgaGFuZGxlcik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmVtb3ZlRW11bGF0ZSgpO1xuICAgIHJlbW92ZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2l0aW9uRW5kOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihFbGVtZW50KVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuXG52YXIgX2ZhZGVTdHlsZXM7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnZG9tLWhlbHBlcnMvdHJhbnNpdGlvbkVuZCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbiwgeyBFTlRFUkVELCBFTlRFUklORyB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7XG5pbXBvcnQgdHJpZ2dlckJyb3dzZXJSZWZsb3cgZnJvbSAnLi90cmlnZ2VyQnJvd3NlclJlZmxvdyc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIHRpbWVvdXQ6IDMwMCxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2Vcbn07XG52YXIgZmFkZVN0eWxlcyA9IChfZmFkZVN0eWxlcyA9IHt9LCBfZmFkZVN0eWxlc1tFTlRFUklOR10gPSAnc2hvdycsIF9mYWRlU3R5bGVzW0VOVEVSRURdID0gJ3Nob3cnLCBfZmFkZVN0eWxlcyk7XG52YXIgRmFkZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpO1xuICAgIGlmIChwcm9wcy5vbkVudGVyKSBwcm9wcy5vbkVudGVyKG5vZGUpO1xuICB9LCBbcHJvcHNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBhZGRFbmRMaXN0ZW5lcjogdHJhbnNpdGlvbkVuZFxuICB9LCBwcm9wcywge1xuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyXG4gIH0pLCBmdW5jdGlvbiAoc3RhdHVzLCBpbm5lclByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcygnZmFkZScsIGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBmYWRlU3R5bGVzW3N0YXR1c10pXG4gICAgfSkpO1xuICB9KTtcbn0pO1xuRmFkZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5GYWRlLmRpc3BsYXlOYW1lID0gJ0ZhZGUnO1xuZXhwb3J0IGRlZmF1bHQgRmFkZTsiLCIvLyByZWFkaW5nIGEgZGltZW5zaW9uIHByb3Agd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byByZWNhbGN1bGF0ZSxcbi8vIHdoaWNoIHdpbGwgbGV0IG91ciBhbmltYXRpb25zIHdvcmtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgbm9kZS5vZmZzZXRIZWlnaHQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGxhYmVsOiAnQ2xvc2UnXG59O1xudmFyIENsb3NlQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImxhYmVsXCIsIFwib25DbGlja1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcygnY2xvc2UnLCBjbGFzc05hbWUpLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgXCJcXHhEN1wiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gIH0sIGxhYmVsKSk7XG59KTtcbkNsb3NlQnV0dG9uLmRpc3BsYXlOYW1lID0gJ0Nsb3NlQnV0dG9uJztcbkNsb3NlQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNsb3NlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENsb3NlQnV0dG9uOyIsInZhciBySHlwaGVuID0gLy0oLikvZztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGNhbWVsaXplIGZyb20gJ2RvbS1oZWxwZXJzL2NhbWVsaXplJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgcGFzY2FsQ2FzZSA9IGZ1bmN0aW9uIHBhc2NhbENhc2Uoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaXplKHN0cikuc2xpY2UoMSk7XG59O1xuXG4vLyBUT0RPOiBlbXN0cmljdGVuICYgZml4IHRoZSB0eXBpbmcgaGVyZSEgYGNyZWF0ZVdpdGhCc1ByZWZpeDxURWxlbWVudFR5cGU+Li4uYFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlV2l0aEJzUHJlZml4KHByZWZpeCwgX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfcmVmJGRpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBwYXNjYWxDYXNlKHByZWZpeCkgOiBfcmVmJGRpc3BsYXlOYW1lLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZi5Db21wb25lbnQsXG4gICAgICBkZWZhdWx0UHJvcHMgPSBfcmVmLmRlZmF1bHRQcm9wcztcblxuICB2YXIgQnNDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgcmVmKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IF9yZWYyLmNsYXNzTmFtZSxcbiAgICAgICAgYnNQcmVmaXggPSBfcmVmMi5ic1ByZWZpeCxcbiAgICAgICAgX3JlZjIkYXMgPSBfcmVmMi5hcyxcbiAgICAgICAgVGFnID0gX3JlZjIkYXMgPT09IHZvaWQgMCA/IENvbXBvbmVudCB8fCAnZGl2JyA6IF9yZWYyJGFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcImFzXCJdKTtcblxuICAgIHZhciByZXNvbHZlZFByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgcHJlZml4KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHJlc29sdmVkUHJlZml4KVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xuICBCc0NvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4gIEJzQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIHJldHVybiBCc0NvbXBvbmVudDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVW5jb250cm9sbGVkIH0gZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnQHJlc3RhcnQvaG9va3MvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcbmltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tICcuL0Nsb3NlQnV0dG9uJztcbmltcG9ydCBkaXZXaXRoQ2xhc3NOYW1lIGZyb20gJy4vZGl2V2l0aENsYXNzTmFtZSc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG52YXIgRGl2U3R5bGVkQXNINCA9IGRpdldpdGhDbGFzc05hbWUoJ2g0Jyk7XG5EaXZTdHlsZWRBc0g0LmRpc3BsYXlOYW1lID0gJ0RpdlN0eWxlZEFzSDQnO1xudmFyIEFsZXJ0SGVhZGluZyA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnYWxlcnQtaGVhZGluZycsIHtcbiAgQ29tcG9uZW50OiBEaXZTdHlsZWRBc0g0XG59KTtcbnZhciBBbGVydExpbmsgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2FsZXJ0LWxpbmsnLCB7XG4gIENvbXBvbmVudDogU2FmZUFuY2hvclxufSk7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiB0cnVlLFxuICB0cmFuc2l0aW9uOiBGYWRlLFxuICBjbG9zZUxhYmVsOiAnQ2xvc2UgYWxlcnQnXG59O1xudmFyIEFsZXJ0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAodW5jb250cm9sbGVkUHJvcHMsIHJlZikge1xuICB2YXIgX3VzZVVuY29udHJvbGxlZCA9IHVzZVVuY29udHJvbGxlZCh1bmNvbnRyb2xsZWRQcm9wcywge1xuICAgIHNob3c6ICdvbkNsb3NlJ1xuICB9KSxcbiAgICAgIGJzUHJlZml4ID0gX3VzZVVuY29udHJvbGxlZC5ic1ByZWZpeCxcbiAgICAgIHNob3cgPSBfdXNlVW5jb250cm9sbGVkLnNob3csXG4gICAgICBjbG9zZUxhYmVsID0gX3VzZVVuY29udHJvbGxlZC5jbG9zZUxhYmVsLFxuICAgICAgY2xhc3NOYW1lID0gX3VzZVVuY29udHJvbGxlZC5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF91c2VVbmNvbnRyb2xsZWQuY2hpbGRyZW4sXG4gICAgICB2YXJpYW50ID0gX3VzZVVuY29udHJvbGxlZC52YXJpYW50LFxuICAgICAgb25DbG9zZSA9IF91c2VVbmNvbnRyb2xsZWQub25DbG9zZSxcbiAgICAgIGRpc21pc3NpYmxlID0gX3VzZVVuY29udHJvbGxlZC5kaXNtaXNzaWJsZSxcbiAgICAgIHRyYW5zaXRpb24gPSBfdXNlVW5jb250cm9sbGVkLnRyYW5zaXRpb24sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF91c2VVbmNvbnRyb2xsZWQsIFtcImJzUHJlZml4XCIsIFwic2hvd1wiLCBcImNsb3NlTGFiZWxcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcInZhcmlhbnRcIiwgXCJvbkNsb3NlXCIsIFwiZGlzbWlzc2libGVcIiwgXCJ0cmFuc2l0aW9uXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnYWxlcnQnKTtcbiAgdmFyIGhhbmRsZUNsb3NlID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZSkge1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGZhbHNlLCBlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgVHJhbnNpdGlvbiA9IHRyYW5zaXRpb24gPT09IHRydWUgPyBGYWRlIDogdHJhbnNpdGlvbjtcbiAgdmFyIGFsZXJ0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IFwiYWxlcnRcIlxuICB9LCBUcmFuc2l0aW9uID8gcHJvcHMgOiB1bmRlZmluZWQsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXgsIHZhcmlhbnQgJiYgcHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBkaXNtaXNzaWJsZSAmJiBwcmVmaXggKyBcIi1kaXNtaXNzaWJsZVwiKVxuICB9KSwgZGlzbWlzc2libGUgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VCdXR0b24sIHtcbiAgICBvbkNsaWNrOiBoYW5kbGVDbG9zZSxcbiAgICBsYWJlbDogY2xvc2VMYWJlbFxuICB9KSwgY2hpbGRyZW4pO1xuICBpZiAoIVRyYW5zaXRpb24pIHJldHVybiBzaG93ID8gYWxlcnQgOiBudWxsO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgIHVubW91bnRPbkV4aXQ6IHRydWVcbiAgfSwgcHJvcHMsIHtcbiAgICByZWY6IHVuZGVmaW5lZCxcbiAgICBpbjogc2hvd1xuICB9KSwgYWxlcnQpO1xufSk7XG5BbGVydC5kaXNwbGF5TmFtZSA9ICdBbGVydCc7XG5BbGVydC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5BbGVydC5MaW5rID0gQWxlcnRMaW5rO1xuQWxlcnQuSGVhZGluZyA9IEFsZXJ0SGVhZGluZztcbmV4cG9ydCBkZWZhdWx0IEFsZXJ0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgcmV0dXJuIFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHAsIHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgcCwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMocC5jbGFzc05hbWUsIGNsYXNzTmFtZSlcbiAgICB9KSk7XG4gIH0pO1xufSk7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xudmFyIFN0YXJGaWxsID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBzaXplID0gX3JlZi5zaXplLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJjb2xvclwiLCBcInNpemVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE2IDE2XCIsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgaGVpZ2h0OiBzaXplLFxuICAgIGZpbGw6IGNvbG9yXG4gIH0sIHJlc3QpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMy42MTIgMTUuNDQzYy0uMzg2LjE5OC0uODI0LS4xNDktLjc0Ni0uNTkybC44My00LjczTC4xNzMgNi43NjVjLS4zMjktLjMxNC0uMTU4LS44ODguMjgzLS45NWw0Ljg5OC0uNjk2TDcuNTM4Ljc5MmMuMTk3LS4zOS43My0uMzkuOTI3IDBsMi4xODQgNC4zMjcgNC44OTguNjk2Yy40NDEuMDYyLjYxMi42MzYuMjgzLjk1bC0zLjUyMyAzLjM1Ni44MyA0LjczYy4wNzguNDQzLS4zNi43OS0uNzQ2LjU5Mkw4IDEzLjE4N2wtNC4zODkgMi4yNTZ6XCJcbiAgfSkpO1xufSk7XG5TdGFyRmlsbC5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn07XG5TdGFyRmlsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgc2l6ZTogJzFlbSdcbn07XG5leHBvcnQgZGVmYXVsdCBTdGFyRmlsbDsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG52YXIgU3RhciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiY29sb3JcIiwgXCJzaXplXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLFxuICAgIHdpZHRoOiBzaXplLFxuICAgIGhlaWdodDogc2l6ZSxcbiAgICBmaWxsOiBjb2xvclxuICB9LCByZXN0KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk0yLjg2NiAxNC44NWMtLjA3OC40NDQuMzYuNzkxLjc0Ni41OTNsNC4zOS0yLjI1NiA0LjM4OSAyLjI1NmMuMzg2LjE5OC44MjQtLjE0OS43NDYtLjU5MmwtLjgzLTQuNzMgMy41MjMtMy4zNTZjLjMyOS0uMzE0LjE1OC0uODg4LS4yODMtLjk1bC00Ljg5OC0uNjk2TDguNDY1Ljc5MmEuNTEzLjUxMyAwIDAgMC0uOTI3IDBMNS4zNTQgNS4xMmwtNC44OTguNjk2Yy0uNDQxLjA2Mi0uNjEyLjYzNi0uMjgzLjk1bDMuNTIzIDMuMzU2LS44MyA0Ljczem00LjkwNS0yLjc2N2wtMy42ODYgMS44OTQuNjk0LTMuOTU3YS41NjUuNTY1IDAgMCAwLS4xNjMtLjUwNUwxLjcxIDYuNzQ1bDQuMDUyLS41NzZhLjUyNS41MjUgMCAwIDAgLjM5My0uMjg4bDEuODQ3LTMuNjU4IDEuODQ2IDMuNjU4YS41MjUuNTI1IDAgMCAwIC4zOTMuMjg4bDQuMDUyLjU3NS0yLjkwNiAyLjc3YS41NjQuNTY0IDAgMCAwLS4xNjMuNTA2bC42OTQgMy45NTctMy42ODYtMS44OTRhLjUwMy41MDMgMCAwIDAtLjQ2MSAwelwiXG4gIH0pKTtcbn0pO1xuU3Rhci5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn07XG5TdGFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBzaXplOiAnMWVtJ1xufTtcbmV4cG9ydCBkZWZhdWx0IFN0YXI7IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cblx0aWYgKHR5cGVvZiBtaXggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtaXggPT09ICdudW1iZXInKSB7XG5cdFx0c3RyICs9IG1peDtcblx0fSBlbHNlIGlmICh0eXBlb2YgbWl4ID09PSAnb2JqZWN0Jykge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KG1peCkpIHtcblx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRpZiAoeSA9IHRvVmFsKG1peFtrXSkpIHtcblx0XHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0XHRzdHIgKz0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChrIGluIG1peCkge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRzdHIgKz0gaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgdG1wLCB4LCBzdHI9Jyc7XG5cdHdoaWxlIChpIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdGlmICh0bXAgPSBhcmd1bWVudHNbaSsrXSkge1xuXHRcdFx0aWYgKHggPSB0b1ZhbCh0bXApKSB7XG5cdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdHN0ciArPSB4XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBBbGVydCwgQ29udGFpbmVyLCBSb3csIENvbCB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcbmltcG9ydCB7IFN0YXIsIFN0YXJGaWxsIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcC1pY29uc1wiO1xuXG5pbXBvcnQgeyBTYW1wbGUsIFJlY29yZGluZyB9IGZyb20gXCJwaXRjaC9waXRjaFwiO1xuaW1wb3J0IHsgUGl0Y2ggfSBmcm9tIFwicGl0Y2gvbm90ZXNcIjtcbmltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XG5cbnR5cGUgUmF0aW5nUHJvcHMgPSB7XG4gIG5vOiBudW1iZXI7XG4gIG9mOiBudW1iZXI7XG59O1xuZnVuY3Rpb24gUmF0aW5nKHsgbm8sIG9mIH06IFJhdGluZ1Byb3BzKSB7XG4gIGxldCBzdGFycyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG9mOyBpKyspIHtcbiAgICBzdGFycy5wdXNoKGkgPD0gbm8gPyA8U3RhckZpbGwgLz4gOiA8U3RhciAvPik7XG4gIH1cblxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2Nsc3goXCJ0ZXh0LXByaW1hcnlcIiwgXCJkaXNwbGF5LTNcIil9PntzdGFyc308L2Rpdj47XG59XG5cbnR5cGUgU3VtbWFyeVByb3BzID0ge1xuICByZWNvcmRpbmc6IFJlY29yZGluZztcbiAgcmVmZXJlbmNlOiBQaXRjaDtcbn07XG5jb25zdCBzdW0gPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IGEgKyBiO1xuZXhwb3J0IGZ1bmN0aW9uIFN1bW1hcnkoeyByZWNvcmRpbmcsIHJlZmVyZW5jZSB9OiBTdW1tYXJ5UHJvcHMpIHtcbiAgY29uc3Qgbm9uRW1wdHkgPSByZWNvcmRpbmcuZmlsdGVyKChzPzogU2FtcGxlKSA9PiAhIXMpO1xuICBjb25zdCBmcmVxUmVzdWx0ID1cbiAgICBub25FbXB0eVxuICAgICAgLm1hcCgoczogU2FtcGxlKSA9PiBzIS5mcmVxdWVuY3kgLSByZWZlcmVuY2UuZnJlcXVlbmN5KVxuICAgICAgLnJlZHVjZShzdW0sIDApIC8gbm9uRW1wdHkubGVuZ3RoO1xuXG4gIGNvbnN0IG1pZGlSZXN1bHQgPVxuICAgIG5vbkVtcHR5XG4gICAgICAubWFwKChzOiBTYW1wbGUpID0+IE1hdGguYWJzKHMhLm5vdGUgLSByZWZlcmVuY2Uubm90ZSkpXG4gICAgICAucmVkdWNlKHN1bSwgMCkgLyBub25FbXB0eS5sZW5ndGg7XG5cbiAgbGV0IHN0YXJDb3VudDogbnVtYmVyO1xuICBpZiAobWlkaVJlc3VsdCA8PSAwLjUpIHtcbiAgICBzdGFyQ291bnQgPSA1O1xuICB9IGVsc2UgaWYgKG1pZGlSZXN1bHQgPD0gMSkge1xuICAgIC8vIHdpdGhpbiBoYWxmIHN0ZXBcbiAgICBzdGFyQ291bnQgPSA0O1xuICB9IGVsc2UgaWYgKG1pZGlSZXN1bHQgPD0gMikge1xuICAgIC8vIHdpdGhpbiB3aG9sZSBzdGVwXG4gICAgc3RhckNvdW50ID0gMztcbiAgfSBlbHNlIGlmIChtaWRpUmVzdWx0IDw9IDQpIHtcbiAgICAvLyB3aXRoaW4gdGhpcmRcbiAgICBzdGFyQ291bnQgPSAyO1xuICB9IGVsc2UgaWYgKG1pZGlSZXN1bHQgPD0gNykge1xuICAgIC8vIHdpdGhpbm4gZmlmdGhcbiAgICBzdGFyQ291bnQgPSAxO1xuICB9IGVsc2Uge1xuICAgIC8vIHlvdSBzdWNrXG4gICAgc3RhckNvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxSb3c+XG4gICAgICAgIDxDb2wgY2xhc3NOYW1lPVwicGItM1wiPlxuICAgICAgICAgIDxSYXRpbmcgbm89e3N0YXJDb3VudH0gb2Y9ezV9IC8+XG4gICAgICAgIDwvQ29sPlxuICAgICAgPC9Sb3c+XG4gICAgICA8Um93PlxuICAgICAgICA8Q29sIGNsYXNzTmFtZT17Y2xzeChcImNvbC1tZC02XCIsIFwib2Zmc2V0LW1kLTNcIil9PlxuICAgICAgICAgIDxBbGVydCB2YXJpYW50PXtcInN1Y2Nlc3NcIn0+XG4gICAgICAgICAgICBSZWNlaXZlZCB7bm9uRW1wdHkubGVuZ3RofSBzYW1wbGUocykgYXZlcmFnaW5nIHRvIHtmcmVxUmVzdWx0fSBmcm9tXG4gICAgICAgICAgICBDPHN1Yj40PC9zdWI+LlxuICAgICAgICAgIDwvQWxlcnQ+XG4gICAgICAgIDwvQ29sPlxuICAgICAgPC9Sb3c+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImxvZ1wiO1xuXG5pbXBvcnQgeyBtbDVQaXRjaERldGVjdGlvbiwgUGl0Y2hHZW5lcmF0b3IsIFJlY29yZGluZyB9IGZyb20gXCJwaXRjaC9waXRjaFwiO1xuaW1wb3J0IHsgUGl0Y2gsIG5vdGUsIG5vdGVUb0ZyZXEgfSBmcm9tIFwicGl0Y2gvbm90ZXNcIjtcblxuaW1wb3J0IHsgUGl0Y2hSZWNvcmRlciB9IGZyb20gXCIuL1BpdGNoUmVjb3JkZXJcIjtcbmltcG9ydCB7IFN1bW1hcnkgfSBmcm9tIFwiLi9TdW1tYXJ5XCI7XG5cbmNvbnN0IExPRyA9IGdldExvZ2dlcigpO1xuY29uc3QgUGl0Y2hEZXRlY3Rpb24gPSAoKSA9PiB7XG4gIGNvbnN0IFtzdGFydGVkLCBzZXRJc1N0YXJ0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIC8vIEF1ZGlvIGludGVyZmFjZXNcbiAgY29uc3QgW2F1ZGlvQ29udGV4dCwgX10gPSB1c2VTdGF0ZShuZXcgQXVkaW9Db250ZXh0KCkpOyAvLyByZWFkLW9ubHlcbiAgY29uc3QgW3N0cmVhbSwgc2V0U3RyZWFtXSA9IHVzZVN0YXRlPE1lZGlhU3RyZWFtPigpO1xuICBjb25zdCBbcGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3IsIHNldFBpdGNoRGV0ZWN0aW9uR2VuZXJhdG9yXSA9IHVzZVN0YXRlPFxuICAgIFBpdGNoR2VuZXJhdG9yXG4gID4oKTtcbiAgY29uc3QgW3JlY29yZGluZywgc2V0UmVjb3JkaW5nXSA9IHVzZVN0YXRlPFJlY29yZGluZz4oKTtcblxuICAvLyBTZXQgdXAgdGhlIG1pY3JvcGhvbmUuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgTE9HLmluZm8oXCJBY3F1aXJpbmcgbWljcm9waG9uZS5cIik7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlc1xuICAgICAgLmdldFVzZXJNZWRpYSh7XG4gICAgICAgIGF1ZGlvOiB0cnVlLFxuICAgICAgICB2aWRlbzogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLnRoZW4oKG5ld1N0cmVhbSkgPT4ge1xuICAgICAgICBMT0cuZGVidWcoXG4gICAgICAgICAgXCJNaWNyb3Bob25lIGluaXRpYWxpemVkIHdpdGggc3RyZWFtOiAlaiwgYWN0aXZlPywgJXMsIHN0YXRlOiAlcy5cIixcbiAgICAgICAgICBuZXdTdHJlYW0sXG4gICAgICAgICAgbmV3U3RyZWFtLmFjdGl2ZSxcbiAgICAgICAgICBuZXdTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXS5yZWFkeVN0YXRlXG4gICAgICAgICk7XG4gICAgICAgIHNldFN0cmVhbShuZXdTdHJlYW0pO1xuICAgICAgfSk7XG4gIH0sIFtzdGFydGVkXSk7XG5cbiAgLy8gQ29uZmlndXJlIHRoZSBhdWRpbyBzdHJlYW0uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdGFydGVkIHx8IHN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgTE9HLmluZm8oXCJTZXR0aW5nIHVwIHRoZSBjb250ZXh0ICVqIGFuZCBzdHJlYW0gJWpcIiwgYXVkaW9Db250ZXh0LCBzdHJlYW0pO1xuICAgIGF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0pO1xuXG4gICAgTE9HLmluZm8oXCJJbml0aWFsaXplZCBhdWRpby5cIik7XG4gICAgc2V0UGl0Y2hEZXRlY3Rpb25HZW5lcmF0b3IobWw1UGl0Y2hEZXRlY3Rpb24oYXVkaW9Db250ZXh0LCBzdHJlYW0pKTtcbiAgICBhdWRpb0NvbnRleHQucmVzdW1lKCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgTE9HLmluZm8oXCJDbGVhbnVwIHRoZSBhdWRpbyBzZXR0aW5nc1wiKTtcblxuICAgICAgTE9HLmRlYnVnKFwiU3RvcCBhbGwgdHJhY2tzIGluIHRoZSBzdHJlYW0gJWouXCIsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0/LmdldFRyYWNrcygpLmZvckVhY2goKHQpID0+IHQuc3RvcCgpKTtcblxuICAgICAgTE9HLmRlYnVnKFwiU3VzcGVuZCBhdWRpbyBjb250ZXh0ICVqLlwiLCBhdWRpb0NvbnRleHQpO1xuICAgICAgYXVkaW9Db250ZXh0LnN1c3BlbmQoKTtcbiAgICB9O1xuICB9LCBbc3RyZWFtLCBzdGFydGVkXSk7XG5cbiAgaWYgKHJlY29yZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgcmVmZXJlbmNlUGl0Y2ggPSBub3RlKG5vdGVUb0ZyZXEoNjApKSBhcyBQaXRjaDtcblxuICAgIHJldHVybiA8U3VtbWFyeSByZWNvcmRpbmc9e3JlY29yZGluZ30gcmVmZXJlbmNlPXtyZWZlcmVuY2VQaXRjaH0gLz47XG4gIH0gZWxzZSBpZiAoc3RhcnRlZCAmJiBwaXRjaERldGVjdGlvbkdlbmVyYXRvcikge1xuICAgIHJldHVybiAoXG4gICAgICA8UGl0Y2hSZWNvcmRlclxuICAgICAgICBvbkZpbmlzaD17KHJlc3VsdCkgPT4ge1xuICAgICAgICAgIExPRy5pbmZvKFwiUmVzdWx0LCAlalwiLCByZXN1bHQpO1xuICAgICAgICAgIHNldFJlY29yZGluZyhyZXN1bHQpO1xuICAgICAgICAgIHNldElzU3RhcnRlZChmYWxzZSk7XG4gICAgICAgIH19XG4gICAgICAgIHBpdGNoR2VuZXJhdG9yPXtwaXRjaERldGVjdGlvbkdlbmVyYXRvcn1cbiAgICAgICAgdGltZW91dE1zPXs1MDAwfVxuICAgICAgLz5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICA8QnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzU3RhcnRlZCh0cnVlKX1cbiAgICAgICAgdmFyaWFudD1cIm91dGxpbmUtcHJpbWFyeVwiXG4gICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICA+XG4gICAgICAgIGNsaWNrIHRvIHN0YXJ0XG4gICAgICA8L0J1dHRvbj5cbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgeyBQaXRjaERldGVjdGlvbiB9O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9BcHAuY3NzXCI7XG5cbmltcG9ydCB7IFBpdGNoRGV0ZWN0aW9uIH0gZnJvbSBcIi4vY29tcG9uZW50cy9QaXRjaERldGVjdGlvblwiO1xuXG5pbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xuXG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwibG9nXCI7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5jb25zdCBMT0cgPSBnZXRMb2dnZXIoKTtcblxuZXhwb3J0IGNvbnN0IEFwcCA9ICgpID0+IHtcbiAgTE9HLmluZm8oXCJTdGFydGluZyBhcHAuXCIpO1xuICByZXR1cm4gKFxuICAgIDxDb250YWluZXI+XG4gICAgICA8aGVhZGVyIGNsYXNzTmFtZT17Y2xzeChcInRleHQtY2VudGVyXCIsIFwibXQtNVwiKX0+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9e2Nsc3goXCJkaXNwbGF5LTFcIiwgXCJ0ZXh0LXByaW1hcnlcIiwgXCJ0aXRsZVwiKX0+dm9jYWxseTwvaDE+XG4gICAgICAgIDxoMiBjbGFzc05hbWU9e1widGV4dC1zZWNvbmRhcnlcIn0+XG4gICAgICAgICAgc2luZyBDPHN1Yj40PC9zdWI+IVxuICAgICAgICA8L2gyPlxuICAgICAgPC9oZWFkZXI+XG5cbiAgICAgIDxtYWluIGNsYXNzTmFtZT17Y2xzeChcInRleHQtY2VudGVyXCIsIFwicHktNVwiKX0gcm9sZT1cIm1haW5cIj5cbiAgICAgICAgPFBpdGNoRGV0ZWN0aW9uIC8+XG4gICAgICA8L21haW4+XG5cbiAgICAgIDxmb290ZXIgY2xhc3NOYW1lPXtjbHN4KFwicHktM1wiLCBcImJvcmRlci10b3BcIiwgXCJ0ZXh0LW11dGVkXCIpfT5cbiAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICA8cD52b2NhbGx5LmFwcCAyMDIwPC9wPlxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgIDwvZm9vdGVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vQXBwXCI7XG5cbmltcG9ydCBMb2dSb2NrZXQgZnJvbSBcImxvZ3JvY2tldFwiO1xuaW1wb3J0IHNldHVwTG9nUm9ja2V0UmVhY3QgZnJvbSBcImxvZ3JvY2tldC1yZWFjdFwiO1xuXG5Mb2dSb2NrZXQuaW5pdChcIjZheXFpNy92b2NhbGx5dGVzdFwiLCB7XG4gIC8vQHRzLWlnbm9yZTogRmlsbGVkIG91dCBieSB3ZWJwYWNrLlxuICByZWxlYXNlOiBcIlJFTEVBU0VcIixcbn0pO1xuc2V0dXBMb2dSb2NrZXRSZWFjdChMb2dSb2NrZXQpO1xuXG5SZWFjdERPTS5yZW5kZXIoPEFwcD48L0FwcD4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=